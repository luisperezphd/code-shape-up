"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/base64-js/index.js
  var require_base64_js = __commonJS({
    "node_modules/base64-js/index.js"(exports) {
      "use strict";
      init_esbuild_inject();
      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      for (i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }
      var i;
      var len;
      revLookup["-".charCodeAt(0)] = 62;
      revLookup["_".charCodeAt(0)] = 63;
      function getLens(b64) {
        var len2 = b64.length;
        if (len2 % 4 > 0) {
          throw new Error("Invalid string. Length must be a multiple of 4");
        }
        var validLen = b64.indexOf("=");
        if (validLen === -1)
          validLen = len2;
        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
        return [validLen, placeHoldersLen];
      }
      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function _byteLength(b64, validLen, placeHoldersLen) {
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
        var curByte = 0;
        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
        var i2;
        for (i2 = 0; i2 < len2; i2 += 4) {
          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
          arr[curByte++] = tmp >> 16 & 255;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 2) {
          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 1) {
          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        return arr;
      }
      function tripletToBase64(num) {
        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
      }
      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];
        for (var i2 = start; i2 < end; i2 += 3) {
          tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
          output.push(tripletToBase64(tmp));
        }
        return output.join("");
      }
      function fromByteArray(uint8) {
        var tmp;
        var len2 = uint8.length;
        var extraBytes = len2 % 3;
        var parts = [];
        var maxChunkLength = 16383;
        for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
          parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
        }
        if (extraBytes === 1) {
          tmp = uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
          );
        } else if (extraBytes === 2) {
          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
          );
        }
        return parts.join("");
      }
    }
  });

  // node_modules/ieee754/index.js
  var require_ieee754 = __commonJS({
    "node_modules/ieee754/index.js"(exports) {
      init_esbuild_inject();
      exports.read = function(buffer, offset, isLE, mLen, nBytes) {
        var e, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? nBytes - 1 : 0;
        var d2 = isLE ? -1 : 1;
        var s = buffer[offset + i];
        i += d2;
        e = s & (1 << -nBits) - 1;
        s >>= -nBits;
        nBits += eLen;
        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d2, nBits -= 8) {
        }
        m = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;
        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d2, nBits -= 8) {
        }
        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : (s ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
        }
        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
      };
      exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE ? 0 : nBytes - 1;
        var d2 = isLE ? 1 : -1;
        var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);
        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);
          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }
          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }
          if (value * c >= 2) {
            e++;
            c /= 2;
          }
          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }
        for (; mLen >= 8; buffer[offset + i] = m & 255, i += d2, m /= 256, mLen -= 8) {
        }
        e = e << mLen | m;
        eLen += mLen;
        for (; eLen > 0; buffer[offset + i] = e & 255, i += d2, e /= 256, eLen -= 8) {
        }
        buffer[offset + i - d2] |= s * 128;
      };
    }
  });

  // node_modules/buffer/index.js
  var require_buffer = __commonJS({
    "node_modules/buffer/index.js"(exports) {
      "use strict";
      init_esbuild_inject();
      var base64 = require_base64_js();
      var ieee754 = require_ieee754();
      var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
      exports.Buffer = Buffer3;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      var K_MAX_LENGTH = 2147483647;
      exports.kMaxLength = K_MAX_LENGTH;
      Buffer3.TYPED_ARRAY_SUPPORT = typedArraySupport();
      if (!Buffer3.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
        console.error(
          "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
        );
      }
      function typedArraySupport() {
        try {
          const arr = new Uint8Array(1);
          const proto = { foo: function() {
            return 42;
          } };
          Object.setPrototypeOf(proto, Uint8Array.prototype);
          Object.setPrototypeOf(arr, proto);
          return arr.foo() === 42;
        } catch (e) {
          return false;
        }
      }
      Object.defineProperty(Buffer3.prototype, "parent", {
        enumerable: true,
        get: function() {
          if (!Buffer3.isBuffer(this))
            return void 0;
          return this.buffer;
        }
      });
      Object.defineProperty(Buffer3.prototype, "offset", {
        enumerable: true,
        get: function() {
          if (!Buffer3.isBuffer(this))
            return void 0;
          return this.byteOffset;
        }
      });
      function createBuffer(length) {
        if (length > K_MAX_LENGTH) {
          throw new RangeError('The value "' + length + '" is invalid for option "size"');
        }
        const buf = new Uint8Array(length);
        Object.setPrototypeOf(buf, Buffer3.prototype);
        return buf;
      }
      function Buffer3(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          if (typeof encodingOrOffset === "string") {
            throw new TypeError(
              'The "string" argument must be of type string. Received type number'
            );
          }
          return allocUnsafe(arg);
        }
        return from(arg, encodingOrOffset, length);
      }
      Buffer3.poolSize = 8192;
      function from(value, encodingOrOffset, length) {
        if (typeof value === "string") {
          return fromString(value, encodingOrOffset);
        }
        if (ArrayBuffer.isView(value)) {
          return fromArrayView(value);
        }
        if (value == null) {
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
          );
        }
        if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof value === "number") {
          throw new TypeError(
            'The "value" argument must not be of type number. Received type number'
          );
        }
        const valueOf = value.valueOf && value.valueOf();
        if (valueOf != null && valueOf !== value) {
          return Buffer3.from(valueOf, encodingOrOffset, length);
        }
        const b = fromObject(value);
        if (b)
          return b;
        if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
          return Buffer3.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
        }
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      Buffer3.from = function(value, encodingOrOffset, length) {
        return from(value, encodingOrOffset, length);
      };
      Object.setPrototypeOf(Buffer3.prototype, Uint8Array.prototype);
      Object.setPrototypeOf(Buffer3, Uint8Array);
      function assertSize(size) {
        if (typeof size !== "number") {
          throw new TypeError('"size" argument must be of type number');
        } else if (size < 0) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"');
        }
      }
      function alloc(size, fill, encoding) {
        assertSize(size);
        if (size <= 0) {
          return createBuffer(size);
        }
        if (fill !== void 0) {
          return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
        }
        return createBuffer(size);
      }
      Buffer3.alloc = function(size, fill, encoding) {
        return alloc(size, fill, encoding);
      };
      function allocUnsafe(size) {
        assertSize(size);
        return createBuffer(size < 0 ? 0 : checked(size) | 0);
      }
      Buffer3.allocUnsafe = function(size) {
        return allocUnsafe(size);
      };
      Buffer3.allocUnsafeSlow = function(size) {
        return allocUnsafe(size);
      };
      function fromString(string, encoding) {
        if (typeof encoding !== "string" || encoding === "") {
          encoding = "utf8";
        }
        if (!Buffer3.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        const length = byteLength(string, encoding) | 0;
        let buf = createBuffer(length);
        const actual = buf.write(string, encoding);
        if (actual !== length) {
          buf = buf.slice(0, actual);
        }
        return buf;
      }
      function fromArrayLike(array) {
        const length = array.length < 0 ? 0 : checked(array.length) | 0;
        const buf = createBuffer(length);
        for (let i = 0; i < length; i += 1) {
          buf[i] = array[i] & 255;
        }
        return buf;
      }
      function fromArrayView(arrayView) {
        if (isInstance(arrayView, Uint8Array)) {
          const copy = new Uint8Array(arrayView);
          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
        }
        return fromArrayLike(arrayView);
      }
      function fromArrayBuffer(array, byteOffset, length) {
        if (byteOffset < 0 || array.byteLength < byteOffset) {
          throw new RangeError('"offset" is outside of buffer bounds');
        }
        if (array.byteLength < byteOffset + (length || 0)) {
          throw new RangeError('"length" is outside of buffer bounds');
        }
        let buf;
        if (byteOffset === void 0 && length === void 0) {
          buf = new Uint8Array(array);
        } else if (length === void 0) {
          buf = new Uint8Array(array, byteOffset);
        } else {
          buf = new Uint8Array(array, byteOffset, length);
        }
        Object.setPrototypeOf(buf, Buffer3.prototype);
        return buf;
      }
      function fromObject(obj) {
        if (Buffer3.isBuffer(obj)) {
          const len = checked(obj.length) | 0;
          const buf = createBuffer(len);
          if (buf.length === 0) {
            return buf;
          }
          obj.copy(buf, 0, 0, len);
          return buf;
        }
        if (obj.length !== void 0) {
          if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
            return createBuffer(0);
          }
          return fromArrayLike(obj);
        }
        if (obj.type === "Buffer" && Array.isArray(obj.data)) {
          return fromArrayLike(obj.data);
        }
      }
      function checked(length) {
        if (length >= K_MAX_LENGTH) {
          throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
        }
        return length | 0;
      }
      function SlowBuffer(length) {
        if (+length != length) {
          length = 0;
        }
        return Buffer3.alloc(+length);
      }
      Buffer3.isBuffer = function isBuffer(b) {
        return b != null && b._isBuffer === true && b !== Buffer3.prototype;
      };
      Buffer3.compare = function compare(a2, b) {
        if (isInstance(a2, Uint8Array))
          a2 = Buffer3.from(a2, a2.offset, a2.byteLength);
        if (isInstance(b, Uint8Array))
          b = Buffer3.from(b, b.offset, b.byteLength);
        if (!Buffer3.isBuffer(a2) || !Buffer3.isBuffer(b)) {
          throw new TypeError(
            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
          );
        }
        if (a2 === b)
          return 0;
        let x = a2.length;
        let y = b.length;
        for (let i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a2[i] !== b[i]) {
            x = a2[i];
            y = b[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      Buffer3.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return true;
          default:
            return false;
        }
      };
      Buffer3.concat = function concat(list, length) {
        if (!Array.isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        if (list.length === 0) {
          return Buffer3.alloc(0);
        }
        let i;
        if (length === void 0) {
          length = 0;
          for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }
        const buffer = Buffer3.allocUnsafe(length);
        let pos = 0;
        for (i = 0; i < list.length; ++i) {
          let buf = list[i];
          if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
              if (!Buffer3.isBuffer(buf))
                buf = Buffer3.from(buf);
              buf.copy(buffer, pos);
            } else {
              Uint8Array.prototype.set.call(
                buffer,
                buf,
                pos
              );
            }
          } else if (!Buffer3.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          } else {
            buf.copy(buffer, pos);
          }
          pos += buf.length;
        }
        return buffer;
      };
      function byteLength(string, encoding) {
        if (Buffer3.isBuffer(string)) {
          return string.length;
        }
        if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
          return string.byteLength;
        }
        if (typeof string !== "string") {
          throw new TypeError(
            'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
          );
        }
        const len = string.length;
        const mustMatch = arguments.length > 2 && arguments[2] === true;
        if (!mustMatch && len === 0)
          return 0;
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "ascii":
            case "latin1":
            case "binary":
              return len;
            case "utf8":
            case "utf-8":
              return utf8ToBytes(string).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return len * 2;
            case "hex":
              return len >>> 1;
            case "base64":
              return base64ToBytes(string).length;
            default:
              if (loweredCase) {
                return mustMatch ? -1 : utf8ToBytes(string).length;
              }
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer3.byteLength = byteLength;
      function slowToString(encoding, start, end) {
        let loweredCase = false;
        if (start === void 0 || start < 0) {
          start = 0;
        }
        if (start > this.length) {
          return "";
        }
        if (end === void 0 || end > this.length) {
          end = this.length;
        }
        if (end <= 0) {
          return "";
        }
        end >>>= 0;
        start >>>= 0;
        if (end <= start) {
          return "";
        }
        if (!encoding)
          encoding = "utf8";
        while (true) {
          switch (encoding) {
            case "hex":
              return hexSlice(this, start, end);
            case "utf8":
            case "utf-8":
              return utf8Slice(this, start, end);
            case "ascii":
              return asciiSlice(this, start, end);
            case "latin1":
            case "binary":
              return latin1Slice(this, start, end);
            case "base64":
              return base64Slice(this, start, end);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return utf16leSlice(this, start, end);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = (encoding + "").toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer3.prototype._isBuffer = true;
      function swap(b, n, m) {
        const i = b[n];
        b[n] = b[m];
        b[m] = i;
      }
      Buffer3.prototype.swap16 = function swap16() {
        const len = this.length;
        if (len % 2 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        }
        for (let i = 0; i < len; i += 2) {
          swap(this, i, i + 1);
        }
        return this;
      };
      Buffer3.prototype.swap32 = function swap32() {
        const len = this.length;
        if (len % 4 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        }
        for (let i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
        return this;
      };
      Buffer3.prototype.swap64 = function swap64() {
        const len = this.length;
        if (len % 8 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        }
        for (let i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
        return this;
      };
      Buffer3.prototype.toString = function toString() {
        const length = this.length;
        if (length === 0)
          return "";
        if (arguments.length === 0)
          return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };
      Buffer3.prototype.toLocaleString = Buffer3.prototype.toString;
      Buffer3.prototype.equals = function equals(b) {
        if (!Buffer3.isBuffer(b))
          throw new TypeError("Argument must be a Buffer");
        if (this === b)
          return true;
        return Buffer3.compare(this, b) === 0;
      };
      Buffer3.prototype.inspect = function inspect() {
        let str = "";
        const max = exports.INSPECT_MAX_BYTES;
        str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
        if (this.length > max)
          str += " ... ";
        return "<Buffer " + str + ">";
      };
      if (customInspectSymbol) {
        Buffer3.prototype[customInspectSymbol] = Buffer3.prototype.inspect;
      }
      Buffer3.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
        if (isInstance(target, Uint8Array)) {
          target = Buffer3.from(target, target.offset, target.byteLength);
        }
        if (!Buffer3.isBuffer(target)) {
          throw new TypeError(
            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
          );
        }
        if (start === void 0) {
          start = 0;
        }
        if (end === void 0) {
          end = target ? target.length : 0;
        }
        if (thisStart === void 0) {
          thisStart = 0;
        }
        if (thisEnd === void 0) {
          thisEnd = this.length;
        }
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError("out of range index");
        }
        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start >= end) {
          return 1;
        }
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target)
          return 0;
        let x = thisEnd - thisStart;
        let y = end - start;
        const len = Math.min(x, y);
        const thisCopy = this.slice(thisStart, thisEnd);
        const targetCopy = target.slice(start, end);
        for (let i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        if (buffer.length === 0)
          return -1;
        if (typeof byteOffset === "string") {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 2147483647) {
          byteOffset = 2147483647;
        } else if (byteOffset < -2147483648) {
          byteOffset = -2147483648;
        }
        byteOffset = +byteOffset;
        if (numberIsNaN(byteOffset)) {
          byteOffset = dir ? 0 : buffer.length - 1;
        }
        if (byteOffset < 0)
          byteOffset = buffer.length + byteOffset;
        if (byteOffset >= buffer.length) {
          if (dir)
            return -1;
          else
            byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (dir)
            byteOffset = 0;
          else
            return -1;
        }
        if (typeof val === "string") {
          val = Buffer3.from(val, encoding);
        }
        if (Buffer3.isBuffer(val)) {
          if (val.length === 0) {
            return -1;
          }
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === "number") {
          val = val & 255;
          if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) {
              return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
              return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
          }
          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
        }
        throw new TypeError("val must be string, number or Buffer");
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        let indexSize = 1;
        let arrLength = arr.length;
        let valLength = val.length;
        if (encoding !== void 0) {
          encoding = String(encoding).toLowerCase();
          if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read(buf, i2) {
          if (indexSize === 1) {
            return buf[i2];
          } else {
            return buf.readUInt16BE(i2 * indexSize);
          }
        }
        let i;
        if (dir) {
          let foundIndex = -1;
          for (i = byteOffset; i < arrLength; i++) {
            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
              if (foundIndex === -1)
                foundIndex = i;
              if (i - foundIndex + 1 === valLength)
                return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1)
                i -= i - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength)
            byteOffset = arrLength - valLength;
          for (i = byteOffset; i >= 0; i--) {
            let found = true;
            for (let j = 0; j < valLength; j++) {
              if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
              }
            }
            if (found)
              return i;
          }
        }
        return -1;
      }
      Buffer3.prototype.includes = function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };
      Buffer3.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer3.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        const remaining = buf.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = Number(length);
          if (length > remaining) {
            length = remaining;
          }
        }
        const strLen = string.length;
        if (length > strLen / 2) {
          length = strLen / 2;
        }
        let i;
        for (i = 0; i < length; ++i) {
          const parsed = parseInt(string.substr(i * 2, 2), 16);
          if (numberIsNaN(parsed))
            return i;
          buf[offset + i] = parsed;
        }
        return i;
      }
      function utf8Write(buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
      }
      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }
      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }
      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
      }
      Buffer3.prototype.write = function write(string, offset, length, encoding) {
        if (offset === void 0) {
          encoding = "utf8";
          length = this.length;
          offset = 0;
        } else if (length === void 0 && typeof offset === "string") {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else if (isFinite(offset)) {
          offset = offset >>> 0;
          if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === void 0)
              encoding = "utf8";
          } else {
            encoding = length;
            length = void 0;
          }
        } else {
          throw new Error(
            "Buffer.write(string, encoding, offset[, length]) is no longer supported"
          );
        }
        const remaining = this.length - offset;
        if (length === void 0 || length > remaining)
          length = remaining;
        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
          throw new RangeError("Attempt to write outside buffer bounds");
        }
        if (!encoding)
          encoding = "utf8";
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "hex":
              return hexWrite(this, string, offset, length);
            case "utf8":
            case "utf-8":
              return utf8Write(this, string, offset, length);
            case "ascii":
            case "latin1":
            case "binary":
              return asciiWrite(this, string, offset, length);
            case "base64":
              return base64Write(this, string, offset, length);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return ucs2Write(this, string, offset, length);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };
      Buffer3.prototype.toJSON = function toJSON() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64.fromByteArray(buf);
        } else {
          return base64.fromByteArray(buf.slice(start, end));
        }
      }
      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        const res = [];
        let i = start;
        while (i < end) {
          const firstByte = buf[i];
          let codePoint = null;
          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 128) {
                  codePoint = firstByte;
                }
                break;
              case 2:
                secondByte = buf[i + 1];
                if ((secondByte & 192) === 128) {
                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                  if (tempCodePoint > 127) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 3:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 4:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                fourthByte = buf[i + 3];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                    codePoint = tempCodePoint;
                  }
                }
            }
          }
          if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
          }
          res.push(codePoint);
          i += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
      }
      var MAX_ARGUMENTS_LENGTH = 4096;
      function decodeCodePointsArray(codePoints) {
        const len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints);
        }
        let res = "";
        let i = 0;
        while (i < len) {
          res += String.fromCharCode.apply(
            String,
            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
          );
        }
        return res;
      }
      function asciiSlice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i] & 127);
        }
        return ret;
      }
      function latin1Slice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i]);
        }
        return ret;
      }
      function hexSlice(buf, start, end) {
        const len = buf.length;
        if (!start || start < 0)
          start = 0;
        if (!end || end < 0 || end > len)
          end = len;
        let out = "";
        for (let i = start; i < end; ++i) {
          out += hexSliceLookupTable[buf[i]];
        }
        return out;
      }
      function utf16leSlice(buf, start, end) {
        const bytes = buf.slice(start, end);
        let res = "";
        for (let i = 0; i < bytes.length - 1; i += 2) {
          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
        }
        return res;
      }
      Buffer3.prototype.slice = function slice(start, end) {
        const len = this.length;
        start = ~~start;
        end = end === void 0 ? len : ~~end;
        if (start < 0) {
          start += len;
          if (start < 0)
            start = 0;
        } else if (start > len) {
          start = len;
        }
        if (end < 0) {
          end += len;
          if (end < 0)
            end = 0;
        } else if (end > len) {
          end = len;
        }
        if (end < start)
          end = start;
        const newBuf = this.subarray(start, end);
        Object.setPrototypeOf(newBuf, Buffer3.prototype);
        return newBuf;
      };
      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0)
          throw new RangeError("offset is not uint");
        if (offset + ext > length)
          throw new RangeError("Trying to access beyond buffer length");
      }
      Buffer3.prototype.readUintLE = Buffer3.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        return val;
      };
      Buffer3.prototype.readUintBE = Buffer3.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          checkOffset(offset, byteLength2, this.length);
        }
        let val = this[offset + --byteLength2];
        let mul = 1;
        while (byteLength2 > 0 && (mul *= 256)) {
          val += this[offset + --byteLength2] * mul;
        }
        return val;
      };
      Buffer3.prototype.readUint8 = Buffer3.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        return this[offset];
      };
      Buffer3.prototype.readUint16LE = Buffer3.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
      };
      Buffer3.prototype.readUint16BE = Buffer3.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
      };
      Buffer3.prototype.readUint32LE = Buffer3.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
      };
      Buffer3.prototype.readUint32BE = Buffer3.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      };
      Buffer3.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
        const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
        return BigInt(lo) + (BigInt(hi) << BigInt(32));
      });
      Buffer3.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
        return (BigInt(hi) << BigInt(32)) + BigInt(lo);
      });
      Buffer3.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer3.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let i = byteLength2;
        let mul = 1;
        let val = this[offset + --i];
        while (i > 0 && (mul *= 256)) {
          val += this[offset + --i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer3.prototype.readInt8 = function readInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        if (!(this[offset] & 128))
          return this[offset];
        return (255 - this[offset] + 1) * -1;
      };
      Buffer3.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset] | this[offset + 1] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer3.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset + 1] | this[offset] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer3.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      };
      Buffer3.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      };
      Buffer3.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
      });
      Buffer3.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = (first << 24) + // Overflow
        this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
      });
      Buffer3.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      };
      Buffer3.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      };
      Buffer3.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      };
      Buffer3.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      };
      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer3.isBuffer(buf))
          throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min)
          throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
      }
      Buffer3.prototype.writeUintLE = Buffer3.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let mul = 1;
        let i = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer3.prototype.writeUintBE = Buffer3.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer3.prototype.writeUint8 = Buffer3.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 255, 0);
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer3.prototype.writeUint16LE = Buffer3.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer3.prototype.writeUint16BE = Buffer3.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer3.prototype.writeUint32LE = Buffer3.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 255;
        return offset + 4;
      };
      Buffer3.prototype.writeUint32BE = Buffer3.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      function wrtBigUInt64LE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        return offset;
      }
      function wrtBigUInt64BE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset + 7] = lo;
        lo = lo >> 8;
        buf[offset + 6] = lo;
        lo = lo >> 8;
        buf[offset + 5] = lo;
        lo = lo >> 8;
        buf[offset + 4] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset + 3] = hi;
        hi = hi >> 8;
        buf[offset + 2] = hi;
        hi = hi >> 8;
        buf[offset + 1] = hi;
        hi = hi >> 8;
        buf[offset] = hi;
        return offset + 8;
      }
      Buffer3.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer3.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer3.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = 0;
        let mul = 1;
        let sub = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer3.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        let sub = 0;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer3.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 127, -128);
        if (value < 0)
          value = 255 + value + 1;
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer3.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer3.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer3.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
        return offset + 4;
      };
      Buffer3.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (value < 0)
          value = 4294967295 + value + 1;
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      Buffer3.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      Buffer3.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
        if (offset < 0)
          throw new RangeError("Index out of range");
      }
      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
        }
        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }
      Buffer3.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      };
      Buffer3.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      };
      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
        }
        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }
      Buffer3.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      };
      Buffer3.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      };
      Buffer3.prototype.copy = function copy(target, targetStart, start, end) {
        if (!Buffer3.isBuffer(target))
          throw new TypeError("argument should be a Buffer");
        if (!start)
          start = 0;
        if (!end && end !== 0)
          end = this.length;
        if (targetStart >= target.length)
          targetStart = target.length;
        if (!targetStart)
          targetStart = 0;
        if (end > 0 && end < start)
          end = start;
        if (end === start)
          return 0;
        if (target.length === 0 || this.length === 0)
          return 0;
        if (targetStart < 0) {
          throw new RangeError("targetStart out of bounds");
        }
        if (start < 0 || start >= this.length)
          throw new RangeError("Index out of range");
        if (end < 0)
          throw new RangeError("sourceEnd out of bounds");
        if (end > this.length)
          end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }
        const len = end - start;
        if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
          this.copyWithin(targetStart, start, end);
        } else {
          Uint8Array.prototype.set.call(
            target,
            this.subarray(start, end),
            targetStart
          );
        }
        return len;
      };
      Buffer3.prototype.fill = function fill(val, start, end, encoding) {
        if (typeof val === "string") {
          if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
          }
          if (encoding !== void 0 && typeof encoding !== "string") {
            throw new TypeError("encoding must be a string");
          }
          if (typeof encoding === "string" && !Buffer3.isEncoding(encoding)) {
            throw new TypeError("Unknown encoding: " + encoding);
          }
          if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") {
              val = code;
            }
          }
        } else if (typeof val === "number") {
          val = val & 255;
        } else if (typeof val === "boolean") {
          val = Number(val);
        }
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError("Out of range index");
        }
        if (end <= start) {
          return this;
        }
        start = start >>> 0;
        end = end === void 0 ? this.length : end >>> 0;
        if (!val)
          val = 0;
        let i;
        if (typeof val === "number") {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          const bytes = Buffer3.isBuffer(val) ? val : Buffer3.from(val, encoding);
          const len = bytes.length;
          if (len === 0) {
            throw new TypeError('The value "' + val + '" is invalid for argument "value"');
          }
          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len];
          }
        }
        return this;
      };
      var errors = {};
      function E(sym, getMessage, Base) {
        errors[sym] = class NodeError extends Base {
          constructor() {
            super();
            Object.defineProperty(this, "message", {
              value: getMessage.apply(this, arguments),
              writable: true,
              configurable: true
            });
            this.name = `${this.name} [${sym}]`;
            this.stack;
            delete this.name;
          }
          get code() {
            return sym;
          }
          set code(value) {
            Object.defineProperty(this, "code", {
              configurable: true,
              enumerable: true,
              value,
              writable: true
            });
          }
          toString() {
            return `${this.name} [${sym}]: ${this.message}`;
          }
        };
      }
      E(
        "ERR_BUFFER_OUT_OF_BOUNDS",
        function(name) {
          if (name) {
            return `${name} is outside of buffer bounds`;
          }
          return "Attempt to access memory outside buffer bounds";
        },
        RangeError
      );
      E(
        "ERR_INVALID_ARG_TYPE",
        function(name, actual) {
          return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
        },
        TypeError
      );
      E(
        "ERR_OUT_OF_RANGE",
        function(str, range, input) {
          let msg = `The value of "${str}" is out of range.`;
          let received = input;
          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
            received = addNumericalSeparator(String(input));
          } else if (typeof input === "bigint") {
            received = String(input);
            if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
              received = addNumericalSeparator(received);
            }
            received += "n";
          }
          msg += ` It must be ${range}. Received ${received}`;
          return msg;
        },
        RangeError
      );
      function addNumericalSeparator(val) {
        let res = "";
        let i = val.length;
        const start = val[0] === "-" ? 1 : 0;
        for (; i >= start + 4; i -= 3) {
          res = `_${val.slice(i - 3, i)}${res}`;
        }
        return `${val.slice(0, i)}${res}`;
      }
      function checkBounds(buf, offset, byteLength2) {
        validateNumber(offset, "offset");
        if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
          boundsError(offset, buf.length - (byteLength2 + 1));
        }
      }
      function checkIntBI(value, min, max, buf, offset, byteLength2) {
        if (value > max || value < min) {
          const n = typeof min === "bigint" ? "n" : "";
          let range;
          if (byteLength2 > 3) {
            if (min === 0 || min === BigInt(0)) {
              range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;
            } else {
              range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;
            }
          } else {
            range = `>= ${min}${n} and <= ${max}${n}`;
          }
          throw new errors.ERR_OUT_OF_RANGE("value", range, value);
        }
        checkBounds(buf, offset, byteLength2);
      }
      function validateNumber(value, name) {
        if (typeof value !== "number") {
          throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
        }
      }
      function boundsError(value, length, type) {
        if (Math.floor(value) !== value) {
          validateNumber(value, type);
          throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
        }
        if (length < 0) {
          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
        }
        throw new errors.ERR_OUT_OF_RANGE(
          type || "offset",
          `>= ${type ? 1 : 0} and <= ${length}`,
          value
        );
      }
      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = str.split("=")[0];
        str = str.trim().replace(INVALID_BASE64_RE, "");
        if (str.length < 2)
          return "";
        while (str.length % 4 !== 0) {
          str = str + "=";
        }
        return str;
      }
      function utf8ToBytes(string, units) {
        units = units || Infinity;
        let codePoint;
        const length = string.length;
        let leadSurrogate = null;
        const bytes = [];
        for (let i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              } else if (i + 1 === length) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
          } else if (leadSurrogate) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
          }
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0)
              break;
            bytes.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0)
              break;
            bytes.push(
              codePoint >> 6 | 192,
              codePoint & 63 | 128
            );
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0)
              break;
            bytes.push(
              codePoint >> 12 | 224,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else if (codePoint < 1114112) {
            if ((units -= 4) < 0)
              break;
            bytes.push(
              codePoint >> 18 | 240,
              codePoint >> 12 & 63 | 128,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else {
            throw new Error("Invalid code point");
          }
        }
        return bytes;
      }
      function asciiToBytes(str) {
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          byteArray.push(str.charCodeAt(i) & 255);
        }
        return byteArray;
      }
      function utf16leToBytes(str, units) {
        let c, hi, lo;
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0)
            break;
          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
        return byteArray;
      }
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }
      function blitBuffer(src, dst, offset, length) {
        let i;
        for (i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length)
            break;
          dst[i + offset] = src[i];
        }
        return i;
      }
      function isInstance(obj, type) {
        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
      }
      function numberIsNaN(obj) {
        return obj !== obj;
      }
      var hexSliceLookupTable = function() {
        const alphabet = "0123456789abcdef";
        const table = new Array(256);
        for (let i = 0; i < 16; ++i) {
          const i16 = i * 16;
          for (let j = 0; j < 16; ++j) {
            table[i16 + j] = alphabet[i] + alphabet[j];
          }
        }
        return table;
      }();
      function defineBigIntMethod(fn) {
        return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
      }
      function BufferBigIntNotDefined() {
        throw new Error("BigInt not supported");
      }
    }
  });

  // build/esbuild-inject.js
  var Buffer2, process;
  var init_esbuild_inject = __esm({
    "build/esbuild-inject.js"() {
      "use strict";
      Buffer2 = require_buffer().Buffer;
      process = {
        env: {
          BABEL_TYPES_8_BREAKING: false
        },
        platform: "win32"
      };
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      init_esbuild_inject();
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState3(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer2(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef3(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect3(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect2(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback3(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo2(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children;
          exports.Component = Component;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback3;
          exports.useContext = useContext;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect3;
          exports.useId = useId;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useInsertionEffect = useInsertionEffect;
          exports.useLayoutEffect = useLayoutEffect2;
          exports.useMemo = useMemo2;
          exports.useReducer = useReducer2;
          exports.useRef = useRef3;
          exports.useState = useState3;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      init_esbuild_inject();
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      init_esbuild_inject();
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node, i) {
            var index = i;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i) {
            var index = i;
            var length = heap.length;
            var halfLength = length >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (rightIndex < length && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a2, b) {
            var diff = a2.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a2.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      init_esbuild_inject();
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      init_esbuild_inject();
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment2 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment2:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node[valueField]);
            }
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value) {
                  node.value = toString(value);
                }
              } else if (node.value !== toString(value)) {
                node.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node.ownerDocument) !== node
            ) {
              if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style2 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a2, b) {
            if (isInsideEventHandler) {
              return fn(a2, b);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a2, b);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a2, b, c, d2, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a2, b, c, d2, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a2, b, c, d2, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a2, b, c, d2, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a2 = fiber;
            var b = alternate;
            while (true) {
              var parentA = a2.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a2 = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a2) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a2.return !== b.return) {
                a2 = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a2) {
                    didFindChild = true;
                    a2 = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a2 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a2) {
                      didFindChild = true;
                      a2 = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a2 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a2.alternate !== b) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a2.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a2.stateNode.current === a2) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              var match = findCurrentHostFiberImpl(child);
              if (match !== null) {
                return match;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) {
                  return match;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root3, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root3, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root3, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root3.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root3, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root3, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root3) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root3);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index2 = 0; index2 < TotalLanes; index2++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root3, wipLanes) {
            var pendingLanes = root3.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root3.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root3.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root3, lanes) {
            var eventTimes = root3.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root3, currentTime) {
            var pendingLanes = root3.pendingLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root3.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root3) {
            return getHighestPriorityLanes(root3.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root3) {
            var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root3, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root3, lanes) {
            return (lanes & root3.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a2, b) {
            return (a2 & b) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a2, b) {
            return a2 | b;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a2, b) {
            return a2 & b;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a2, b) {
            return a2 !== NoLane && a2 < b ? a2 : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root3, updateLane, eventTime) {
            root3.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root3.suspendedLanes = NoLanes;
              root3.pingedLanes = NoLanes;
            }
            var eventTimes = root3.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root3, suspendedLanes) {
            root3.suspendedLanes |= suspendedLanes;
            root3.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root3, pingedLanes, eventTime) {
            root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root3, remainingLanes) {
            var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
            root3.pendingLanes = remainingLanes;
            root3.suspendedLanes = NoLanes;
            root3.pingedLanes = NoLanes;
            root3.expiredLanes &= remainingLanes;
            root3.mutableReadLanes &= remainingLanes;
            root3.entangledLanes &= remainingLanes;
            var entanglements = root3.entanglements;
            var eventTimes = root3.eventTimes;
            var expirationTimes = root3.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root3, entangledLanes) {
            var rootEntangledLanes = root3.entangledLanes |= entangledLanes;
            var entanglements = root3.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index2] & entangledLanes
              ) {
                entanglements[index2] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root3, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root3.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root3, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root3, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            var memoizedUpdaters = root3.memoizedUpdaters;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root3, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a2, b) {
            return a2 !== 0 && a2 < b ? a2 : b;
          }
          function lowerEventPriority(a2, b) {
            return a2 === 0 || a2 > b ? a2 : b;
          }
          function isHigherEventPriority(a2, b) {
            return a2 !== 0 && a2 < b;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root3) {
            var currentState = root3.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i = 0;
            for (; i < queuedExplicitHydrationTargets.length; i++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
            if (i === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root2 = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root2 = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root2 = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root2) {
              return root2.value;
            }
            return root2.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              var currentKey = keysA[i];
              if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root3, offset) {
            var node = getLeafNode(root3);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i = 0; i < simpleEventPluginEvents.length; i++) {
              var eventName = simpleEventPluginEvents[i];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop2() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop2;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root3 = rootContainerInstance.documentElement;
                namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node = nextNode;
            } while (node);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component = node.type;
                    if (isContextProvider(Component)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index2) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index2 + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictLegacyMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = assign({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node === propagationRoot) {
                break;
              }
              node = node.return;
            }
            {
              if (node !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i = 0; i < concurrentQueues.length; i++) {
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root3 = node.stateNode;
              return root3;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root3, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment2) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment2) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root3, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root3.mutableSourceEagerHydrationData == null) {
              root3.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root3.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root3 = getWorkInProgressRoot();
            var identifierPrefix = root3.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root3, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    root3.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    if (root3 !== null) {
                      root3.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root3, wakeable, lanes) {
            var pingCache = root3.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root3.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root3, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root3, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                return node;
              }
              node = node.return;
            } while (node !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root3, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root3, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root3, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var render2 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component.type;
              if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root3 = workInProgress2.stateNode;
            if (root3.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
            } else if (root3.context) {
              pushTopLevelContextObject(workInProgress2, root3.context, false);
            }
            pushHostContainer(workInProgress2, root3.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root3 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node = child;
                while (node) {
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component,
                  resolveDefaultProps(Component.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root3 = getWorkInProgressRoot();
                if (root3 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root3, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root3, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root3 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment2:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment2:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root3 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root3 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root3, firstChild) {
            focusedInstanceHandle = prepareForCommit(root3.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root3 = finishedWork.stateNode;
                    clearContainer(root3.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root3 = parentFiber.stateNode;
                            root3.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root3 = parentFiber.stateNode;
                              root3.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node) {
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node, node.return, instance);
                }
                safelyAttachRef(node, node.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node, node.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                      var instance = node.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node.stateNode, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node) {
                    hostSubtreeRoot = null;
                  }
                  node = node.return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root3, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent:
                while (parent !== null) {
                  switch (parent.tag) {
                    case HostComponent: {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent = parent.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root3, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root3, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root3);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root3, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                try {
                  commitDeletionEffects(root3, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root3);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root3, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root3.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root3, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root3, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root3, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root3,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root3, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root3, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root3, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root3, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i = 0; i < deletions.length; i++) {
                    var fiberToDelete = deletions[i];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root3, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root3, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root3 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root3, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root3 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root3, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root3, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root3, lane, eventTime) {
            var current2 = root3.current;
            current2.lanes = lane;
            markRootUpdated(root3, lane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root3, currentTime) {
            var existingCallbackNode = root3.callbackNode;
            markStarvedLanesAsExpired(root3, currentTime);
            var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root3.callbackNode = null;
              root3.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root3.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root3.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root3));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
            }
            root3.callbackPriority = newCallbackPriority;
            root3.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root3, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root3.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root3.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root3, lanes) && !includesExpiredLane(root3, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root3, lanes) : renderRootSync(root3, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root3, NoLanes);
                markRootSuspended$1(root3, lanes);
                ensureRootIsScheduled(root3, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root3, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root3, lanes);
                var finishedWork = root3.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root3, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root3, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root3, NoLanes);
                    markRootSuspended$1(root3, lanes);
                    ensureRootIsScheduled(root3, now());
                    throw _fatalError;
                  }
                }
                root3.finishedWork = finishedWork;
                root3.finishedLanes = lanes;
                finishConcurrentRender(root3, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root3, now());
            if (root3.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root3);
            }
            return null;
          }
          function recoverFromConcurrentError(root3, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root3)) {
              var rootWorkInProgress = prepareFreshStack(root3, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root3.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root3, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root3, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root3, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root3.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root3, suspendedLanes);
                      break;
                    }
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i = 0; i < checks.length; i++) {
                      var check = checks[i];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) {
                return true;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return true;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root3, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root3, suspendedLanes);
          }
          function performSyncWorkOnRoot(root3) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root3, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root3, now());
              return null;
            }
            var exitStatus = renderRootSync(root3, lanes);
            if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root3, NoLanes);
              markRootSuspended$1(root3, lanes);
              ensureRootIsScheduled(root3, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root3, now());
            return null;
          }
          function flushRoot(root3, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root3, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root3, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a2) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a2);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a2, b, c, d2) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a2, b, c, d2);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root3, lanes) {
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            var timeoutHandle = root3.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root3.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root3;
            var rootWorkInProgress = createWorkInProgress(root3.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root3, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root3, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root3, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root3, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root3.finishedWork;
            var lanes = root3.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            if (finishedWork === root3.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root3.callbackNode = null;
            root3.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root3, remainingLanes);
            if (root3 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root3, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root3, finishedWork, lanes);
              resetAfterCommit(root3.containerInfo);
              root3.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root3, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root3.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root3;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root3.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root3.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root3.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root3, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root3.onRecoverableError;
              for (var i = 0; i < recoverableErrors.length; i++) {
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root3.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root3.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root3 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root3;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root3 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root3.current);
            commitPassiveMountEffects(root3, root3.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i = 0; i < profilerEffects.length; i++) {
                var _fiber = profilerEffects[i];
                commitPassiveEffectDurations(root3, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root3.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root3 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root3;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root3);
            {
              var stateNode = root3.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root3 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root3 !== null) {
              markRootUpdated(root3, SyncLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root3 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root3 !== null) {
                    markRootUpdated(root3, SyncLane, eventTime);
                    ensureRootIsScheduled(root3, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root3, wakeable, pingedLanes) {
            var pingCache = root3.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root3, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root3);
            if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root3, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root3, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root3 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root3 !== null) {
              markRootUpdated(root3, retryLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root3, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root3.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root3, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root3) {
            {
              if (root3.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root3, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root3, element) {
            {
              if (root3.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root3, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root3, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root3.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment2, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root3 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root3.current = uninitializedFiber;
            uninitializedFiber.stateNode = root3;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root3;
          }
          var ReactVersion = "18.2.0";
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root3 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root3.context = getContextForSubtree(null);
            var current2 = root3.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root3, lane, eventTime);
            return root3;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root3 = enqueueUpdate(current$1, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, current$1, lane, eventTime);
              entangleTransitions(root3, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root3 = fiber.stateNode;
                if (isRootDehydrated(root3)) {
                  var lanes = getHighestPriorityPendingLanes(root3);
                  flushRoot(root3, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root4 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root4, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === path.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index2 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root3 = this._internalRoot;
            if (root3 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root3.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root3.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root3, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root3 = this._internalRoot;
            if (root3 !== null) {
              this._internalRoot = null;
              var container = root3.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root3, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot2(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root3 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root3);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root3 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root3, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root3);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              var root3 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root3;
              markContainerAsRoot(root3.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root3;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root3;
            if (!maybeRoot) {
              root3 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root3 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root3, parentComponent, callback);
            }
            return getPublicRootInstance(root3);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot2(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      init_esbuild_inject();
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports) {
      "use strict";
      init_esbuild_inject();
      var m = require_react_dom();
      if (false) {
        exports.createRoot = m.createRoot;
        exports.hydrateRoot = m.hydrateRoot;
      } else {
        i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.createRoot(c, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c, h2, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.hydrateRoot(c, h2, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
      }
      var i;
    }
  });

  // node_modules/lodash.debounce/index.js
  var require_lodash = __commonJS({
    "node_modules/lodash.debounce/index.js"(exports, module) {
      init_esbuild_inject();
      var FUNC_ERROR_TEXT = "Expected a function";
      var NAN = 0 / 0;
      var symbolTag = "[object Symbol]";
      var reTrim = /^\s+|\s+$/g;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsOctal = /^0o[0-7]+$/i;
      var freeParseInt = parseInt;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root2 = freeGlobal || freeSelf || Function("return this")();
      var objectProto = Object.prototype;
      var objectToString = objectProto.toString;
      var nativeMax = Math.max;
      var nativeMin = Math.min;
      var now = function() {
        return root2.Date.now();
      };
      function debounce2(func, wait, options) {
        var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject(options)) {
          leading = !!options.leading;
          maxing = "maxWait" in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        function invokeFunc(time) {
          var args = lastArgs, thisArg = lastThis;
          lastArgs = lastThis = void 0;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }
        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout(timerExpired, wait);
          return leading ? invokeFunc(time) : result;
        }
        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;
          return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
        }
        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
          return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }
        function timerExpired() {
          var time = now();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          timerId = setTimeout(timerExpired, remainingWait(time));
        }
        function trailingEdge(time) {
          timerId = void 0;
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = void 0;
          return result;
        }
        function cancel() {
          if (timerId !== void 0) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = void 0;
        }
        function flush() {
          return timerId === void 0 ? result : trailingEdge(now());
        }
        function debounced() {
          var time = now(), isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;
          if (isInvoking) {
            if (timerId === void 0) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === void 0) {
            timerId = setTimeout(timerExpired, wait);
          }
          return result;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }
      function isObject(value) {
        var type = typeof value;
        return !!value && (type == "object" || type == "function");
      }
      function isObjectLike(value) {
        return !!value && typeof value == "object";
      }
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
      }
      function toNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject(value)) {
          var other = typeof value.valueOf == "function" ? value.valueOf() : value;
          value = isObject(other) ? other + "" : other;
        }
        if (typeof value != "string") {
          return value === 0 ? value : +value;
        }
        value = value.replace(reTrim, "");
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }
      module.exports = debounce2;
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      init_esbuild_inject();
      if (true) {
        (function() {
          "use strict";
          var React = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self2) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self2);
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            {
              if (typeof node !== "object") {
                return;
              }
              if (isArray(node)) {
                for (var i = 0; i < node.length; i++) {
                  var child = node[i];
                  if (isValidElement(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement(node)) {
                if (node._store) {
                  node._store.validated = true;
                }
              } else if (node) {
                var iteratorFn = getIteratorFn(node);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type, props, key, source, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray(children)) {
                      for (var i = 0; i < children.length; i++) {
                        validateChildKeys(children[i], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx4 = jsxWithValidationDynamic;
          var jsxs2 = jsxWithValidationStatic;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.jsx = jsx4;
          exports.jsxs = jsxs2;
        })();
      }
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      init_esbuild_inject();
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // node_modules/@jridgewell/set-array/dist/set-array.umd.js
  var require_set_array_umd = __commonJS({
    "node_modules/@jridgewell/set-array/dist/set-array.umd.js"(exports, module) {
      init_esbuild_inject();
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.setArray = {}));
      })(exports, function(exports2) {
        "use strict";
        exports2.get = void 0;
        exports2.put = void 0;
        exports2.pop = void 0;
        class SetArray {
          constructor() {
            this._indexes = { __proto__: null };
            this.array = [];
          }
        }
        (() => {
          exports2.get = (strarr, key) => strarr._indexes[key];
          exports2.put = (strarr, key) => {
            const index = exports2.get(strarr, key);
            if (index !== void 0)
              return index;
            const { array, _indexes: indexes } = strarr;
            return indexes[key] = array.push(key) - 1;
          };
          exports2.pop = (strarr) => {
            const { array, _indexes: indexes } = strarr;
            if (array.length === 0)
              return;
            const last = array.pop();
            indexes[last] = void 0;
          };
        })();
        exports2.SetArray = SetArray;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js
  var require_sourcemap_codec_umd = __commonJS({
    "node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js"(exports, module) {
      init_esbuild_inject();
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.sourcemapCodec = {}));
      })(exports, function(exports2) {
        "use strict";
        const comma = ",".charCodeAt(0);
        const semicolon = ";".charCodeAt(0);
        const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        const intToChar = new Uint8Array(64);
        const charToInt = new Uint8Array(128);
        for (let i = 0; i < chars.length; i++) {
          const c = chars.charCodeAt(i);
          intToChar[i] = c;
          charToInt[c] = i;
        }
        const td = typeof TextDecoder !== "undefined" ? /* @__PURE__ */ new TextDecoder() : typeof Buffer2 !== "undefined" ? {
          decode(buf) {
            const out = Buffer2.from(buf.buffer, buf.byteOffset, buf.byteLength);
            return out.toString();
          }
        } : {
          decode(buf) {
            let out = "";
            for (let i = 0; i < buf.length; i++) {
              out += String.fromCharCode(buf[i]);
            }
            return out;
          }
        };
        function decode(mappings) {
          const state = new Int32Array(5);
          const decoded = [];
          let index = 0;
          do {
            const semi = indexOf(mappings, index);
            const line = [];
            let sorted = true;
            let lastCol = 0;
            state[0] = 0;
            for (let i = index; i < semi; i++) {
              let seg;
              i = decodeInteger(mappings, i, state, 0);
              const col = state[0];
              if (col < lastCol)
                sorted = false;
              lastCol = col;
              if (hasMoreVlq(mappings, i, semi)) {
                i = decodeInteger(mappings, i, state, 1);
                i = decodeInteger(mappings, i, state, 2);
                i = decodeInteger(mappings, i, state, 3);
                if (hasMoreVlq(mappings, i, semi)) {
                  i = decodeInteger(mappings, i, state, 4);
                  seg = [col, state[1], state[2], state[3], state[4]];
                } else {
                  seg = [col, state[1], state[2], state[3]];
                }
              } else {
                seg = [col];
              }
              line.push(seg);
            }
            if (!sorted)
              sort(line);
            decoded.push(line);
            index = semi + 1;
          } while (index <= mappings.length);
          return decoded;
        }
        function indexOf(mappings, index) {
          const idx = mappings.indexOf(";", index);
          return idx === -1 ? mappings.length : idx;
        }
        function decodeInteger(mappings, pos, state, j) {
          let value = 0;
          let shift = 0;
          let integer = 0;
          do {
            const c = mappings.charCodeAt(pos++);
            integer = charToInt[c];
            value |= (integer & 31) << shift;
            shift += 5;
          } while (integer & 32);
          const shouldNegate = value & 1;
          value >>>= 1;
          if (shouldNegate) {
            value = -2147483648 | -value;
          }
          state[j] += value;
          return pos;
        }
        function hasMoreVlq(mappings, i, length) {
          if (i >= length)
            return false;
          return mappings.charCodeAt(i) !== comma;
        }
        function sort(line) {
          line.sort(sortComparator);
        }
        function sortComparator(a2, b) {
          return a2[0] - b[0];
        }
        function encode(decoded) {
          const state = new Int32Array(5);
          const bufLength = 1024 * 16;
          const subLength = bufLength - 36;
          const buf = new Uint8Array(bufLength);
          const sub = buf.subarray(0, subLength);
          let pos = 0;
          let out = "";
          for (let i = 0; i < decoded.length; i++) {
            const line = decoded[i];
            if (i > 0) {
              if (pos === bufLength) {
                out += td.decode(buf);
                pos = 0;
              }
              buf[pos++] = semicolon;
            }
            if (line.length === 0)
              continue;
            state[0] = 0;
            for (let j = 0; j < line.length; j++) {
              const segment = line[j];
              if (pos > subLength) {
                out += td.decode(sub);
                buf.copyWithin(0, subLength, pos);
                pos -= subLength;
              }
              if (j > 0)
                buf[pos++] = comma;
              pos = encodeInteger(buf, pos, state, segment, 0);
              if (segment.length === 1)
                continue;
              pos = encodeInteger(buf, pos, state, segment, 1);
              pos = encodeInteger(buf, pos, state, segment, 2);
              pos = encodeInteger(buf, pos, state, segment, 3);
              if (segment.length === 4)
                continue;
              pos = encodeInteger(buf, pos, state, segment, 4);
            }
          }
          return out + td.decode(buf.subarray(0, pos));
        }
        function encodeInteger(buf, pos, state, segment, j) {
          const next = segment[j];
          let num = next - state[j];
          state[j] = next;
          num = num < 0 ? -num << 1 | 1 : num << 1;
          do {
            let clamped = num & 31;
            num >>>= 5;
            if (num > 0)
              clamped |= 32;
            buf[pos++] = intToChar[clamped];
          } while (num > 0);
          return pos;
        }
        exports2.decode = decode;
        exports2.encode = encode;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js
  var require_resolve_uri_umd = __commonJS({
    "node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js"(exports, module) {
      init_esbuild_inject();
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, global2.resolveURI = factory());
      })(exports, function() {
        "use strict";
        const schemeRegex = /^[\w+.-]+:\/\//;
        const urlRegex = /^([\w+.-]+:)\/\/([^@/#?]*@)?([^:/#?]*)(:\d+)?(\/[^#?]*)?(\?[^#]*)?(#.*)?/;
        const fileRegex = /^file:(?:\/\/((?![a-z]:)[^/#?]*)?)?(\/?[^#?]*)(\?[^#]*)?(#.*)?/i;
        function isAbsoluteUrl(input) {
          return schemeRegex.test(input);
        }
        function isSchemeRelativeUrl(input) {
          return input.startsWith("//");
        }
        function isAbsolutePath(input) {
          return input.startsWith("/");
        }
        function isFileUrl(input) {
          return input.startsWith("file:");
        }
        function isRelative(input) {
          return /^[.?#]/.test(input);
        }
        function parseAbsoluteUrl(input) {
          const match = urlRegex.exec(input);
          return makeUrl(match[1], match[2] || "", match[3], match[4] || "", match[5] || "/", match[6] || "", match[7] || "");
        }
        function parseFileUrl(input) {
          const match = fileRegex.exec(input);
          const path = match[2];
          return makeUrl("file:", "", match[1] || "", "", isAbsolutePath(path) ? path : "/" + path, match[3] || "", match[4] || "");
        }
        function makeUrl(scheme, user, host, port, path, query, hash) {
          return {
            scheme,
            user,
            host,
            port,
            path,
            query,
            hash,
            type: 7
          };
        }
        function parseUrl(input) {
          if (isSchemeRelativeUrl(input)) {
            const url2 = parseAbsoluteUrl("http:" + input);
            url2.scheme = "";
            url2.type = 6;
            return url2;
          }
          if (isAbsolutePath(input)) {
            const url2 = parseAbsoluteUrl("http://foo.com" + input);
            url2.scheme = "";
            url2.host = "";
            url2.type = 5;
            return url2;
          }
          if (isFileUrl(input))
            return parseFileUrl(input);
          if (isAbsoluteUrl(input))
            return parseAbsoluteUrl(input);
          const url = parseAbsoluteUrl("http://foo.com/" + input);
          url.scheme = "";
          url.host = "";
          url.type = input ? input.startsWith("?") ? 3 : input.startsWith("#") ? 2 : 4 : 1;
          return url;
        }
        function stripPathFilename(path) {
          if (path.endsWith("/.."))
            return path;
          const index = path.lastIndexOf("/");
          return path.slice(0, index + 1);
        }
        function mergePaths(url, base) {
          normalizePath(base, base.type);
          if (url.path === "/") {
            url.path = base.path;
          } else {
            url.path = stripPathFilename(base.path) + url.path;
          }
        }
        function normalizePath(url, type) {
          const rel = type <= 4;
          const pieces = url.path.split("/");
          let pointer = 1;
          let positive = 0;
          let addTrailingSlash = false;
          for (let i = 1; i < pieces.length; i++) {
            const piece = pieces[i];
            if (!piece) {
              addTrailingSlash = true;
              continue;
            }
            addTrailingSlash = false;
            if (piece === ".")
              continue;
            if (piece === "..") {
              if (positive) {
                addTrailingSlash = true;
                positive--;
                pointer--;
              } else if (rel) {
                pieces[pointer++] = piece;
              }
              continue;
            }
            pieces[pointer++] = piece;
            positive++;
          }
          let path = "";
          for (let i = 1; i < pointer; i++) {
            path += "/" + pieces[i];
          }
          if (!path || addTrailingSlash && !path.endsWith("/..")) {
            path += "/";
          }
          url.path = path;
        }
        function resolve(input, base) {
          if (!input && !base)
            return "";
          const url = parseUrl(input);
          let inputType = url.type;
          if (base && inputType !== 7) {
            const baseUrl = parseUrl(base);
            const baseType = baseUrl.type;
            switch (inputType) {
              case 1:
                url.hash = baseUrl.hash;
              case 2:
                url.query = baseUrl.query;
              case 3:
              case 4:
                mergePaths(url, baseUrl);
              case 5:
                url.user = baseUrl.user;
                url.host = baseUrl.host;
                url.port = baseUrl.port;
              case 6:
                url.scheme = baseUrl.scheme;
            }
            if (baseType > inputType)
              inputType = baseType;
          }
          normalizePath(url, inputType);
          const queryHash = url.query + url.hash;
          switch (inputType) {
            case 2:
            case 3:
              return queryHash;
            case 4: {
              const path = url.path.slice(1);
              if (!path)
                return queryHash || ".";
              if (isRelative(base || input) && !isRelative(path)) {
                return "./" + path + queryHash;
              }
              return path + queryHash;
            }
            case 5:
              return url.path + queryHash;
            default:
              return url.scheme + "//" + url.user + url.host + url.port + url.path + queryHash;
          }
        }
        return resolve;
      });
    }
  });

  // node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js
  var require_trace_mapping_umd = __commonJS({
    "node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js"(exports, module) {
      init_esbuild_inject();
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_sourcemap_codec_umd(), require_resolve_uri_umd()) : typeof define === "function" && define.amd ? define(["exports", "@jridgewell/sourcemap-codec", "@jridgewell/resolve-uri"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.traceMapping = {}, global2.sourcemapCodec, global2.resolveURI));
      })(exports, function(exports2, sourcemapCodec, resolveUri) {
        "use strict";
        function resolve(input, base) {
          if (base && !base.endsWith("/"))
            base += "/";
          return resolveUri(input, base);
        }
        function stripFilename(path) {
          if (!path)
            return "";
          const index = path.lastIndexOf("/");
          return path.slice(0, index + 1);
        }
        const COLUMN = 0;
        const SOURCES_INDEX = 1;
        const SOURCE_LINE = 2;
        const SOURCE_COLUMN = 3;
        const NAMES_INDEX = 4;
        const REV_GENERATED_LINE = 1;
        const REV_GENERATED_COLUMN = 2;
        function maybeSort(mappings, owned) {
          const unsortedIndex = nextUnsortedSegmentLine(mappings, 0);
          if (unsortedIndex === mappings.length)
            return mappings;
          if (!owned)
            mappings = mappings.slice();
          for (let i = unsortedIndex; i < mappings.length; i = nextUnsortedSegmentLine(mappings, i + 1)) {
            mappings[i] = sortSegments(mappings[i], owned);
          }
          return mappings;
        }
        function nextUnsortedSegmentLine(mappings, start) {
          for (let i = start; i < mappings.length; i++) {
            if (!isSorted(mappings[i]))
              return i;
          }
          return mappings.length;
        }
        function isSorted(line) {
          for (let j = 1; j < line.length; j++) {
            if (line[j][COLUMN] < line[j - 1][COLUMN]) {
              return false;
            }
          }
          return true;
        }
        function sortSegments(line, owned) {
          if (!owned)
            line = line.slice();
          return line.sort(sortComparator);
        }
        function sortComparator(a2, b) {
          return a2[COLUMN] - b[COLUMN];
        }
        let found = false;
        function binarySearch(haystack, needle, low, high) {
          while (low <= high) {
            const mid = low + (high - low >> 1);
            const cmp = haystack[mid][COLUMN] - needle;
            if (cmp === 0) {
              found = true;
              return mid;
            }
            if (cmp < 0) {
              low = mid + 1;
            } else {
              high = mid - 1;
            }
          }
          found = false;
          return low - 1;
        }
        function upperBound(haystack, needle, index) {
          for (let i = index + 1; i < haystack.length; index = i++) {
            if (haystack[i][COLUMN] !== needle)
              break;
          }
          return index;
        }
        function lowerBound(haystack, needle, index) {
          for (let i = index - 1; i >= 0; index = i--) {
            if (haystack[i][COLUMN] !== needle)
              break;
          }
          return index;
        }
        function memoizedState() {
          return {
            lastKey: -1,
            lastNeedle: -1,
            lastIndex: -1
          };
        }
        function memoizedBinarySearch(haystack, needle, state, key) {
          const { lastKey, lastNeedle, lastIndex } = state;
          let low = 0;
          let high = haystack.length - 1;
          if (key === lastKey) {
            if (needle === lastNeedle) {
              found = lastIndex !== -1 && haystack[lastIndex][COLUMN] === needle;
              return lastIndex;
            }
            if (needle >= lastNeedle) {
              low = lastIndex === -1 ? 0 : lastIndex;
            } else {
              high = lastIndex;
            }
          }
          state.lastKey = key;
          state.lastNeedle = needle;
          return state.lastIndex = binarySearch(haystack, needle, low, high);
        }
        function buildBySources(decoded, memos) {
          const sources = memos.map(buildNullArray);
          for (let i = 0; i < decoded.length; i++) {
            const line = decoded[i];
            for (let j = 0; j < line.length; j++) {
              const seg = line[j];
              if (seg.length === 1)
                continue;
              const sourceIndex = seg[SOURCES_INDEX];
              const sourceLine = seg[SOURCE_LINE];
              const sourceColumn = seg[SOURCE_COLUMN];
              const originalSource = sources[sourceIndex];
              const originalLine = originalSource[sourceLine] || (originalSource[sourceLine] = []);
              const memo = memos[sourceIndex];
              const index = upperBound(originalLine, sourceColumn, memoizedBinarySearch(originalLine, sourceColumn, memo, sourceLine));
              insert(originalLine, memo.lastIndex = index + 1, [sourceColumn, i, seg[COLUMN]]);
            }
          }
          return sources;
        }
        function insert(array, index, value) {
          for (let i = array.length; i > index; i--) {
            array[i] = array[i - 1];
          }
          array[index] = value;
        }
        function buildNullArray() {
          return { __proto__: null };
        }
        const AnyMap = function(map, mapUrl) {
          const parsed = typeof map === "string" ? JSON.parse(map) : map;
          if (!("sections" in parsed))
            return new TraceMap(parsed, mapUrl);
          const mappings = [];
          const sources = [];
          const sourcesContent = [];
          const names = [];
          recurse(parsed, mapUrl, mappings, sources, sourcesContent, names, 0, 0, Infinity, Infinity);
          const joined = {
            version: 3,
            file: parsed.file,
            names,
            sources,
            sourcesContent,
            mappings
          };
          return exports2.presortedDecodedMap(joined);
        };
        function recurse(input, mapUrl, mappings, sources, sourcesContent, names, lineOffset, columnOffset, stopLine, stopColumn) {
          const { sections } = input;
          for (let i = 0; i < sections.length; i++) {
            const { map, offset } = sections[i];
            let sl = stopLine;
            let sc = stopColumn;
            if (i + 1 < sections.length) {
              const nextOffset = sections[i + 1].offset;
              sl = Math.min(stopLine, lineOffset + nextOffset.line);
              if (sl === stopLine) {
                sc = Math.min(stopColumn, columnOffset + nextOffset.column);
              } else if (sl < stopLine) {
                sc = columnOffset + nextOffset.column;
              }
            }
            addSection(map, mapUrl, mappings, sources, sourcesContent, names, lineOffset + offset.line, columnOffset + offset.column, sl, sc);
          }
        }
        function addSection(input, mapUrl, mappings, sources, sourcesContent, names, lineOffset, columnOffset, stopLine, stopColumn) {
          if ("sections" in input)
            return recurse(...arguments);
          const map = new TraceMap(input, mapUrl);
          const sourcesOffset = sources.length;
          const namesOffset = names.length;
          const decoded = exports2.decodedMappings(map);
          const { resolvedSources, sourcesContent: contents } = map;
          append(sources, resolvedSources);
          append(names, map.names);
          if (contents)
            append(sourcesContent, contents);
          else
            for (let i = 0; i < resolvedSources.length; i++)
              sourcesContent.push(null);
          for (let i = 0; i < decoded.length; i++) {
            const lineI = lineOffset + i;
            if (lineI > stopLine)
              return;
            const out = getLine(mappings, lineI);
            const cOffset = i === 0 ? columnOffset : 0;
            const line = decoded[i];
            for (let j = 0; j < line.length; j++) {
              const seg = line[j];
              const column = cOffset + seg[COLUMN];
              if (lineI === stopLine && column >= stopColumn)
                return;
              if (seg.length === 1) {
                out.push([column]);
                continue;
              }
              const sourcesIndex = sourcesOffset + seg[SOURCES_INDEX];
              const sourceLine = seg[SOURCE_LINE];
              const sourceColumn = seg[SOURCE_COLUMN];
              out.push(seg.length === 4 ? [column, sourcesIndex, sourceLine, sourceColumn] : [column, sourcesIndex, sourceLine, sourceColumn, namesOffset + seg[NAMES_INDEX]]);
            }
          }
        }
        function append(arr, other) {
          for (let i = 0; i < other.length; i++)
            arr.push(other[i]);
        }
        function getLine(arr, index) {
          for (let i = arr.length; i <= index; i++)
            arr[i] = [];
          return arr[index];
        }
        const LINE_GTR_ZERO = "`line` must be greater than 0 (lines start at line 1)";
        const COL_GTR_EQ_ZERO = "`column` must be greater than or equal to 0 (columns start at column 0)";
        const LEAST_UPPER_BOUND = -1;
        const GREATEST_LOWER_BOUND = 1;
        exports2.encodedMappings = void 0;
        exports2.decodedMappings = void 0;
        exports2.traceSegment = void 0;
        exports2.originalPositionFor = void 0;
        exports2.generatedPositionFor = void 0;
        exports2.allGeneratedPositionsFor = void 0;
        exports2.eachMapping = void 0;
        exports2.sourceContentFor = void 0;
        exports2.presortedDecodedMap = void 0;
        exports2.decodedMap = void 0;
        exports2.encodedMap = void 0;
        class TraceMap {
          constructor(map, mapUrl) {
            const isString = typeof map === "string";
            if (!isString && map._decodedMemo)
              return map;
            const parsed = isString ? JSON.parse(map) : map;
            const { version, file, names, sourceRoot, sources, sourcesContent } = parsed;
            this.version = version;
            this.file = file;
            this.names = names || [];
            this.sourceRoot = sourceRoot;
            this.sources = sources;
            this.sourcesContent = sourcesContent;
            const from = resolve(sourceRoot || "", stripFilename(mapUrl));
            this.resolvedSources = sources.map((s) => resolve(s || "", from));
            const { mappings } = parsed;
            if (typeof mappings === "string") {
              this._encoded = mappings;
              this._decoded = void 0;
            } else {
              this._encoded = void 0;
              this._decoded = maybeSort(mappings, isString);
            }
            this._decodedMemo = memoizedState();
            this._bySources = void 0;
            this._bySourceMemos = void 0;
          }
        }
        (() => {
          exports2.encodedMappings = (map) => {
            var _a;
            return (_a = map._encoded) !== null && _a !== void 0 ? _a : map._encoded = sourcemapCodec.encode(map._decoded);
          };
          exports2.decodedMappings = (map) => {
            return map._decoded || (map._decoded = sourcemapCodec.decode(map._encoded));
          };
          exports2.traceSegment = (map, line, column) => {
            const decoded = exports2.decodedMappings(map);
            if (line >= decoded.length)
              return null;
            const segments = decoded[line];
            const index = traceSegmentInternal(segments, map._decodedMemo, line, column, GREATEST_LOWER_BOUND);
            return index === -1 ? null : segments[index];
          };
          exports2.originalPositionFor = (map, { line, column, bias }) => {
            line--;
            if (line < 0)
              throw new Error(LINE_GTR_ZERO);
            if (column < 0)
              throw new Error(COL_GTR_EQ_ZERO);
            const decoded = exports2.decodedMappings(map);
            if (line >= decoded.length)
              return OMapping(null, null, null, null);
            const segments = decoded[line];
            const index = traceSegmentInternal(segments, map._decodedMemo, line, column, bias || GREATEST_LOWER_BOUND);
            if (index === -1)
              return OMapping(null, null, null, null);
            const segment = segments[index];
            if (segment.length === 1)
              return OMapping(null, null, null, null);
            const { names, resolvedSources } = map;
            return OMapping(resolvedSources[segment[SOURCES_INDEX]], segment[SOURCE_LINE] + 1, segment[SOURCE_COLUMN], segment.length === 5 ? names[segment[NAMES_INDEX]] : null);
          };
          exports2.allGeneratedPositionsFor = (map, { source, line, column, bias }) => {
            return generatedPosition(map, source, line, column, bias || LEAST_UPPER_BOUND, true);
          };
          exports2.generatedPositionFor = (map, { source, line, column, bias }) => {
            return generatedPosition(map, source, line, column, bias || GREATEST_LOWER_BOUND, false);
          };
          exports2.eachMapping = (map, cb) => {
            const decoded = exports2.decodedMappings(map);
            const { names, resolvedSources } = map;
            for (let i = 0; i < decoded.length; i++) {
              const line = decoded[i];
              for (let j = 0; j < line.length; j++) {
                const seg = line[j];
                const generatedLine = i + 1;
                const generatedColumn = seg[0];
                let source = null;
                let originalLine = null;
                let originalColumn = null;
                let name = null;
                if (seg.length !== 1) {
                  source = resolvedSources[seg[1]];
                  originalLine = seg[2] + 1;
                  originalColumn = seg[3];
                }
                if (seg.length === 5)
                  name = names[seg[4]];
                cb({
                  generatedLine,
                  generatedColumn,
                  source,
                  originalLine,
                  originalColumn,
                  name
                });
              }
            }
          };
          exports2.sourceContentFor = (map, source) => {
            const { sources, resolvedSources, sourcesContent } = map;
            if (sourcesContent == null)
              return null;
            let index = sources.indexOf(source);
            if (index === -1)
              index = resolvedSources.indexOf(source);
            return index === -1 ? null : sourcesContent[index];
          };
          exports2.presortedDecodedMap = (map, mapUrl) => {
            const tracer = new TraceMap(clone(map, []), mapUrl);
            tracer._decoded = map.mappings;
            return tracer;
          };
          exports2.decodedMap = (map) => {
            return clone(map, exports2.decodedMappings(map));
          };
          exports2.encodedMap = (map) => {
            return clone(map, exports2.encodedMappings(map));
          };
          function generatedPosition(map, source, line, column, bias, all) {
            line--;
            if (line < 0)
              throw new Error(LINE_GTR_ZERO);
            if (column < 0)
              throw new Error(COL_GTR_EQ_ZERO);
            const { sources, resolvedSources } = map;
            let sourceIndex = sources.indexOf(source);
            if (sourceIndex === -1)
              sourceIndex = resolvedSources.indexOf(source);
            if (sourceIndex === -1)
              return all ? [] : GMapping(null, null);
            const generated = map._bySources || (map._bySources = buildBySources(exports2.decodedMappings(map), map._bySourceMemos = sources.map(memoizedState)));
            const segments = generated[sourceIndex][line];
            if (segments == null)
              return all ? [] : GMapping(null, null);
            const memo = map._bySourceMemos[sourceIndex];
            if (all)
              return sliceGeneratedPositions(segments, memo, line, column, bias);
            const index = traceSegmentInternal(segments, memo, line, column, bias);
            if (index === -1)
              return GMapping(null, null);
            const segment = segments[index];
            return GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]);
          }
        })();
        function clone(map, mappings) {
          return {
            version: map.version,
            file: map.file,
            names: map.names,
            sourceRoot: map.sourceRoot,
            sources: map.sources,
            sourcesContent: map.sourcesContent,
            mappings
          };
        }
        function OMapping(source, line, column, name) {
          return { source, line, column, name };
        }
        function GMapping(line, column) {
          return { line, column };
        }
        function traceSegmentInternal(segments, memo, line, column, bias) {
          let index = memoizedBinarySearch(segments, column, memo, line);
          if (found) {
            index = (bias === LEAST_UPPER_BOUND ? upperBound : lowerBound)(segments, column, index);
          } else if (bias === LEAST_UPPER_BOUND)
            index++;
          if (index === -1 || index === segments.length)
            return -1;
          return index;
        }
        function sliceGeneratedPositions(segments, memo, line, column, bias) {
          let min = traceSegmentInternal(segments, memo, line, column, GREATEST_LOWER_BOUND);
          if (!found && bias === LEAST_UPPER_BOUND)
            min++;
          if (min === -1 || min === segments.length)
            return [];
          const matchedColumn = found ? column : segments[min][COLUMN];
          if (!found)
            min = lowerBound(segments, matchedColumn, min);
          const max = upperBound(segments, matchedColumn, min);
          const result = [];
          for (; min <= max; min++) {
            const segment = segments[min];
            result.push(GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]));
          }
          return result;
        }
        exports2.AnyMap = AnyMap;
        exports2.GREATEST_LOWER_BOUND = GREATEST_LOWER_BOUND;
        exports2.LEAST_UPPER_BOUND = LEAST_UPPER_BOUND;
        exports2.TraceMap = TraceMap;
      });
    }
  });

  // node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js
  var require_gen_mapping_umd = __commonJS({
    "node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js"(exports, module) {
      init_esbuild_inject();
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_set_array_umd(), require_sourcemap_codec_umd(), require_trace_mapping_umd()) : typeof define === "function" && define.amd ? define(["exports", "@jridgewell/set-array", "@jridgewell/sourcemap-codec", "@jridgewell/trace-mapping"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.genMapping = {}, global2.setArray, global2.sourcemapCodec, global2.traceMapping));
      })(exports, function(exports2, setArray, sourcemapCodec, traceMapping) {
        "use strict";
        const COLUMN = 0;
        const SOURCES_INDEX = 1;
        const SOURCE_LINE = 2;
        const SOURCE_COLUMN = 3;
        const NAMES_INDEX = 4;
        const NO_NAME = -1;
        exports2.addSegment = void 0;
        exports2.addMapping = void 0;
        exports2.maybeAddSegment = void 0;
        exports2.maybeAddMapping = void 0;
        exports2.setSourceContent = void 0;
        exports2.toDecodedMap = void 0;
        exports2.toEncodedMap = void 0;
        exports2.fromMap = void 0;
        exports2.allMappings = void 0;
        let addSegmentInternal;
        class GenMapping {
          constructor({ file, sourceRoot } = {}) {
            this._names = new setArray.SetArray();
            this._sources = new setArray.SetArray();
            this._sourcesContent = [];
            this._mappings = [];
            this.file = file;
            this.sourceRoot = sourceRoot;
          }
        }
        (() => {
          exports2.addSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => {
            return addSegmentInternal(false, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content);
          };
          exports2.maybeAddSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => {
            return addSegmentInternal(true, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content);
          };
          exports2.addMapping = (map, mapping) => {
            return addMappingInternal(false, map, mapping);
          };
          exports2.maybeAddMapping = (map, mapping) => {
            return addMappingInternal(true, map, mapping);
          };
          exports2.setSourceContent = (map, source, content) => {
            const { _sources: sources, _sourcesContent: sourcesContent } = map;
            sourcesContent[setArray.put(sources, source)] = content;
          };
          exports2.toDecodedMap = (map) => {
            const { file, sourceRoot, _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names } = map;
            removeEmptyFinalLines(mappings);
            return {
              version: 3,
              file: file || void 0,
              names: names.array,
              sourceRoot: sourceRoot || void 0,
              sources: sources.array,
              sourcesContent,
              mappings
            };
          };
          exports2.toEncodedMap = (map) => {
            const decoded = exports2.toDecodedMap(map);
            return Object.assign(Object.assign({}, decoded), { mappings: sourcemapCodec.encode(decoded.mappings) });
          };
          exports2.allMappings = (map) => {
            const out = [];
            const { _mappings: mappings, _sources: sources, _names: names } = map;
            for (let i = 0; i < mappings.length; i++) {
              const line = mappings[i];
              for (let j = 0; j < line.length; j++) {
                const seg = line[j];
                const generated = { line: i + 1, column: seg[COLUMN] };
                let source = void 0;
                let original = void 0;
                let name = void 0;
                if (seg.length !== 1) {
                  source = sources.array[seg[SOURCES_INDEX]];
                  original = { line: seg[SOURCE_LINE] + 1, column: seg[SOURCE_COLUMN] };
                  if (seg.length === 5)
                    name = names.array[seg[NAMES_INDEX]];
                }
                out.push({ generated, source, original, name });
              }
            }
            return out;
          };
          exports2.fromMap = (input) => {
            const map = new traceMapping.TraceMap(input);
            const gen = new GenMapping({ file: map.file, sourceRoot: map.sourceRoot });
            putAll(gen._names, map.names);
            putAll(gen._sources, map.sources);
            gen._sourcesContent = map.sourcesContent || map.sources.map(() => null);
            gen._mappings = traceMapping.decodedMappings(map);
            return gen;
          };
          addSegmentInternal = (skipable, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => {
            const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names } = map;
            const line = getLine(mappings, genLine);
            const index = getColumnIndex(line, genColumn);
            if (!source) {
              if (skipable && skipSourceless(line, index))
                return;
              return insert(line, index, [genColumn]);
            }
            const sourcesIndex = setArray.put(sources, source);
            const namesIndex = name ? setArray.put(names, name) : NO_NAME;
            if (sourcesIndex === sourcesContent.length)
              sourcesContent[sourcesIndex] = content !== null && content !== void 0 ? content : null;
            if (skipable && skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex)) {
              return;
            }
            return insert(line, index, name ? [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex] : [genColumn, sourcesIndex, sourceLine, sourceColumn]);
          };
        })();
        function getLine(mappings, index) {
          for (let i = mappings.length; i <= index; i++) {
            mappings[i] = [];
          }
          return mappings[index];
        }
        function getColumnIndex(line, genColumn) {
          let index = line.length;
          for (let i = index - 1; i >= 0; index = i--) {
            const current = line[i];
            if (genColumn >= current[COLUMN])
              break;
          }
          return index;
        }
        function insert(array, index, value) {
          for (let i = array.length; i > index; i--) {
            array[i] = array[i - 1];
          }
          array[index] = value;
        }
        function removeEmptyFinalLines(mappings) {
          const { length } = mappings;
          let len = length;
          for (let i = len - 1; i >= 0; len = i, i--) {
            if (mappings[i].length > 0)
              break;
          }
          if (len < length)
            mappings.length = len;
        }
        function putAll(strarr, array) {
          for (let i = 0; i < array.length; i++)
            setArray.put(strarr, array[i]);
        }
        function skipSourceless(line, index) {
          if (index === 0)
            return true;
          const prev = line[index - 1];
          return prev.length === 1;
        }
        function skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex) {
          if (index === 0)
            return false;
          const prev = line[index - 1];
          if (prev.length === 1)
            return false;
          return sourcesIndex === prev[SOURCES_INDEX] && sourceLine === prev[SOURCE_LINE] && sourceColumn === prev[SOURCE_COLUMN] && namesIndex === (prev.length === 5 ? prev[NAMES_INDEX] : NO_NAME);
        }
        function addMappingInternal(skipable, map, mapping) {
          const { generated, source, original, name, content } = mapping;
          if (!source) {
            return addSegmentInternal(skipable, map, generated.line - 1, generated.column, null, null, null, null, null);
          }
          const s = source;
          return addSegmentInternal(skipable, map, generated.line - 1, generated.column, s, original.line - 1, original.column, name, content);
        }
        exports2.GenMapping = GenMapping;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // node_modules/@babel/generator/lib/source-map.js
  var require_source_map = __commonJS({
    "node_modules/@babel/generator/lib/source-map.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _genMapping = require_gen_mapping_umd();
      var _traceMapping = require_trace_mapping_umd();
      var SourceMap = class {
        constructor(opts, code) {
          var _opts$sourceFileName;
          this._map = void 0;
          this._rawMappings = void 0;
          this._sourceFileName = void 0;
          this._lastGenLine = 0;
          this._lastSourceLine = 0;
          this._lastSourceColumn = 0;
          this._inputMap = void 0;
          const map = this._map = new _genMapping.GenMapping({
            sourceRoot: opts.sourceRoot
          });
          this._sourceFileName = (_opts$sourceFileName = opts.sourceFileName) == null ? void 0 : _opts$sourceFileName.replace(/\\/g, "/");
          this._rawMappings = void 0;
          if (opts.inputSourceMap) {
            this._inputMap = new _traceMapping.TraceMap(opts.inputSourceMap);
            const resolvedSources = this._inputMap.resolvedSources;
            if (resolvedSources.length) {
              for (let i = 0; i < resolvedSources.length; i++) {
                var _this$_inputMap$sourc;
                (0, _genMapping.setSourceContent)(map, resolvedSources[i], (_this$_inputMap$sourc = this._inputMap.sourcesContent) == null ? void 0 : _this$_inputMap$sourc[i]);
              }
            }
          }
          if (typeof code === "string" && !opts.inputSourceMap) {
            (0, _genMapping.setSourceContent)(map, this._sourceFileName, code);
          } else if (typeof code === "object") {
            for (const sourceFileName of Object.keys(code)) {
              (0, _genMapping.setSourceContent)(map, sourceFileName.replace(/\\/g, "/"), code[sourceFileName]);
            }
          }
        }
        get() {
          return (0, _genMapping.toEncodedMap)(this._map);
        }
        getDecoded() {
          return (0, _genMapping.toDecodedMap)(this._map);
        }
        getRawMappings() {
          return this._rawMappings || (this._rawMappings = (0, _genMapping.allMappings)(this._map));
        }
        mark(generated, line, column, identifierName, identifierNamePos, filename) {
          var _originalMapping;
          this._rawMappings = void 0;
          let originalMapping;
          if (line != null) {
            if (this._inputMap) {
              originalMapping = (0, _traceMapping.originalPositionFor)(this._inputMap, {
                line,
                column
              });
              if (!originalMapping.name && identifierNamePos) {
                const originalIdentifierMapping = (0, _traceMapping.originalPositionFor)(this._inputMap, identifierNamePos);
                if (originalIdentifierMapping.name) {
                  identifierName = originalIdentifierMapping.name;
                }
              }
            } else {
              originalMapping = {
                source: (filename == null ? void 0 : filename.replace(/\\/g, "/")) || this._sourceFileName,
                line,
                column
              };
            }
          }
          (0, _genMapping.maybeAddMapping)(this._map, {
            name: identifierName,
            generated,
            source: (_originalMapping = originalMapping) == null ? void 0 : _originalMapping.source,
            original: originalMapping
          });
        }
      };
      exports.default = SourceMap;
    }
  });

  // node_modules/@babel/generator/lib/buffer.js
  var require_buffer2 = __commonJS({
    "node_modules/@babel/generator/lib/buffer.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var Buffer3 = class {
        constructor(map, indentChar) {
          this._map = null;
          this._buf = "";
          this._str = "";
          this._appendCount = 0;
          this._last = 0;
          this._queue = [];
          this._queueCursor = 0;
          this._canMarkIdName = true;
          this._indentChar = "";
          this._fastIndentations = [];
          this._position = {
            line: 1,
            column: 0
          };
          this._sourcePosition = {
            identifierName: void 0,
            identifierNamePos: void 0,
            line: void 0,
            column: void 0,
            filename: void 0
          };
          this._map = map;
          this._indentChar = indentChar;
          for (let i = 0; i < 64; i++) {
            this._fastIndentations.push(indentChar.repeat(i));
          }
          this._allocQueue();
        }
        _allocQueue() {
          const queue = this._queue;
          for (let i = 0; i < 16; i++) {
            queue.push({
              char: 0,
              repeat: 1,
              line: void 0,
              column: void 0,
              identifierName: void 0,
              identifierNamePos: void 0,
              filename: ""
            });
          }
        }
        _pushQueue(char, repeat, line, column, filename) {
          const cursor = this._queueCursor;
          if (cursor === this._queue.length) {
            this._allocQueue();
          }
          const item = this._queue[cursor];
          item.char = char;
          item.repeat = repeat;
          item.line = line;
          item.column = column;
          item.filename = filename;
          this._queueCursor++;
        }
        _popQueue() {
          if (this._queueCursor === 0) {
            throw new Error("Cannot pop from empty queue");
          }
          return this._queue[--this._queueCursor];
        }
        get() {
          this._flush();
          const map = this._map;
          const result = {
            code: (this._buf + this._str).trimRight(),
            decodedMap: map == null ? void 0 : map.getDecoded(),
            get __mergedMap() {
              return this.map;
            },
            get map() {
              const resultMap = map ? map.get() : null;
              result.map = resultMap;
              return resultMap;
            },
            set map(value) {
              Object.defineProperty(result, "map", {
                value,
                writable: true
              });
            },
            get rawMappings() {
              const mappings = map == null ? void 0 : map.getRawMappings();
              result.rawMappings = mappings;
              return mappings;
            },
            set rawMappings(value) {
              Object.defineProperty(result, "rawMappings", {
                value,
                writable: true
              });
            }
          };
          return result;
        }
        append(str, maybeNewline) {
          this._flush();
          this._append(str, this._sourcePosition, maybeNewline);
        }
        appendChar(char) {
          this._flush();
          this._appendChar(char, 1, this._sourcePosition);
        }
        queue(char) {
          if (char === 10) {
            while (this._queueCursor !== 0) {
              const char2 = this._queue[this._queueCursor - 1].char;
              if (char2 !== 32 && char2 !== 9) {
                break;
              }
              this._queueCursor--;
            }
          }
          const sourcePosition = this._sourcePosition;
          this._pushQueue(char, 1, sourcePosition.line, sourcePosition.column, sourcePosition.filename);
        }
        queueIndentation(repeat) {
          if (repeat === 0)
            return;
          this._pushQueue(-1, repeat, void 0, void 0, void 0);
        }
        _flush() {
          const queueCursor = this._queueCursor;
          const queue = this._queue;
          for (let i = 0; i < queueCursor; i++) {
            const item = queue[i];
            this._appendChar(item.char, item.repeat, item);
          }
          this._queueCursor = 0;
        }
        _appendChar(char, repeat, sourcePos) {
          this._last = char;
          if (char === -1) {
            const fastIndentation = this._fastIndentations[repeat];
            if (fastIndentation !== void 0) {
              this._str += fastIndentation;
            } else {
              this._str += repeat > 1 ? this._indentChar.repeat(repeat) : this._indentChar;
            }
          } else {
            this._str += repeat > 1 ? String.fromCharCode(char).repeat(repeat) : String.fromCharCode(char);
          }
          if (char !== 10) {
            this._mark(sourcePos.line, sourcePos.column, sourcePos.identifierName, sourcePos.identifierNamePos, sourcePos.filename);
            this._position.column += repeat;
          } else {
            this._position.line++;
            this._position.column = 0;
          }
          if (this._canMarkIdName) {
            sourcePos.identifierName = void 0;
            sourcePos.identifierNamePos = void 0;
          }
        }
        _append(str, sourcePos, maybeNewline) {
          const len = str.length;
          const position = this._position;
          this._last = str.charCodeAt(len - 1);
          if (++this._appendCount > 4096) {
            +this._str;
            this._buf += this._str;
            this._str = str;
            this._appendCount = 0;
          } else {
            this._str += str;
          }
          if (!maybeNewline && !this._map) {
            position.column += len;
            return;
          }
          const {
            column,
            identifierName,
            identifierNamePos,
            filename
          } = sourcePos;
          let line = sourcePos.line;
          if ((identifierName != null || identifierNamePos != null) && this._canMarkIdName) {
            sourcePos.identifierName = void 0;
            sourcePos.identifierNamePos = void 0;
          }
          let i = str.indexOf("\n");
          let last = 0;
          if (i !== 0) {
            this._mark(line, column, identifierName, identifierNamePos, filename);
          }
          while (i !== -1) {
            position.line++;
            position.column = 0;
            last = i + 1;
            if (last < len && line !== void 0) {
              this._mark(++line, 0, null, null, filename);
            }
            i = str.indexOf("\n", last);
          }
          position.column += len - last;
        }
        _mark(line, column, identifierName, identifierNamePos, filename) {
          var _this$_map;
          (_this$_map = this._map) == null || _this$_map.mark(this._position, line, column, identifierName, identifierNamePos, filename);
        }
        removeTrailingNewline() {
          const queueCursor = this._queueCursor;
          if (queueCursor !== 0 && this._queue[queueCursor - 1].char === 10) {
            this._queueCursor--;
          }
        }
        removeLastSemicolon() {
          const queueCursor = this._queueCursor;
          if (queueCursor !== 0 && this._queue[queueCursor - 1].char === 59) {
            this._queueCursor--;
          }
        }
        getLastChar() {
          const queueCursor = this._queueCursor;
          return queueCursor !== 0 ? this._queue[queueCursor - 1].char : this._last;
        }
        getNewlineCount() {
          const queueCursor = this._queueCursor;
          let count = 0;
          if (queueCursor === 0)
            return this._last === 10 ? 1 : 0;
          for (let i = queueCursor - 1; i >= 0; i--) {
            if (this._queue[i].char !== 10) {
              break;
            }
            count++;
          }
          return count === queueCursor && this._last === 10 ? count + 1 : count;
        }
        endsWithCharAndNewline() {
          const queue = this._queue;
          const queueCursor = this._queueCursor;
          if (queueCursor !== 0) {
            const lastCp = queue[queueCursor - 1].char;
            if (lastCp !== 10)
              return;
            if (queueCursor > 1) {
              return queue[queueCursor - 2].char;
            } else {
              return this._last;
            }
          }
        }
        hasContent() {
          return this._queueCursor !== 0 || !!this._last;
        }
        exactSource(loc, cb) {
          if (!this._map) {
            cb();
            return;
          }
          this.source("start", loc);
          const identifierName = loc.identifierName;
          const sourcePos = this._sourcePosition;
          if (identifierName) {
            this._canMarkIdName = false;
            sourcePos.identifierName = identifierName;
          }
          cb();
          if (identifierName) {
            this._canMarkIdName = true;
            sourcePos.identifierName = void 0;
            sourcePos.identifierNamePos = void 0;
          }
          this.source("end", loc);
        }
        source(prop, loc) {
          if (!this._map)
            return;
          this._normalizePosition(prop, loc, 0);
        }
        sourceWithOffset(prop, loc, columnOffset) {
          if (!this._map)
            return;
          this._normalizePosition(prop, loc, columnOffset);
        }
        withSource(prop, loc, cb) {
          if (this._map) {
            this.source(prop, loc);
          }
          cb();
        }
        _normalizePosition(prop, loc, columnOffset) {
          const pos = loc[prop];
          const target = this._sourcePosition;
          if (pos) {
            target.line = pos.line;
            target.column = Math.max(pos.column + columnOffset, 0);
            target.filename = loc.filename;
          }
        }
        getCurrentColumn() {
          const queue = this._queue;
          const queueCursor = this._queueCursor;
          let lastIndex = -1;
          let len = 0;
          for (let i = 0; i < queueCursor; i++) {
            const item = queue[i];
            if (item.char === 10) {
              lastIndex = len;
            }
            len += item.repeat;
          }
          return lastIndex === -1 ? this._position.column + len : len - 1 - lastIndex;
        }
        getCurrentLine() {
          let count = 0;
          const queue = this._queue;
          for (let i = 0; i < this._queueCursor; i++) {
            if (queue[i].char === 10) {
              count++;
            }
          }
          return this._position.line + count;
        }
      };
      exports.default = Buffer3;
    }
  });

  // node_modules/@babel/types/lib/utils/shallowEqual.js
  var require_shallowEqual = __commonJS({
    "node_modules/@babel/types/lib/utils/shallowEqual.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = shallowEqual;
      function shallowEqual(actual, expected) {
        const keys = Object.keys(expected);
        for (const key of keys) {
          if (actual[key] !== expected[key]) {
            return false;
          }
        }
        return true;
      }
    }
  });

  // node_modules/@babel/types/lib/utils/deprecationWarning.js
  var require_deprecationWarning = __commonJS({
    "node_modules/@babel/types/lib/utils/deprecationWarning.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = deprecationWarning;
      var warnings = /* @__PURE__ */ new Set();
      function deprecationWarning(oldName, newName, prefix = "") {
        if (warnings.has(oldName))
          return;
        warnings.add(oldName);
        const {
          internal,
          trace
        } = captureShortStackTrace(1, 2);
        if (internal) {
          return;
        }
        console.warn(`${prefix}\`${oldName}\` has been deprecated, please migrate to \`${newName}\`
${trace}`);
      }
      function captureShortStackTrace(skip, length) {
        const {
          stackTraceLimit,
          prepareStackTrace
        } = Error;
        let stackTrace;
        Error.stackTraceLimit = 1 + skip + length;
        Error.prepareStackTrace = function(err, stack) {
          stackTrace = stack;
        };
        new Error().stack;
        Error.stackTraceLimit = stackTraceLimit;
        Error.prepareStackTrace = prepareStackTrace;
        if (!stackTrace)
          return {
            internal: false,
            trace: ""
          };
        const shortStackTrace = stackTrace.slice(1 + skip, 1 + skip + length);
        return {
          internal: /[\\/]@babel[\\/]/.test(shortStackTrace[1].getFileName()),
          trace: shortStackTrace.map((frame) => `    at ${frame}`).join("\n")
        };
      }
    }
  });

  // node_modules/@babel/types/lib/validators/generated/index.js
  var require_generated = __commonJS({
    "node_modules/@babel/types/lib/validators/generated/index.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isAccessor = isAccessor;
      exports.isAnyTypeAnnotation = isAnyTypeAnnotation;
      exports.isArgumentPlaceholder = isArgumentPlaceholder;
      exports.isArrayExpression = isArrayExpression;
      exports.isArrayPattern = isArrayPattern;
      exports.isArrayTypeAnnotation = isArrayTypeAnnotation;
      exports.isArrowFunctionExpression = isArrowFunctionExpression;
      exports.isAssignmentExpression = isAssignmentExpression;
      exports.isAssignmentPattern = isAssignmentPattern;
      exports.isAwaitExpression = isAwaitExpression;
      exports.isBigIntLiteral = isBigIntLiteral;
      exports.isBinary = isBinary;
      exports.isBinaryExpression = isBinaryExpression;
      exports.isBindExpression = isBindExpression;
      exports.isBlock = isBlock;
      exports.isBlockParent = isBlockParent;
      exports.isBlockStatement = isBlockStatement;
      exports.isBooleanLiteral = isBooleanLiteral;
      exports.isBooleanLiteralTypeAnnotation = isBooleanLiteralTypeAnnotation;
      exports.isBooleanTypeAnnotation = isBooleanTypeAnnotation;
      exports.isBreakStatement = isBreakStatement;
      exports.isCallExpression = isCallExpression;
      exports.isCatchClause = isCatchClause;
      exports.isClass = isClass;
      exports.isClassAccessorProperty = isClassAccessorProperty;
      exports.isClassBody = isClassBody;
      exports.isClassDeclaration = isClassDeclaration;
      exports.isClassExpression = isClassExpression;
      exports.isClassImplements = isClassImplements;
      exports.isClassMethod = isClassMethod;
      exports.isClassPrivateMethod = isClassPrivateMethod;
      exports.isClassPrivateProperty = isClassPrivateProperty;
      exports.isClassProperty = isClassProperty;
      exports.isCompletionStatement = isCompletionStatement;
      exports.isConditional = isConditional;
      exports.isConditionalExpression = isConditionalExpression;
      exports.isContinueStatement = isContinueStatement;
      exports.isDebuggerStatement = isDebuggerStatement;
      exports.isDecimalLiteral = isDecimalLiteral;
      exports.isDeclaration = isDeclaration;
      exports.isDeclareClass = isDeclareClass;
      exports.isDeclareExportAllDeclaration = isDeclareExportAllDeclaration;
      exports.isDeclareExportDeclaration = isDeclareExportDeclaration;
      exports.isDeclareFunction = isDeclareFunction;
      exports.isDeclareInterface = isDeclareInterface;
      exports.isDeclareModule = isDeclareModule;
      exports.isDeclareModuleExports = isDeclareModuleExports;
      exports.isDeclareOpaqueType = isDeclareOpaqueType;
      exports.isDeclareTypeAlias = isDeclareTypeAlias;
      exports.isDeclareVariable = isDeclareVariable;
      exports.isDeclaredPredicate = isDeclaredPredicate;
      exports.isDecorator = isDecorator;
      exports.isDirective = isDirective;
      exports.isDirectiveLiteral = isDirectiveLiteral;
      exports.isDoExpression = isDoExpression;
      exports.isDoWhileStatement = isDoWhileStatement;
      exports.isEmptyStatement = isEmptyStatement;
      exports.isEmptyTypeAnnotation = isEmptyTypeAnnotation;
      exports.isEnumBody = isEnumBody;
      exports.isEnumBooleanBody = isEnumBooleanBody;
      exports.isEnumBooleanMember = isEnumBooleanMember;
      exports.isEnumDeclaration = isEnumDeclaration;
      exports.isEnumDefaultedMember = isEnumDefaultedMember;
      exports.isEnumMember = isEnumMember;
      exports.isEnumNumberBody = isEnumNumberBody;
      exports.isEnumNumberMember = isEnumNumberMember;
      exports.isEnumStringBody = isEnumStringBody;
      exports.isEnumStringMember = isEnumStringMember;
      exports.isEnumSymbolBody = isEnumSymbolBody;
      exports.isExistsTypeAnnotation = isExistsTypeAnnotation;
      exports.isExportAllDeclaration = isExportAllDeclaration;
      exports.isExportDeclaration = isExportDeclaration;
      exports.isExportDefaultDeclaration = isExportDefaultDeclaration;
      exports.isExportDefaultSpecifier = isExportDefaultSpecifier;
      exports.isExportNamedDeclaration = isExportNamedDeclaration;
      exports.isExportNamespaceSpecifier = isExportNamespaceSpecifier;
      exports.isExportSpecifier = isExportSpecifier;
      exports.isExpression = isExpression;
      exports.isExpressionStatement = isExpressionStatement;
      exports.isExpressionWrapper = isExpressionWrapper;
      exports.isFile = isFile;
      exports.isFlow = isFlow;
      exports.isFlowBaseAnnotation = isFlowBaseAnnotation;
      exports.isFlowDeclaration = isFlowDeclaration;
      exports.isFlowPredicate = isFlowPredicate;
      exports.isFlowType = isFlowType;
      exports.isFor = isFor;
      exports.isForInStatement = isForInStatement;
      exports.isForOfStatement = isForOfStatement;
      exports.isForStatement = isForStatement;
      exports.isForXStatement = isForXStatement;
      exports.isFunction = isFunction;
      exports.isFunctionDeclaration = isFunctionDeclaration;
      exports.isFunctionExpression = isFunctionExpression;
      exports.isFunctionParent = isFunctionParent;
      exports.isFunctionTypeAnnotation = isFunctionTypeAnnotation;
      exports.isFunctionTypeParam = isFunctionTypeParam;
      exports.isGenericTypeAnnotation = isGenericTypeAnnotation;
      exports.isIdentifier = isIdentifier;
      exports.isIfStatement = isIfStatement;
      exports.isImmutable = isImmutable;
      exports.isImport = isImport;
      exports.isImportAttribute = isImportAttribute;
      exports.isImportDeclaration = isImportDeclaration;
      exports.isImportDefaultSpecifier = isImportDefaultSpecifier;
      exports.isImportExpression = isImportExpression;
      exports.isImportNamespaceSpecifier = isImportNamespaceSpecifier;
      exports.isImportOrExportDeclaration = isImportOrExportDeclaration;
      exports.isImportSpecifier = isImportSpecifier;
      exports.isIndexedAccessType = isIndexedAccessType;
      exports.isInferredPredicate = isInferredPredicate;
      exports.isInterfaceDeclaration = isInterfaceDeclaration;
      exports.isInterfaceExtends = isInterfaceExtends;
      exports.isInterfaceTypeAnnotation = isInterfaceTypeAnnotation;
      exports.isInterpreterDirective = isInterpreterDirective;
      exports.isIntersectionTypeAnnotation = isIntersectionTypeAnnotation;
      exports.isJSX = isJSX;
      exports.isJSXAttribute = isJSXAttribute;
      exports.isJSXClosingElement = isJSXClosingElement;
      exports.isJSXClosingFragment = isJSXClosingFragment;
      exports.isJSXElement = isJSXElement;
      exports.isJSXEmptyExpression = isJSXEmptyExpression;
      exports.isJSXExpressionContainer = isJSXExpressionContainer;
      exports.isJSXFragment = isJSXFragment;
      exports.isJSXIdentifier = isJSXIdentifier;
      exports.isJSXMemberExpression = isJSXMemberExpression;
      exports.isJSXNamespacedName = isJSXNamespacedName;
      exports.isJSXOpeningElement = isJSXOpeningElement;
      exports.isJSXOpeningFragment = isJSXOpeningFragment;
      exports.isJSXSpreadAttribute = isJSXSpreadAttribute;
      exports.isJSXSpreadChild = isJSXSpreadChild;
      exports.isJSXText = isJSXText;
      exports.isLVal = isLVal;
      exports.isLabeledStatement = isLabeledStatement;
      exports.isLiteral = isLiteral;
      exports.isLogicalExpression = isLogicalExpression;
      exports.isLoop = isLoop;
      exports.isMemberExpression = isMemberExpression;
      exports.isMetaProperty = isMetaProperty;
      exports.isMethod = isMethod;
      exports.isMiscellaneous = isMiscellaneous;
      exports.isMixedTypeAnnotation = isMixedTypeAnnotation;
      exports.isModuleDeclaration = isModuleDeclaration;
      exports.isModuleExpression = isModuleExpression;
      exports.isModuleSpecifier = isModuleSpecifier;
      exports.isNewExpression = isNewExpression;
      exports.isNoop = isNoop;
      exports.isNullLiteral = isNullLiteral;
      exports.isNullLiteralTypeAnnotation = isNullLiteralTypeAnnotation;
      exports.isNullableTypeAnnotation = isNullableTypeAnnotation;
      exports.isNumberLiteral = isNumberLiteral;
      exports.isNumberLiteralTypeAnnotation = isNumberLiteralTypeAnnotation;
      exports.isNumberTypeAnnotation = isNumberTypeAnnotation;
      exports.isNumericLiteral = isNumericLiteral;
      exports.isObjectExpression = isObjectExpression;
      exports.isObjectMember = isObjectMember;
      exports.isObjectMethod = isObjectMethod;
      exports.isObjectPattern = isObjectPattern;
      exports.isObjectProperty = isObjectProperty;
      exports.isObjectTypeAnnotation = isObjectTypeAnnotation;
      exports.isObjectTypeCallProperty = isObjectTypeCallProperty;
      exports.isObjectTypeIndexer = isObjectTypeIndexer;
      exports.isObjectTypeInternalSlot = isObjectTypeInternalSlot;
      exports.isObjectTypeProperty = isObjectTypeProperty;
      exports.isObjectTypeSpreadProperty = isObjectTypeSpreadProperty;
      exports.isOpaqueType = isOpaqueType;
      exports.isOptionalCallExpression = isOptionalCallExpression;
      exports.isOptionalIndexedAccessType = isOptionalIndexedAccessType;
      exports.isOptionalMemberExpression = isOptionalMemberExpression;
      exports.isParenthesizedExpression = isParenthesizedExpression2;
      exports.isPattern = isPattern;
      exports.isPatternLike = isPatternLike;
      exports.isPipelineBareFunction = isPipelineBareFunction;
      exports.isPipelinePrimaryTopicReference = isPipelinePrimaryTopicReference;
      exports.isPipelineTopicExpression = isPipelineTopicExpression;
      exports.isPlaceholder = isPlaceholder;
      exports.isPrivate = isPrivate;
      exports.isPrivateName = isPrivateName;
      exports.isProgram = isProgram;
      exports.isProperty = isProperty;
      exports.isPureish = isPureish;
      exports.isQualifiedTypeIdentifier = isQualifiedTypeIdentifier;
      exports.isRecordExpression = isRecordExpression;
      exports.isRegExpLiteral = isRegExpLiteral;
      exports.isRegexLiteral = isRegexLiteral;
      exports.isRestElement = isRestElement;
      exports.isRestProperty = isRestProperty;
      exports.isReturnStatement = isReturnStatement;
      exports.isScopable = isScopable;
      exports.isSequenceExpression = isSequenceExpression;
      exports.isSpreadElement = isSpreadElement;
      exports.isSpreadProperty = isSpreadProperty;
      exports.isStandardized = isStandardized;
      exports.isStatement = isStatement;
      exports.isStaticBlock = isStaticBlock;
      exports.isStringLiteral = isStringLiteral;
      exports.isStringLiteralTypeAnnotation = isStringLiteralTypeAnnotation;
      exports.isStringTypeAnnotation = isStringTypeAnnotation;
      exports.isSuper = isSuper;
      exports.isSwitchCase = isSwitchCase;
      exports.isSwitchStatement = isSwitchStatement;
      exports.isSymbolTypeAnnotation = isSymbolTypeAnnotation;
      exports.isTSAnyKeyword = isTSAnyKeyword;
      exports.isTSArrayType = isTSArrayType;
      exports.isTSAsExpression = isTSAsExpression;
      exports.isTSBaseType = isTSBaseType;
      exports.isTSBigIntKeyword = isTSBigIntKeyword;
      exports.isTSBooleanKeyword = isTSBooleanKeyword;
      exports.isTSCallSignatureDeclaration = isTSCallSignatureDeclaration;
      exports.isTSConditionalType = isTSConditionalType;
      exports.isTSConstructSignatureDeclaration = isTSConstructSignatureDeclaration;
      exports.isTSConstructorType = isTSConstructorType;
      exports.isTSDeclareFunction = isTSDeclareFunction;
      exports.isTSDeclareMethod = isTSDeclareMethod;
      exports.isTSEntityName = isTSEntityName;
      exports.isTSEnumDeclaration = isTSEnumDeclaration;
      exports.isTSEnumMember = isTSEnumMember;
      exports.isTSExportAssignment = isTSExportAssignment;
      exports.isTSExpressionWithTypeArguments = isTSExpressionWithTypeArguments;
      exports.isTSExternalModuleReference = isTSExternalModuleReference;
      exports.isTSFunctionType = isTSFunctionType;
      exports.isTSImportEqualsDeclaration = isTSImportEqualsDeclaration;
      exports.isTSImportType = isTSImportType;
      exports.isTSIndexSignature = isTSIndexSignature;
      exports.isTSIndexedAccessType = isTSIndexedAccessType;
      exports.isTSInferType = isTSInferType;
      exports.isTSInstantiationExpression = isTSInstantiationExpression;
      exports.isTSInterfaceBody = isTSInterfaceBody;
      exports.isTSInterfaceDeclaration = isTSInterfaceDeclaration;
      exports.isTSIntersectionType = isTSIntersectionType;
      exports.isTSIntrinsicKeyword = isTSIntrinsicKeyword;
      exports.isTSLiteralType = isTSLiteralType;
      exports.isTSMappedType = isTSMappedType;
      exports.isTSMethodSignature = isTSMethodSignature;
      exports.isTSModuleBlock = isTSModuleBlock;
      exports.isTSModuleDeclaration = isTSModuleDeclaration;
      exports.isTSNamedTupleMember = isTSNamedTupleMember;
      exports.isTSNamespaceExportDeclaration = isTSNamespaceExportDeclaration;
      exports.isTSNeverKeyword = isTSNeverKeyword;
      exports.isTSNonNullExpression = isTSNonNullExpression;
      exports.isTSNullKeyword = isTSNullKeyword;
      exports.isTSNumberKeyword = isTSNumberKeyword;
      exports.isTSObjectKeyword = isTSObjectKeyword;
      exports.isTSOptionalType = isTSOptionalType;
      exports.isTSParameterProperty = isTSParameterProperty;
      exports.isTSParenthesizedType = isTSParenthesizedType;
      exports.isTSPropertySignature = isTSPropertySignature;
      exports.isTSQualifiedName = isTSQualifiedName;
      exports.isTSRestType = isTSRestType;
      exports.isTSSatisfiesExpression = isTSSatisfiesExpression;
      exports.isTSStringKeyword = isTSStringKeyword;
      exports.isTSSymbolKeyword = isTSSymbolKeyword;
      exports.isTSThisType = isTSThisType;
      exports.isTSTupleType = isTSTupleType;
      exports.isTSType = isTSType;
      exports.isTSTypeAliasDeclaration = isTSTypeAliasDeclaration;
      exports.isTSTypeAnnotation = isTSTypeAnnotation;
      exports.isTSTypeAssertion = isTSTypeAssertion;
      exports.isTSTypeElement = isTSTypeElement;
      exports.isTSTypeLiteral = isTSTypeLiteral;
      exports.isTSTypeOperator = isTSTypeOperator;
      exports.isTSTypeParameter = isTSTypeParameter;
      exports.isTSTypeParameterDeclaration = isTSTypeParameterDeclaration;
      exports.isTSTypeParameterInstantiation = isTSTypeParameterInstantiation;
      exports.isTSTypePredicate = isTSTypePredicate;
      exports.isTSTypeQuery = isTSTypeQuery;
      exports.isTSTypeReference = isTSTypeReference;
      exports.isTSUndefinedKeyword = isTSUndefinedKeyword;
      exports.isTSUnionType = isTSUnionType;
      exports.isTSUnknownKeyword = isTSUnknownKeyword;
      exports.isTSVoidKeyword = isTSVoidKeyword;
      exports.isTaggedTemplateExpression = isTaggedTemplateExpression;
      exports.isTemplateElement = isTemplateElement;
      exports.isTemplateLiteral = isTemplateLiteral;
      exports.isTerminatorless = isTerminatorless;
      exports.isThisExpression = isThisExpression;
      exports.isThisTypeAnnotation = isThisTypeAnnotation;
      exports.isThrowStatement = isThrowStatement;
      exports.isTopicReference = isTopicReference;
      exports.isTryStatement = isTryStatement;
      exports.isTupleExpression = isTupleExpression;
      exports.isTupleTypeAnnotation = isTupleTypeAnnotation;
      exports.isTypeAlias = isTypeAlias;
      exports.isTypeAnnotation = isTypeAnnotation;
      exports.isTypeCastExpression = isTypeCastExpression;
      exports.isTypeParameter = isTypeParameter;
      exports.isTypeParameterDeclaration = isTypeParameterDeclaration;
      exports.isTypeParameterInstantiation = isTypeParameterInstantiation;
      exports.isTypeScript = isTypeScript;
      exports.isTypeofTypeAnnotation = isTypeofTypeAnnotation;
      exports.isUnaryExpression = isUnaryExpression;
      exports.isUnaryLike = isUnaryLike;
      exports.isUnionTypeAnnotation = isUnionTypeAnnotation;
      exports.isUpdateExpression = isUpdateExpression;
      exports.isUserWhitespacable = isUserWhitespacable;
      exports.isV8IntrinsicIdentifier = isV8IntrinsicIdentifier;
      exports.isVariableDeclaration = isVariableDeclaration;
      exports.isVariableDeclarator = isVariableDeclarator;
      exports.isVariance = isVariance;
      exports.isVoidTypeAnnotation = isVoidTypeAnnotation;
      exports.isWhile = isWhile;
      exports.isWhileStatement = isWhileStatement;
      exports.isWithStatement = isWithStatement;
      exports.isYieldExpression = isYieldExpression;
      var _shallowEqual = require_shallowEqual();
      var _deprecationWarning = require_deprecationWarning();
      function isArrayExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ArrayExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isAssignmentExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "AssignmentExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isBinaryExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "BinaryExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isInterpreterDirective(node, opts) {
        if (!node)
          return false;
        if (node.type !== "InterpreterDirective")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isDirective(node, opts) {
        if (!node)
          return false;
        if (node.type !== "Directive")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isDirectiveLiteral(node, opts) {
        if (!node)
          return false;
        if (node.type !== "DirectiveLiteral")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isBlockStatement(node, opts) {
        if (!node)
          return false;
        if (node.type !== "BlockStatement")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isBreakStatement(node, opts) {
        if (!node)
          return false;
        if (node.type !== "BreakStatement")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isCallExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "CallExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isCatchClause(node, opts) {
        if (!node)
          return false;
        if (node.type !== "CatchClause")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isConditionalExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ConditionalExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isContinueStatement(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ContinueStatement")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isDebuggerStatement(node, opts) {
        if (!node)
          return false;
        if (node.type !== "DebuggerStatement")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isDoWhileStatement(node, opts) {
        if (!node)
          return false;
        if (node.type !== "DoWhileStatement")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isEmptyStatement(node, opts) {
        if (!node)
          return false;
        if (node.type !== "EmptyStatement")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isExpressionStatement(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ExpressionStatement")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isFile(node, opts) {
        if (!node)
          return false;
        if (node.type !== "File")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isForInStatement(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ForInStatement")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isForStatement(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ForStatement")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isFunctionDeclaration(node, opts) {
        if (!node)
          return false;
        if (node.type !== "FunctionDeclaration")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isFunctionExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "FunctionExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isIdentifier(node, opts) {
        if (!node)
          return false;
        if (node.type !== "Identifier")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isIfStatement(node, opts) {
        if (!node)
          return false;
        if (node.type !== "IfStatement")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isLabeledStatement(node, opts) {
        if (!node)
          return false;
        if (node.type !== "LabeledStatement")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isStringLiteral(node, opts) {
        if (!node)
          return false;
        if (node.type !== "StringLiteral")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isNumericLiteral(node, opts) {
        if (!node)
          return false;
        if (node.type !== "NumericLiteral")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isNullLiteral(node, opts) {
        if (!node)
          return false;
        if (node.type !== "NullLiteral")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isBooleanLiteral(node, opts) {
        if (!node)
          return false;
        if (node.type !== "BooleanLiteral")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isRegExpLiteral(node, opts) {
        if (!node)
          return false;
        if (node.type !== "RegExpLiteral")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isLogicalExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "LogicalExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isMemberExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "MemberExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isNewExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "NewExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isProgram(node, opts) {
        if (!node)
          return false;
        if (node.type !== "Program")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isObjectExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ObjectExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isObjectMethod(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ObjectMethod")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isObjectProperty(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ObjectProperty")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isRestElement(node, opts) {
        if (!node)
          return false;
        if (node.type !== "RestElement")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isReturnStatement(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ReturnStatement")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isSequenceExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "SequenceExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isParenthesizedExpression2(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ParenthesizedExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isSwitchCase(node, opts) {
        if (!node)
          return false;
        if (node.type !== "SwitchCase")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isSwitchStatement(node, opts) {
        if (!node)
          return false;
        if (node.type !== "SwitchStatement")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isThisExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ThisExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isThrowStatement(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ThrowStatement")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTryStatement(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TryStatement")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isUnaryExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "UnaryExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isUpdateExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "UpdateExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isVariableDeclaration(node, opts) {
        if (!node)
          return false;
        if (node.type !== "VariableDeclaration")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isVariableDeclarator(node, opts) {
        if (!node)
          return false;
        if (node.type !== "VariableDeclarator")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isWhileStatement(node, opts) {
        if (!node)
          return false;
        if (node.type !== "WhileStatement")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isWithStatement(node, opts) {
        if (!node)
          return false;
        if (node.type !== "WithStatement")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isAssignmentPattern(node, opts) {
        if (!node)
          return false;
        if (node.type !== "AssignmentPattern")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isArrayPattern(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ArrayPattern")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isArrowFunctionExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ArrowFunctionExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isClassBody(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ClassBody")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isClassExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ClassExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isClassDeclaration(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ClassDeclaration")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isExportAllDeclaration(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ExportAllDeclaration")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isExportDefaultDeclaration(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ExportDefaultDeclaration")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isExportNamedDeclaration(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ExportNamedDeclaration")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isExportSpecifier(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ExportSpecifier")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isForOfStatement(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ForOfStatement")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isImportDeclaration(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ImportDeclaration")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isImportDefaultSpecifier(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ImportDefaultSpecifier")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isImportNamespaceSpecifier(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ImportNamespaceSpecifier")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isImportSpecifier(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ImportSpecifier")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isImportExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ImportExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isMetaProperty(node, opts) {
        if (!node)
          return false;
        if (node.type !== "MetaProperty")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isClassMethod(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ClassMethod")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isObjectPattern(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ObjectPattern")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isSpreadElement(node, opts) {
        if (!node)
          return false;
        if (node.type !== "SpreadElement")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isSuper(node, opts) {
        if (!node)
          return false;
        if (node.type !== "Super")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTaggedTemplateExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TaggedTemplateExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTemplateElement(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TemplateElement")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTemplateLiteral(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TemplateLiteral")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isYieldExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "YieldExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isAwaitExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "AwaitExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isImport(node, opts) {
        if (!node)
          return false;
        if (node.type !== "Import")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isBigIntLiteral(node, opts) {
        if (!node)
          return false;
        if (node.type !== "BigIntLiteral")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isExportNamespaceSpecifier(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ExportNamespaceSpecifier")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isOptionalMemberExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "OptionalMemberExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isOptionalCallExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "OptionalCallExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isClassProperty(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ClassProperty")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isClassAccessorProperty(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ClassAccessorProperty")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isClassPrivateProperty(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ClassPrivateProperty")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isClassPrivateMethod(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ClassPrivateMethod")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isPrivateName(node, opts) {
        if (!node)
          return false;
        if (node.type !== "PrivateName")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isStaticBlock(node, opts) {
        if (!node)
          return false;
        if (node.type !== "StaticBlock")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isAnyTypeAnnotation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "AnyTypeAnnotation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isArrayTypeAnnotation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ArrayTypeAnnotation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isBooleanTypeAnnotation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "BooleanTypeAnnotation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isBooleanLiteralTypeAnnotation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "BooleanLiteralTypeAnnotation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isNullLiteralTypeAnnotation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "NullLiteralTypeAnnotation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isClassImplements(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ClassImplements")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isDeclareClass(node, opts) {
        if (!node)
          return false;
        if (node.type !== "DeclareClass")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isDeclareFunction(node, opts) {
        if (!node)
          return false;
        if (node.type !== "DeclareFunction")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isDeclareInterface(node, opts) {
        if (!node)
          return false;
        if (node.type !== "DeclareInterface")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isDeclareModule(node, opts) {
        if (!node)
          return false;
        if (node.type !== "DeclareModule")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isDeclareModuleExports(node, opts) {
        if (!node)
          return false;
        if (node.type !== "DeclareModuleExports")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isDeclareTypeAlias(node, opts) {
        if (!node)
          return false;
        if (node.type !== "DeclareTypeAlias")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isDeclareOpaqueType(node, opts) {
        if (!node)
          return false;
        if (node.type !== "DeclareOpaqueType")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isDeclareVariable(node, opts) {
        if (!node)
          return false;
        if (node.type !== "DeclareVariable")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isDeclareExportDeclaration(node, opts) {
        if (!node)
          return false;
        if (node.type !== "DeclareExportDeclaration")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isDeclareExportAllDeclaration(node, opts) {
        if (!node)
          return false;
        if (node.type !== "DeclareExportAllDeclaration")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isDeclaredPredicate(node, opts) {
        if (!node)
          return false;
        if (node.type !== "DeclaredPredicate")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isExistsTypeAnnotation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ExistsTypeAnnotation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isFunctionTypeAnnotation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "FunctionTypeAnnotation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isFunctionTypeParam(node, opts) {
        if (!node)
          return false;
        if (node.type !== "FunctionTypeParam")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isGenericTypeAnnotation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "GenericTypeAnnotation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isInferredPredicate(node, opts) {
        if (!node)
          return false;
        if (node.type !== "InferredPredicate")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isInterfaceExtends(node, opts) {
        if (!node)
          return false;
        if (node.type !== "InterfaceExtends")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isInterfaceDeclaration(node, opts) {
        if (!node)
          return false;
        if (node.type !== "InterfaceDeclaration")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isInterfaceTypeAnnotation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "InterfaceTypeAnnotation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isIntersectionTypeAnnotation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "IntersectionTypeAnnotation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isMixedTypeAnnotation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "MixedTypeAnnotation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isEmptyTypeAnnotation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "EmptyTypeAnnotation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isNullableTypeAnnotation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "NullableTypeAnnotation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isNumberLiteralTypeAnnotation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "NumberLiteralTypeAnnotation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isNumberTypeAnnotation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "NumberTypeAnnotation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isObjectTypeAnnotation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ObjectTypeAnnotation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isObjectTypeInternalSlot(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ObjectTypeInternalSlot")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isObjectTypeCallProperty(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ObjectTypeCallProperty")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isObjectTypeIndexer(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ObjectTypeIndexer")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isObjectTypeProperty(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ObjectTypeProperty")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isObjectTypeSpreadProperty(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ObjectTypeSpreadProperty")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isOpaqueType(node, opts) {
        if (!node)
          return false;
        if (node.type !== "OpaqueType")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isQualifiedTypeIdentifier(node, opts) {
        if (!node)
          return false;
        if (node.type !== "QualifiedTypeIdentifier")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isStringLiteralTypeAnnotation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "StringLiteralTypeAnnotation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isStringTypeAnnotation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "StringTypeAnnotation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isSymbolTypeAnnotation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "SymbolTypeAnnotation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isThisTypeAnnotation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ThisTypeAnnotation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTupleTypeAnnotation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TupleTypeAnnotation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTypeofTypeAnnotation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TypeofTypeAnnotation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTypeAlias(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TypeAlias")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTypeAnnotation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TypeAnnotation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTypeCastExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TypeCastExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTypeParameter(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TypeParameter")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTypeParameterDeclaration(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TypeParameterDeclaration")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTypeParameterInstantiation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TypeParameterInstantiation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isUnionTypeAnnotation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "UnionTypeAnnotation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isVariance(node, opts) {
        if (!node)
          return false;
        if (node.type !== "Variance")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isVoidTypeAnnotation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "VoidTypeAnnotation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isEnumDeclaration(node, opts) {
        if (!node)
          return false;
        if (node.type !== "EnumDeclaration")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isEnumBooleanBody(node, opts) {
        if (!node)
          return false;
        if (node.type !== "EnumBooleanBody")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isEnumNumberBody(node, opts) {
        if (!node)
          return false;
        if (node.type !== "EnumNumberBody")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isEnumStringBody(node, opts) {
        if (!node)
          return false;
        if (node.type !== "EnumStringBody")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isEnumSymbolBody(node, opts) {
        if (!node)
          return false;
        if (node.type !== "EnumSymbolBody")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isEnumBooleanMember(node, opts) {
        if (!node)
          return false;
        if (node.type !== "EnumBooleanMember")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isEnumNumberMember(node, opts) {
        if (!node)
          return false;
        if (node.type !== "EnumNumberMember")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isEnumStringMember(node, opts) {
        if (!node)
          return false;
        if (node.type !== "EnumStringMember")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isEnumDefaultedMember(node, opts) {
        if (!node)
          return false;
        if (node.type !== "EnumDefaultedMember")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isIndexedAccessType(node, opts) {
        if (!node)
          return false;
        if (node.type !== "IndexedAccessType")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isOptionalIndexedAccessType(node, opts) {
        if (!node)
          return false;
        if (node.type !== "OptionalIndexedAccessType")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isJSXAttribute(node, opts) {
        if (!node)
          return false;
        if (node.type !== "JSXAttribute")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isJSXClosingElement(node, opts) {
        if (!node)
          return false;
        if (node.type !== "JSXClosingElement")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isJSXElement(node, opts) {
        if (!node)
          return false;
        if (node.type !== "JSXElement")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isJSXEmptyExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "JSXEmptyExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isJSXExpressionContainer(node, opts) {
        if (!node)
          return false;
        if (node.type !== "JSXExpressionContainer")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isJSXSpreadChild(node, opts) {
        if (!node)
          return false;
        if (node.type !== "JSXSpreadChild")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isJSXIdentifier(node, opts) {
        if (!node)
          return false;
        if (node.type !== "JSXIdentifier")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isJSXMemberExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "JSXMemberExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isJSXNamespacedName(node, opts) {
        if (!node)
          return false;
        if (node.type !== "JSXNamespacedName")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isJSXOpeningElement(node, opts) {
        if (!node)
          return false;
        if (node.type !== "JSXOpeningElement")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isJSXSpreadAttribute(node, opts) {
        if (!node)
          return false;
        if (node.type !== "JSXSpreadAttribute")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isJSXText(node, opts) {
        if (!node)
          return false;
        if (node.type !== "JSXText")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isJSXFragment(node, opts) {
        if (!node)
          return false;
        if (node.type !== "JSXFragment")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isJSXOpeningFragment(node, opts) {
        if (!node)
          return false;
        if (node.type !== "JSXOpeningFragment")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isJSXClosingFragment(node, opts) {
        if (!node)
          return false;
        if (node.type !== "JSXClosingFragment")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isNoop(node, opts) {
        if (!node)
          return false;
        if (node.type !== "Noop")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isPlaceholder(node, opts) {
        if (!node)
          return false;
        if (node.type !== "Placeholder")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isV8IntrinsicIdentifier(node, opts) {
        if (!node)
          return false;
        if (node.type !== "V8IntrinsicIdentifier")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isArgumentPlaceholder(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ArgumentPlaceholder")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isBindExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "BindExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isImportAttribute(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ImportAttribute")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isDecorator(node, opts) {
        if (!node)
          return false;
        if (node.type !== "Decorator")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isDoExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "DoExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isExportDefaultSpecifier(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ExportDefaultSpecifier")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isRecordExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "RecordExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTupleExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TupleExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isDecimalLiteral(node, opts) {
        if (!node)
          return false;
        if (node.type !== "DecimalLiteral")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isModuleExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ModuleExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTopicReference(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TopicReference")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isPipelineTopicExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "PipelineTopicExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isPipelineBareFunction(node, opts) {
        if (!node)
          return false;
        if (node.type !== "PipelineBareFunction")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isPipelinePrimaryTopicReference(node, opts) {
        if (!node)
          return false;
        if (node.type !== "PipelinePrimaryTopicReference")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSParameterProperty(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSParameterProperty")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSDeclareFunction(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSDeclareFunction")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSDeclareMethod(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSDeclareMethod")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSQualifiedName(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSQualifiedName")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSCallSignatureDeclaration(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSCallSignatureDeclaration")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSConstructSignatureDeclaration(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSConstructSignatureDeclaration")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSPropertySignature(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSPropertySignature")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSMethodSignature(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSMethodSignature")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSIndexSignature(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSIndexSignature")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSAnyKeyword(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSAnyKeyword")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSBooleanKeyword(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSBooleanKeyword")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSBigIntKeyword(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSBigIntKeyword")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSIntrinsicKeyword(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSIntrinsicKeyword")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSNeverKeyword(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSNeverKeyword")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSNullKeyword(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSNullKeyword")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSNumberKeyword(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSNumberKeyword")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSObjectKeyword(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSObjectKeyword")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSStringKeyword(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSStringKeyword")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSSymbolKeyword(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSSymbolKeyword")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSUndefinedKeyword(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSUndefinedKeyword")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSUnknownKeyword(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSUnknownKeyword")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSVoidKeyword(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSVoidKeyword")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSThisType(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSThisType")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSFunctionType(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSFunctionType")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSConstructorType(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSConstructorType")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSTypeReference(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSTypeReference")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSTypePredicate(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSTypePredicate")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSTypeQuery(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSTypeQuery")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSTypeLiteral(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSTypeLiteral")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSArrayType(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSArrayType")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSTupleType(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSTupleType")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSOptionalType(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSOptionalType")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSRestType(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSRestType")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSNamedTupleMember(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSNamedTupleMember")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSUnionType(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSUnionType")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSIntersectionType(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSIntersectionType")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSConditionalType(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSConditionalType")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSInferType(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSInferType")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSParenthesizedType(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSParenthesizedType")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSTypeOperator(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSTypeOperator")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSIndexedAccessType(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSIndexedAccessType")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSMappedType(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSMappedType")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSLiteralType(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSLiteralType")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSExpressionWithTypeArguments(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSExpressionWithTypeArguments")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSInterfaceDeclaration(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSInterfaceDeclaration")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSInterfaceBody(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSInterfaceBody")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSTypeAliasDeclaration(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSTypeAliasDeclaration")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSInstantiationExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSInstantiationExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSAsExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSAsExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSSatisfiesExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSSatisfiesExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSTypeAssertion(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSTypeAssertion")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSEnumDeclaration(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSEnumDeclaration")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSEnumMember(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSEnumMember")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSModuleDeclaration(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSModuleDeclaration")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSModuleBlock(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSModuleBlock")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSImportType(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSImportType")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSImportEqualsDeclaration(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSImportEqualsDeclaration")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSExternalModuleReference(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSExternalModuleReference")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSNonNullExpression(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSNonNullExpression")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSExportAssignment(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSExportAssignment")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSNamespaceExportDeclaration(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSNamespaceExportDeclaration")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSTypeAnnotation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSTypeAnnotation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSTypeParameterInstantiation(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSTypeParameterInstantiation")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSTypeParameterDeclaration(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSTypeParameterDeclaration")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSTypeParameter(node, opts) {
        if (!node)
          return false;
        if (node.type !== "TSTypeParameter")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isStandardized(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ArrayExpression":
          case "AssignmentExpression":
          case "BinaryExpression":
          case "InterpreterDirective":
          case "Directive":
          case "DirectiveLiteral":
          case "BlockStatement":
          case "BreakStatement":
          case "CallExpression":
          case "CatchClause":
          case "ConditionalExpression":
          case "ContinueStatement":
          case "DebuggerStatement":
          case "DoWhileStatement":
          case "EmptyStatement":
          case "ExpressionStatement":
          case "File":
          case "ForInStatement":
          case "ForStatement":
          case "FunctionDeclaration":
          case "FunctionExpression":
          case "Identifier":
          case "IfStatement":
          case "LabeledStatement":
          case "StringLiteral":
          case "NumericLiteral":
          case "NullLiteral":
          case "BooleanLiteral":
          case "RegExpLiteral":
          case "LogicalExpression":
          case "MemberExpression":
          case "NewExpression":
          case "Program":
          case "ObjectExpression":
          case "ObjectMethod":
          case "ObjectProperty":
          case "RestElement":
          case "ReturnStatement":
          case "SequenceExpression":
          case "ParenthesizedExpression":
          case "SwitchCase":
          case "SwitchStatement":
          case "ThisExpression":
          case "ThrowStatement":
          case "TryStatement":
          case "UnaryExpression":
          case "UpdateExpression":
          case "VariableDeclaration":
          case "VariableDeclarator":
          case "WhileStatement":
          case "WithStatement":
          case "AssignmentPattern":
          case "ArrayPattern":
          case "ArrowFunctionExpression":
          case "ClassBody":
          case "ClassExpression":
          case "ClassDeclaration":
          case "ExportAllDeclaration":
          case "ExportDefaultDeclaration":
          case "ExportNamedDeclaration":
          case "ExportSpecifier":
          case "ForOfStatement":
          case "ImportDeclaration":
          case "ImportDefaultSpecifier":
          case "ImportNamespaceSpecifier":
          case "ImportSpecifier":
          case "ImportExpression":
          case "MetaProperty":
          case "ClassMethod":
          case "ObjectPattern":
          case "SpreadElement":
          case "Super":
          case "TaggedTemplateExpression":
          case "TemplateElement":
          case "TemplateLiteral":
          case "YieldExpression":
          case "AwaitExpression":
          case "Import":
          case "BigIntLiteral":
          case "ExportNamespaceSpecifier":
          case "OptionalMemberExpression":
          case "OptionalCallExpression":
          case "ClassProperty":
          case "ClassAccessorProperty":
          case "ClassPrivateProperty":
          case "ClassPrivateMethod":
          case "PrivateName":
          case "StaticBlock":
            break;
          case "Placeholder":
            switch (node.expectedNode) {
              case "Identifier":
              case "StringLiteral":
              case "BlockStatement":
              case "ClassBody":
                break;
              default:
                return false;
            }
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isExpression(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ArrayExpression":
          case "AssignmentExpression":
          case "BinaryExpression":
          case "CallExpression":
          case "ConditionalExpression":
          case "FunctionExpression":
          case "Identifier":
          case "StringLiteral":
          case "NumericLiteral":
          case "NullLiteral":
          case "BooleanLiteral":
          case "RegExpLiteral":
          case "LogicalExpression":
          case "MemberExpression":
          case "NewExpression":
          case "ObjectExpression":
          case "SequenceExpression":
          case "ParenthesizedExpression":
          case "ThisExpression":
          case "UnaryExpression":
          case "UpdateExpression":
          case "ArrowFunctionExpression":
          case "ClassExpression":
          case "ImportExpression":
          case "MetaProperty":
          case "Super":
          case "TaggedTemplateExpression":
          case "TemplateLiteral":
          case "YieldExpression":
          case "AwaitExpression":
          case "Import":
          case "BigIntLiteral":
          case "OptionalMemberExpression":
          case "OptionalCallExpression":
          case "TypeCastExpression":
          case "JSXElement":
          case "JSXFragment":
          case "BindExpression":
          case "DoExpression":
          case "RecordExpression":
          case "TupleExpression":
          case "DecimalLiteral":
          case "ModuleExpression":
          case "TopicReference":
          case "PipelineTopicExpression":
          case "PipelineBareFunction":
          case "PipelinePrimaryTopicReference":
          case "TSInstantiationExpression":
          case "TSAsExpression":
          case "TSSatisfiesExpression":
          case "TSTypeAssertion":
          case "TSNonNullExpression":
            break;
          case "Placeholder":
            switch (node.expectedNode) {
              case "Expression":
              case "Identifier":
              case "StringLiteral":
                break;
              default:
                return false;
            }
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isBinary(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "BinaryExpression":
          case "LogicalExpression":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isScopable(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "BlockStatement":
          case "CatchClause":
          case "DoWhileStatement":
          case "ForInStatement":
          case "ForStatement":
          case "FunctionDeclaration":
          case "FunctionExpression":
          case "Program":
          case "ObjectMethod":
          case "SwitchStatement":
          case "WhileStatement":
          case "ArrowFunctionExpression":
          case "ClassExpression":
          case "ClassDeclaration":
          case "ForOfStatement":
          case "ClassMethod":
          case "ClassPrivateMethod":
          case "StaticBlock":
          case "TSModuleBlock":
            break;
          case "Placeholder":
            if (node.expectedNode === "BlockStatement")
              break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isBlockParent(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "BlockStatement":
          case "CatchClause":
          case "DoWhileStatement":
          case "ForInStatement":
          case "ForStatement":
          case "FunctionDeclaration":
          case "FunctionExpression":
          case "Program":
          case "ObjectMethod":
          case "SwitchStatement":
          case "WhileStatement":
          case "ArrowFunctionExpression":
          case "ForOfStatement":
          case "ClassMethod":
          case "ClassPrivateMethod":
          case "StaticBlock":
          case "TSModuleBlock":
            break;
          case "Placeholder":
            if (node.expectedNode === "BlockStatement")
              break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isBlock(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "BlockStatement":
          case "Program":
          case "TSModuleBlock":
            break;
          case "Placeholder":
            if (node.expectedNode === "BlockStatement")
              break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isStatement(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "BlockStatement":
          case "BreakStatement":
          case "ContinueStatement":
          case "DebuggerStatement":
          case "DoWhileStatement":
          case "EmptyStatement":
          case "ExpressionStatement":
          case "ForInStatement":
          case "ForStatement":
          case "FunctionDeclaration":
          case "IfStatement":
          case "LabeledStatement":
          case "ReturnStatement":
          case "SwitchStatement":
          case "ThrowStatement":
          case "TryStatement":
          case "VariableDeclaration":
          case "WhileStatement":
          case "WithStatement":
          case "ClassDeclaration":
          case "ExportAllDeclaration":
          case "ExportDefaultDeclaration":
          case "ExportNamedDeclaration":
          case "ForOfStatement":
          case "ImportDeclaration":
          case "DeclareClass":
          case "DeclareFunction":
          case "DeclareInterface":
          case "DeclareModule":
          case "DeclareModuleExports":
          case "DeclareTypeAlias":
          case "DeclareOpaqueType":
          case "DeclareVariable":
          case "DeclareExportDeclaration":
          case "DeclareExportAllDeclaration":
          case "InterfaceDeclaration":
          case "OpaqueType":
          case "TypeAlias":
          case "EnumDeclaration":
          case "TSDeclareFunction":
          case "TSInterfaceDeclaration":
          case "TSTypeAliasDeclaration":
          case "TSEnumDeclaration":
          case "TSModuleDeclaration":
          case "TSImportEqualsDeclaration":
          case "TSExportAssignment":
          case "TSNamespaceExportDeclaration":
            break;
          case "Placeholder":
            switch (node.expectedNode) {
              case "Statement":
              case "Declaration":
              case "BlockStatement":
                break;
              default:
                return false;
            }
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTerminatorless(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "BreakStatement":
          case "ContinueStatement":
          case "ReturnStatement":
          case "ThrowStatement":
          case "YieldExpression":
          case "AwaitExpression":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isCompletionStatement(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "BreakStatement":
          case "ContinueStatement":
          case "ReturnStatement":
          case "ThrowStatement":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isConditional(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ConditionalExpression":
          case "IfStatement":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isLoop(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "DoWhileStatement":
          case "ForInStatement":
          case "ForStatement":
          case "WhileStatement":
          case "ForOfStatement":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isWhile(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "DoWhileStatement":
          case "WhileStatement":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isExpressionWrapper(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ExpressionStatement":
          case "ParenthesizedExpression":
          case "TypeCastExpression":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isFor(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ForInStatement":
          case "ForStatement":
          case "ForOfStatement":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isForXStatement(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ForInStatement":
          case "ForOfStatement":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isFunction(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "FunctionDeclaration":
          case "FunctionExpression":
          case "ObjectMethod":
          case "ArrowFunctionExpression":
          case "ClassMethod":
          case "ClassPrivateMethod":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isFunctionParent(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "FunctionDeclaration":
          case "FunctionExpression":
          case "ObjectMethod":
          case "ArrowFunctionExpression":
          case "ClassMethod":
          case "ClassPrivateMethod":
          case "StaticBlock":
          case "TSModuleBlock":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isPureish(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "FunctionDeclaration":
          case "FunctionExpression":
          case "StringLiteral":
          case "NumericLiteral":
          case "NullLiteral":
          case "BooleanLiteral":
          case "RegExpLiteral":
          case "ArrowFunctionExpression":
          case "BigIntLiteral":
          case "DecimalLiteral":
            break;
          case "Placeholder":
            if (node.expectedNode === "StringLiteral")
              break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isDeclaration(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "FunctionDeclaration":
          case "VariableDeclaration":
          case "ClassDeclaration":
          case "ExportAllDeclaration":
          case "ExportDefaultDeclaration":
          case "ExportNamedDeclaration":
          case "ImportDeclaration":
          case "DeclareClass":
          case "DeclareFunction":
          case "DeclareInterface":
          case "DeclareModule":
          case "DeclareModuleExports":
          case "DeclareTypeAlias":
          case "DeclareOpaqueType":
          case "DeclareVariable":
          case "DeclareExportDeclaration":
          case "DeclareExportAllDeclaration":
          case "InterfaceDeclaration":
          case "OpaqueType":
          case "TypeAlias":
          case "EnumDeclaration":
          case "TSDeclareFunction":
          case "TSInterfaceDeclaration":
          case "TSTypeAliasDeclaration":
          case "TSEnumDeclaration":
          case "TSModuleDeclaration":
            break;
          case "Placeholder":
            if (node.expectedNode === "Declaration")
              break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isPatternLike(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "Identifier":
          case "RestElement":
          case "AssignmentPattern":
          case "ArrayPattern":
          case "ObjectPattern":
          case "TSAsExpression":
          case "TSSatisfiesExpression":
          case "TSTypeAssertion":
          case "TSNonNullExpression":
            break;
          case "Placeholder":
            switch (node.expectedNode) {
              case "Pattern":
              case "Identifier":
                break;
              default:
                return false;
            }
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isLVal(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "Identifier":
          case "MemberExpression":
          case "RestElement":
          case "AssignmentPattern":
          case "ArrayPattern":
          case "ObjectPattern":
          case "TSParameterProperty":
          case "TSAsExpression":
          case "TSSatisfiesExpression":
          case "TSTypeAssertion":
          case "TSNonNullExpression":
            break;
          case "Placeholder":
            switch (node.expectedNode) {
              case "Pattern":
              case "Identifier":
                break;
              default:
                return false;
            }
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSEntityName(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "Identifier":
          case "TSQualifiedName":
            break;
          case "Placeholder":
            if (node.expectedNode === "Identifier")
              break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isLiteral(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "StringLiteral":
          case "NumericLiteral":
          case "NullLiteral":
          case "BooleanLiteral":
          case "RegExpLiteral":
          case "TemplateLiteral":
          case "BigIntLiteral":
          case "DecimalLiteral":
            break;
          case "Placeholder":
            if (node.expectedNode === "StringLiteral")
              break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isImmutable(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "StringLiteral":
          case "NumericLiteral":
          case "NullLiteral":
          case "BooleanLiteral":
          case "BigIntLiteral":
          case "JSXAttribute":
          case "JSXClosingElement":
          case "JSXElement":
          case "JSXExpressionContainer":
          case "JSXSpreadChild":
          case "JSXOpeningElement":
          case "JSXText":
          case "JSXFragment":
          case "JSXOpeningFragment":
          case "JSXClosingFragment":
          case "DecimalLiteral":
            break;
          case "Placeholder":
            if (node.expectedNode === "StringLiteral")
              break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isUserWhitespacable(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ObjectMethod":
          case "ObjectProperty":
          case "ObjectTypeInternalSlot":
          case "ObjectTypeCallProperty":
          case "ObjectTypeIndexer":
          case "ObjectTypeProperty":
          case "ObjectTypeSpreadProperty":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isMethod(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ObjectMethod":
          case "ClassMethod":
          case "ClassPrivateMethod":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isObjectMember(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ObjectMethod":
          case "ObjectProperty":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isProperty(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ObjectProperty":
          case "ClassProperty":
          case "ClassAccessorProperty":
          case "ClassPrivateProperty":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isUnaryLike(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "UnaryExpression":
          case "SpreadElement":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isPattern(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "AssignmentPattern":
          case "ArrayPattern":
          case "ObjectPattern":
            break;
          case "Placeholder":
            if (node.expectedNode === "Pattern")
              break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isClass(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ClassExpression":
          case "ClassDeclaration":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isImportOrExportDeclaration(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ExportAllDeclaration":
          case "ExportDefaultDeclaration":
          case "ExportNamedDeclaration":
          case "ImportDeclaration":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isExportDeclaration(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ExportAllDeclaration":
          case "ExportDefaultDeclaration":
          case "ExportNamedDeclaration":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isModuleSpecifier(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ExportSpecifier":
          case "ImportDefaultSpecifier":
          case "ImportNamespaceSpecifier":
          case "ImportSpecifier":
          case "ExportNamespaceSpecifier":
          case "ExportDefaultSpecifier":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isAccessor(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ClassAccessorProperty":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isPrivate(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ClassPrivateProperty":
          case "ClassPrivateMethod":
          case "PrivateName":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isFlow(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "AnyTypeAnnotation":
          case "ArrayTypeAnnotation":
          case "BooleanTypeAnnotation":
          case "BooleanLiteralTypeAnnotation":
          case "NullLiteralTypeAnnotation":
          case "ClassImplements":
          case "DeclareClass":
          case "DeclareFunction":
          case "DeclareInterface":
          case "DeclareModule":
          case "DeclareModuleExports":
          case "DeclareTypeAlias":
          case "DeclareOpaqueType":
          case "DeclareVariable":
          case "DeclareExportDeclaration":
          case "DeclareExportAllDeclaration":
          case "DeclaredPredicate":
          case "ExistsTypeAnnotation":
          case "FunctionTypeAnnotation":
          case "FunctionTypeParam":
          case "GenericTypeAnnotation":
          case "InferredPredicate":
          case "InterfaceExtends":
          case "InterfaceDeclaration":
          case "InterfaceTypeAnnotation":
          case "IntersectionTypeAnnotation":
          case "MixedTypeAnnotation":
          case "EmptyTypeAnnotation":
          case "NullableTypeAnnotation":
          case "NumberLiteralTypeAnnotation":
          case "NumberTypeAnnotation":
          case "ObjectTypeAnnotation":
          case "ObjectTypeInternalSlot":
          case "ObjectTypeCallProperty":
          case "ObjectTypeIndexer":
          case "ObjectTypeProperty":
          case "ObjectTypeSpreadProperty":
          case "OpaqueType":
          case "QualifiedTypeIdentifier":
          case "StringLiteralTypeAnnotation":
          case "StringTypeAnnotation":
          case "SymbolTypeAnnotation":
          case "ThisTypeAnnotation":
          case "TupleTypeAnnotation":
          case "TypeofTypeAnnotation":
          case "TypeAlias":
          case "TypeAnnotation":
          case "TypeCastExpression":
          case "TypeParameter":
          case "TypeParameterDeclaration":
          case "TypeParameterInstantiation":
          case "UnionTypeAnnotation":
          case "Variance":
          case "VoidTypeAnnotation":
          case "EnumDeclaration":
          case "EnumBooleanBody":
          case "EnumNumberBody":
          case "EnumStringBody":
          case "EnumSymbolBody":
          case "EnumBooleanMember":
          case "EnumNumberMember":
          case "EnumStringMember":
          case "EnumDefaultedMember":
          case "IndexedAccessType":
          case "OptionalIndexedAccessType":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isFlowType(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "AnyTypeAnnotation":
          case "ArrayTypeAnnotation":
          case "BooleanTypeAnnotation":
          case "BooleanLiteralTypeAnnotation":
          case "NullLiteralTypeAnnotation":
          case "ExistsTypeAnnotation":
          case "FunctionTypeAnnotation":
          case "GenericTypeAnnotation":
          case "InterfaceTypeAnnotation":
          case "IntersectionTypeAnnotation":
          case "MixedTypeAnnotation":
          case "EmptyTypeAnnotation":
          case "NullableTypeAnnotation":
          case "NumberLiteralTypeAnnotation":
          case "NumberTypeAnnotation":
          case "ObjectTypeAnnotation":
          case "StringLiteralTypeAnnotation":
          case "StringTypeAnnotation":
          case "SymbolTypeAnnotation":
          case "ThisTypeAnnotation":
          case "TupleTypeAnnotation":
          case "TypeofTypeAnnotation":
          case "UnionTypeAnnotation":
          case "VoidTypeAnnotation":
          case "IndexedAccessType":
          case "OptionalIndexedAccessType":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isFlowBaseAnnotation(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "AnyTypeAnnotation":
          case "BooleanTypeAnnotation":
          case "NullLiteralTypeAnnotation":
          case "MixedTypeAnnotation":
          case "EmptyTypeAnnotation":
          case "NumberTypeAnnotation":
          case "StringTypeAnnotation":
          case "SymbolTypeAnnotation":
          case "ThisTypeAnnotation":
          case "VoidTypeAnnotation":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isFlowDeclaration(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "DeclareClass":
          case "DeclareFunction":
          case "DeclareInterface":
          case "DeclareModule":
          case "DeclareModuleExports":
          case "DeclareTypeAlias":
          case "DeclareOpaqueType":
          case "DeclareVariable":
          case "DeclareExportDeclaration":
          case "DeclareExportAllDeclaration":
          case "InterfaceDeclaration":
          case "OpaqueType":
          case "TypeAlias":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isFlowPredicate(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "DeclaredPredicate":
          case "InferredPredicate":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isEnumBody(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "EnumBooleanBody":
          case "EnumNumberBody":
          case "EnumStringBody":
          case "EnumSymbolBody":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isEnumMember(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "EnumBooleanMember":
          case "EnumNumberMember":
          case "EnumStringMember":
          case "EnumDefaultedMember":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isJSX(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "JSXAttribute":
          case "JSXClosingElement":
          case "JSXElement":
          case "JSXEmptyExpression":
          case "JSXExpressionContainer":
          case "JSXSpreadChild":
          case "JSXIdentifier":
          case "JSXMemberExpression":
          case "JSXNamespacedName":
          case "JSXOpeningElement":
          case "JSXSpreadAttribute":
          case "JSXText":
          case "JSXFragment":
          case "JSXOpeningFragment":
          case "JSXClosingFragment":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isMiscellaneous(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "Noop":
          case "Placeholder":
          case "V8IntrinsicIdentifier":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTypeScript(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "TSParameterProperty":
          case "TSDeclareFunction":
          case "TSDeclareMethod":
          case "TSQualifiedName":
          case "TSCallSignatureDeclaration":
          case "TSConstructSignatureDeclaration":
          case "TSPropertySignature":
          case "TSMethodSignature":
          case "TSIndexSignature":
          case "TSAnyKeyword":
          case "TSBooleanKeyword":
          case "TSBigIntKeyword":
          case "TSIntrinsicKeyword":
          case "TSNeverKeyword":
          case "TSNullKeyword":
          case "TSNumberKeyword":
          case "TSObjectKeyword":
          case "TSStringKeyword":
          case "TSSymbolKeyword":
          case "TSUndefinedKeyword":
          case "TSUnknownKeyword":
          case "TSVoidKeyword":
          case "TSThisType":
          case "TSFunctionType":
          case "TSConstructorType":
          case "TSTypeReference":
          case "TSTypePredicate":
          case "TSTypeQuery":
          case "TSTypeLiteral":
          case "TSArrayType":
          case "TSTupleType":
          case "TSOptionalType":
          case "TSRestType":
          case "TSNamedTupleMember":
          case "TSUnionType":
          case "TSIntersectionType":
          case "TSConditionalType":
          case "TSInferType":
          case "TSParenthesizedType":
          case "TSTypeOperator":
          case "TSIndexedAccessType":
          case "TSMappedType":
          case "TSLiteralType":
          case "TSExpressionWithTypeArguments":
          case "TSInterfaceDeclaration":
          case "TSInterfaceBody":
          case "TSTypeAliasDeclaration":
          case "TSInstantiationExpression":
          case "TSAsExpression":
          case "TSSatisfiesExpression":
          case "TSTypeAssertion":
          case "TSEnumDeclaration":
          case "TSEnumMember":
          case "TSModuleDeclaration":
          case "TSModuleBlock":
          case "TSImportType":
          case "TSImportEqualsDeclaration":
          case "TSExternalModuleReference":
          case "TSNonNullExpression":
          case "TSExportAssignment":
          case "TSNamespaceExportDeclaration":
          case "TSTypeAnnotation":
          case "TSTypeParameterInstantiation":
          case "TSTypeParameterDeclaration":
          case "TSTypeParameter":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSTypeElement(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "TSCallSignatureDeclaration":
          case "TSConstructSignatureDeclaration":
          case "TSPropertySignature":
          case "TSMethodSignature":
          case "TSIndexSignature":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSType(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "TSAnyKeyword":
          case "TSBooleanKeyword":
          case "TSBigIntKeyword":
          case "TSIntrinsicKeyword":
          case "TSNeverKeyword":
          case "TSNullKeyword":
          case "TSNumberKeyword":
          case "TSObjectKeyword":
          case "TSStringKeyword":
          case "TSSymbolKeyword":
          case "TSUndefinedKeyword":
          case "TSUnknownKeyword":
          case "TSVoidKeyword":
          case "TSThisType":
          case "TSFunctionType":
          case "TSConstructorType":
          case "TSTypeReference":
          case "TSTypePredicate":
          case "TSTypeQuery":
          case "TSTypeLiteral":
          case "TSArrayType":
          case "TSTupleType":
          case "TSOptionalType":
          case "TSRestType":
          case "TSUnionType":
          case "TSIntersectionType":
          case "TSConditionalType":
          case "TSInferType":
          case "TSParenthesizedType":
          case "TSTypeOperator":
          case "TSIndexedAccessType":
          case "TSMappedType":
          case "TSLiteralType":
          case "TSExpressionWithTypeArguments":
          case "TSImportType":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isTSBaseType(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "TSAnyKeyword":
          case "TSBooleanKeyword":
          case "TSBigIntKeyword":
          case "TSIntrinsicKeyword":
          case "TSNeverKeyword":
          case "TSNullKeyword":
          case "TSNumberKeyword":
          case "TSObjectKeyword":
          case "TSStringKeyword":
          case "TSSymbolKeyword":
          case "TSUndefinedKeyword":
          case "TSUnknownKeyword":
          case "TSVoidKeyword":
          case "TSThisType":
          case "TSLiteralType":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isNumberLiteral(node, opts) {
        (0, _deprecationWarning.default)("isNumberLiteral", "isNumericLiteral");
        if (!node)
          return false;
        if (node.type !== "NumberLiteral")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isRegexLiteral(node, opts) {
        (0, _deprecationWarning.default)("isRegexLiteral", "isRegExpLiteral");
        if (!node)
          return false;
        if (node.type !== "RegexLiteral")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isRestProperty(node, opts) {
        (0, _deprecationWarning.default)("isRestProperty", "isRestElement");
        if (!node)
          return false;
        if (node.type !== "RestProperty")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isSpreadProperty(node, opts) {
        (0, _deprecationWarning.default)("isSpreadProperty", "isSpreadElement");
        if (!node)
          return false;
        if (node.type !== "SpreadProperty")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
      function isModuleDeclaration(node, opts) {
        (0, _deprecationWarning.default)("isModuleDeclaration", "isImportOrExportDeclaration");
        return isImportOrExportDeclaration(node, opts);
      }
    }
  });

  // node_modules/@babel/types/lib/validators/matchesPattern.js
  var require_matchesPattern = __commonJS({
    "node_modules/@babel/types/lib/validators/matchesPattern.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = matchesPattern;
      var _index = require_generated();
      function matchesPattern(member, match, allowPartial) {
        if (!(0, _index.isMemberExpression)(member))
          return false;
        const parts = Array.isArray(match) ? match : match.split(".");
        const nodes = [];
        let node;
        for (node = member; (0, _index.isMemberExpression)(node); node = node.object) {
          nodes.push(node.property);
        }
        nodes.push(node);
        if (nodes.length < parts.length)
          return false;
        if (!allowPartial && nodes.length > parts.length)
          return false;
        for (let i = 0, j = nodes.length - 1; i < parts.length; i++, j--) {
          const node2 = nodes[j];
          let value;
          if ((0, _index.isIdentifier)(node2)) {
            value = node2.name;
          } else if ((0, _index.isStringLiteral)(node2)) {
            value = node2.value;
          } else if ((0, _index.isThisExpression)(node2)) {
            value = "this";
          } else {
            return false;
          }
          if (parts[i] !== value)
            return false;
        }
        return true;
      }
    }
  });

  // node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js
  var require_buildMatchMemberExpression = __commonJS({
    "node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = buildMatchMemberExpression;
      var _matchesPattern = require_matchesPattern();
      function buildMatchMemberExpression(match, allowPartial) {
        const parts = match.split(".");
        return (member) => (0, _matchesPattern.default)(member, parts, allowPartial);
      }
    }
  });

  // node_modules/@babel/types/lib/validators/react/isReactComponent.js
  var require_isReactComponent = __commonJS({
    "node_modules/@babel/types/lib/validators/react/isReactComponent.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _buildMatchMemberExpression = require_buildMatchMemberExpression();
      var isReactComponent = (0, _buildMatchMemberExpression.default)("React.Component");
      var _default = exports.default = isReactComponent;
    }
  });

  // node_modules/@babel/types/lib/validators/react/isCompatTag.js
  var require_isCompatTag = __commonJS({
    "node_modules/@babel/types/lib/validators/react/isCompatTag.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = isCompatTag;
      function isCompatTag(tagName) {
        return !!tagName && /^[a-z]/.test(tagName);
      }
    }
  });

  // node_modules/to-fast-properties/index.js
  var require_to_fast_properties = __commonJS({
    "node_modules/to-fast-properties/index.js"(exports, module) {
      "use strict";
      init_esbuild_inject();
      var fastProto = null;
      function FastObject(o) {
        if (fastProto !== null && typeof fastProto.property) {
          const result = fastProto;
          fastProto = FastObject.prototype = null;
          return result;
        }
        fastProto = FastObject.prototype = o == null ? /* @__PURE__ */ Object.create(null) : o;
        return new FastObject();
      }
      FastObject();
      module.exports = function toFastproperties(o) {
        return FastObject(o);
      };
    }
  });

  // node_modules/@babel/types/lib/validators/isType.js
  var require_isType = __commonJS({
    "node_modules/@babel/types/lib/validators/isType.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = isType;
      var _index = require_definitions();
      function isType(nodeType, targetType) {
        if (nodeType === targetType)
          return true;
        if (nodeType == null)
          return false;
        if (_index.ALIAS_KEYS[targetType])
          return false;
        const aliases = _index.FLIPPED_ALIAS_KEYS[targetType];
        if (aliases) {
          if (aliases[0] === nodeType)
            return true;
          for (const alias of aliases) {
            if (nodeType === alias)
              return true;
          }
        }
        return false;
      }
    }
  });

  // node_modules/@babel/types/lib/validators/isPlaceholderType.js
  var require_isPlaceholderType = __commonJS({
    "node_modules/@babel/types/lib/validators/isPlaceholderType.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = isPlaceholderType;
      var _index = require_definitions();
      function isPlaceholderType(placeholderType, targetType) {
        if (placeholderType === targetType)
          return true;
        const aliases = _index.PLACEHOLDERS_ALIAS[placeholderType];
        if (aliases) {
          for (const alias of aliases) {
            if (targetType === alias)
              return true;
          }
        }
        return false;
      }
    }
  });

  // node_modules/@babel/types/lib/validators/is.js
  var require_is = __commonJS({
    "node_modules/@babel/types/lib/validators/is.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = is;
      var _shallowEqual = require_shallowEqual();
      var _isType = require_isType();
      var _isPlaceholderType = require_isPlaceholderType();
      var _index = require_definitions();
      function is(type, node, opts) {
        if (!node)
          return false;
        const matches = (0, _isType.default)(node.type, type);
        if (!matches) {
          if (!opts && node.type === "Placeholder" && type in _index.FLIPPED_ALIAS_KEYS) {
            return (0, _isPlaceholderType.default)(node.expectedNode, type);
          }
          return false;
        }
        if (typeof opts === "undefined") {
          return true;
        } else {
          return (0, _shallowEqual.default)(node, opts);
        }
      }
    }
  });

  // node_modules/@babel/helper-validator-identifier/lib/identifier.js
  var require_identifier = __commonJS({
    "node_modules/@babel/helper-validator-identifier/lib/identifier.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isIdentifierChar = isIdentifierChar2;
      exports.isIdentifierName = isIdentifierName;
      exports.isIdentifierStart = isIdentifierStart;
      var nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
      var nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\u30FB\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F\uFF65";
      var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
      var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
      nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
      var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];
      var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
      function isInAstralSet(code, set) {
        let pos = 65536;
        for (let i = 0, length = set.length; i < length; i += 2) {
          pos += set[i];
          if (pos > code)
            return false;
          pos += set[i + 1];
          if (pos >= code)
            return true;
        }
        return false;
      }
      function isIdentifierStart(code) {
        if (code < 65)
          return code === 36;
        if (code <= 90)
          return true;
        if (code < 97)
          return code === 95;
        if (code <= 122)
          return true;
        if (code <= 65535) {
          return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code));
        }
        return isInAstralSet(code, astralIdentifierStartCodes);
      }
      function isIdentifierChar2(code) {
        if (code < 48)
          return code === 36;
        if (code < 58)
          return true;
        if (code < 65)
          return false;
        if (code <= 90)
          return true;
        if (code < 97)
          return code === 95;
        if (code <= 122)
          return true;
        if (code <= 65535) {
          return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code));
        }
        return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
      }
      function isIdentifierName(name) {
        let isFirst = true;
        for (let i = 0; i < name.length; i++) {
          let cp = name.charCodeAt(i);
          if ((cp & 64512) === 55296 && i + 1 < name.length) {
            const trail = name.charCodeAt(++i);
            if ((trail & 64512) === 56320) {
              cp = 65536 + ((cp & 1023) << 10) + (trail & 1023);
            }
          }
          if (isFirst) {
            isFirst = false;
            if (!isIdentifierStart(cp)) {
              return false;
            }
          } else if (!isIdentifierChar2(cp)) {
            return false;
          }
        }
        return !isFirst;
      }
    }
  });

  // node_modules/@babel/helper-validator-identifier/lib/keyword.js
  var require_keyword = __commonJS({
    "node_modules/@babel/helper-validator-identifier/lib/keyword.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isKeyword = isKeyword;
      exports.isReservedWord = isReservedWord;
      exports.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord;
      exports.isStrictBindReservedWord = isStrictBindReservedWord;
      exports.isStrictReservedWord = isStrictReservedWord;
      var reservedWords = {
        keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
        strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
        strictBind: ["eval", "arguments"]
      };
      var keywords = new Set(reservedWords.keyword);
      var reservedWordsStrictSet = new Set(reservedWords.strict);
      var reservedWordsStrictBindSet = new Set(reservedWords.strictBind);
      function isReservedWord(word, inModule) {
        return inModule && word === "await" || word === "enum";
      }
      function isStrictReservedWord(word, inModule) {
        return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
      }
      function isStrictBindOnlyReservedWord(word) {
        return reservedWordsStrictBindSet.has(word);
      }
      function isStrictBindReservedWord(word, inModule) {
        return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
      }
      function isKeyword(word) {
        return keywords.has(word);
      }
    }
  });

  // node_modules/@babel/helper-validator-identifier/lib/index.js
  var require_lib = __commonJS({
    "node_modules/@babel/helper-validator-identifier/lib/index.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "isIdentifierChar", {
        enumerable: true,
        get: function() {
          return _identifier.isIdentifierChar;
        }
      });
      Object.defineProperty(exports, "isIdentifierName", {
        enumerable: true,
        get: function() {
          return _identifier.isIdentifierName;
        }
      });
      Object.defineProperty(exports, "isIdentifierStart", {
        enumerable: true,
        get: function() {
          return _identifier.isIdentifierStart;
        }
      });
      Object.defineProperty(exports, "isKeyword", {
        enumerable: true,
        get: function() {
          return _keyword.isKeyword;
        }
      });
      Object.defineProperty(exports, "isReservedWord", {
        enumerable: true,
        get: function() {
          return _keyword.isReservedWord;
        }
      });
      Object.defineProperty(exports, "isStrictBindOnlyReservedWord", {
        enumerable: true,
        get: function() {
          return _keyword.isStrictBindOnlyReservedWord;
        }
      });
      Object.defineProperty(exports, "isStrictBindReservedWord", {
        enumerable: true,
        get: function() {
          return _keyword.isStrictBindReservedWord;
        }
      });
      Object.defineProperty(exports, "isStrictReservedWord", {
        enumerable: true,
        get: function() {
          return _keyword.isStrictReservedWord;
        }
      });
      var _identifier = require_identifier();
      var _keyword = require_keyword();
    }
  });

  // node_modules/@babel/types/lib/validators/isValidIdentifier.js
  var require_isValidIdentifier = __commonJS({
    "node_modules/@babel/types/lib/validators/isValidIdentifier.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = isValidIdentifier;
      var _helperValidatorIdentifier = require_lib();
      function isValidIdentifier(name, reserved = true) {
        if (typeof name !== "string")
          return false;
        if (reserved) {
          if ((0, _helperValidatorIdentifier.isKeyword)(name) || (0, _helperValidatorIdentifier.isStrictReservedWord)(name, true)) {
            return false;
          }
        }
        return (0, _helperValidatorIdentifier.isIdentifierName)(name);
      }
    }
  });

  // node_modules/@babel/helper-string-parser/lib/index.js
  var require_lib2 = __commonJS({
    "node_modules/@babel/helper-string-parser/lib/index.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.readCodePoint = readCodePoint;
      exports.readInt = readInt;
      exports.readStringContents = readStringContents;
      var _isDigit = function isDigit(code) {
        return code >= 48 && code <= 57;
      };
      var forbiddenNumericSeparatorSiblings = {
        decBinOct: /* @__PURE__ */ new Set([46, 66, 69, 79, 95, 98, 101, 111]),
        hex: /* @__PURE__ */ new Set([46, 88, 95, 120])
      };
      var isAllowedNumericSeparatorSibling = {
        bin: (ch) => ch === 48 || ch === 49,
        oct: (ch) => ch >= 48 && ch <= 55,
        dec: (ch) => ch >= 48 && ch <= 57,
        hex: (ch) => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102
      };
      function readStringContents(type, input, pos, lineStart, curLine, errors) {
        const initialPos = pos;
        const initialLineStart = lineStart;
        const initialCurLine = curLine;
        let out = "";
        let firstInvalidLoc = null;
        let chunkStart = pos;
        const {
          length
        } = input;
        for (; ; ) {
          if (pos >= length) {
            errors.unterminated(initialPos, initialLineStart, initialCurLine);
            out += input.slice(chunkStart, pos);
            break;
          }
          const ch = input.charCodeAt(pos);
          if (isStringEnd(type, ch, input, pos)) {
            out += input.slice(chunkStart, pos);
            break;
          }
          if (ch === 92) {
            out += input.slice(chunkStart, pos);
            const res = readEscapedChar(input, pos, lineStart, curLine, type === "template", errors);
            if (res.ch === null && !firstInvalidLoc) {
              firstInvalidLoc = {
                pos,
                lineStart,
                curLine
              };
            } else {
              out += res.ch;
            }
            ({
              pos,
              lineStart,
              curLine
            } = res);
            chunkStart = pos;
          } else if (ch === 8232 || ch === 8233) {
            ++pos;
            ++curLine;
            lineStart = pos;
          } else if (ch === 10 || ch === 13) {
            if (type === "template") {
              out += input.slice(chunkStart, pos) + "\n";
              ++pos;
              if (ch === 13 && input.charCodeAt(pos) === 10) {
                ++pos;
              }
              ++curLine;
              chunkStart = lineStart = pos;
            } else {
              errors.unterminated(initialPos, initialLineStart, initialCurLine);
            }
          } else {
            ++pos;
          }
        }
        return {
          pos,
          str: out,
          firstInvalidLoc,
          lineStart,
          curLine,
          containsInvalid: !!firstInvalidLoc
        };
      }
      function isStringEnd(type, ch, input, pos) {
        if (type === "template") {
          return ch === 96 || ch === 36 && input.charCodeAt(pos + 1) === 123;
        }
        return ch === (type === "double" ? 34 : 39);
      }
      function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {
        const throwOnInvalid = !inTemplate;
        pos++;
        const res = (ch2) => ({
          pos,
          ch: ch2,
          lineStart,
          curLine
        });
        const ch = input.charCodeAt(pos++);
        switch (ch) {
          case 110:
            return res("\n");
          case 114:
            return res("\r");
          case 120: {
            let code;
            ({
              code,
              pos
            } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors));
            return res(code === null ? null : String.fromCharCode(code));
          }
          case 117: {
            let code;
            ({
              code,
              pos
            } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors));
            return res(code === null ? null : String.fromCodePoint(code));
          }
          case 116:
            return res("	");
          case 98:
            return res("\b");
          case 118:
            return res("\v");
          case 102:
            return res("\f");
          case 13:
            if (input.charCodeAt(pos) === 10) {
              ++pos;
            }
          case 10:
            lineStart = pos;
            ++curLine;
          case 8232:
          case 8233:
            return res("");
          case 56:
          case 57:
            if (inTemplate) {
              return res(null);
            } else {
              errors.strictNumericEscape(pos - 1, lineStart, curLine);
            }
          default:
            if (ch >= 48 && ch <= 55) {
              const startPos = pos - 1;
              const match = input.slice(startPos, pos + 2).match(/^[0-7]+/);
              let octalStr = match[0];
              let octal = parseInt(octalStr, 8);
              if (octal > 255) {
                octalStr = octalStr.slice(0, -1);
                octal = parseInt(octalStr, 8);
              }
              pos += octalStr.length - 1;
              const next = input.charCodeAt(pos);
              if (octalStr !== "0" || next === 56 || next === 57) {
                if (inTemplate) {
                  return res(null);
                } else {
                  errors.strictNumericEscape(startPos, lineStart, curLine);
                }
              }
              return res(String.fromCharCode(octal));
            }
            return res(String.fromCharCode(ch));
        }
      }
      function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {
        const initialPos = pos;
        let n;
        ({
          n,
          pos
        } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid));
        if (n === null) {
          if (throwOnInvalid) {
            errors.invalidEscapeSequence(initialPos, lineStart, curLine);
          } else {
            pos = initialPos - 1;
          }
        }
        return {
          code: n,
          pos
        };
      }
      function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {
        const start = pos;
        const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;
        const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
        let invalid = false;
        let total = 0;
        for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {
          const code = input.charCodeAt(pos);
          let val;
          if (code === 95 && allowNumSeparator !== "bail") {
            const prev = input.charCodeAt(pos - 1);
            const next = input.charCodeAt(pos + 1);
            if (!allowNumSeparator) {
              if (bailOnError)
                return {
                  n: null,
                  pos
                };
              errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);
            } else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
              if (bailOnError)
                return {
                  n: null,
                  pos
                };
              errors.unexpectedNumericSeparator(pos, lineStart, curLine);
            }
            ++pos;
            continue;
          }
          if (code >= 97) {
            val = code - 97 + 10;
          } else if (code >= 65) {
            val = code - 65 + 10;
          } else if (_isDigit(code)) {
            val = code - 48;
          } else {
            val = Infinity;
          }
          if (val >= radix) {
            if (val <= 9 && bailOnError) {
              return {
                n: null,
                pos
              };
            } else if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) {
              val = 0;
            } else if (forceLen) {
              val = 0;
              invalid = true;
            } else {
              break;
            }
          }
          ++pos;
          total = total * radix + val;
        }
        if (pos === start || len != null && pos - start !== len || invalid) {
          return {
            n: null,
            pos
          };
        }
        return {
          n: total,
          pos
        };
      }
      function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {
        const ch = input.charCodeAt(pos);
        let code;
        if (ch === 123) {
          ++pos;
          ({
            code,
            pos
          } = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors));
          ++pos;
          if (code !== null && code > 1114111) {
            if (throwOnInvalid) {
              errors.invalidCodePoint(pos, lineStart, curLine);
            } else {
              return {
                code: null,
                pos
              };
            }
          }
        } else {
          ({
            code,
            pos
          } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));
        }
        return {
          code,
          pos
        };
      }
    }
  });

  // node_modules/@babel/types/lib/constants/index.js
  var require_constants = __commonJS({
    "node_modules/@babel/types/lib/constants/index.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.UPDATE_OPERATORS = exports.UNARY_OPERATORS = exports.STRING_UNARY_OPERATORS = exports.STATEMENT_OR_BLOCK_KEYS = exports.NUMBER_UNARY_OPERATORS = exports.NUMBER_BINARY_OPERATORS = exports.NOT_LOCAL_BINDING = exports.LOGICAL_OPERATORS = exports.INHERIT_KEYS = exports.FOR_INIT_KEYS = exports.FLATTENABLE_KEYS = exports.EQUALITY_BINARY_OPERATORS = exports.COMPARISON_BINARY_OPERATORS = exports.COMMENT_KEYS = exports.BOOLEAN_UNARY_OPERATORS = exports.BOOLEAN_NUMBER_BINARY_OPERATORS = exports.BOOLEAN_BINARY_OPERATORS = exports.BLOCK_SCOPED_SYMBOL = exports.BINARY_OPERATORS = exports.ASSIGNMENT_OPERATORS = void 0;
      var STATEMENT_OR_BLOCK_KEYS = exports.STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"];
      var FLATTENABLE_KEYS = exports.FLATTENABLE_KEYS = ["body", "expressions"];
      var FOR_INIT_KEYS = exports.FOR_INIT_KEYS = ["left", "init"];
      var COMMENT_KEYS = exports.COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"];
      var LOGICAL_OPERATORS = exports.LOGICAL_OPERATORS = ["||", "&&", "??"];
      var UPDATE_OPERATORS = exports.UPDATE_OPERATORS = ["++", "--"];
      var BOOLEAN_NUMBER_BINARY_OPERATORS = exports.BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="];
      var EQUALITY_BINARY_OPERATORS = exports.EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="];
      var COMPARISON_BINARY_OPERATORS = exports.COMPARISON_BINARY_OPERATORS = [...EQUALITY_BINARY_OPERATORS, "in", "instanceof"];
      var BOOLEAN_BINARY_OPERATORS = exports.BOOLEAN_BINARY_OPERATORS = [...COMPARISON_BINARY_OPERATORS, ...BOOLEAN_NUMBER_BINARY_OPERATORS];
      var NUMBER_BINARY_OPERATORS = exports.NUMBER_BINARY_OPERATORS = ["-", "/", "%", "*", "**", "&", "|", ">>", ">>>", "<<", "^"];
      var BINARY_OPERATORS = exports.BINARY_OPERATORS = ["+", ...NUMBER_BINARY_OPERATORS, ...BOOLEAN_BINARY_OPERATORS, "|>"];
      var ASSIGNMENT_OPERATORS = exports.ASSIGNMENT_OPERATORS = ["=", "+=", ...NUMBER_BINARY_OPERATORS.map((op) => op + "="), ...LOGICAL_OPERATORS.map((op) => op + "=")];
      var BOOLEAN_UNARY_OPERATORS = exports.BOOLEAN_UNARY_OPERATORS = ["delete", "!"];
      var NUMBER_UNARY_OPERATORS = exports.NUMBER_UNARY_OPERATORS = ["+", "-", "~"];
      var STRING_UNARY_OPERATORS = exports.STRING_UNARY_OPERATORS = ["typeof"];
      var UNARY_OPERATORS = exports.UNARY_OPERATORS = ["void", "throw", ...BOOLEAN_UNARY_OPERATORS, ...NUMBER_UNARY_OPERATORS, ...STRING_UNARY_OPERATORS];
      var INHERIT_KEYS = exports.INHERIT_KEYS = {
        optional: ["typeAnnotation", "typeParameters", "returnType"],
        force: ["start", "loc", "end"]
      };
      var BLOCK_SCOPED_SYMBOL = exports.BLOCK_SCOPED_SYMBOL = Symbol.for("var used to be block scoped");
      var NOT_LOCAL_BINDING = exports.NOT_LOCAL_BINDING = Symbol.for("should not be considered a local binding");
    }
  });

  // node_modules/@babel/types/lib/definitions/utils.js
  var require_utils = __commonJS({
    "node_modules/@babel/types/lib/definitions/utils.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.VISITOR_KEYS = exports.NODE_PARENT_VALIDATIONS = exports.NODE_FIELDS = exports.FLIPPED_ALIAS_KEYS = exports.DEPRECATED_KEYS = exports.BUILDER_KEYS = exports.ALIAS_KEYS = void 0;
      exports.arrayOf = arrayOf;
      exports.arrayOfType = arrayOfType;
      exports.assertEach = assertEach;
      exports.assertNodeOrValueType = assertNodeOrValueType;
      exports.assertNodeType = assertNodeType;
      exports.assertOneOf = assertOneOf;
      exports.assertOptionalChainStart = assertOptionalChainStart;
      exports.assertShape = assertShape;
      exports.assertValueType = assertValueType;
      exports.chain = chain;
      exports.default = defineType;
      exports.defineAliasedType = defineAliasedType;
      exports.typeIs = typeIs;
      exports.validate = validate;
      exports.validateArrayOfType = validateArrayOfType;
      exports.validateOptional = validateOptional;
      exports.validateOptionalType = validateOptionalType;
      exports.validateType = validateType;
      var _is = require_is();
      var _validate = require_validate();
      var VISITOR_KEYS = exports.VISITOR_KEYS = {};
      var ALIAS_KEYS = exports.ALIAS_KEYS = {};
      var FLIPPED_ALIAS_KEYS = exports.FLIPPED_ALIAS_KEYS = {};
      var NODE_FIELDS = exports.NODE_FIELDS = {};
      var BUILDER_KEYS = exports.BUILDER_KEYS = {};
      var DEPRECATED_KEYS = exports.DEPRECATED_KEYS = {};
      var NODE_PARENT_VALIDATIONS = exports.NODE_PARENT_VALIDATIONS = {};
      function getType(val) {
        if (Array.isArray(val)) {
          return "array";
        } else if (val === null) {
          return "null";
        } else {
          return typeof val;
        }
      }
      function validate(validate2) {
        return {
          validate: validate2
        };
      }
      function typeIs(typeName) {
        return typeof typeName === "string" ? assertNodeType(typeName) : assertNodeType(...typeName);
      }
      function validateType(typeName) {
        return validate(typeIs(typeName));
      }
      function validateOptional(validate2) {
        return {
          validate: validate2,
          optional: true
        };
      }
      function validateOptionalType(typeName) {
        return {
          validate: typeIs(typeName),
          optional: true
        };
      }
      function arrayOf(elementType) {
        return chain(assertValueType("array"), assertEach(elementType));
      }
      function arrayOfType(typeName) {
        return arrayOf(typeIs(typeName));
      }
      function validateArrayOfType(typeName) {
        return validate(arrayOfType(typeName));
      }
      function assertEach(callback) {
        function validator(node, key, val) {
          if (!Array.isArray(val))
            return;
          for (let i = 0; i < val.length; i++) {
            const subkey = `${key}[${i}]`;
            const v = val[i];
            callback(node, subkey, v);
            if (process.env.BABEL_TYPES_8_BREAKING)
              (0, _validate.validateChild)(node, subkey, v);
          }
        }
        validator.each = callback;
        return validator;
      }
      function assertOneOf(...values2) {
        function validate2(node, key, val) {
          if (values2.indexOf(val) < 0) {
            throw new TypeError(`Property ${key} expected value to be one of ${JSON.stringify(values2)} but got ${JSON.stringify(val)}`);
          }
        }
        validate2.oneOf = values2;
        return validate2;
      }
      function assertNodeType(...types) {
        function validate2(node, key, val) {
          for (const type of types) {
            if ((0, _is.default)(type, val)) {
              (0, _validate.validateChild)(node, key, val);
              return;
            }
          }
          throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(val == null ? void 0 : val.type)}`);
        }
        validate2.oneOfNodeTypes = types;
        return validate2;
      }
      function assertNodeOrValueType(...types) {
        function validate2(node, key, val) {
          for (const type of types) {
            if (getType(val) === type || (0, _is.default)(type, val)) {
              (0, _validate.validateChild)(node, key, val);
              return;
            }
          }
          throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(val == null ? void 0 : val.type)}`);
        }
        validate2.oneOfNodeOrValueTypes = types;
        return validate2;
      }
      function assertValueType(type) {
        function validate2(node, key, val) {
          const valid = getType(val) === type;
          if (!valid) {
            throw new TypeError(`Property ${key} expected type of ${type} but got ${getType(val)}`);
          }
        }
        validate2.type = type;
        return validate2;
      }
      function assertShape(shape) {
        function validate2(node, key, val) {
          const errors = [];
          for (const property of Object.keys(shape)) {
            try {
              (0, _validate.validateField)(node, property, val[property], shape[property]);
            } catch (error) {
              if (error instanceof TypeError) {
                errors.push(error.message);
                continue;
              }
              throw error;
            }
          }
          if (errors.length) {
            throw new TypeError(`Property ${key} of ${node.type} expected to have the following:
${errors.join("\n")}`);
          }
        }
        validate2.shapeOf = shape;
        return validate2;
      }
      function assertOptionalChainStart() {
        function validate2(node) {
          var _current;
          let current = node;
          while (node) {
            const {
              type
            } = current;
            if (type === "OptionalCallExpression") {
              if (current.optional)
                return;
              current = current.callee;
              continue;
            }
            if (type === "OptionalMemberExpression") {
              if (current.optional)
                return;
              current = current.object;
              continue;
            }
            break;
          }
          throw new TypeError(`Non-optional ${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${(_current = current) == null ? void 0 : _current.type}`);
        }
        return validate2;
      }
      function chain(...fns) {
        function validate2(...args) {
          for (const fn of fns) {
            fn(...args);
          }
        }
        validate2.chainOf = fns;
        if (fns.length >= 2 && "type" in fns[0] && fns[0].type === "array" && !("each" in fns[1])) {
          throw new Error(`An assertValueType("array") validator can only be followed by an assertEach(...) validator.`);
        }
        return validate2;
      }
      var validTypeOpts = ["aliases", "builder", "deprecatedAlias", "fields", "inherits", "visitor", "validate"];
      var validFieldKeys = ["default", "optional", "deprecated", "validate"];
      var store = {};
      function defineAliasedType(...aliases) {
        return (type, opts = {}) => {
          let defined = opts.aliases;
          if (!defined) {
            var _store$opts$inherits$, _defined;
            if (opts.inherits)
              defined = (_store$opts$inherits$ = store[opts.inherits].aliases) == null ? void 0 : _store$opts$inherits$.slice();
            (_defined = defined) != null ? _defined : defined = [];
            opts.aliases = defined;
          }
          const additional = aliases.filter((a2) => !defined.includes(a2));
          defined.unshift(...additional);
          defineType(type, opts);
        };
      }
      function defineType(type, opts = {}) {
        const inherits = opts.inherits && store[opts.inherits] || {};
        let fields = opts.fields;
        if (!fields) {
          fields = {};
          if (inherits.fields) {
            const keys = Object.getOwnPropertyNames(inherits.fields);
            for (const key of keys) {
              const field = inherits.fields[key];
              const def = field.default;
              if (Array.isArray(def) ? def.length > 0 : def && typeof def === "object") {
                throw new Error("field defaults can only be primitives or empty arrays currently");
              }
              fields[key] = {
                default: Array.isArray(def) ? [] : def,
                optional: field.optional,
                deprecated: field.deprecated,
                validate: field.validate
              };
            }
          }
        }
        const visitor = opts.visitor || inherits.visitor || [];
        const aliases = opts.aliases || inherits.aliases || [];
        const builder = opts.builder || inherits.builder || opts.visitor || [];
        for (const k of Object.keys(opts)) {
          if (validTypeOpts.indexOf(k) === -1) {
            throw new Error(`Unknown type option "${k}" on ${type}`);
          }
        }
        if (opts.deprecatedAlias) {
          DEPRECATED_KEYS[opts.deprecatedAlias] = type;
        }
        for (const key of visitor.concat(builder)) {
          fields[key] = fields[key] || {};
        }
        for (const key of Object.keys(fields)) {
          const field = fields[key];
          if (field.default !== void 0 && builder.indexOf(key) === -1) {
            field.optional = true;
          }
          if (field.default === void 0) {
            field.default = null;
          } else if (!field.validate && field.default != null) {
            field.validate = assertValueType(getType(field.default));
          }
          for (const k of Object.keys(field)) {
            if (validFieldKeys.indexOf(k) === -1) {
              throw new Error(`Unknown field key "${k}" on ${type}.${key}`);
            }
          }
        }
        VISITOR_KEYS[type] = opts.visitor = visitor;
        BUILDER_KEYS[type] = opts.builder = builder;
        NODE_FIELDS[type] = opts.fields = fields;
        ALIAS_KEYS[type] = opts.aliases = aliases;
        aliases.forEach((alias) => {
          FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];
          FLIPPED_ALIAS_KEYS[alias].push(type);
        });
        if (opts.validate) {
          NODE_PARENT_VALIDATIONS[type] = opts.validate;
        }
        store[type] = opts;
      }
    }
  });

  // node_modules/@babel/types/lib/definitions/core.js
  var require_core = __commonJS({
    "node_modules/@babel/types/lib/definitions/core.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.patternLikeCommon = exports.functionTypeAnnotationCommon = exports.functionDeclarationCommon = exports.functionCommon = exports.classMethodOrPropertyCommon = exports.classMethodOrDeclareMethodCommon = void 0;
      var _is = require_is();
      var _isValidIdentifier = require_isValidIdentifier();
      var _helperValidatorIdentifier = require_lib();
      var _helperStringParser = require_lib2();
      var _index = require_constants();
      var _utils = require_utils();
      var defineType = (0, _utils.defineAliasedType)("Standardized");
      defineType("ArrayExpression", {
        fields: {
          elements: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeOrValueType)("null", "Expression", "SpreadElement"))),
            default: !process.env.BABEL_TYPES_8_BREAKING ? [] : void 0
          }
        },
        visitor: ["elements"],
        aliases: ["Expression"]
      });
      defineType("AssignmentExpression", {
        fields: {
          operator: {
            validate: function() {
              if (!process.env.BABEL_TYPES_8_BREAKING) {
                return (0, _utils.assertValueType)("string");
              }
              const identifier = (0, _utils.assertOneOf)(..._index.ASSIGNMENT_OPERATORS);
              const pattern = (0, _utils.assertOneOf)("=");
              return function(node, key, val) {
                const validator = (0, _is.default)("Pattern", node.left) ? pattern : identifier;
                validator(node, key, val);
              };
            }()
          },
          left: {
            validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("LVal", "OptionalMemberExpression") : (0, _utils.assertNodeType)("Identifier", "MemberExpression", "OptionalMemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression")
          },
          right: {
            validate: (0, _utils.assertNodeType)("Expression")
          }
        },
        builder: ["operator", "left", "right"],
        visitor: ["left", "right"],
        aliases: ["Expression"]
      });
      defineType("BinaryExpression", {
        builder: ["operator", "left", "right"],
        fields: {
          operator: {
            validate: (0, _utils.assertOneOf)(..._index.BINARY_OPERATORS)
          },
          left: {
            validate: function() {
              const expression = (0, _utils.assertNodeType)("Expression");
              const inOp = (0, _utils.assertNodeType)("Expression", "PrivateName");
              const validator = Object.assign(function(node, key, val) {
                const validator2 = node.operator === "in" ? inOp : expression;
                validator2(node, key, val);
              }, {
                oneOfNodeTypes: ["Expression", "PrivateName"]
              });
              return validator;
            }()
          },
          right: {
            validate: (0, _utils.assertNodeType)("Expression")
          }
        },
        visitor: ["left", "right"],
        aliases: ["Binary", "Expression"]
      });
      defineType("InterpreterDirective", {
        builder: ["value"],
        fields: {
          value: {
            validate: (0, _utils.assertValueType)("string")
          }
        }
      });
      defineType("Directive", {
        visitor: ["value"],
        fields: {
          value: {
            validate: (0, _utils.assertNodeType)("DirectiveLiteral")
          }
        }
      });
      defineType("DirectiveLiteral", {
        builder: ["value"],
        fields: {
          value: {
            validate: (0, _utils.assertValueType)("string")
          }
        }
      });
      defineType("BlockStatement", {
        builder: ["body", "directives"],
        visitor: ["directives", "body"],
        fields: {
          directives: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Directive"))),
            default: []
          },
          body: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement")))
          }
        },
        aliases: ["Scopable", "BlockParent", "Block", "Statement"]
      });
      defineType("BreakStatement", {
        visitor: ["label"],
        fields: {
          label: {
            validate: (0, _utils.assertNodeType)("Identifier"),
            optional: true
          }
        },
        aliases: ["Statement", "Terminatorless", "CompletionStatement"]
      });
      defineType("CallExpression", {
        visitor: ["callee", "arguments", "typeParameters", "typeArguments"],
        builder: ["callee", "arguments"],
        aliases: ["Expression"],
        fields: Object.assign({
          callee: {
            validate: (0, _utils.assertNodeType)("Expression", "Super", "V8IntrinsicIdentifier")
          },
          arguments: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "SpreadElement", "JSXNamespacedName", "ArgumentPlaceholder")))
          }
        }, !process.env.BABEL_TYPES_8_BREAKING ? {
          optional: {
            validate: (0, _utils.assertOneOf)(true, false),
            optional: true
          }
        } : {}, {
          typeArguments: {
            validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"),
            optional: true
          },
          typeParameters: {
            validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"),
            optional: true
          }
        })
      });
      defineType("CatchClause", {
        visitor: ["param", "body"],
        fields: {
          param: {
            validate: (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern"),
            optional: true
          },
          body: {
            validate: (0, _utils.assertNodeType)("BlockStatement")
          }
        },
        aliases: ["Scopable", "BlockParent"]
      });
      defineType("ConditionalExpression", {
        visitor: ["test", "consequent", "alternate"],
        fields: {
          test: {
            validate: (0, _utils.assertNodeType)("Expression")
          },
          consequent: {
            validate: (0, _utils.assertNodeType)("Expression")
          },
          alternate: {
            validate: (0, _utils.assertNodeType)("Expression")
          }
        },
        aliases: ["Expression", "Conditional"]
      });
      defineType("ContinueStatement", {
        visitor: ["label"],
        fields: {
          label: {
            validate: (0, _utils.assertNodeType)("Identifier"),
            optional: true
          }
        },
        aliases: ["Statement", "Terminatorless", "CompletionStatement"]
      });
      defineType("DebuggerStatement", {
        aliases: ["Statement"]
      });
      defineType("DoWhileStatement", {
        visitor: ["test", "body"],
        fields: {
          test: {
            validate: (0, _utils.assertNodeType)("Expression")
          },
          body: {
            validate: (0, _utils.assertNodeType)("Statement")
          }
        },
        aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"]
      });
      defineType("EmptyStatement", {
        aliases: ["Statement"]
      });
      defineType("ExpressionStatement", {
        visitor: ["expression"],
        fields: {
          expression: {
            validate: (0, _utils.assertNodeType)("Expression")
          }
        },
        aliases: ["Statement", "ExpressionWrapper"]
      });
      defineType("File", {
        builder: ["program", "comments", "tokens"],
        visitor: ["program"],
        fields: {
          program: {
            validate: (0, _utils.assertNodeType)("Program")
          },
          comments: {
            validate: !process.env.BABEL_TYPES_8_BREAKING ? Object.assign(() => {
            }, {
              each: {
                oneOfNodeTypes: ["CommentBlock", "CommentLine"]
              }
            }) : (0, _utils.assertEach)((0, _utils.assertNodeType)("CommentBlock", "CommentLine")),
            optional: true
          },
          tokens: {
            validate: (0, _utils.assertEach)(Object.assign(() => {
            }, {
              type: "any"
            })),
            optional: true
          }
        }
      });
      defineType("ForInStatement", {
        visitor: ["left", "right", "body"],
        aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
        fields: {
          left: {
            validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("VariableDeclaration", "LVal") : (0, _utils.assertNodeType)("VariableDeclaration", "Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression")
          },
          right: {
            validate: (0, _utils.assertNodeType)("Expression")
          },
          body: {
            validate: (0, _utils.assertNodeType)("Statement")
          }
        }
      });
      defineType("ForStatement", {
        visitor: ["init", "test", "update", "body"],
        aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"],
        fields: {
          init: {
            validate: (0, _utils.assertNodeType)("VariableDeclaration", "Expression"),
            optional: true
          },
          test: {
            validate: (0, _utils.assertNodeType)("Expression"),
            optional: true
          },
          update: {
            validate: (0, _utils.assertNodeType)("Expression"),
            optional: true
          },
          body: {
            validate: (0, _utils.assertNodeType)("Statement")
          }
        }
      });
      var functionCommon = () => ({
        params: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Identifier", "Pattern", "RestElement")))
        },
        generator: {
          default: false
        },
        async: {
          default: false
        }
      });
      exports.functionCommon = functionCommon;
      var functionTypeAnnotationCommon = () => ({
        returnType: {
          validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
          optional: true
        },
        typeParameters: {
          validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
          optional: true
        }
      });
      exports.functionTypeAnnotationCommon = functionTypeAnnotationCommon;
      var functionDeclarationCommon = () => Object.assign({}, functionCommon(), {
        declare: {
          validate: (0, _utils.assertValueType)("boolean"),
          optional: true
        },
        id: {
          validate: (0, _utils.assertNodeType)("Identifier"),
          optional: true
        }
      });
      exports.functionDeclarationCommon = functionDeclarationCommon;
      defineType("FunctionDeclaration", {
        builder: ["id", "params", "body", "generator", "async"],
        visitor: ["id", "params", "body", "returnType", "typeParameters"],
        fields: Object.assign({}, functionDeclarationCommon(), functionTypeAnnotationCommon(), {
          body: {
            validate: (0, _utils.assertNodeType)("BlockStatement")
          },
          predicate: {
            validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"),
            optional: true
          }
        }),
        aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Statement", "Pureish", "Declaration"],
        validate: function() {
          if (!process.env.BABEL_TYPES_8_BREAKING)
            return () => {
            };
          const identifier = (0, _utils.assertNodeType)("Identifier");
          return function(parent, key, node) {
            if (!(0, _is.default)("ExportDefaultDeclaration", parent)) {
              identifier(node, "id", node.id);
            }
          };
        }()
      });
      defineType("FunctionExpression", {
        inherits: "FunctionDeclaration",
        aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
        fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), {
          id: {
            validate: (0, _utils.assertNodeType)("Identifier"),
            optional: true
          },
          body: {
            validate: (0, _utils.assertNodeType)("BlockStatement")
          },
          predicate: {
            validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"),
            optional: true
          }
        })
      });
      var patternLikeCommon = () => ({
        typeAnnotation: {
          validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
          optional: true
        },
        optional: {
          validate: (0, _utils.assertValueType)("boolean"),
          optional: true
        },
        decorators: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
          optional: true
        }
      });
      exports.patternLikeCommon = patternLikeCommon;
      defineType("Identifier", {
        builder: ["name"],
        visitor: ["typeAnnotation", "decorators"],
        aliases: ["Expression", "PatternLike", "LVal", "TSEntityName"],
        fields: Object.assign({}, patternLikeCommon(), {
          name: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function(node, key, val) {
              if (!process.env.BABEL_TYPES_8_BREAKING)
                return;
              if (!(0, _isValidIdentifier.default)(val, false)) {
                throw new TypeError(`"${val}" is not a valid identifier name`);
              }
            }, {
              type: "string"
            }))
          }
        }),
        validate(parent, key, node) {
          if (!process.env.BABEL_TYPES_8_BREAKING)
            return;
          const match = /\.(\w+)$/.exec(key);
          if (!match)
            return;
          const [, parentKey] = match;
          const nonComp = {
            computed: false
          };
          if (parentKey === "property") {
            if ((0, _is.default)("MemberExpression", parent, nonComp))
              return;
            if ((0, _is.default)("OptionalMemberExpression", parent, nonComp))
              return;
          } else if (parentKey === "key") {
            if ((0, _is.default)("Property", parent, nonComp))
              return;
            if ((0, _is.default)("Method", parent, nonComp))
              return;
          } else if (parentKey === "exported") {
            if ((0, _is.default)("ExportSpecifier", parent))
              return;
          } else if (parentKey === "imported") {
            if ((0, _is.default)("ImportSpecifier", parent, {
              imported: node
            }))
              return;
          } else if (parentKey === "meta") {
            if ((0, _is.default)("MetaProperty", parent, {
              meta: node
            }))
              return;
          }
          if (((0, _helperValidatorIdentifier.isKeyword)(node.name) || (0, _helperValidatorIdentifier.isReservedWord)(node.name, false)) && node.name !== "this") {
            throw new TypeError(`"${node.name}" is not a valid identifier`);
          }
        }
      });
      defineType("IfStatement", {
        visitor: ["test", "consequent", "alternate"],
        aliases: ["Statement", "Conditional"],
        fields: {
          test: {
            validate: (0, _utils.assertNodeType)("Expression")
          },
          consequent: {
            validate: (0, _utils.assertNodeType)("Statement")
          },
          alternate: {
            optional: true,
            validate: (0, _utils.assertNodeType)("Statement")
          }
        }
      });
      defineType("LabeledStatement", {
        visitor: ["label", "body"],
        aliases: ["Statement"],
        fields: {
          label: {
            validate: (0, _utils.assertNodeType)("Identifier")
          },
          body: {
            validate: (0, _utils.assertNodeType)("Statement")
          }
        }
      });
      defineType("StringLiteral", {
        builder: ["value"],
        fields: {
          value: {
            validate: (0, _utils.assertValueType)("string")
          }
        },
        aliases: ["Expression", "Pureish", "Literal", "Immutable"]
      });
      defineType("NumericLiteral", {
        builder: ["value"],
        deprecatedAlias: "NumberLiteral",
        fields: {
          value: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("number"), Object.assign(function(node, key, val) {
              if (1 / val < 0 || !Number.isFinite(val)) {
                const error = new Error(`NumericLiterals must be non-negative finite numbers. You can use t.valueToNode(${val}) instead.`);
                {
                }
              }
            }, {
              type: "number"
            }))
          }
        },
        aliases: ["Expression", "Pureish", "Literal", "Immutable"]
      });
      defineType("NullLiteral", {
        aliases: ["Expression", "Pureish", "Literal", "Immutable"]
      });
      defineType("BooleanLiteral", {
        builder: ["value"],
        fields: {
          value: {
            validate: (0, _utils.assertValueType)("boolean")
          }
        },
        aliases: ["Expression", "Pureish", "Literal", "Immutable"]
      });
      defineType("RegExpLiteral", {
        builder: ["pattern", "flags"],
        deprecatedAlias: "RegexLiteral",
        aliases: ["Expression", "Pureish", "Literal"],
        fields: {
          pattern: {
            validate: (0, _utils.assertValueType)("string")
          },
          flags: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function(node, key, val) {
              if (!process.env.BABEL_TYPES_8_BREAKING)
                return;
              const invalid = /[^gimsuy]/.exec(val);
              if (invalid) {
                throw new TypeError(`"${invalid[0]}" is not a valid RegExp flag`);
              }
            }, {
              type: "string"
            })),
            default: ""
          }
        }
      });
      defineType("LogicalExpression", {
        builder: ["operator", "left", "right"],
        visitor: ["left", "right"],
        aliases: ["Binary", "Expression"],
        fields: {
          operator: {
            validate: (0, _utils.assertOneOf)(..._index.LOGICAL_OPERATORS)
          },
          left: {
            validate: (0, _utils.assertNodeType)("Expression")
          },
          right: {
            validate: (0, _utils.assertNodeType)("Expression")
          }
        }
      });
      defineType("MemberExpression", {
        builder: ["object", "property", "computed", ...!process.env.BABEL_TYPES_8_BREAKING ? ["optional"] : []],
        visitor: ["object", "property"],
        aliases: ["Expression", "LVal"],
        fields: Object.assign({
          object: {
            validate: (0, _utils.assertNodeType)("Expression", "Super")
          },
          property: {
            validate: function() {
              const normal = (0, _utils.assertNodeType)("Identifier", "PrivateName");
              const computed = (0, _utils.assertNodeType)("Expression");
              const validator = function(node, key, val) {
                const validator2 = node.computed ? computed : normal;
                validator2(node, key, val);
              };
              validator.oneOfNodeTypes = ["Expression", "Identifier", "PrivateName"];
              return validator;
            }()
          },
          computed: {
            default: false
          }
        }, !process.env.BABEL_TYPES_8_BREAKING ? {
          optional: {
            validate: (0, _utils.assertOneOf)(true, false),
            optional: true
          }
        } : {})
      });
      defineType("NewExpression", {
        inherits: "CallExpression"
      });
      defineType("Program", {
        visitor: ["directives", "body"],
        builder: ["body", "directives", "sourceType", "interpreter"],
        fields: {
          sourceType: {
            validate: (0, _utils.assertOneOf)("script", "module"),
            default: "script"
          },
          interpreter: {
            validate: (0, _utils.assertNodeType)("InterpreterDirective"),
            default: null,
            optional: true
          },
          directives: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Directive"))),
            default: []
          },
          body: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement")))
          }
        },
        aliases: ["Scopable", "BlockParent", "Block"]
      });
      defineType("ObjectExpression", {
        visitor: ["properties"],
        aliases: ["Expression"],
        fields: {
          properties: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ObjectMethod", "ObjectProperty", "SpreadElement")))
          }
        }
      });
      defineType("ObjectMethod", {
        builder: ["kind", "key", "params", "body", "computed", "generator", "async"],
        fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), {
          kind: Object.assign({
            validate: (0, _utils.assertOneOf)("method", "get", "set")
          }, !process.env.BABEL_TYPES_8_BREAKING ? {
            default: "method"
          } : {}),
          computed: {
            default: false
          },
          key: {
            validate: function() {
              const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral");
              const computed = (0, _utils.assertNodeType)("Expression");
              const validator = function(node, key, val) {
                const validator2 = node.computed ? computed : normal;
                validator2(node, key, val);
              };
              validator.oneOfNodeTypes = ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"];
              return validator;
            }()
          },
          decorators: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
            optional: true
          },
          body: {
            validate: (0, _utils.assertNodeType)("BlockStatement")
          }
        }),
        visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
        aliases: ["UserWhitespacable", "Function", "Scopable", "BlockParent", "FunctionParent", "Method", "ObjectMember"]
      });
      defineType("ObjectProperty", {
        builder: ["key", "value", "computed", "shorthand", ...!process.env.BABEL_TYPES_8_BREAKING ? ["decorators"] : []],
        fields: {
          computed: {
            default: false
          },
          key: {
            validate: function() {
              const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName");
              const computed = (0, _utils.assertNodeType)("Expression");
              const validator = Object.assign(function(node, key, val) {
                const validator2 = node.computed ? computed : normal;
                validator2(node, key, val);
              }, {
                oneOfNodeTypes: ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName"]
              });
              return validator;
            }()
          },
          value: {
            validate: (0, _utils.assertNodeType)("Expression", "PatternLike")
          },
          shorthand: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function(node, key, val) {
              if (!process.env.BABEL_TYPES_8_BREAKING)
                return;
              if (val && node.computed) {
                throw new TypeError("Property shorthand of ObjectProperty cannot be true if computed is true");
              }
            }, {
              type: "boolean"
            }), function(node, key, val) {
              if (!process.env.BABEL_TYPES_8_BREAKING)
                return;
              if (val && !(0, _is.default)("Identifier", node.key)) {
                throw new TypeError("Property shorthand of ObjectProperty cannot be true if key is not an Identifier");
              }
            }),
            default: false
          },
          decorators: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
            optional: true
          }
        },
        visitor: ["key", "value", "decorators"],
        aliases: ["UserWhitespacable", "Property", "ObjectMember"],
        validate: function() {
          const pattern = (0, _utils.assertNodeType)("Identifier", "Pattern", "TSAsExpression", "TSSatisfiesExpression", "TSNonNullExpression", "TSTypeAssertion");
          const expression = (0, _utils.assertNodeType)("Expression");
          return function(parent, key, node) {
            if (!process.env.BABEL_TYPES_8_BREAKING)
              return;
            const validator = (0, _is.default)("ObjectPattern", parent) ? pattern : expression;
            validator(node, "value", node.value);
          };
        }()
      });
      defineType("RestElement", {
        visitor: ["argument", "typeAnnotation"],
        builder: ["argument"],
        aliases: ["LVal", "PatternLike"],
        deprecatedAlias: "RestProperty",
        fields: Object.assign({}, patternLikeCommon(), {
          argument: {
            validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("LVal") : (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression")
          }
        }),
        validate(parent, key) {
          if (!process.env.BABEL_TYPES_8_BREAKING)
            return;
          const match = /(\w+)\[(\d+)\]/.exec(key);
          if (!match)
            throw new Error("Internal Babel error: malformed key.");
          const [, listKey, index] = match;
          if (parent[listKey].length > +index + 1) {
            throw new TypeError(`RestElement must be last element of ${listKey}`);
          }
        }
      });
      defineType("ReturnStatement", {
        visitor: ["argument"],
        aliases: ["Statement", "Terminatorless", "CompletionStatement"],
        fields: {
          argument: {
            validate: (0, _utils.assertNodeType)("Expression"),
            optional: true
          }
        }
      });
      defineType("SequenceExpression", {
        visitor: ["expressions"],
        fields: {
          expressions: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression")))
          }
        },
        aliases: ["Expression"]
      });
      defineType("ParenthesizedExpression", {
        visitor: ["expression"],
        aliases: ["Expression", "ExpressionWrapper"],
        fields: {
          expression: {
            validate: (0, _utils.assertNodeType)("Expression")
          }
        }
      });
      defineType("SwitchCase", {
        visitor: ["test", "consequent"],
        fields: {
          test: {
            validate: (0, _utils.assertNodeType)("Expression"),
            optional: true
          },
          consequent: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement")))
          }
        }
      });
      defineType("SwitchStatement", {
        visitor: ["discriminant", "cases"],
        aliases: ["Statement", "BlockParent", "Scopable"],
        fields: {
          discriminant: {
            validate: (0, _utils.assertNodeType)("Expression")
          },
          cases: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("SwitchCase")))
          }
        }
      });
      defineType("ThisExpression", {
        aliases: ["Expression"]
      });
      defineType("ThrowStatement", {
        visitor: ["argument"],
        aliases: ["Statement", "Terminatorless", "CompletionStatement"],
        fields: {
          argument: {
            validate: (0, _utils.assertNodeType)("Expression")
          }
        }
      });
      defineType("TryStatement", {
        visitor: ["block", "handler", "finalizer"],
        aliases: ["Statement"],
        fields: {
          block: {
            validate: (0, _utils.chain)((0, _utils.assertNodeType)("BlockStatement"), Object.assign(function(node) {
              if (!process.env.BABEL_TYPES_8_BREAKING)
                return;
              if (!node.handler && !node.finalizer) {
                throw new TypeError("TryStatement expects either a handler or finalizer, or both");
              }
            }, {
              oneOfNodeTypes: ["BlockStatement"]
            }))
          },
          handler: {
            optional: true,
            validate: (0, _utils.assertNodeType)("CatchClause")
          },
          finalizer: {
            optional: true,
            validate: (0, _utils.assertNodeType)("BlockStatement")
          }
        }
      });
      defineType("UnaryExpression", {
        builder: ["operator", "argument", "prefix"],
        fields: {
          prefix: {
            default: true
          },
          argument: {
            validate: (0, _utils.assertNodeType)("Expression")
          },
          operator: {
            validate: (0, _utils.assertOneOf)(..._index.UNARY_OPERATORS)
          }
        },
        visitor: ["argument"],
        aliases: ["UnaryLike", "Expression"]
      });
      defineType("UpdateExpression", {
        builder: ["operator", "argument", "prefix"],
        fields: {
          prefix: {
            default: false
          },
          argument: {
            validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Expression") : (0, _utils.assertNodeType)("Identifier", "MemberExpression")
          },
          operator: {
            validate: (0, _utils.assertOneOf)(..._index.UPDATE_OPERATORS)
          }
        },
        visitor: ["argument"],
        aliases: ["Expression"]
      });
      defineType("VariableDeclaration", {
        builder: ["kind", "declarations"],
        visitor: ["declarations"],
        aliases: ["Statement", "Declaration"],
        fields: {
          declare: {
            validate: (0, _utils.assertValueType)("boolean"),
            optional: true
          },
          kind: {
            validate: (0, _utils.assertOneOf)("var", "let", "const", "using", "await using")
          },
          declarations: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("VariableDeclarator")))
          }
        },
        validate(parent, key, node) {
          if (!process.env.BABEL_TYPES_8_BREAKING)
            return;
          if (!(0, _is.default)("ForXStatement", parent, {
            left: node
          }))
            return;
          if (node.declarations.length !== 1) {
            throw new TypeError(`Exactly one VariableDeclarator is required in the VariableDeclaration of a ${parent.type}`);
          }
        }
      });
      defineType("VariableDeclarator", {
        visitor: ["id", "init"],
        fields: {
          id: {
            validate: function() {
              if (!process.env.BABEL_TYPES_8_BREAKING) {
                return (0, _utils.assertNodeType)("LVal");
              }
              const normal = (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern");
              const without = (0, _utils.assertNodeType)("Identifier");
              return function(node, key, val) {
                const validator = node.init ? normal : without;
                validator(node, key, val);
              };
            }()
          },
          definite: {
            optional: true,
            validate: (0, _utils.assertValueType)("boolean")
          },
          init: {
            optional: true,
            validate: (0, _utils.assertNodeType)("Expression")
          }
        }
      });
      defineType("WhileStatement", {
        visitor: ["test", "body"],
        aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"],
        fields: {
          test: {
            validate: (0, _utils.assertNodeType)("Expression")
          },
          body: {
            validate: (0, _utils.assertNodeType)("Statement")
          }
        }
      });
      defineType("WithStatement", {
        visitor: ["object", "body"],
        aliases: ["Statement"],
        fields: {
          object: {
            validate: (0, _utils.assertNodeType)("Expression")
          },
          body: {
            validate: (0, _utils.assertNodeType)("Statement")
          }
        }
      });
      defineType("AssignmentPattern", {
        visitor: ["left", "right", "decorators"],
        builder: ["left", "right"],
        aliases: ["Pattern", "PatternLike", "LVal"],
        fields: Object.assign({}, patternLikeCommon(), {
          left: {
            validate: (0, _utils.assertNodeType)("Identifier", "ObjectPattern", "ArrayPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression")
          },
          right: {
            validate: (0, _utils.assertNodeType)("Expression")
          },
          decorators: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
            optional: true
          }
        })
      });
      defineType("ArrayPattern", {
        visitor: ["elements", "typeAnnotation"],
        builder: ["elements"],
        aliases: ["Pattern", "PatternLike", "LVal"],
        fields: Object.assign({}, patternLikeCommon(), {
          elements: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeOrValueType)("null", "PatternLike", "LVal")))
          }
        })
      });
      defineType("ArrowFunctionExpression", {
        builder: ["params", "body", "async"],
        visitor: ["params", "body", "returnType", "typeParameters"],
        aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
        fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), {
          expression: {
            validate: (0, _utils.assertValueType)("boolean")
          },
          body: {
            validate: (0, _utils.assertNodeType)("BlockStatement", "Expression")
          },
          predicate: {
            validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"),
            optional: true
          }
        })
      });
      defineType("ClassBody", {
        visitor: ["body"],
        fields: {
          body: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ClassMethod", "ClassPrivateMethod", "ClassProperty", "ClassPrivateProperty", "ClassAccessorProperty", "TSDeclareMethod", "TSIndexSignature", "StaticBlock")))
          }
        }
      });
      defineType("ClassExpression", {
        builder: ["id", "superClass", "body", "decorators"],
        visitor: ["id", "body", "superClass", "mixins", "typeParameters", "superTypeParameters", "implements", "decorators"],
        aliases: ["Scopable", "Class", "Expression"],
        fields: {
          id: {
            validate: (0, _utils.assertNodeType)("Identifier"),
            optional: true
          },
          typeParameters: {
            validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
            optional: true
          },
          body: {
            validate: (0, _utils.assertNodeType)("ClassBody")
          },
          superClass: {
            optional: true,
            validate: (0, _utils.assertNodeType)("Expression")
          },
          superTypeParameters: {
            validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
            optional: true
          },
          implements: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSExpressionWithTypeArguments", "ClassImplements"))),
            optional: true
          },
          decorators: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
            optional: true
          },
          mixins: {
            validate: (0, _utils.assertNodeType)("InterfaceExtends"),
            optional: true
          }
        }
      });
      defineType("ClassDeclaration", {
        inherits: "ClassExpression",
        aliases: ["Scopable", "Class", "Statement", "Declaration"],
        fields: {
          id: {
            validate: (0, _utils.assertNodeType)("Identifier"),
            optional: true
          },
          typeParameters: {
            validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
            optional: true
          },
          body: {
            validate: (0, _utils.assertNodeType)("ClassBody")
          },
          superClass: {
            optional: true,
            validate: (0, _utils.assertNodeType)("Expression")
          },
          superTypeParameters: {
            validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
            optional: true
          },
          implements: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSExpressionWithTypeArguments", "ClassImplements"))),
            optional: true
          },
          decorators: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
            optional: true
          },
          mixins: {
            validate: (0, _utils.assertNodeType)("InterfaceExtends"),
            optional: true
          },
          declare: {
            validate: (0, _utils.assertValueType)("boolean"),
            optional: true
          },
          abstract: {
            validate: (0, _utils.assertValueType)("boolean"),
            optional: true
          }
        },
        validate: function() {
          const identifier = (0, _utils.assertNodeType)("Identifier");
          return function(parent, key, node) {
            if (!process.env.BABEL_TYPES_8_BREAKING)
              return;
            if (!(0, _is.default)("ExportDefaultDeclaration", parent)) {
              identifier(node, "id", node.id);
            }
          };
        }()
      });
      defineType("ExportAllDeclaration", {
        builder: ["source"],
        visitor: ["source", "attributes", "assertions"],
        aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"],
        fields: {
          source: {
            validate: (0, _utils.assertNodeType)("StringLiteral")
          },
          exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value")),
          attributes: {
            optional: true,
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute")))
          },
          assertions: {
            optional: true,
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute")))
          }
        }
      });
      defineType("ExportDefaultDeclaration", {
        visitor: ["declaration"],
        aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"],
        fields: {
          declaration: {
            validate: (0, _utils.assertNodeType)("TSDeclareFunction", "FunctionDeclaration", "ClassDeclaration", "Expression")
          },
          exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("value"))
        }
      });
      defineType("ExportNamedDeclaration", {
        builder: ["declaration", "specifiers", "source"],
        visitor: ["declaration", "specifiers", "source", "attributes", "assertions"],
        aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"],
        fields: {
          declaration: {
            optional: true,
            validate: (0, _utils.chain)((0, _utils.assertNodeType)("Declaration"), Object.assign(function(node, key, val) {
              if (!process.env.BABEL_TYPES_8_BREAKING)
                return;
              if (val && node.specifiers.length) {
                throw new TypeError("Only declaration or specifiers is allowed on ExportNamedDeclaration");
              }
            }, {
              oneOfNodeTypes: ["Declaration"]
            }), function(node, key, val) {
              if (!process.env.BABEL_TYPES_8_BREAKING)
                return;
              if (val && node.source) {
                throw new TypeError("Cannot export a declaration from a source");
              }
            })
          },
          attributes: {
            optional: true,
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute")))
          },
          assertions: {
            optional: true,
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute")))
          },
          specifiers: {
            default: [],
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)(function() {
              const sourced = (0, _utils.assertNodeType)("ExportSpecifier", "ExportDefaultSpecifier", "ExportNamespaceSpecifier");
              const sourceless = (0, _utils.assertNodeType)("ExportSpecifier");
              if (!process.env.BABEL_TYPES_8_BREAKING)
                return sourced;
              return function(node, key, val) {
                const validator = node.source ? sourced : sourceless;
                validator(node, key, val);
              };
            }()))
          },
          source: {
            validate: (0, _utils.assertNodeType)("StringLiteral"),
            optional: true
          },
          exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value"))
        }
      });
      defineType("ExportSpecifier", {
        visitor: ["local", "exported"],
        aliases: ["ModuleSpecifier"],
        fields: {
          local: {
            validate: (0, _utils.assertNodeType)("Identifier")
          },
          exported: {
            validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral")
          },
          exportKind: {
            validate: (0, _utils.assertOneOf)("type", "value"),
            optional: true
          }
        }
      });
      defineType("ForOfStatement", {
        visitor: ["left", "right", "body"],
        builder: ["left", "right", "body", "await"],
        aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
        fields: {
          left: {
            validate: function() {
              if (!process.env.BABEL_TYPES_8_BREAKING) {
                return (0, _utils.assertNodeType)("VariableDeclaration", "LVal");
              }
              const declaration = (0, _utils.assertNodeType)("VariableDeclaration");
              const lval = (0, _utils.assertNodeType)("Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression");
              return function(node, key, val) {
                if ((0, _is.default)("VariableDeclaration", val)) {
                  declaration(node, key, val);
                } else {
                  lval(node, key, val);
                }
              };
            }()
          },
          right: {
            validate: (0, _utils.assertNodeType)("Expression")
          },
          body: {
            validate: (0, _utils.assertNodeType)("Statement")
          },
          await: {
            default: false
          }
        }
      });
      defineType("ImportDeclaration", {
        builder: ["specifiers", "source"],
        visitor: ["specifiers", "source", "attributes", "assertions"],
        aliases: ["Statement", "Declaration", "ImportOrExportDeclaration"],
        fields: {
          attributes: {
            optional: true,
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute")))
          },
          assertions: {
            optional: true,
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute")))
          },
          module: {
            optional: true,
            validate: (0, _utils.assertValueType)("boolean")
          },
          phase: {
            default: null,
            validate: (0, _utils.assertOneOf)("source", "defer")
          },
          specifiers: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier")))
          },
          source: {
            validate: (0, _utils.assertNodeType)("StringLiteral")
          },
          importKind: {
            validate: (0, _utils.assertOneOf)("type", "typeof", "value"),
            optional: true
          }
        }
      });
      defineType("ImportDefaultSpecifier", {
        visitor: ["local"],
        aliases: ["ModuleSpecifier"],
        fields: {
          local: {
            validate: (0, _utils.assertNodeType)("Identifier")
          }
        }
      });
      defineType("ImportNamespaceSpecifier", {
        visitor: ["local"],
        aliases: ["ModuleSpecifier"],
        fields: {
          local: {
            validate: (0, _utils.assertNodeType)("Identifier")
          }
        }
      });
      defineType("ImportSpecifier", {
        visitor: ["local", "imported"],
        aliases: ["ModuleSpecifier"],
        fields: {
          local: {
            validate: (0, _utils.assertNodeType)("Identifier")
          },
          imported: {
            validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral")
          },
          importKind: {
            validate: (0, _utils.assertOneOf)("type", "typeof", "value"),
            optional: true
          }
        }
      });
      defineType("ImportExpression", {
        visitor: ["source", "options"],
        aliases: ["Expression"],
        fields: {
          phase: {
            default: null,
            validate: (0, _utils.assertOneOf)("source", "defer")
          },
          source: {
            validate: (0, _utils.assertNodeType)("Expression")
          },
          options: {
            validate: (0, _utils.assertNodeType)("Expression"),
            optional: true
          }
        }
      });
      defineType("MetaProperty", {
        visitor: ["meta", "property"],
        aliases: ["Expression"],
        fields: {
          meta: {
            validate: (0, _utils.chain)((0, _utils.assertNodeType)("Identifier"), Object.assign(function(node, key, val) {
              if (!process.env.BABEL_TYPES_8_BREAKING)
                return;
              let property;
              switch (val.name) {
                case "function":
                  property = "sent";
                  break;
                case "new":
                  property = "target";
                  break;
                case "import":
                  property = "meta";
                  break;
              }
              if (!(0, _is.default)("Identifier", node.property, {
                name: property
              })) {
                throw new TypeError("Unrecognised MetaProperty");
              }
            }, {
              oneOfNodeTypes: ["Identifier"]
            }))
          },
          property: {
            validate: (0, _utils.assertNodeType)("Identifier")
          }
        }
      });
      var classMethodOrPropertyCommon = () => ({
        abstract: {
          validate: (0, _utils.assertValueType)("boolean"),
          optional: true
        },
        accessibility: {
          validate: (0, _utils.assertOneOf)("public", "private", "protected"),
          optional: true
        },
        static: {
          default: false
        },
        override: {
          default: false
        },
        computed: {
          default: false
        },
        optional: {
          validate: (0, _utils.assertValueType)("boolean"),
          optional: true
        },
        key: {
          validate: (0, _utils.chain)(function() {
            const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral");
            const computed = (0, _utils.assertNodeType)("Expression");
            return function(node, key, val) {
              const validator = node.computed ? computed : normal;
              validator(node, key, val);
            };
          }(), (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression"))
        }
      });
      exports.classMethodOrPropertyCommon = classMethodOrPropertyCommon;
      var classMethodOrDeclareMethodCommon = () => Object.assign({}, functionCommon(), classMethodOrPropertyCommon(), {
        params: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Identifier", "Pattern", "RestElement", "TSParameterProperty")))
        },
        kind: {
          validate: (0, _utils.assertOneOf)("get", "set", "method", "constructor"),
          default: "method"
        },
        access: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), (0, _utils.assertOneOf)("public", "private", "protected")),
          optional: true
        },
        decorators: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
          optional: true
        }
      });
      exports.classMethodOrDeclareMethodCommon = classMethodOrDeclareMethodCommon;
      defineType("ClassMethod", {
        aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method"],
        builder: ["kind", "key", "params", "body", "computed", "static", "generator", "async"],
        visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
        fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), {
          body: {
            validate: (0, _utils.assertNodeType)("BlockStatement")
          }
        })
      });
      defineType("ObjectPattern", {
        visitor: ["properties", "typeAnnotation", "decorators"],
        builder: ["properties"],
        aliases: ["Pattern", "PatternLike", "LVal"],
        fields: Object.assign({}, patternLikeCommon(), {
          properties: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("RestElement", "ObjectProperty")))
          }
        })
      });
      defineType("SpreadElement", {
        visitor: ["argument"],
        aliases: ["UnaryLike"],
        deprecatedAlias: "SpreadProperty",
        fields: {
          argument: {
            validate: (0, _utils.assertNodeType)("Expression")
          }
        }
      });
      defineType("Super", {
        aliases: ["Expression"]
      });
      defineType("TaggedTemplateExpression", {
        visitor: ["tag", "quasi", "typeParameters"],
        builder: ["tag", "quasi"],
        aliases: ["Expression"],
        fields: {
          tag: {
            validate: (0, _utils.assertNodeType)("Expression")
          },
          quasi: {
            validate: (0, _utils.assertNodeType)("TemplateLiteral")
          },
          typeParameters: {
            validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
            optional: true
          }
        }
      });
      defineType("TemplateElement", {
        builder: ["value", "tail"],
        fields: {
          value: {
            validate: (0, _utils.chain)((0, _utils.assertShape)({
              raw: {
                validate: (0, _utils.assertValueType)("string")
              },
              cooked: {
                validate: (0, _utils.assertValueType)("string"),
                optional: true
              }
            }), function templateElementCookedValidator(node) {
              const raw = node.value.raw;
              let unterminatedCalled = false;
              const error = () => {
                throw new Error("Internal @babel/types error.");
              };
              const {
                str,
                firstInvalidLoc
              } = (0, _helperStringParser.readStringContents)("template", raw, 0, 0, 0, {
                unterminated() {
                  unterminatedCalled = true;
                },
                strictNumericEscape: error,
                invalidEscapeSequence: error,
                numericSeparatorInEscapeSequence: error,
                unexpectedNumericSeparator: error,
                invalidDigit: error,
                invalidCodePoint: error
              });
              if (!unterminatedCalled)
                throw new Error("Invalid raw");
              node.value.cooked = firstInvalidLoc ? null : str;
            })
          },
          tail: {
            default: false
          }
        }
      });
      defineType("TemplateLiteral", {
        visitor: ["quasis", "expressions"],
        aliases: ["Expression", "Literal"],
        fields: {
          quasis: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TemplateElement")))
          },
          expressions: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "TSType")), function(node, key, val) {
              if (node.quasis.length !== val.length + 1) {
                throw new TypeError(`Number of ${node.type} quasis should be exactly one more than the number of expressions.
Expected ${val.length + 1} quasis but got ${node.quasis.length}`);
              }
            })
          }
        }
      });
      defineType("YieldExpression", {
        builder: ["argument", "delegate"],
        visitor: ["argument"],
        aliases: ["Expression", "Terminatorless"],
        fields: {
          delegate: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function(node, key, val) {
              if (!process.env.BABEL_TYPES_8_BREAKING)
                return;
              if (val && !node.argument) {
                throw new TypeError("Property delegate of YieldExpression cannot be true if there is no argument");
              }
            }, {
              type: "boolean"
            })),
            default: false
          },
          argument: {
            optional: true,
            validate: (0, _utils.assertNodeType)("Expression")
          }
        }
      });
      defineType("AwaitExpression", {
        builder: ["argument"],
        visitor: ["argument"],
        aliases: ["Expression", "Terminatorless"],
        fields: {
          argument: {
            validate: (0, _utils.assertNodeType)("Expression")
          }
        }
      });
      defineType("Import", {
        aliases: ["Expression"]
      });
      defineType("BigIntLiteral", {
        builder: ["value"],
        fields: {
          value: {
            validate: (0, _utils.assertValueType)("string")
          }
        },
        aliases: ["Expression", "Pureish", "Literal", "Immutable"]
      });
      defineType("ExportNamespaceSpecifier", {
        visitor: ["exported"],
        aliases: ["ModuleSpecifier"],
        fields: {
          exported: {
            validate: (0, _utils.assertNodeType)("Identifier")
          }
        }
      });
      defineType("OptionalMemberExpression", {
        builder: ["object", "property", "computed", "optional"],
        visitor: ["object", "property"],
        aliases: ["Expression"],
        fields: {
          object: {
            validate: (0, _utils.assertNodeType)("Expression")
          },
          property: {
            validate: function() {
              const normal = (0, _utils.assertNodeType)("Identifier");
              const computed = (0, _utils.assertNodeType)("Expression");
              const validator = Object.assign(function(node, key, val) {
                const validator2 = node.computed ? computed : normal;
                validator2(node, key, val);
              }, {
                oneOfNodeTypes: ["Expression", "Identifier"]
              });
              return validator;
            }()
          },
          computed: {
            default: false
          },
          optional: {
            validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertValueType)("boolean") : (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)())
          }
        }
      });
      defineType("OptionalCallExpression", {
        visitor: ["callee", "arguments", "typeParameters", "typeArguments"],
        builder: ["callee", "arguments", "optional"],
        aliases: ["Expression"],
        fields: {
          callee: {
            validate: (0, _utils.assertNodeType)("Expression")
          },
          arguments: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "SpreadElement", "JSXNamespacedName", "ArgumentPlaceholder")))
          },
          optional: {
            validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertValueType)("boolean") : (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)())
          },
          typeArguments: {
            validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"),
            optional: true
          },
          typeParameters: {
            validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"),
            optional: true
          }
        }
      });
      defineType("ClassProperty", {
        visitor: ["key", "value", "typeAnnotation", "decorators"],
        builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"],
        aliases: ["Property"],
        fields: Object.assign({}, classMethodOrPropertyCommon(), {
          value: {
            validate: (0, _utils.assertNodeType)("Expression"),
            optional: true
          },
          definite: {
            validate: (0, _utils.assertValueType)("boolean"),
            optional: true
          },
          typeAnnotation: {
            validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
            optional: true
          },
          decorators: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
            optional: true
          },
          readonly: {
            validate: (0, _utils.assertValueType)("boolean"),
            optional: true
          },
          declare: {
            validate: (0, _utils.assertValueType)("boolean"),
            optional: true
          },
          variance: {
            validate: (0, _utils.assertNodeType)("Variance"),
            optional: true
          }
        })
      });
      defineType("ClassAccessorProperty", {
        visitor: ["key", "value", "typeAnnotation", "decorators"],
        builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"],
        aliases: ["Property", "Accessor"],
        fields: Object.assign({}, classMethodOrPropertyCommon(), {
          key: {
            validate: (0, _utils.chain)(function() {
              const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "PrivateName");
              const computed = (0, _utils.assertNodeType)("Expression");
              return function(node, key, val) {
                const validator = node.computed ? computed : normal;
                validator(node, key, val);
              };
            }(), (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression", "PrivateName"))
          },
          value: {
            validate: (0, _utils.assertNodeType)("Expression"),
            optional: true
          },
          definite: {
            validate: (0, _utils.assertValueType)("boolean"),
            optional: true
          },
          typeAnnotation: {
            validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
            optional: true
          },
          decorators: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
            optional: true
          },
          readonly: {
            validate: (0, _utils.assertValueType)("boolean"),
            optional: true
          },
          declare: {
            validate: (0, _utils.assertValueType)("boolean"),
            optional: true
          },
          variance: {
            validate: (0, _utils.assertNodeType)("Variance"),
            optional: true
          }
        })
      });
      defineType("ClassPrivateProperty", {
        visitor: ["key", "value", "decorators", "typeAnnotation"],
        builder: ["key", "value", "decorators", "static"],
        aliases: ["Property", "Private"],
        fields: {
          key: {
            validate: (0, _utils.assertNodeType)("PrivateName")
          },
          value: {
            validate: (0, _utils.assertNodeType)("Expression"),
            optional: true
          },
          typeAnnotation: {
            validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
            optional: true
          },
          decorators: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
            optional: true
          },
          static: {
            validate: (0, _utils.assertValueType)("boolean"),
            default: false
          },
          readonly: {
            validate: (0, _utils.assertValueType)("boolean"),
            optional: true
          },
          definite: {
            validate: (0, _utils.assertValueType)("boolean"),
            optional: true
          },
          variance: {
            validate: (0, _utils.assertNodeType)("Variance"),
            optional: true
          }
        }
      });
      defineType("ClassPrivateMethod", {
        builder: ["kind", "key", "params", "body", "static"],
        visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
        aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method", "Private"],
        fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), {
          kind: {
            validate: (0, _utils.assertOneOf)("get", "set", "method"),
            default: "method"
          },
          key: {
            validate: (0, _utils.assertNodeType)("PrivateName")
          },
          body: {
            validate: (0, _utils.assertNodeType)("BlockStatement")
          }
        })
      });
      defineType("PrivateName", {
        visitor: ["id"],
        aliases: ["Private"],
        fields: {
          id: {
            validate: (0, _utils.assertNodeType)("Identifier")
          }
        }
      });
      defineType("StaticBlock", {
        visitor: ["body"],
        fields: {
          body: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement")))
          }
        },
        aliases: ["Scopable", "BlockParent", "FunctionParent"]
      });
    }
  });

  // node_modules/@babel/types/lib/definitions/flow.js
  var require_flow = __commonJS({
    "node_modules/@babel/types/lib/definitions/flow.js"() {
      "use strict";
      init_esbuild_inject();
      var _utils = require_utils();
      var defineType = (0, _utils.defineAliasedType)("Flow");
      var defineInterfaceishType = (name) => {
        const isDeclareClass = name === "DeclareClass";
        defineType(name, {
          builder: ["id", "typeParameters", "extends", "body"],
          visitor: ["id", "typeParameters", "extends", ...isDeclareClass ? ["mixins", "implements"] : [], "body"],
          aliases: ["FlowDeclaration", "Statement", "Declaration"],
          fields: Object.assign({
            id: (0, _utils.validateType)("Identifier"),
            typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
            extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends"))
          }, isDeclareClass ? {
            mixins: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")),
            implements: (0, _utils.validateOptional)((0, _utils.arrayOfType)("ClassImplements"))
          } : {}, {
            body: (0, _utils.validateType)("ObjectTypeAnnotation")
          })
        });
      };
      defineType("AnyTypeAnnotation", {
        aliases: ["FlowType", "FlowBaseAnnotation"]
      });
      defineType("ArrayTypeAnnotation", {
        visitor: ["elementType"],
        aliases: ["FlowType"],
        fields: {
          elementType: (0, _utils.validateType)("FlowType")
        }
      });
      defineType("BooleanTypeAnnotation", {
        aliases: ["FlowType", "FlowBaseAnnotation"]
      });
      defineType("BooleanLiteralTypeAnnotation", {
        builder: ["value"],
        aliases: ["FlowType"],
        fields: {
          value: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
        }
      });
      defineType("NullLiteralTypeAnnotation", {
        aliases: ["FlowType", "FlowBaseAnnotation"]
      });
      defineType("ClassImplements", {
        visitor: ["id", "typeParameters"],
        fields: {
          id: (0, _utils.validateType)("Identifier"),
          typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation")
        }
      });
      defineInterfaceishType("DeclareClass");
      defineType("DeclareFunction", {
        visitor: ["id"],
        aliases: ["FlowDeclaration", "Statement", "Declaration"],
        fields: {
          id: (0, _utils.validateType)("Identifier"),
          predicate: (0, _utils.validateOptionalType)("DeclaredPredicate")
        }
      });
      defineInterfaceishType("DeclareInterface");
      defineType("DeclareModule", {
        builder: ["id", "body", "kind"],
        visitor: ["id", "body"],
        aliases: ["FlowDeclaration", "Statement", "Declaration"],
        fields: {
          id: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
          body: (0, _utils.validateType)("BlockStatement"),
          kind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("CommonJS", "ES"))
        }
      });
      defineType("DeclareModuleExports", {
        visitor: ["typeAnnotation"],
        aliases: ["FlowDeclaration", "Statement", "Declaration"],
        fields: {
          typeAnnotation: (0, _utils.validateType)("TypeAnnotation")
        }
      });
      defineType("DeclareTypeAlias", {
        visitor: ["id", "typeParameters", "right"],
        aliases: ["FlowDeclaration", "Statement", "Declaration"],
        fields: {
          id: (0, _utils.validateType)("Identifier"),
          typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
          right: (0, _utils.validateType)("FlowType")
        }
      });
      defineType("DeclareOpaqueType", {
        visitor: ["id", "typeParameters", "supertype"],
        aliases: ["FlowDeclaration", "Statement", "Declaration"],
        fields: {
          id: (0, _utils.validateType)("Identifier"),
          typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
          supertype: (0, _utils.validateOptionalType)("FlowType"),
          impltype: (0, _utils.validateOptionalType)("FlowType")
        }
      });
      defineType("DeclareVariable", {
        visitor: ["id"],
        aliases: ["FlowDeclaration", "Statement", "Declaration"],
        fields: {
          id: (0, _utils.validateType)("Identifier")
        }
      });
      defineType("DeclareExportDeclaration", {
        visitor: ["declaration", "specifiers", "source"],
        aliases: ["FlowDeclaration", "Statement", "Declaration"],
        fields: {
          declaration: (0, _utils.validateOptionalType)("Flow"),
          specifiers: (0, _utils.validateOptional)((0, _utils.arrayOfType)(["ExportSpecifier", "ExportNamespaceSpecifier"])),
          source: (0, _utils.validateOptionalType)("StringLiteral"),
          default: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))
        }
      });
      defineType("DeclareExportAllDeclaration", {
        visitor: ["source"],
        aliases: ["FlowDeclaration", "Statement", "Declaration"],
        fields: {
          source: (0, _utils.validateType)("StringLiteral"),
          exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value"))
        }
      });
      defineType("DeclaredPredicate", {
        visitor: ["value"],
        aliases: ["FlowPredicate"],
        fields: {
          value: (0, _utils.validateType)("Flow")
        }
      });
      defineType("ExistsTypeAnnotation", {
        aliases: ["FlowType"]
      });
      defineType("FunctionTypeAnnotation", {
        visitor: ["typeParameters", "params", "rest", "returnType"],
        aliases: ["FlowType"],
        fields: {
          typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
          params: (0, _utils.validate)((0, _utils.arrayOfType)("FunctionTypeParam")),
          rest: (0, _utils.validateOptionalType)("FunctionTypeParam"),
          this: (0, _utils.validateOptionalType)("FunctionTypeParam"),
          returnType: (0, _utils.validateType)("FlowType")
        }
      });
      defineType("FunctionTypeParam", {
        visitor: ["name", "typeAnnotation"],
        fields: {
          name: (0, _utils.validateOptionalType)("Identifier"),
          typeAnnotation: (0, _utils.validateType)("FlowType"),
          optional: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))
        }
      });
      defineType("GenericTypeAnnotation", {
        visitor: ["id", "typeParameters"],
        aliases: ["FlowType"],
        fields: {
          id: (0, _utils.validateType)(["Identifier", "QualifiedTypeIdentifier"]),
          typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation")
        }
      });
      defineType("InferredPredicate", {
        aliases: ["FlowPredicate"]
      });
      defineType("InterfaceExtends", {
        visitor: ["id", "typeParameters"],
        fields: {
          id: (0, _utils.validateType)(["Identifier", "QualifiedTypeIdentifier"]),
          typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation")
        }
      });
      defineInterfaceishType("InterfaceDeclaration");
      defineType("InterfaceTypeAnnotation", {
        visitor: ["extends", "body"],
        aliases: ["FlowType"],
        fields: {
          extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")),
          body: (0, _utils.validateType)("ObjectTypeAnnotation")
        }
      });
      defineType("IntersectionTypeAnnotation", {
        visitor: ["types"],
        aliases: ["FlowType"],
        fields: {
          types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
        }
      });
      defineType("MixedTypeAnnotation", {
        aliases: ["FlowType", "FlowBaseAnnotation"]
      });
      defineType("EmptyTypeAnnotation", {
        aliases: ["FlowType", "FlowBaseAnnotation"]
      });
      defineType("NullableTypeAnnotation", {
        visitor: ["typeAnnotation"],
        aliases: ["FlowType"],
        fields: {
          typeAnnotation: (0, _utils.validateType)("FlowType")
        }
      });
      defineType("NumberLiteralTypeAnnotation", {
        builder: ["value"],
        aliases: ["FlowType"],
        fields: {
          value: (0, _utils.validate)((0, _utils.assertValueType)("number"))
        }
      });
      defineType("NumberTypeAnnotation", {
        aliases: ["FlowType", "FlowBaseAnnotation"]
      });
      defineType("ObjectTypeAnnotation", {
        visitor: ["properties", "indexers", "callProperties", "internalSlots"],
        aliases: ["FlowType"],
        builder: ["properties", "indexers", "callProperties", "internalSlots", "exact"],
        fields: {
          properties: (0, _utils.validate)((0, _utils.arrayOfType)(["ObjectTypeProperty", "ObjectTypeSpreadProperty"])),
          indexers: {
            validate: (0, _utils.arrayOfType)("ObjectTypeIndexer"),
            optional: true,
            default: []
          },
          callProperties: {
            validate: (0, _utils.arrayOfType)("ObjectTypeCallProperty"),
            optional: true,
            default: []
          },
          internalSlots: {
            validate: (0, _utils.arrayOfType)("ObjectTypeInternalSlot"),
            optional: true,
            default: []
          },
          exact: {
            validate: (0, _utils.assertValueType)("boolean"),
            default: false
          },
          inexact: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))
        }
      });
      defineType("ObjectTypeInternalSlot", {
        visitor: ["id", "value", "optional", "static", "method"],
        aliases: ["UserWhitespacable"],
        fields: {
          id: (0, _utils.validateType)("Identifier"),
          value: (0, _utils.validateType)("FlowType"),
          optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
          static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
          method: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
        }
      });
      defineType("ObjectTypeCallProperty", {
        visitor: ["value"],
        aliases: ["UserWhitespacable"],
        fields: {
          value: (0, _utils.validateType)("FlowType"),
          static: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
        }
      });
      defineType("ObjectTypeIndexer", {
        visitor: ["id", "key", "value", "variance"],
        aliases: ["UserWhitespacable"],
        fields: {
          id: (0, _utils.validateOptionalType)("Identifier"),
          key: (0, _utils.validateType)("FlowType"),
          value: (0, _utils.validateType)("FlowType"),
          static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
          variance: (0, _utils.validateOptionalType)("Variance")
        }
      });
      defineType("ObjectTypeProperty", {
        visitor: ["key", "value", "variance"],
        aliases: ["UserWhitespacable"],
        fields: {
          key: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
          value: (0, _utils.validateType)("FlowType"),
          kind: (0, _utils.validate)((0, _utils.assertOneOf)("init", "get", "set")),
          static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
          proto: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
          optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
          variance: (0, _utils.validateOptionalType)("Variance"),
          method: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
        }
      });
      defineType("ObjectTypeSpreadProperty", {
        visitor: ["argument"],
        aliases: ["UserWhitespacable"],
        fields: {
          argument: (0, _utils.validateType)("FlowType")
        }
      });
      defineType("OpaqueType", {
        visitor: ["id", "typeParameters", "supertype", "impltype"],
        aliases: ["FlowDeclaration", "Statement", "Declaration"],
        fields: {
          id: (0, _utils.validateType)("Identifier"),
          typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
          supertype: (0, _utils.validateOptionalType)("FlowType"),
          impltype: (0, _utils.validateType)("FlowType")
        }
      });
      defineType("QualifiedTypeIdentifier", {
        visitor: ["id", "qualification"],
        fields: {
          id: (0, _utils.validateType)("Identifier"),
          qualification: (0, _utils.validateType)(["Identifier", "QualifiedTypeIdentifier"])
        }
      });
      defineType("StringLiteralTypeAnnotation", {
        builder: ["value"],
        aliases: ["FlowType"],
        fields: {
          value: (0, _utils.validate)((0, _utils.assertValueType)("string"))
        }
      });
      defineType("StringTypeAnnotation", {
        aliases: ["FlowType", "FlowBaseAnnotation"]
      });
      defineType("SymbolTypeAnnotation", {
        aliases: ["FlowType", "FlowBaseAnnotation"]
      });
      defineType("ThisTypeAnnotation", {
        aliases: ["FlowType", "FlowBaseAnnotation"]
      });
      defineType("TupleTypeAnnotation", {
        visitor: ["types"],
        aliases: ["FlowType"],
        fields: {
          types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
        }
      });
      defineType("TypeofTypeAnnotation", {
        visitor: ["argument"],
        aliases: ["FlowType"],
        fields: {
          argument: (0, _utils.validateType)("FlowType")
        }
      });
      defineType("TypeAlias", {
        visitor: ["id", "typeParameters", "right"],
        aliases: ["FlowDeclaration", "Statement", "Declaration"],
        fields: {
          id: (0, _utils.validateType)("Identifier"),
          typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
          right: (0, _utils.validateType)("FlowType")
        }
      });
      defineType("TypeAnnotation", {
        visitor: ["typeAnnotation"],
        fields: {
          typeAnnotation: (0, _utils.validateType)("FlowType")
        }
      });
      defineType("TypeCastExpression", {
        visitor: ["expression", "typeAnnotation"],
        aliases: ["ExpressionWrapper", "Expression"],
        fields: {
          expression: (0, _utils.validateType)("Expression"),
          typeAnnotation: (0, _utils.validateType)("TypeAnnotation")
        }
      });
      defineType("TypeParameter", {
        visitor: ["bound", "default", "variance"],
        fields: {
          name: (0, _utils.validate)((0, _utils.assertValueType)("string")),
          bound: (0, _utils.validateOptionalType)("TypeAnnotation"),
          default: (0, _utils.validateOptionalType)("FlowType"),
          variance: (0, _utils.validateOptionalType)("Variance")
        }
      });
      defineType("TypeParameterDeclaration", {
        visitor: ["params"],
        fields: {
          params: (0, _utils.validate)((0, _utils.arrayOfType)("TypeParameter"))
        }
      });
      defineType("TypeParameterInstantiation", {
        visitor: ["params"],
        fields: {
          params: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
        }
      });
      defineType("UnionTypeAnnotation", {
        visitor: ["types"],
        aliases: ["FlowType"],
        fields: {
          types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
        }
      });
      defineType("Variance", {
        builder: ["kind"],
        fields: {
          kind: (0, _utils.validate)((0, _utils.assertOneOf)("minus", "plus"))
        }
      });
      defineType("VoidTypeAnnotation", {
        aliases: ["FlowType", "FlowBaseAnnotation"]
      });
      defineType("EnumDeclaration", {
        aliases: ["Statement", "Declaration"],
        visitor: ["id", "body"],
        fields: {
          id: (0, _utils.validateType)("Identifier"),
          body: (0, _utils.validateType)(["EnumBooleanBody", "EnumNumberBody", "EnumStringBody", "EnumSymbolBody"])
        }
      });
      defineType("EnumBooleanBody", {
        aliases: ["EnumBody"],
        visitor: ["members"],
        fields: {
          explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
          members: (0, _utils.validateArrayOfType)("EnumBooleanMember"),
          hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
        }
      });
      defineType("EnumNumberBody", {
        aliases: ["EnumBody"],
        visitor: ["members"],
        fields: {
          explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
          members: (0, _utils.validateArrayOfType)("EnumNumberMember"),
          hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
        }
      });
      defineType("EnumStringBody", {
        aliases: ["EnumBody"],
        visitor: ["members"],
        fields: {
          explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
          members: (0, _utils.validateArrayOfType)(["EnumStringMember", "EnumDefaultedMember"]),
          hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
        }
      });
      defineType("EnumSymbolBody", {
        aliases: ["EnumBody"],
        visitor: ["members"],
        fields: {
          members: (0, _utils.validateArrayOfType)("EnumDefaultedMember"),
          hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
        }
      });
      defineType("EnumBooleanMember", {
        aliases: ["EnumMember"],
        visitor: ["id"],
        fields: {
          id: (0, _utils.validateType)("Identifier"),
          init: (0, _utils.validateType)("BooleanLiteral")
        }
      });
      defineType("EnumNumberMember", {
        aliases: ["EnumMember"],
        visitor: ["id", "init"],
        fields: {
          id: (0, _utils.validateType)("Identifier"),
          init: (0, _utils.validateType)("NumericLiteral")
        }
      });
      defineType("EnumStringMember", {
        aliases: ["EnumMember"],
        visitor: ["id", "init"],
        fields: {
          id: (0, _utils.validateType)("Identifier"),
          init: (0, _utils.validateType)("StringLiteral")
        }
      });
      defineType("EnumDefaultedMember", {
        aliases: ["EnumMember"],
        visitor: ["id"],
        fields: {
          id: (0, _utils.validateType)("Identifier")
        }
      });
      defineType("IndexedAccessType", {
        visitor: ["objectType", "indexType"],
        aliases: ["FlowType"],
        fields: {
          objectType: (0, _utils.validateType)("FlowType"),
          indexType: (0, _utils.validateType)("FlowType")
        }
      });
      defineType("OptionalIndexedAccessType", {
        visitor: ["objectType", "indexType"],
        aliases: ["FlowType"],
        fields: {
          objectType: (0, _utils.validateType)("FlowType"),
          indexType: (0, _utils.validateType)("FlowType"),
          optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
        }
      });
    }
  });

  // node_modules/@babel/types/lib/definitions/jsx.js
  var require_jsx = __commonJS({
    "node_modules/@babel/types/lib/definitions/jsx.js"() {
      "use strict";
      init_esbuild_inject();
      var _utils = require_utils();
      var defineType = (0, _utils.defineAliasedType)("JSX");
      defineType("JSXAttribute", {
        visitor: ["name", "value"],
        aliases: ["Immutable"],
        fields: {
          name: {
            validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXNamespacedName")
          },
          value: {
            optional: true,
            validate: (0, _utils.assertNodeType)("JSXElement", "JSXFragment", "StringLiteral", "JSXExpressionContainer")
          }
        }
      });
      defineType("JSXClosingElement", {
        visitor: ["name"],
        aliases: ["Immutable"],
        fields: {
          name: {
            validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName")
          }
        }
      });
      defineType("JSXElement", {
        builder: ["openingElement", "closingElement", "children", "selfClosing"],
        visitor: ["openingElement", "children", "closingElement"],
        aliases: ["Immutable", "Expression"],
        fields: Object.assign({
          openingElement: {
            validate: (0, _utils.assertNodeType)("JSXOpeningElement")
          },
          closingElement: {
            optional: true,
            validate: (0, _utils.assertNodeType)("JSXClosingElement")
          },
          children: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment")))
          }
        }, {
          selfClosing: {
            validate: (0, _utils.assertValueType)("boolean"),
            optional: true
          }
        })
      });
      defineType("JSXEmptyExpression", {});
      defineType("JSXExpressionContainer", {
        visitor: ["expression"],
        aliases: ["Immutable"],
        fields: {
          expression: {
            validate: (0, _utils.assertNodeType)("Expression", "JSXEmptyExpression")
          }
        }
      });
      defineType("JSXSpreadChild", {
        visitor: ["expression"],
        aliases: ["Immutable"],
        fields: {
          expression: {
            validate: (0, _utils.assertNodeType)("Expression")
          }
        }
      });
      defineType("JSXIdentifier", {
        builder: ["name"],
        fields: {
          name: {
            validate: (0, _utils.assertValueType)("string")
          }
        }
      });
      defineType("JSXMemberExpression", {
        visitor: ["object", "property"],
        fields: {
          object: {
            validate: (0, _utils.assertNodeType)("JSXMemberExpression", "JSXIdentifier")
          },
          property: {
            validate: (0, _utils.assertNodeType)("JSXIdentifier")
          }
        }
      });
      defineType("JSXNamespacedName", {
        visitor: ["namespace", "name"],
        fields: {
          namespace: {
            validate: (0, _utils.assertNodeType)("JSXIdentifier")
          },
          name: {
            validate: (0, _utils.assertNodeType)("JSXIdentifier")
          }
        }
      });
      defineType("JSXOpeningElement", {
        builder: ["name", "attributes", "selfClosing"],
        visitor: ["name", "attributes"],
        aliases: ["Immutable"],
        fields: {
          name: {
            validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName")
          },
          selfClosing: {
            default: false
          },
          attributes: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("JSXAttribute", "JSXSpreadAttribute")))
          },
          typeParameters: {
            validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
            optional: true
          }
        }
      });
      defineType("JSXSpreadAttribute", {
        visitor: ["argument"],
        fields: {
          argument: {
            validate: (0, _utils.assertNodeType)("Expression")
          }
        }
      });
      defineType("JSXText", {
        aliases: ["Immutable"],
        builder: ["value"],
        fields: {
          value: {
            validate: (0, _utils.assertValueType)("string")
          }
        }
      });
      defineType("JSXFragment", {
        builder: ["openingFragment", "closingFragment", "children"],
        visitor: ["openingFragment", "children", "closingFragment"],
        aliases: ["Immutable", "Expression"],
        fields: {
          openingFragment: {
            validate: (0, _utils.assertNodeType)("JSXOpeningFragment")
          },
          closingFragment: {
            validate: (0, _utils.assertNodeType)("JSXClosingFragment")
          },
          children: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment")))
          }
        }
      });
      defineType("JSXOpeningFragment", {
        aliases: ["Immutable"]
      });
      defineType("JSXClosingFragment", {
        aliases: ["Immutable"]
      });
    }
  });

  // node_modules/@babel/types/lib/definitions/placeholders.js
  var require_placeholders = __commonJS({
    "node_modules/@babel/types/lib/definitions/placeholders.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.PLACEHOLDERS_FLIPPED_ALIAS = exports.PLACEHOLDERS_ALIAS = exports.PLACEHOLDERS = void 0;
      var _utils = require_utils();
      var PLACEHOLDERS = exports.PLACEHOLDERS = ["Identifier", "StringLiteral", "Expression", "Statement", "Declaration", "BlockStatement", "ClassBody", "Pattern"];
      var PLACEHOLDERS_ALIAS = exports.PLACEHOLDERS_ALIAS = {
        Declaration: ["Statement"],
        Pattern: ["PatternLike", "LVal"]
      };
      for (const type of PLACEHOLDERS) {
        const alias = _utils.ALIAS_KEYS[type];
        if (alias != null && alias.length)
          PLACEHOLDERS_ALIAS[type] = alias;
      }
      var PLACEHOLDERS_FLIPPED_ALIAS = exports.PLACEHOLDERS_FLIPPED_ALIAS = {};
      Object.keys(PLACEHOLDERS_ALIAS).forEach((type) => {
        PLACEHOLDERS_ALIAS[type].forEach((alias) => {
          if (!Object.hasOwnProperty.call(PLACEHOLDERS_FLIPPED_ALIAS, alias)) {
            PLACEHOLDERS_FLIPPED_ALIAS[alias] = [];
          }
          PLACEHOLDERS_FLIPPED_ALIAS[alias].push(type);
        });
      });
    }
  });

  // node_modules/@babel/types/lib/definitions/misc.js
  var require_misc = __commonJS({
    "node_modules/@babel/types/lib/definitions/misc.js"() {
      "use strict";
      init_esbuild_inject();
      var _utils = require_utils();
      var _placeholders = require_placeholders();
      var defineType = (0, _utils.defineAliasedType)("Miscellaneous");
      {
        defineType("Noop", {
          visitor: []
        });
      }
      defineType("Placeholder", {
        visitor: [],
        builder: ["expectedNode", "name"],
        fields: {
          name: {
            validate: (0, _utils.assertNodeType)("Identifier")
          },
          expectedNode: {
            validate: (0, _utils.assertOneOf)(..._placeholders.PLACEHOLDERS)
          }
        }
      });
      defineType("V8IntrinsicIdentifier", {
        builder: ["name"],
        fields: {
          name: {
            validate: (0, _utils.assertValueType)("string")
          }
        }
      });
    }
  });

  // node_modules/@babel/types/lib/definitions/experimental.js
  var require_experimental = __commonJS({
    "node_modules/@babel/types/lib/definitions/experimental.js"() {
      "use strict";
      init_esbuild_inject();
      var _utils = require_utils();
      (0, _utils.default)("ArgumentPlaceholder", {});
      (0, _utils.default)("BindExpression", {
        visitor: ["object", "callee"],
        aliases: ["Expression"],
        fields: !process.env.BABEL_TYPES_8_BREAKING ? {
          object: {
            validate: Object.assign(() => {
            }, {
              oneOfNodeTypes: ["Expression"]
            })
          },
          callee: {
            validate: Object.assign(() => {
            }, {
              oneOfNodeTypes: ["Expression"]
            })
          }
        } : {
          object: {
            validate: (0, _utils.assertNodeType)("Expression")
          },
          callee: {
            validate: (0, _utils.assertNodeType)("Expression")
          }
        }
      });
      (0, _utils.default)("ImportAttribute", {
        visitor: ["key", "value"],
        fields: {
          key: {
            validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral")
          },
          value: {
            validate: (0, _utils.assertNodeType)("StringLiteral")
          }
        }
      });
      (0, _utils.default)("Decorator", {
        visitor: ["expression"],
        fields: {
          expression: {
            validate: (0, _utils.assertNodeType)("Expression")
          }
        }
      });
      (0, _utils.default)("DoExpression", {
        visitor: ["body"],
        builder: ["body", "async"],
        aliases: ["Expression"],
        fields: {
          body: {
            validate: (0, _utils.assertNodeType)("BlockStatement")
          },
          async: {
            validate: (0, _utils.assertValueType)("boolean"),
            default: false
          }
        }
      });
      (0, _utils.default)("ExportDefaultSpecifier", {
        visitor: ["exported"],
        aliases: ["ModuleSpecifier"],
        fields: {
          exported: {
            validate: (0, _utils.assertNodeType)("Identifier")
          }
        }
      });
      (0, _utils.default)("RecordExpression", {
        visitor: ["properties"],
        aliases: ["Expression"],
        fields: {
          properties: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ObjectProperty", "SpreadElement")))
          }
        }
      });
      (0, _utils.default)("TupleExpression", {
        fields: {
          elements: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "SpreadElement"))),
            default: []
          }
        },
        visitor: ["elements"],
        aliases: ["Expression"]
      });
      (0, _utils.default)("DecimalLiteral", {
        builder: ["value"],
        fields: {
          value: {
            validate: (0, _utils.assertValueType)("string")
          }
        },
        aliases: ["Expression", "Pureish", "Literal", "Immutable"]
      });
      (0, _utils.default)("ModuleExpression", {
        visitor: ["body"],
        fields: {
          body: {
            validate: (0, _utils.assertNodeType)("Program")
          }
        },
        aliases: ["Expression"]
      });
      (0, _utils.default)("TopicReference", {
        aliases: ["Expression"]
      });
      (0, _utils.default)("PipelineTopicExpression", {
        builder: ["expression"],
        visitor: ["expression"],
        fields: {
          expression: {
            validate: (0, _utils.assertNodeType)("Expression")
          }
        },
        aliases: ["Expression"]
      });
      (0, _utils.default)("PipelineBareFunction", {
        builder: ["callee"],
        visitor: ["callee"],
        fields: {
          callee: {
            validate: (0, _utils.assertNodeType)("Expression")
          }
        },
        aliases: ["Expression"]
      });
      (0, _utils.default)("PipelinePrimaryTopicReference", {
        aliases: ["Expression"]
      });
    }
  });

  // node_modules/@babel/types/lib/definitions/typescript.js
  var require_typescript = __commonJS({
    "node_modules/@babel/types/lib/definitions/typescript.js"() {
      "use strict";
      init_esbuild_inject();
      var _utils = require_utils();
      var _core = require_core();
      var _is = require_is();
      var defineType = (0, _utils.defineAliasedType)("TypeScript");
      var bool = (0, _utils.assertValueType)("boolean");
      var tSFunctionTypeAnnotationCommon = () => ({
        returnType: {
          validate: (0, _utils.assertNodeType)("TSTypeAnnotation", "Noop"),
          optional: true
        },
        typeParameters: {
          validate: (0, _utils.assertNodeType)("TSTypeParameterDeclaration", "Noop"),
          optional: true
        }
      });
      defineType("TSParameterProperty", {
        aliases: ["LVal"],
        visitor: ["parameter"],
        fields: {
          accessibility: {
            validate: (0, _utils.assertOneOf)("public", "private", "protected"),
            optional: true
          },
          readonly: {
            validate: (0, _utils.assertValueType)("boolean"),
            optional: true
          },
          parameter: {
            validate: (0, _utils.assertNodeType)("Identifier", "AssignmentPattern")
          },
          override: {
            validate: (0, _utils.assertValueType)("boolean"),
            optional: true
          },
          decorators: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
            optional: true
          }
        }
      });
      defineType("TSDeclareFunction", {
        aliases: ["Statement", "Declaration"],
        visitor: ["id", "typeParameters", "params", "returnType"],
        fields: Object.assign({}, (0, _core.functionDeclarationCommon)(), tSFunctionTypeAnnotationCommon())
      });
      defineType("TSDeclareMethod", {
        visitor: ["decorators", "key", "typeParameters", "params", "returnType"],
        fields: Object.assign({}, (0, _core.classMethodOrDeclareMethodCommon)(), tSFunctionTypeAnnotationCommon())
      });
      defineType("TSQualifiedName", {
        aliases: ["TSEntityName"],
        visitor: ["left", "right"],
        fields: {
          left: (0, _utils.validateType)("TSEntityName"),
          right: (0, _utils.validateType)("Identifier")
        }
      });
      var signatureDeclarationCommon = () => ({
        typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),
        ["parameters"]: (0, _utils.validateArrayOfType)(["ArrayPattern", "Identifier", "ObjectPattern", "RestElement"]),
        ["typeAnnotation"]: (0, _utils.validateOptionalType)("TSTypeAnnotation")
      });
      var callConstructSignatureDeclaration = {
        aliases: ["TSTypeElement"],
        visitor: ["typeParameters", "parameters", "typeAnnotation"],
        fields: signatureDeclarationCommon()
      };
      defineType("TSCallSignatureDeclaration", callConstructSignatureDeclaration);
      defineType("TSConstructSignatureDeclaration", callConstructSignatureDeclaration);
      var namedTypeElementCommon = () => ({
        key: (0, _utils.validateType)("Expression"),
        computed: {
          default: false
        },
        optional: (0, _utils.validateOptional)(bool)
      });
      defineType("TSPropertySignature", {
        aliases: ["TSTypeElement"],
        visitor: ["key", "typeAnnotation"],
        fields: Object.assign({}, namedTypeElementCommon(), {
          readonly: (0, _utils.validateOptional)(bool),
          typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"),
          kind: {
            validate: (0, _utils.assertOneOf)("get", "set")
          }
        })
      });
      defineType("TSMethodSignature", {
        aliases: ["TSTypeElement"],
        visitor: ["key", "typeParameters", "parameters", "typeAnnotation"],
        fields: Object.assign({}, signatureDeclarationCommon(), namedTypeElementCommon(), {
          kind: {
            validate: (0, _utils.assertOneOf)("method", "get", "set")
          }
        })
      });
      defineType("TSIndexSignature", {
        aliases: ["TSTypeElement"],
        visitor: ["parameters", "typeAnnotation"],
        fields: {
          readonly: (0, _utils.validateOptional)(bool),
          static: (0, _utils.validateOptional)(bool),
          parameters: (0, _utils.validateArrayOfType)("Identifier"),
          typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation")
        }
      });
      var tsKeywordTypes = ["TSAnyKeyword", "TSBooleanKeyword", "TSBigIntKeyword", "TSIntrinsicKeyword", "TSNeverKeyword", "TSNullKeyword", "TSNumberKeyword", "TSObjectKeyword", "TSStringKeyword", "TSSymbolKeyword", "TSUndefinedKeyword", "TSUnknownKeyword", "TSVoidKeyword"];
      for (const type of tsKeywordTypes) {
        defineType(type, {
          aliases: ["TSType", "TSBaseType"],
          visitor: [],
          fields: {}
        });
      }
      defineType("TSThisType", {
        aliases: ["TSType", "TSBaseType"],
        visitor: [],
        fields: {}
      });
      var fnOrCtrBase = {
        aliases: ["TSType"],
        visitor: ["typeParameters", "parameters", "typeAnnotation"]
      };
      defineType("TSFunctionType", Object.assign({}, fnOrCtrBase, {
        fields: signatureDeclarationCommon()
      }));
      defineType("TSConstructorType", Object.assign({}, fnOrCtrBase, {
        fields: Object.assign({}, signatureDeclarationCommon(), {
          abstract: (0, _utils.validateOptional)(bool)
        })
      }));
      defineType("TSTypeReference", {
        aliases: ["TSType"],
        visitor: ["typeName", "typeParameters"],
        fields: {
          typeName: (0, _utils.validateType)("TSEntityName"),
          typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
        }
      });
      defineType("TSTypePredicate", {
        aliases: ["TSType"],
        visitor: ["parameterName", "typeAnnotation"],
        builder: ["parameterName", "typeAnnotation", "asserts"],
        fields: {
          parameterName: (0, _utils.validateType)(["Identifier", "TSThisType"]),
          typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"),
          asserts: (0, _utils.validateOptional)(bool)
        }
      });
      defineType("TSTypeQuery", {
        aliases: ["TSType"],
        visitor: ["exprName", "typeParameters"],
        fields: {
          exprName: (0, _utils.validateType)(["TSEntityName", "TSImportType"]),
          typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
        }
      });
      defineType("TSTypeLiteral", {
        aliases: ["TSType"],
        visitor: ["members"],
        fields: {
          members: (0, _utils.validateArrayOfType)("TSTypeElement")
        }
      });
      defineType("TSArrayType", {
        aliases: ["TSType"],
        visitor: ["elementType"],
        fields: {
          elementType: (0, _utils.validateType)("TSType")
        }
      });
      defineType("TSTupleType", {
        aliases: ["TSType"],
        visitor: ["elementTypes"],
        fields: {
          elementTypes: (0, _utils.validateArrayOfType)(["TSType", "TSNamedTupleMember"])
        }
      });
      defineType("TSOptionalType", {
        aliases: ["TSType"],
        visitor: ["typeAnnotation"],
        fields: {
          typeAnnotation: (0, _utils.validateType)("TSType")
        }
      });
      defineType("TSRestType", {
        aliases: ["TSType"],
        visitor: ["typeAnnotation"],
        fields: {
          typeAnnotation: (0, _utils.validateType)("TSType")
        }
      });
      defineType("TSNamedTupleMember", {
        visitor: ["label", "elementType"],
        builder: ["label", "elementType", "optional"],
        fields: {
          label: (0, _utils.validateType)("Identifier"),
          optional: {
            validate: bool,
            default: false
          },
          elementType: (0, _utils.validateType)("TSType")
        }
      });
      var unionOrIntersection = {
        aliases: ["TSType"],
        visitor: ["types"],
        fields: {
          types: (0, _utils.validateArrayOfType)("TSType")
        }
      };
      defineType("TSUnionType", unionOrIntersection);
      defineType("TSIntersectionType", unionOrIntersection);
      defineType("TSConditionalType", {
        aliases: ["TSType"],
        visitor: ["checkType", "extendsType", "trueType", "falseType"],
        fields: {
          checkType: (0, _utils.validateType)("TSType"),
          extendsType: (0, _utils.validateType)("TSType"),
          trueType: (0, _utils.validateType)("TSType"),
          falseType: (0, _utils.validateType)("TSType")
        }
      });
      defineType("TSInferType", {
        aliases: ["TSType"],
        visitor: ["typeParameter"],
        fields: {
          typeParameter: (0, _utils.validateType)("TSTypeParameter")
        }
      });
      defineType("TSParenthesizedType", {
        aliases: ["TSType"],
        visitor: ["typeAnnotation"],
        fields: {
          typeAnnotation: (0, _utils.validateType)("TSType")
        }
      });
      defineType("TSTypeOperator", {
        aliases: ["TSType"],
        visitor: ["typeAnnotation"],
        fields: {
          operator: (0, _utils.validate)((0, _utils.assertValueType)("string")),
          typeAnnotation: (0, _utils.validateType)("TSType")
        }
      });
      defineType("TSIndexedAccessType", {
        aliases: ["TSType"],
        visitor: ["objectType", "indexType"],
        fields: {
          objectType: (0, _utils.validateType)("TSType"),
          indexType: (0, _utils.validateType)("TSType")
        }
      });
      defineType("TSMappedType", {
        aliases: ["TSType"],
        visitor: ["typeParameter", "typeAnnotation", "nameType"],
        fields: {
          readonly: (0, _utils.validateOptional)((0, _utils.assertOneOf)(true, false, "+", "-")),
          typeParameter: (0, _utils.validateType)("TSTypeParameter"),
          optional: (0, _utils.validateOptional)((0, _utils.assertOneOf)(true, false, "+", "-")),
          typeAnnotation: (0, _utils.validateOptionalType)("TSType"),
          nameType: (0, _utils.validateOptionalType)("TSType")
        }
      });
      defineType("TSLiteralType", {
        aliases: ["TSType", "TSBaseType"],
        visitor: ["literal"],
        fields: {
          literal: {
            validate: function() {
              const unaryExpression = (0, _utils.assertNodeType)("NumericLiteral", "BigIntLiteral");
              const unaryOperator = (0, _utils.assertOneOf)("-");
              const literal = (0, _utils.assertNodeType)("NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral");
              function validator(parent, key, node) {
                if ((0, _is.default)("UnaryExpression", node)) {
                  unaryOperator(node, "operator", node.operator);
                  unaryExpression(node, "argument", node.argument);
                } else {
                  literal(parent, key, node);
                }
              }
              validator.oneOfNodeTypes = ["NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral", "UnaryExpression"];
              return validator;
            }()
          }
        }
      });
      defineType("TSExpressionWithTypeArguments", {
        aliases: ["TSType"],
        visitor: ["expression", "typeParameters"],
        fields: {
          expression: (0, _utils.validateType)("TSEntityName"),
          typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
        }
      });
      defineType("TSInterfaceDeclaration", {
        aliases: ["Statement", "Declaration"],
        visitor: ["id", "typeParameters", "extends", "body"],
        fields: {
          declare: (0, _utils.validateOptional)(bool),
          id: (0, _utils.validateType)("Identifier"),
          typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),
          extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("TSExpressionWithTypeArguments")),
          body: (0, _utils.validateType)("TSInterfaceBody")
        }
      });
      defineType("TSInterfaceBody", {
        visitor: ["body"],
        fields: {
          body: (0, _utils.validateArrayOfType)("TSTypeElement")
        }
      });
      defineType("TSTypeAliasDeclaration", {
        aliases: ["Statement", "Declaration"],
        visitor: ["id", "typeParameters", "typeAnnotation"],
        fields: {
          declare: (0, _utils.validateOptional)(bool),
          id: (0, _utils.validateType)("Identifier"),
          typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),
          typeAnnotation: (0, _utils.validateType)("TSType")
        }
      });
      defineType("TSInstantiationExpression", {
        aliases: ["Expression"],
        visitor: ["expression", "typeParameters"],
        fields: {
          expression: (0, _utils.validateType)("Expression"),
          typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
        }
      });
      var TSTypeExpression = {
        aliases: ["Expression", "LVal", "PatternLike"],
        visitor: ["expression", "typeAnnotation"],
        fields: {
          expression: (0, _utils.validateType)("Expression"),
          typeAnnotation: (0, _utils.validateType)("TSType")
        }
      };
      defineType("TSAsExpression", TSTypeExpression);
      defineType("TSSatisfiesExpression", TSTypeExpression);
      defineType("TSTypeAssertion", {
        aliases: ["Expression", "LVal", "PatternLike"],
        visitor: ["typeAnnotation", "expression"],
        fields: {
          typeAnnotation: (0, _utils.validateType)("TSType"),
          expression: (0, _utils.validateType)("Expression")
        }
      });
      defineType("TSEnumDeclaration", {
        aliases: ["Statement", "Declaration"],
        visitor: ["id", "members"],
        fields: {
          declare: (0, _utils.validateOptional)(bool),
          const: (0, _utils.validateOptional)(bool),
          id: (0, _utils.validateType)("Identifier"),
          members: (0, _utils.validateArrayOfType)("TSEnumMember"),
          initializer: (0, _utils.validateOptionalType)("Expression")
        }
      });
      defineType("TSEnumMember", {
        visitor: ["id", "initializer"],
        fields: {
          id: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
          initializer: (0, _utils.validateOptionalType)("Expression")
        }
      });
      defineType("TSModuleDeclaration", {
        aliases: ["Statement", "Declaration"],
        visitor: ["id", "body"],
        fields: {
          declare: (0, _utils.validateOptional)(bool),
          global: (0, _utils.validateOptional)(bool),
          id: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
          body: (0, _utils.validateType)(["TSModuleBlock", "TSModuleDeclaration"])
        }
      });
      defineType("TSModuleBlock", {
        aliases: ["Scopable", "Block", "BlockParent", "FunctionParent"],
        visitor: ["body"],
        fields: {
          body: (0, _utils.validateArrayOfType)("Statement")
        }
      });
      defineType("TSImportType", {
        aliases: ["TSType"],
        visitor: ["argument", "qualifier", "typeParameters"],
        fields: {
          argument: (0, _utils.validateType)("StringLiteral"),
          qualifier: (0, _utils.validateOptionalType)("TSEntityName"),
          typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
        }
      });
      defineType("TSImportEqualsDeclaration", {
        aliases: ["Statement"],
        visitor: ["id", "moduleReference"],
        fields: {
          isExport: (0, _utils.validate)(bool),
          id: (0, _utils.validateType)("Identifier"),
          moduleReference: (0, _utils.validateType)(["TSEntityName", "TSExternalModuleReference"]),
          importKind: {
            validate: (0, _utils.assertOneOf)("type", "value"),
            optional: true
          }
        }
      });
      defineType("TSExternalModuleReference", {
        visitor: ["expression"],
        fields: {
          expression: (0, _utils.validateType)("StringLiteral")
        }
      });
      defineType("TSNonNullExpression", {
        aliases: ["Expression", "LVal", "PatternLike"],
        visitor: ["expression"],
        fields: {
          expression: (0, _utils.validateType)("Expression")
        }
      });
      defineType("TSExportAssignment", {
        aliases: ["Statement"],
        visitor: ["expression"],
        fields: {
          expression: (0, _utils.validateType)("Expression")
        }
      });
      defineType("TSNamespaceExportDeclaration", {
        aliases: ["Statement"],
        visitor: ["id"],
        fields: {
          id: (0, _utils.validateType)("Identifier")
        }
      });
      defineType("TSTypeAnnotation", {
        visitor: ["typeAnnotation"],
        fields: {
          typeAnnotation: {
            validate: (0, _utils.assertNodeType)("TSType")
          }
        }
      });
      defineType("TSTypeParameterInstantiation", {
        visitor: ["params"],
        fields: {
          params: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSType")))
          }
        }
      });
      defineType("TSTypeParameterDeclaration", {
        visitor: ["params"],
        fields: {
          params: {
            validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSTypeParameter")))
          }
        }
      });
      defineType("TSTypeParameter", {
        builder: ["constraint", "default", "name"],
        visitor: ["constraint", "default"],
        fields: {
          name: {
            validate: (0, _utils.assertValueType)("string")
          },
          in: {
            validate: (0, _utils.assertValueType)("boolean"),
            optional: true
          },
          out: {
            validate: (0, _utils.assertValueType)("boolean"),
            optional: true
          },
          const: {
            validate: (0, _utils.assertValueType)("boolean"),
            optional: true
          },
          constraint: {
            validate: (0, _utils.assertNodeType)("TSType"),
            optional: true
          },
          default: {
            validate: (0, _utils.assertNodeType)("TSType"),
            optional: true
          }
        }
      });
    }
  });

  // node_modules/@babel/types/lib/definitions/deprecated-aliases.js
  var require_deprecated_aliases = __commonJS({
    "node_modules/@babel/types/lib/definitions/deprecated-aliases.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.DEPRECATED_ALIASES = void 0;
      var DEPRECATED_ALIASES = exports.DEPRECATED_ALIASES = {
        ModuleDeclaration: "ImportOrExportDeclaration"
      };
    }
  });

  // node_modules/@babel/types/lib/definitions/index.js
  var require_definitions = __commonJS({
    "node_modules/@babel/types/lib/definitions/index.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "ALIAS_KEYS", {
        enumerable: true,
        get: function() {
          return _utils.ALIAS_KEYS;
        }
      });
      Object.defineProperty(exports, "BUILDER_KEYS", {
        enumerable: true,
        get: function() {
          return _utils.BUILDER_KEYS;
        }
      });
      Object.defineProperty(exports, "DEPRECATED_ALIASES", {
        enumerable: true,
        get: function() {
          return _deprecatedAliases.DEPRECATED_ALIASES;
        }
      });
      Object.defineProperty(exports, "DEPRECATED_KEYS", {
        enumerable: true,
        get: function() {
          return _utils.DEPRECATED_KEYS;
        }
      });
      Object.defineProperty(exports, "FLIPPED_ALIAS_KEYS", {
        enumerable: true,
        get: function() {
          return _utils.FLIPPED_ALIAS_KEYS;
        }
      });
      Object.defineProperty(exports, "NODE_FIELDS", {
        enumerable: true,
        get: function() {
          return _utils.NODE_FIELDS;
        }
      });
      Object.defineProperty(exports, "NODE_PARENT_VALIDATIONS", {
        enumerable: true,
        get: function() {
          return _utils.NODE_PARENT_VALIDATIONS;
        }
      });
      Object.defineProperty(exports, "PLACEHOLDERS", {
        enumerable: true,
        get: function() {
          return _placeholders.PLACEHOLDERS;
        }
      });
      Object.defineProperty(exports, "PLACEHOLDERS_ALIAS", {
        enumerable: true,
        get: function() {
          return _placeholders.PLACEHOLDERS_ALIAS;
        }
      });
      Object.defineProperty(exports, "PLACEHOLDERS_FLIPPED_ALIAS", {
        enumerable: true,
        get: function() {
          return _placeholders.PLACEHOLDERS_FLIPPED_ALIAS;
        }
      });
      exports.TYPES = void 0;
      Object.defineProperty(exports, "VISITOR_KEYS", {
        enumerable: true,
        get: function() {
          return _utils.VISITOR_KEYS;
        }
      });
      var _toFastProperties = require_to_fast_properties();
      require_core();
      require_flow();
      require_jsx();
      require_misc();
      require_experimental();
      require_typescript();
      var _utils = require_utils();
      var _placeholders = require_placeholders();
      var _deprecatedAliases = require_deprecated_aliases();
      Object.keys(_deprecatedAliases.DEPRECATED_ALIASES).forEach((deprecatedAlias) => {
        _utils.FLIPPED_ALIAS_KEYS[deprecatedAlias] = _utils.FLIPPED_ALIAS_KEYS[_deprecatedAliases.DEPRECATED_ALIASES[deprecatedAlias]];
      });
      _toFastProperties(_utils.VISITOR_KEYS);
      _toFastProperties(_utils.ALIAS_KEYS);
      _toFastProperties(_utils.FLIPPED_ALIAS_KEYS);
      _toFastProperties(_utils.NODE_FIELDS);
      _toFastProperties(_utils.BUILDER_KEYS);
      _toFastProperties(_utils.DEPRECATED_KEYS);
      _toFastProperties(_placeholders.PLACEHOLDERS_ALIAS);
      _toFastProperties(_placeholders.PLACEHOLDERS_FLIPPED_ALIAS);
      var TYPES = exports.TYPES = [].concat(Object.keys(_utils.VISITOR_KEYS), Object.keys(_utils.FLIPPED_ALIAS_KEYS), Object.keys(_utils.DEPRECATED_KEYS));
    }
  });

  // node_modules/@babel/types/lib/validators/validate.js
  var require_validate = __commonJS({
    "node_modules/@babel/types/lib/validators/validate.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = validate;
      exports.validateChild = validateChild;
      exports.validateField = validateField;
      var _index = require_definitions();
      function validate(node, key, val) {
        if (!node)
          return;
        const fields = _index.NODE_FIELDS[node.type];
        if (!fields)
          return;
        const field = fields[key];
        validateField(node, key, val, field);
        validateChild(node, key, val);
      }
      function validateField(node, key, val, field) {
        if (!(field != null && field.validate))
          return;
        if (field.optional && val == null)
          return;
        field.validate(node, key, val);
      }
      function validateChild(node, key, val) {
        if (val == null)
          return;
        const validate2 = _index.NODE_PARENT_VALIDATIONS[val.type];
        if (!validate2)
          return;
        validate2(node, key, val);
      }
    }
  });

  // node_modules/@babel/types/lib/builders/validateNode.js
  var require_validateNode = __commonJS({
    "node_modules/@babel/types/lib/builders/validateNode.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = validateNode;
      var _validate = require_validate();
      var _index = require_lib3();
      function validateNode(node) {
        const keys = _index.BUILDER_KEYS[node.type];
        for (const key of keys) {
          (0, _validate.default)(node, key, node[key]);
        }
        return node;
      }
    }
  });

  // node_modules/@babel/types/lib/builders/generated/index.js
  var require_generated2 = __commonJS({
    "node_modules/@babel/types/lib/builders/generated/index.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.anyTypeAnnotation = anyTypeAnnotation;
      exports.argumentPlaceholder = argumentPlaceholder;
      exports.arrayExpression = arrayExpression;
      exports.arrayPattern = arrayPattern;
      exports.arrayTypeAnnotation = arrayTypeAnnotation;
      exports.arrowFunctionExpression = arrowFunctionExpression;
      exports.assignmentExpression = assignmentExpression;
      exports.assignmentPattern = assignmentPattern;
      exports.awaitExpression = awaitExpression;
      exports.bigIntLiteral = bigIntLiteral;
      exports.binaryExpression = binaryExpression;
      exports.bindExpression = bindExpression;
      exports.blockStatement = blockStatement;
      exports.booleanLiteral = booleanLiteral;
      exports.booleanLiteralTypeAnnotation = booleanLiteralTypeAnnotation;
      exports.booleanTypeAnnotation = booleanTypeAnnotation;
      exports.breakStatement = breakStatement;
      exports.callExpression = callExpression;
      exports.catchClause = catchClause;
      exports.classAccessorProperty = classAccessorProperty;
      exports.classBody = classBody;
      exports.classDeclaration = classDeclaration;
      exports.classExpression = classExpression;
      exports.classImplements = classImplements;
      exports.classMethod = classMethod;
      exports.classPrivateMethod = classPrivateMethod;
      exports.classPrivateProperty = classPrivateProperty;
      exports.classProperty = classProperty;
      exports.conditionalExpression = conditionalExpression;
      exports.continueStatement = continueStatement;
      exports.debuggerStatement = debuggerStatement;
      exports.decimalLiteral = decimalLiteral;
      exports.declareClass = declareClass;
      exports.declareExportAllDeclaration = declareExportAllDeclaration;
      exports.declareExportDeclaration = declareExportDeclaration;
      exports.declareFunction = declareFunction;
      exports.declareInterface = declareInterface;
      exports.declareModule = declareModule;
      exports.declareModuleExports = declareModuleExports;
      exports.declareOpaqueType = declareOpaqueType;
      exports.declareTypeAlias = declareTypeAlias;
      exports.declareVariable = declareVariable;
      exports.declaredPredicate = declaredPredicate;
      exports.decorator = decorator;
      exports.directive = directive;
      exports.directiveLiteral = directiveLiteral;
      exports.doExpression = doExpression;
      exports.doWhileStatement = doWhileStatement;
      exports.emptyStatement = emptyStatement;
      exports.emptyTypeAnnotation = emptyTypeAnnotation;
      exports.enumBooleanBody = enumBooleanBody;
      exports.enumBooleanMember = enumBooleanMember;
      exports.enumDeclaration = enumDeclaration;
      exports.enumDefaultedMember = enumDefaultedMember;
      exports.enumNumberBody = enumNumberBody;
      exports.enumNumberMember = enumNumberMember;
      exports.enumStringBody = enumStringBody;
      exports.enumStringMember = enumStringMember;
      exports.enumSymbolBody = enumSymbolBody;
      exports.existsTypeAnnotation = existsTypeAnnotation;
      exports.exportAllDeclaration = exportAllDeclaration;
      exports.exportDefaultDeclaration = exportDefaultDeclaration;
      exports.exportDefaultSpecifier = exportDefaultSpecifier;
      exports.exportNamedDeclaration = exportNamedDeclaration;
      exports.exportNamespaceSpecifier = exportNamespaceSpecifier;
      exports.exportSpecifier = exportSpecifier;
      exports.expressionStatement = expressionStatement;
      exports.file = file;
      exports.forInStatement = forInStatement;
      exports.forOfStatement = forOfStatement;
      exports.forStatement = forStatement;
      exports.functionDeclaration = functionDeclaration;
      exports.functionExpression = functionExpression;
      exports.functionTypeAnnotation = functionTypeAnnotation;
      exports.functionTypeParam = functionTypeParam;
      exports.genericTypeAnnotation = genericTypeAnnotation;
      exports.identifier = identifier;
      exports.ifStatement = ifStatement;
      exports.import = _import;
      exports.importAttribute = importAttribute;
      exports.importDeclaration = importDeclaration;
      exports.importDefaultSpecifier = importDefaultSpecifier;
      exports.importExpression = importExpression;
      exports.importNamespaceSpecifier = importNamespaceSpecifier;
      exports.importSpecifier = importSpecifier;
      exports.indexedAccessType = indexedAccessType;
      exports.inferredPredicate = inferredPredicate;
      exports.interfaceDeclaration = interfaceDeclaration;
      exports.interfaceExtends = interfaceExtends;
      exports.interfaceTypeAnnotation = interfaceTypeAnnotation;
      exports.interpreterDirective = interpreterDirective;
      exports.intersectionTypeAnnotation = intersectionTypeAnnotation;
      exports.jSXAttribute = exports.jsxAttribute = jsxAttribute;
      exports.jSXClosingElement = exports.jsxClosingElement = jsxClosingElement;
      exports.jSXClosingFragment = exports.jsxClosingFragment = jsxClosingFragment;
      exports.jSXElement = exports.jsxElement = jsxElement;
      exports.jSXEmptyExpression = exports.jsxEmptyExpression = jsxEmptyExpression;
      exports.jSXExpressionContainer = exports.jsxExpressionContainer = jsxExpressionContainer;
      exports.jSXFragment = exports.jsxFragment = jsxFragment;
      exports.jSXIdentifier = exports.jsxIdentifier = jsxIdentifier;
      exports.jSXMemberExpression = exports.jsxMemberExpression = jsxMemberExpression;
      exports.jSXNamespacedName = exports.jsxNamespacedName = jsxNamespacedName;
      exports.jSXOpeningElement = exports.jsxOpeningElement = jsxOpeningElement;
      exports.jSXOpeningFragment = exports.jsxOpeningFragment = jsxOpeningFragment;
      exports.jSXSpreadAttribute = exports.jsxSpreadAttribute = jsxSpreadAttribute;
      exports.jSXSpreadChild = exports.jsxSpreadChild = jsxSpreadChild;
      exports.jSXText = exports.jsxText = jsxText;
      exports.labeledStatement = labeledStatement;
      exports.logicalExpression = logicalExpression;
      exports.memberExpression = memberExpression;
      exports.metaProperty = metaProperty;
      exports.mixedTypeAnnotation = mixedTypeAnnotation;
      exports.moduleExpression = moduleExpression;
      exports.newExpression = newExpression;
      exports.noop = noop2;
      exports.nullLiteral = nullLiteral;
      exports.nullLiteralTypeAnnotation = nullLiteralTypeAnnotation;
      exports.nullableTypeAnnotation = nullableTypeAnnotation;
      exports.numberLiteral = NumberLiteral;
      exports.numberLiteralTypeAnnotation = numberLiteralTypeAnnotation;
      exports.numberTypeAnnotation = numberTypeAnnotation;
      exports.numericLiteral = numericLiteral;
      exports.objectExpression = objectExpression;
      exports.objectMethod = objectMethod;
      exports.objectPattern = objectPattern;
      exports.objectProperty = objectProperty;
      exports.objectTypeAnnotation = objectTypeAnnotation;
      exports.objectTypeCallProperty = objectTypeCallProperty;
      exports.objectTypeIndexer = objectTypeIndexer;
      exports.objectTypeInternalSlot = objectTypeInternalSlot;
      exports.objectTypeProperty = objectTypeProperty;
      exports.objectTypeSpreadProperty = objectTypeSpreadProperty;
      exports.opaqueType = opaqueType;
      exports.optionalCallExpression = optionalCallExpression;
      exports.optionalIndexedAccessType = optionalIndexedAccessType;
      exports.optionalMemberExpression = optionalMemberExpression;
      exports.parenthesizedExpression = parenthesizedExpression2;
      exports.pipelineBareFunction = pipelineBareFunction;
      exports.pipelinePrimaryTopicReference = pipelinePrimaryTopicReference;
      exports.pipelineTopicExpression = pipelineTopicExpression;
      exports.placeholder = placeholder;
      exports.privateName = privateName;
      exports.program = program;
      exports.qualifiedTypeIdentifier = qualifiedTypeIdentifier;
      exports.recordExpression = recordExpression;
      exports.regExpLiteral = regExpLiteral;
      exports.regexLiteral = RegexLiteral;
      exports.restElement = restElement;
      exports.restProperty = RestProperty;
      exports.returnStatement = returnStatement;
      exports.sequenceExpression = sequenceExpression;
      exports.spreadElement = spreadElement;
      exports.spreadProperty = SpreadProperty;
      exports.staticBlock = staticBlock;
      exports.stringLiteral = stringLiteral;
      exports.stringLiteralTypeAnnotation = stringLiteralTypeAnnotation;
      exports.stringTypeAnnotation = stringTypeAnnotation;
      exports.super = _super;
      exports.switchCase = switchCase;
      exports.switchStatement = switchStatement;
      exports.symbolTypeAnnotation = symbolTypeAnnotation;
      exports.taggedTemplateExpression = taggedTemplateExpression;
      exports.templateElement = templateElement;
      exports.templateLiteral = templateLiteral;
      exports.thisExpression = thisExpression;
      exports.thisTypeAnnotation = thisTypeAnnotation;
      exports.throwStatement = throwStatement;
      exports.topicReference = topicReference;
      exports.tryStatement = tryStatement;
      exports.tSAnyKeyword = exports.tsAnyKeyword = tsAnyKeyword;
      exports.tSArrayType = exports.tsArrayType = tsArrayType;
      exports.tSAsExpression = exports.tsAsExpression = tsAsExpression;
      exports.tSBigIntKeyword = exports.tsBigIntKeyword = tsBigIntKeyword;
      exports.tSBooleanKeyword = exports.tsBooleanKeyword = tsBooleanKeyword;
      exports.tSCallSignatureDeclaration = exports.tsCallSignatureDeclaration = tsCallSignatureDeclaration;
      exports.tSConditionalType = exports.tsConditionalType = tsConditionalType;
      exports.tSConstructSignatureDeclaration = exports.tsConstructSignatureDeclaration = tsConstructSignatureDeclaration;
      exports.tSConstructorType = exports.tsConstructorType = tsConstructorType;
      exports.tSDeclareFunction = exports.tsDeclareFunction = tsDeclareFunction;
      exports.tSDeclareMethod = exports.tsDeclareMethod = tsDeclareMethod;
      exports.tSEnumDeclaration = exports.tsEnumDeclaration = tsEnumDeclaration;
      exports.tSEnumMember = exports.tsEnumMember = tsEnumMember;
      exports.tSExportAssignment = exports.tsExportAssignment = tsExportAssignment;
      exports.tSExpressionWithTypeArguments = exports.tsExpressionWithTypeArguments = tsExpressionWithTypeArguments;
      exports.tSExternalModuleReference = exports.tsExternalModuleReference = tsExternalModuleReference;
      exports.tSFunctionType = exports.tsFunctionType = tsFunctionType;
      exports.tSImportEqualsDeclaration = exports.tsImportEqualsDeclaration = tsImportEqualsDeclaration;
      exports.tSImportType = exports.tsImportType = tsImportType;
      exports.tSIndexSignature = exports.tsIndexSignature = tsIndexSignature;
      exports.tSIndexedAccessType = exports.tsIndexedAccessType = tsIndexedAccessType;
      exports.tSInferType = exports.tsInferType = tsInferType;
      exports.tSInstantiationExpression = exports.tsInstantiationExpression = tsInstantiationExpression;
      exports.tSInterfaceBody = exports.tsInterfaceBody = tsInterfaceBody;
      exports.tSInterfaceDeclaration = exports.tsInterfaceDeclaration = tsInterfaceDeclaration;
      exports.tSIntersectionType = exports.tsIntersectionType = tsIntersectionType;
      exports.tSIntrinsicKeyword = exports.tsIntrinsicKeyword = tsIntrinsicKeyword;
      exports.tSLiteralType = exports.tsLiteralType = tsLiteralType;
      exports.tSMappedType = exports.tsMappedType = tsMappedType;
      exports.tSMethodSignature = exports.tsMethodSignature = tsMethodSignature;
      exports.tSModuleBlock = exports.tsModuleBlock = tsModuleBlock;
      exports.tSModuleDeclaration = exports.tsModuleDeclaration = tsModuleDeclaration;
      exports.tSNamedTupleMember = exports.tsNamedTupleMember = tsNamedTupleMember;
      exports.tSNamespaceExportDeclaration = exports.tsNamespaceExportDeclaration = tsNamespaceExportDeclaration;
      exports.tSNeverKeyword = exports.tsNeverKeyword = tsNeverKeyword;
      exports.tSNonNullExpression = exports.tsNonNullExpression = tsNonNullExpression;
      exports.tSNullKeyword = exports.tsNullKeyword = tsNullKeyword;
      exports.tSNumberKeyword = exports.tsNumberKeyword = tsNumberKeyword;
      exports.tSObjectKeyword = exports.tsObjectKeyword = tsObjectKeyword;
      exports.tSOptionalType = exports.tsOptionalType = tsOptionalType;
      exports.tSParameterProperty = exports.tsParameterProperty = tsParameterProperty;
      exports.tSParenthesizedType = exports.tsParenthesizedType = tsParenthesizedType;
      exports.tSPropertySignature = exports.tsPropertySignature = tsPropertySignature;
      exports.tSQualifiedName = exports.tsQualifiedName = tsQualifiedName;
      exports.tSRestType = exports.tsRestType = tsRestType;
      exports.tSSatisfiesExpression = exports.tsSatisfiesExpression = tsSatisfiesExpression;
      exports.tSStringKeyword = exports.tsStringKeyword = tsStringKeyword;
      exports.tSSymbolKeyword = exports.tsSymbolKeyword = tsSymbolKeyword;
      exports.tSThisType = exports.tsThisType = tsThisType;
      exports.tSTupleType = exports.tsTupleType = tsTupleType;
      exports.tSTypeAliasDeclaration = exports.tsTypeAliasDeclaration = tsTypeAliasDeclaration;
      exports.tSTypeAnnotation = exports.tsTypeAnnotation = tsTypeAnnotation;
      exports.tSTypeAssertion = exports.tsTypeAssertion = tsTypeAssertion;
      exports.tSTypeLiteral = exports.tsTypeLiteral = tsTypeLiteral;
      exports.tSTypeOperator = exports.tsTypeOperator = tsTypeOperator;
      exports.tSTypeParameter = exports.tsTypeParameter = tsTypeParameter;
      exports.tSTypeParameterDeclaration = exports.tsTypeParameterDeclaration = tsTypeParameterDeclaration;
      exports.tSTypeParameterInstantiation = exports.tsTypeParameterInstantiation = tsTypeParameterInstantiation;
      exports.tSTypePredicate = exports.tsTypePredicate = tsTypePredicate;
      exports.tSTypeQuery = exports.tsTypeQuery = tsTypeQuery;
      exports.tSTypeReference = exports.tsTypeReference = tsTypeReference;
      exports.tSUndefinedKeyword = exports.tsUndefinedKeyword = tsUndefinedKeyword;
      exports.tSUnionType = exports.tsUnionType = tsUnionType;
      exports.tSUnknownKeyword = exports.tsUnknownKeyword = tsUnknownKeyword;
      exports.tSVoidKeyword = exports.tsVoidKeyword = tsVoidKeyword;
      exports.tupleExpression = tupleExpression;
      exports.tupleTypeAnnotation = tupleTypeAnnotation;
      exports.typeAlias = typeAlias;
      exports.typeAnnotation = typeAnnotation;
      exports.typeCastExpression = typeCastExpression;
      exports.typeParameter = typeParameter;
      exports.typeParameterDeclaration = typeParameterDeclaration;
      exports.typeParameterInstantiation = typeParameterInstantiation;
      exports.typeofTypeAnnotation = typeofTypeAnnotation;
      exports.unaryExpression = unaryExpression;
      exports.unionTypeAnnotation = unionTypeAnnotation;
      exports.updateExpression = updateExpression;
      exports.v8IntrinsicIdentifier = v8IntrinsicIdentifier;
      exports.variableDeclaration = variableDeclaration;
      exports.variableDeclarator = variableDeclarator;
      exports.variance = variance;
      exports.voidTypeAnnotation = voidTypeAnnotation;
      exports.whileStatement = whileStatement;
      exports.withStatement = withStatement;
      exports.yieldExpression = yieldExpression;
      var _validateNode = require_validateNode();
      var _deprecationWarning = require_deprecationWarning();
      function arrayExpression(elements = []) {
        return (0, _validateNode.default)({
          type: "ArrayExpression",
          elements
        });
      }
      function assignmentExpression(operator, left, right) {
        return (0, _validateNode.default)({
          type: "AssignmentExpression",
          operator,
          left,
          right
        });
      }
      function binaryExpression(operator, left, right) {
        return (0, _validateNode.default)({
          type: "BinaryExpression",
          operator,
          left,
          right
        });
      }
      function interpreterDirective(value) {
        return (0, _validateNode.default)({
          type: "InterpreterDirective",
          value
        });
      }
      function directive(value) {
        return (0, _validateNode.default)({
          type: "Directive",
          value
        });
      }
      function directiveLiteral(value) {
        return (0, _validateNode.default)({
          type: "DirectiveLiteral",
          value
        });
      }
      function blockStatement(body, directives = []) {
        return (0, _validateNode.default)({
          type: "BlockStatement",
          body,
          directives
        });
      }
      function breakStatement(label = null) {
        return (0, _validateNode.default)({
          type: "BreakStatement",
          label
        });
      }
      function callExpression(callee, _arguments) {
        return (0, _validateNode.default)({
          type: "CallExpression",
          callee,
          arguments: _arguments
        });
      }
      function catchClause(param = null, body) {
        return (0, _validateNode.default)({
          type: "CatchClause",
          param,
          body
        });
      }
      function conditionalExpression(test, consequent, alternate) {
        return (0, _validateNode.default)({
          type: "ConditionalExpression",
          test,
          consequent,
          alternate
        });
      }
      function continueStatement(label = null) {
        return (0, _validateNode.default)({
          type: "ContinueStatement",
          label
        });
      }
      function debuggerStatement() {
        return {
          type: "DebuggerStatement"
        };
      }
      function doWhileStatement(test, body) {
        return (0, _validateNode.default)({
          type: "DoWhileStatement",
          test,
          body
        });
      }
      function emptyStatement() {
        return {
          type: "EmptyStatement"
        };
      }
      function expressionStatement(expression) {
        return (0, _validateNode.default)({
          type: "ExpressionStatement",
          expression
        });
      }
      function file(program2, comments = null, tokens = null) {
        return (0, _validateNode.default)({
          type: "File",
          program: program2,
          comments,
          tokens
        });
      }
      function forInStatement(left, right, body) {
        return (0, _validateNode.default)({
          type: "ForInStatement",
          left,
          right,
          body
        });
      }
      function forStatement(init = null, test = null, update = null, body) {
        return (0, _validateNode.default)({
          type: "ForStatement",
          init,
          test,
          update,
          body
        });
      }
      function functionDeclaration(id = null, params, body, generator = false, async = false) {
        return (0, _validateNode.default)({
          type: "FunctionDeclaration",
          id,
          params,
          body,
          generator,
          async
        });
      }
      function functionExpression(id = null, params, body, generator = false, async = false) {
        return (0, _validateNode.default)({
          type: "FunctionExpression",
          id,
          params,
          body,
          generator,
          async
        });
      }
      function identifier(name) {
        return (0, _validateNode.default)({
          type: "Identifier",
          name
        });
      }
      function ifStatement(test, consequent, alternate = null) {
        return (0, _validateNode.default)({
          type: "IfStatement",
          test,
          consequent,
          alternate
        });
      }
      function labeledStatement(label, body) {
        return (0, _validateNode.default)({
          type: "LabeledStatement",
          label,
          body
        });
      }
      function stringLiteral(value) {
        return (0, _validateNode.default)({
          type: "StringLiteral",
          value
        });
      }
      function numericLiteral(value) {
        return (0, _validateNode.default)({
          type: "NumericLiteral",
          value
        });
      }
      function nullLiteral() {
        return {
          type: "NullLiteral"
        };
      }
      function booleanLiteral(value) {
        return (0, _validateNode.default)({
          type: "BooleanLiteral",
          value
        });
      }
      function regExpLiteral(pattern, flags = "") {
        return (0, _validateNode.default)({
          type: "RegExpLiteral",
          pattern,
          flags
        });
      }
      function logicalExpression(operator, left, right) {
        return (0, _validateNode.default)({
          type: "LogicalExpression",
          operator,
          left,
          right
        });
      }
      function memberExpression(object, property, computed = false, optional = null) {
        return (0, _validateNode.default)({
          type: "MemberExpression",
          object,
          property,
          computed,
          optional
        });
      }
      function newExpression(callee, _arguments) {
        return (0, _validateNode.default)({
          type: "NewExpression",
          callee,
          arguments: _arguments
        });
      }
      function program(body, directives = [], sourceType = "script", interpreter = null) {
        return (0, _validateNode.default)({
          type: "Program",
          body,
          directives,
          sourceType,
          interpreter
        });
      }
      function objectExpression(properties) {
        return (0, _validateNode.default)({
          type: "ObjectExpression",
          properties
        });
      }
      function objectMethod(kind = "method", key, params, body, computed = false, generator = false, async = false) {
        return (0, _validateNode.default)({
          type: "ObjectMethod",
          kind,
          key,
          params,
          body,
          computed,
          generator,
          async
        });
      }
      function objectProperty(key, value, computed = false, shorthand = false, decorators = null) {
        return (0, _validateNode.default)({
          type: "ObjectProperty",
          key,
          value,
          computed,
          shorthand,
          decorators
        });
      }
      function restElement(argument) {
        return (0, _validateNode.default)({
          type: "RestElement",
          argument
        });
      }
      function returnStatement(argument = null) {
        return (0, _validateNode.default)({
          type: "ReturnStatement",
          argument
        });
      }
      function sequenceExpression(expressions) {
        return (0, _validateNode.default)({
          type: "SequenceExpression",
          expressions
        });
      }
      function parenthesizedExpression2(expression) {
        return (0, _validateNode.default)({
          type: "ParenthesizedExpression",
          expression
        });
      }
      function switchCase(test = null, consequent) {
        return (0, _validateNode.default)({
          type: "SwitchCase",
          test,
          consequent
        });
      }
      function switchStatement(discriminant, cases) {
        return (0, _validateNode.default)({
          type: "SwitchStatement",
          discriminant,
          cases
        });
      }
      function thisExpression() {
        return {
          type: "ThisExpression"
        };
      }
      function throwStatement(argument) {
        return (0, _validateNode.default)({
          type: "ThrowStatement",
          argument
        });
      }
      function tryStatement(block, handler = null, finalizer = null) {
        return (0, _validateNode.default)({
          type: "TryStatement",
          block,
          handler,
          finalizer
        });
      }
      function unaryExpression(operator, argument, prefix = true) {
        return (0, _validateNode.default)({
          type: "UnaryExpression",
          operator,
          argument,
          prefix
        });
      }
      function updateExpression(operator, argument, prefix = false) {
        return (0, _validateNode.default)({
          type: "UpdateExpression",
          operator,
          argument,
          prefix
        });
      }
      function variableDeclaration(kind, declarations) {
        return (0, _validateNode.default)({
          type: "VariableDeclaration",
          kind,
          declarations
        });
      }
      function variableDeclarator(id, init = null) {
        return (0, _validateNode.default)({
          type: "VariableDeclarator",
          id,
          init
        });
      }
      function whileStatement(test, body) {
        return (0, _validateNode.default)({
          type: "WhileStatement",
          test,
          body
        });
      }
      function withStatement(object, body) {
        return (0, _validateNode.default)({
          type: "WithStatement",
          object,
          body
        });
      }
      function assignmentPattern(left, right) {
        return (0, _validateNode.default)({
          type: "AssignmentPattern",
          left,
          right
        });
      }
      function arrayPattern(elements) {
        return (0, _validateNode.default)({
          type: "ArrayPattern",
          elements
        });
      }
      function arrowFunctionExpression(params, body, async = false) {
        return (0, _validateNode.default)({
          type: "ArrowFunctionExpression",
          params,
          body,
          async,
          expression: null
        });
      }
      function classBody(body) {
        return (0, _validateNode.default)({
          type: "ClassBody",
          body
        });
      }
      function classExpression(id = null, superClass = null, body, decorators = null) {
        return (0, _validateNode.default)({
          type: "ClassExpression",
          id,
          superClass,
          body,
          decorators
        });
      }
      function classDeclaration(id = null, superClass = null, body, decorators = null) {
        return (0, _validateNode.default)({
          type: "ClassDeclaration",
          id,
          superClass,
          body,
          decorators
        });
      }
      function exportAllDeclaration(source) {
        return (0, _validateNode.default)({
          type: "ExportAllDeclaration",
          source
        });
      }
      function exportDefaultDeclaration(declaration) {
        return (0, _validateNode.default)({
          type: "ExportDefaultDeclaration",
          declaration
        });
      }
      function exportNamedDeclaration(declaration = null, specifiers = [], source = null) {
        return (0, _validateNode.default)({
          type: "ExportNamedDeclaration",
          declaration,
          specifiers,
          source
        });
      }
      function exportSpecifier(local, exported) {
        return (0, _validateNode.default)({
          type: "ExportSpecifier",
          local,
          exported
        });
      }
      function forOfStatement(left, right, body, _await = false) {
        return (0, _validateNode.default)({
          type: "ForOfStatement",
          left,
          right,
          body,
          await: _await
        });
      }
      function importDeclaration(specifiers, source) {
        return (0, _validateNode.default)({
          type: "ImportDeclaration",
          specifiers,
          source
        });
      }
      function importDefaultSpecifier(local) {
        return (0, _validateNode.default)({
          type: "ImportDefaultSpecifier",
          local
        });
      }
      function importNamespaceSpecifier(local) {
        return (0, _validateNode.default)({
          type: "ImportNamespaceSpecifier",
          local
        });
      }
      function importSpecifier(local, imported) {
        return (0, _validateNode.default)({
          type: "ImportSpecifier",
          local,
          imported
        });
      }
      function importExpression(source, options = null) {
        return (0, _validateNode.default)({
          type: "ImportExpression",
          source,
          options
        });
      }
      function metaProperty(meta, property) {
        return (0, _validateNode.default)({
          type: "MetaProperty",
          meta,
          property
        });
      }
      function classMethod(kind = "method", key, params, body, computed = false, _static = false, generator = false, async = false) {
        return (0, _validateNode.default)({
          type: "ClassMethod",
          kind,
          key,
          params,
          body,
          computed,
          static: _static,
          generator,
          async
        });
      }
      function objectPattern(properties) {
        return (0, _validateNode.default)({
          type: "ObjectPattern",
          properties
        });
      }
      function spreadElement(argument) {
        return (0, _validateNode.default)({
          type: "SpreadElement",
          argument
        });
      }
      function _super() {
        return {
          type: "Super"
        };
      }
      function taggedTemplateExpression(tag, quasi) {
        return (0, _validateNode.default)({
          type: "TaggedTemplateExpression",
          tag,
          quasi
        });
      }
      function templateElement(value, tail = false) {
        return (0, _validateNode.default)({
          type: "TemplateElement",
          value,
          tail
        });
      }
      function templateLiteral(quasis, expressions) {
        return (0, _validateNode.default)({
          type: "TemplateLiteral",
          quasis,
          expressions
        });
      }
      function yieldExpression(argument = null, delegate = false) {
        return (0, _validateNode.default)({
          type: "YieldExpression",
          argument,
          delegate
        });
      }
      function awaitExpression(argument) {
        return (0, _validateNode.default)({
          type: "AwaitExpression",
          argument
        });
      }
      function _import() {
        return {
          type: "Import"
        };
      }
      function bigIntLiteral(value) {
        return (0, _validateNode.default)({
          type: "BigIntLiteral",
          value
        });
      }
      function exportNamespaceSpecifier(exported) {
        return (0, _validateNode.default)({
          type: "ExportNamespaceSpecifier",
          exported
        });
      }
      function optionalMemberExpression(object, property, computed = false, optional) {
        return (0, _validateNode.default)({
          type: "OptionalMemberExpression",
          object,
          property,
          computed,
          optional
        });
      }
      function optionalCallExpression(callee, _arguments, optional) {
        return (0, _validateNode.default)({
          type: "OptionalCallExpression",
          callee,
          arguments: _arguments,
          optional
        });
      }
      function classProperty(key, value = null, typeAnnotation2 = null, decorators = null, computed = false, _static = false) {
        return (0, _validateNode.default)({
          type: "ClassProperty",
          key,
          value,
          typeAnnotation: typeAnnotation2,
          decorators,
          computed,
          static: _static
        });
      }
      function classAccessorProperty(key, value = null, typeAnnotation2 = null, decorators = null, computed = false, _static = false) {
        return (0, _validateNode.default)({
          type: "ClassAccessorProperty",
          key,
          value,
          typeAnnotation: typeAnnotation2,
          decorators,
          computed,
          static: _static
        });
      }
      function classPrivateProperty(key, value = null, decorators = null, _static = false) {
        return (0, _validateNode.default)({
          type: "ClassPrivateProperty",
          key,
          value,
          decorators,
          static: _static
        });
      }
      function classPrivateMethod(kind = "method", key, params, body, _static = false) {
        return (0, _validateNode.default)({
          type: "ClassPrivateMethod",
          kind,
          key,
          params,
          body,
          static: _static
        });
      }
      function privateName(id) {
        return (0, _validateNode.default)({
          type: "PrivateName",
          id
        });
      }
      function staticBlock(body) {
        return (0, _validateNode.default)({
          type: "StaticBlock",
          body
        });
      }
      function anyTypeAnnotation() {
        return {
          type: "AnyTypeAnnotation"
        };
      }
      function arrayTypeAnnotation(elementType) {
        return (0, _validateNode.default)({
          type: "ArrayTypeAnnotation",
          elementType
        });
      }
      function booleanTypeAnnotation() {
        return {
          type: "BooleanTypeAnnotation"
        };
      }
      function booleanLiteralTypeAnnotation(value) {
        return (0, _validateNode.default)({
          type: "BooleanLiteralTypeAnnotation",
          value
        });
      }
      function nullLiteralTypeAnnotation() {
        return {
          type: "NullLiteralTypeAnnotation"
        };
      }
      function classImplements(id, typeParameters = null) {
        return (0, _validateNode.default)({
          type: "ClassImplements",
          id,
          typeParameters
        });
      }
      function declareClass(id, typeParameters = null, _extends = null, body) {
        return (0, _validateNode.default)({
          type: "DeclareClass",
          id,
          typeParameters,
          extends: _extends,
          body
        });
      }
      function declareFunction(id) {
        return (0, _validateNode.default)({
          type: "DeclareFunction",
          id
        });
      }
      function declareInterface(id, typeParameters = null, _extends = null, body) {
        return (0, _validateNode.default)({
          type: "DeclareInterface",
          id,
          typeParameters,
          extends: _extends,
          body
        });
      }
      function declareModule(id, body, kind = null) {
        return (0, _validateNode.default)({
          type: "DeclareModule",
          id,
          body,
          kind
        });
      }
      function declareModuleExports(typeAnnotation2) {
        return (0, _validateNode.default)({
          type: "DeclareModuleExports",
          typeAnnotation: typeAnnotation2
        });
      }
      function declareTypeAlias(id, typeParameters = null, right) {
        return (0, _validateNode.default)({
          type: "DeclareTypeAlias",
          id,
          typeParameters,
          right
        });
      }
      function declareOpaqueType(id, typeParameters = null, supertype = null) {
        return (0, _validateNode.default)({
          type: "DeclareOpaqueType",
          id,
          typeParameters,
          supertype
        });
      }
      function declareVariable(id) {
        return (0, _validateNode.default)({
          type: "DeclareVariable",
          id
        });
      }
      function declareExportDeclaration(declaration = null, specifiers = null, source = null) {
        return (0, _validateNode.default)({
          type: "DeclareExportDeclaration",
          declaration,
          specifiers,
          source
        });
      }
      function declareExportAllDeclaration(source) {
        return (0, _validateNode.default)({
          type: "DeclareExportAllDeclaration",
          source
        });
      }
      function declaredPredicate(value) {
        return (0, _validateNode.default)({
          type: "DeclaredPredicate",
          value
        });
      }
      function existsTypeAnnotation() {
        return {
          type: "ExistsTypeAnnotation"
        };
      }
      function functionTypeAnnotation(typeParameters = null, params, rest = null, returnType) {
        return (0, _validateNode.default)({
          type: "FunctionTypeAnnotation",
          typeParameters,
          params,
          rest,
          returnType
        });
      }
      function functionTypeParam(name = null, typeAnnotation2) {
        return (0, _validateNode.default)({
          type: "FunctionTypeParam",
          name,
          typeAnnotation: typeAnnotation2
        });
      }
      function genericTypeAnnotation(id, typeParameters = null) {
        return (0, _validateNode.default)({
          type: "GenericTypeAnnotation",
          id,
          typeParameters
        });
      }
      function inferredPredicate() {
        return {
          type: "InferredPredicate"
        };
      }
      function interfaceExtends(id, typeParameters = null) {
        return (0, _validateNode.default)({
          type: "InterfaceExtends",
          id,
          typeParameters
        });
      }
      function interfaceDeclaration(id, typeParameters = null, _extends = null, body) {
        return (0, _validateNode.default)({
          type: "InterfaceDeclaration",
          id,
          typeParameters,
          extends: _extends,
          body
        });
      }
      function interfaceTypeAnnotation(_extends = null, body) {
        return (0, _validateNode.default)({
          type: "InterfaceTypeAnnotation",
          extends: _extends,
          body
        });
      }
      function intersectionTypeAnnotation(types) {
        return (0, _validateNode.default)({
          type: "IntersectionTypeAnnotation",
          types
        });
      }
      function mixedTypeAnnotation() {
        return {
          type: "MixedTypeAnnotation"
        };
      }
      function emptyTypeAnnotation() {
        return {
          type: "EmptyTypeAnnotation"
        };
      }
      function nullableTypeAnnotation(typeAnnotation2) {
        return (0, _validateNode.default)({
          type: "NullableTypeAnnotation",
          typeAnnotation: typeAnnotation2
        });
      }
      function numberLiteralTypeAnnotation(value) {
        return (0, _validateNode.default)({
          type: "NumberLiteralTypeAnnotation",
          value
        });
      }
      function numberTypeAnnotation() {
        return {
          type: "NumberTypeAnnotation"
        };
      }
      function objectTypeAnnotation(properties, indexers = [], callProperties = [], internalSlots = [], exact = false) {
        return (0, _validateNode.default)({
          type: "ObjectTypeAnnotation",
          properties,
          indexers,
          callProperties,
          internalSlots,
          exact
        });
      }
      function objectTypeInternalSlot(id, value, optional, _static, method) {
        return (0, _validateNode.default)({
          type: "ObjectTypeInternalSlot",
          id,
          value,
          optional,
          static: _static,
          method
        });
      }
      function objectTypeCallProperty(value) {
        return (0, _validateNode.default)({
          type: "ObjectTypeCallProperty",
          value,
          static: null
        });
      }
      function objectTypeIndexer(id = null, key, value, variance2 = null) {
        return (0, _validateNode.default)({
          type: "ObjectTypeIndexer",
          id,
          key,
          value,
          variance: variance2,
          static: null
        });
      }
      function objectTypeProperty(key, value, variance2 = null) {
        return (0, _validateNode.default)({
          type: "ObjectTypeProperty",
          key,
          value,
          variance: variance2,
          kind: null,
          method: null,
          optional: null,
          proto: null,
          static: null
        });
      }
      function objectTypeSpreadProperty(argument) {
        return (0, _validateNode.default)({
          type: "ObjectTypeSpreadProperty",
          argument
        });
      }
      function opaqueType(id, typeParameters = null, supertype = null, impltype) {
        return (0, _validateNode.default)({
          type: "OpaqueType",
          id,
          typeParameters,
          supertype,
          impltype
        });
      }
      function qualifiedTypeIdentifier(id, qualification) {
        return (0, _validateNode.default)({
          type: "QualifiedTypeIdentifier",
          id,
          qualification
        });
      }
      function stringLiteralTypeAnnotation(value) {
        return (0, _validateNode.default)({
          type: "StringLiteralTypeAnnotation",
          value
        });
      }
      function stringTypeAnnotation() {
        return {
          type: "StringTypeAnnotation"
        };
      }
      function symbolTypeAnnotation() {
        return {
          type: "SymbolTypeAnnotation"
        };
      }
      function thisTypeAnnotation() {
        return {
          type: "ThisTypeAnnotation"
        };
      }
      function tupleTypeAnnotation(types) {
        return (0, _validateNode.default)({
          type: "TupleTypeAnnotation",
          types
        });
      }
      function typeofTypeAnnotation(argument) {
        return (0, _validateNode.default)({
          type: "TypeofTypeAnnotation",
          argument
        });
      }
      function typeAlias(id, typeParameters = null, right) {
        return (0, _validateNode.default)({
          type: "TypeAlias",
          id,
          typeParameters,
          right
        });
      }
      function typeAnnotation(typeAnnotation2) {
        return (0, _validateNode.default)({
          type: "TypeAnnotation",
          typeAnnotation: typeAnnotation2
        });
      }
      function typeCastExpression(expression, typeAnnotation2) {
        return (0, _validateNode.default)({
          type: "TypeCastExpression",
          expression,
          typeAnnotation: typeAnnotation2
        });
      }
      function typeParameter(bound = null, _default = null, variance2 = null) {
        return (0, _validateNode.default)({
          type: "TypeParameter",
          bound,
          default: _default,
          variance: variance2,
          name: null
        });
      }
      function typeParameterDeclaration(params) {
        return (0, _validateNode.default)({
          type: "TypeParameterDeclaration",
          params
        });
      }
      function typeParameterInstantiation(params) {
        return (0, _validateNode.default)({
          type: "TypeParameterInstantiation",
          params
        });
      }
      function unionTypeAnnotation(types) {
        return (0, _validateNode.default)({
          type: "UnionTypeAnnotation",
          types
        });
      }
      function variance(kind) {
        return (0, _validateNode.default)({
          type: "Variance",
          kind
        });
      }
      function voidTypeAnnotation() {
        return {
          type: "VoidTypeAnnotation"
        };
      }
      function enumDeclaration(id, body) {
        return (0, _validateNode.default)({
          type: "EnumDeclaration",
          id,
          body
        });
      }
      function enumBooleanBody(members) {
        return (0, _validateNode.default)({
          type: "EnumBooleanBody",
          members,
          explicitType: null,
          hasUnknownMembers: null
        });
      }
      function enumNumberBody(members) {
        return (0, _validateNode.default)({
          type: "EnumNumberBody",
          members,
          explicitType: null,
          hasUnknownMembers: null
        });
      }
      function enumStringBody(members) {
        return (0, _validateNode.default)({
          type: "EnumStringBody",
          members,
          explicitType: null,
          hasUnknownMembers: null
        });
      }
      function enumSymbolBody(members) {
        return (0, _validateNode.default)({
          type: "EnumSymbolBody",
          members,
          hasUnknownMembers: null
        });
      }
      function enumBooleanMember(id) {
        return (0, _validateNode.default)({
          type: "EnumBooleanMember",
          id,
          init: null
        });
      }
      function enumNumberMember(id, init) {
        return (0, _validateNode.default)({
          type: "EnumNumberMember",
          id,
          init
        });
      }
      function enumStringMember(id, init) {
        return (0, _validateNode.default)({
          type: "EnumStringMember",
          id,
          init
        });
      }
      function enumDefaultedMember(id) {
        return (0, _validateNode.default)({
          type: "EnumDefaultedMember",
          id
        });
      }
      function indexedAccessType(objectType, indexType) {
        return (0, _validateNode.default)({
          type: "IndexedAccessType",
          objectType,
          indexType
        });
      }
      function optionalIndexedAccessType(objectType, indexType) {
        return (0, _validateNode.default)({
          type: "OptionalIndexedAccessType",
          objectType,
          indexType,
          optional: null
        });
      }
      function jsxAttribute(name, value = null) {
        return (0, _validateNode.default)({
          type: "JSXAttribute",
          name,
          value
        });
      }
      function jsxClosingElement(name) {
        return (0, _validateNode.default)({
          type: "JSXClosingElement",
          name
        });
      }
      function jsxElement(openingElement, closingElement = null, children, selfClosing = null) {
        return (0, _validateNode.default)({
          type: "JSXElement",
          openingElement,
          closingElement,
          children,
          selfClosing
        });
      }
      function jsxEmptyExpression() {
        return {
          type: "JSXEmptyExpression"
        };
      }
      function jsxExpressionContainer(expression) {
        return (0, _validateNode.default)({
          type: "JSXExpressionContainer",
          expression
        });
      }
      function jsxSpreadChild(expression) {
        return (0, _validateNode.default)({
          type: "JSXSpreadChild",
          expression
        });
      }
      function jsxIdentifier(name) {
        return (0, _validateNode.default)({
          type: "JSXIdentifier",
          name
        });
      }
      function jsxMemberExpression(object, property) {
        return (0, _validateNode.default)({
          type: "JSXMemberExpression",
          object,
          property
        });
      }
      function jsxNamespacedName(namespace, name) {
        return (0, _validateNode.default)({
          type: "JSXNamespacedName",
          namespace,
          name
        });
      }
      function jsxOpeningElement(name, attributes, selfClosing = false) {
        return (0, _validateNode.default)({
          type: "JSXOpeningElement",
          name,
          attributes,
          selfClosing
        });
      }
      function jsxSpreadAttribute(argument) {
        return (0, _validateNode.default)({
          type: "JSXSpreadAttribute",
          argument
        });
      }
      function jsxText(value) {
        return (0, _validateNode.default)({
          type: "JSXText",
          value
        });
      }
      function jsxFragment(openingFragment, closingFragment, children) {
        return (0, _validateNode.default)({
          type: "JSXFragment",
          openingFragment,
          closingFragment,
          children
        });
      }
      function jsxOpeningFragment() {
        return {
          type: "JSXOpeningFragment"
        };
      }
      function jsxClosingFragment() {
        return {
          type: "JSXClosingFragment"
        };
      }
      function noop2() {
        return {
          type: "Noop"
        };
      }
      function placeholder(expectedNode, name) {
        return (0, _validateNode.default)({
          type: "Placeholder",
          expectedNode,
          name
        });
      }
      function v8IntrinsicIdentifier(name) {
        return (0, _validateNode.default)({
          type: "V8IntrinsicIdentifier",
          name
        });
      }
      function argumentPlaceholder() {
        return {
          type: "ArgumentPlaceholder"
        };
      }
      function bindExpression(object, callee) {
        return (0, _validateNode.default)({
          type: "BindExpression",
          object,
          callee
        });
      }
      function importAttribute(key, value) {
        return (0, _validateNode.default)({
          type: "ImportAttribute",
          key,
          value
        });
      }
      function decorator(expression) {
        return (0, _validateNode.default)({
          type: "Decorator",
          expression
        });
      }
      function doExpression(body, async = false) {
        return (0, _validateNode.default)({
          type: "DoExpression",
          body,
          async
        });
      }
      function exportDefaultSpecifier(exported) {
        return (0, _validateNode.default)({
          type: "ExportDefaultSpecifier",
          exported
        });
      }
      function recordExpression(properties) {
        return (0, _validateNode.default)({
          type: "RecordExpression",
          properties
        });
      }
      function tupleExpression(elements = []) {
        return (0, _validateNode.default)({
          type: "TupleExpression",
          elements
        });
      }
      function decimalLiteral(value) {
        return (0, _validateNode.default)({
          type: "DecimalLiteral",
          value
        });
      }
      function moduleExpression(body) {
        return (0, _validateNode.default)({
          type: "ModuleExpression",
          body
        });
      }
      function topicReference() {
        return {
          type: "TopicReference"
        };
      }
      function pipelineTopicExpression(expression) {
        return (0, _validateNode.default)({
          type: "PipelineTopicExpression",
          expression
        });
      }
      function pipelineBareFunction(callee) {
        return (0, _validateNode.default)({
          type: "PipelineBareFunction",
          callee
        });
      }
      function pipelinePrimaryTopicReference() {
        return {
          type: "PipelinePrimaryTopicReference"
        };
      }
      function tsParameterProperty(parameter) {
        return (0, _validateNode.default)({
          type: "TSParameterProperty",
          parameter
        });
      }
      function tsDeclareFunction(id = null, typeParameters = null, params, returnType = null) {
        return (0, _validateNode.default)({
          type: "TSDeclareFunction",
          id,
          typeParameters,
          params,
          returnType
        });
      }
      function tsDeclareMethod(decorators = null, key, typeParameters = null, params, returnType = null) {
        return (0, _validateNode.default)({
          type: "TSDeclareMethod",
          decorators,
          key,
          typeParameters,
          params,
          returnType
        });
      }
      function tsQualifiedName(left, right) {
        return (0, _validateNode.default)({
          type: "TSQualifiedName",
          left,
          right
        });
      }
      function tsCallSignatureDeclaration(typeParameters = null, parameters, typeAnnotation2 = null) {
        return (0, _validateNode.default)({
          type: "TSCallSignatureDeclaration",
          typeParameters,
          parameters,
          typeAnnotation: typeAnnotation2
        });
      }
      function tsConstructSignatureDeclaration(typeParameters = null, parameters, typeAnnotation2 = null) {
        return (0, _validateNode.default)({
          type: "TSConstructSignatureDeclaration",
          typeParameters,
          parameters,
          typeAnnotation: typeAnnotation2
        });
      }
      function tsPropertySignature(key, typeAnnotation2 = null) {
        return (0, _validateNode.default)({
          type: "TSPropertySignature",
          key,
          typeAnnotation: typeAnnotation2,
          kind: null
        });
      }
      function tsMethodSignature(key, typeParameters = null, parameters, typeAnnotation2 = null) {
        return (0, _validateNode.default)({
          type: "TSMethodSignature",
          key,
          typeParameters,
          parameters,
          typeAnnotation: typeAnnotation2,
          kind: null
        });
      }
      function tsIndexSignature(parameters, typeAnnotation2 = null) {
        return (0, _validateNode.default)({
          type: "TSIndexSignature",
          parameters,
          typeAnnotation: typeAnnotation2
        });
      }
      function tsAnyKeyword() {
        return {
          type: "TSAnyKeyword"
        };
      }
      function tsBooleanKeyword() {
        return {
          type: "TSBooleanKeyword"
        };
      }
      function tsBigIntKeyword() {
        return {
          type: "TSBigIntKeyword"
        };
      }
      function tsIntrinsicKeyword() {
        return {
          type: "TSIntrinsicKeyword"
        };
      }
      function tsNeverKeyword() {
        return {
          type: "TSNeverKeyword"
        };
      }
      function tsNullKeyword() {
        return {
          type: "TSNullKeyword"
        };
      }
      function tsNumberKeyword() {
        return {
          type: "TSNumberKeyword"
        };
      }
      function tsObjectKeyword() {
        return {
          type: "TSObjectKeyword"
        };
      }
      function tsStringKeyword() {
        return {
          type: "TSStringKeyword"
        };
      }
      function tsSymbolKeyword() {
        return {
          type: "TSSymbolKeyword"
        };
      }
      function tsUndefinedKeyword() {
        return {
          type: "TSUndefinedKeyword"
        };
      }
      function tsUnknownKeyword() {
        return {
          type: "TSUnknownKeyword"
        };
      }
      function tsVoidKeyword() {
        return {
          type: "TSVoidKeyword"
        };
      }
      function tsThisType() {
        return {
          type: "TSThisType"
        };
      }
      function tsFunctionType(typeParameters = null, parameters, typeAnnotation2 = null) {
        return (0, _validateNode.default)({
          type: "TSFunctionType",
          typeParameters,
          parameters,
          typeAnnotation: typeAnnotation2
        });
      }
      function tsConstructorType(typeParameters = null, parameters, typeAnnotation2 = null) {
        return (0, _validateNode.default)({
          type: "TSConstructorType",
          typeParameters,
          parameters,
          typeAnnotation: typeAnnotation2
        });
      }
      function tsTypeReference(typeName, typeParameters = null) {
        return (0, _validateNode.default)({
          type: "TSTypeReference",
          typeName,
          typeParameters
        });
      }
      function tsTypePredicate(parameterName, typeAnnotation2 = null, asserts = null) {
        return (0, _validateNode.default)({
          type: "TSTypePredicate",
          parameterName,
          typeAnnotation: typeAnnotation2,
          asserts
        });
      }
      function tsTypeQuery(exprName, typeParameters = null) {
        return (0, _validateNode.default)({
          type: "TSTypeQuery",
          exprName,
          typeParameters
        });
      }
      function tsTypeLiteral(members) {
        return (0, _validateNode.default)({
          type: "TSTypeLiteral",
          members
        });
      }
      function tsArrayType(elementType) {
        return (0, _validateNode.default)({
          type: "TSArrayType",
          elementType
        });
      }
      function tsTupleType(elementTypes) {
        return (0, _validateNode.default)({
          type: "TSTupleType",
          elementTypes
        });
      }
      function tsOptionalType(typeAnnotation2) {
        return (0, _validateNode.default)({
          type: "TSOptionalType",
          typeAnnotation: typeAnnotation2
        });
      }
      function tsRestType(typeAnnotation2) {
        return (0, _validateNode.default)({
          type: "TSRestType",
          typeAnnotation: typeAnnotation2
        });
      }
      function tsNamedTupleMember(label, elementType, optional = false) {
        return (0, _validateNode.default)({
          type: "TSNamedTupleMember",
          label,
          elementType,
          optional
        });
      }
      function tsUnionType(types) {
        return (0, _validateNode.default)({
          type: "TSUnionType",
          types
        });
      }
      function tsIntersectionType(types) {
        return (0, _validateNode.default)({
          type: "TSIntersectionType",
          types
        });
      }
      function tsConditionalType(checkType, extendsType, trueType, falseType) {
        return (0, _validateNode.default)({
          type: "TSConditionalType",
          checkType,
          extendsType,
          trueType,
          falseType
        });
      }
      function tsInferType(typeParameter2) {
        return (0, _validateNode.default)({
          type: "TSInferType",
          typeParameter: typeParameter2
        });
      }
      function tsParenthesizedType(typeAnnotation2) {
        return (0, _validateNode.default)({
          type: "TSParenthesizedType",
          typeAnnotation: typeAnnotation2
        });
      }
      function tsTypeOperator(typeAnnotation2) {
        return (0, _validateNode.default)({
          type: "TSTypeOperator",
          typeAnnotation: typeAnnotation2,
          operator: null
        });
      }
      function tsIndexedAccessType(objectType, indexType) {
        return (0, _validateNode.default)({
          type: "TSIndexedAccessType",
          objectType,
          indexType
        });
      }
      function tsMappedType(typeParameter2, typeAnnotation2 = null, nameType = null) {
        return (0, _validateNode.default)({
          type: "TSMappedType",
          typeParameter: typeParameter2,
          typeAnnotation: typeAnnotation2,
          nameType
        });
      }
      function tsLiteralType(literal) {
        return (0, _validateNode.default)({
          type: "TSLiteralType",
          literal
        });
      }
      function tsExpressionWithTypeArguments(expression, typeParameters = null) {
        return (0, _validateNode.default)({
          type: "TSExpressionWithTypeArguments",
          expression,
          typeParameters
        });
      }
      function tsInterfaceDeclaration(id, typeParameters = null, _extends = null, body) {
        return (0, _validateNode.default)({
          type: "TSInterfaceDeclaration",
          id,
          typeParameters,
          extends: _extends,
          body
        });
      }
      function tsInterfaceBody(body) {
        return (0, _validateNode.default)({
          type: "TSInterfaceBody",
          body
        });
      }
      function tsTypeAliasDeclaration(id, typeParameters = null, typeAnnotation2) {
        return (0, _validateNode.default)({
          type: "TSTypeAliasDeclaration",
          id,
          typeParameters,
          typeAnnotation: typeAnnotation2
        });
      }
      function tsInstantiationExpression(expression, typeParameters = null) {
        return (0, _validateNode.default)({
          type: "TSInstantiationExpression",
          expression,
          typeParameters
        });
      }
      function tsAsExpression(expression, typeAnnotation2) {
        return (0, _validateNode.default)({
          type: "TSAsExpression",
          expression,
          typeAnnotation: typeAnnotation2
        });
      }
      function tsSatisfiesExpression(expression, typeAnnotation2) {
        return (0, _validateNode.default)({
          type: "TSSatisfiesExpression",
          expression,
          typeAnnotation: typeAnnotation2
        });
      }
      function tsTypeAssertion(typeAnnotation2, expression) {
        return (0, _validateNode.default)({
          type: "TSTypeAssertion",
          typeAnnotation: typeAnnotation2,
          expression
        });
      }
      function tsEnumDeclaration(id, members) {
        return (0, _validateNode.default)({
          type: "TSEnumDeclaration",
          id,
          members
        });
      }
      function tsEnumMember(id, initializer = null) {
        return (0, _validateNode.default)({
          type: "TSEnumMember",
          id,
          initializer
        });
      }
      function tsModuleDeclaration(id, body) {
        return (0, _validateNode.default)({
          type: "TSModuleDeclaration",
          id,
          body
        });
      }
      function tsModuleBlock(body) {
        return (0, _validateNode.default)({
          type: "TSModuleBlock",
          body
        });
      }
      function tsImportType(argument, qualifier = null, typeParameters = null) {
        return (0, _validateNode.default)({
          type: "TSImportType",
          argument,
          qualifier,
          typeParameters
        });
      }
      function tsImportEqualsDeclaration(id, moduleReference) {
        return (0, _validateNode.default)({
          type: "TSImportEqualsDeclaration",
          id,
          moduleReference,
          isExport: null
        });
      }
      function tsExternalModuleReference(expression) {
        return (0, _validateNode.default)({
          type: "TSExternalModuleReference",
          expression
        });
      }
      function tsNonNullExpression(expression) {
        return (0, _validateNode.default)({
          type: "TSNonNullExpression",
          expression
        });
      }
      function tsExportAssignment(expression) {
        return (0, _validateNode.default)({
          type: "TSExportAssignment",
          expression
        });
      }
      function tsNamespaceExportDeclaration(id) {
        return (0, _validateNode.default)({
          type: "TSNamespaceExportDeclaration",
          id
        });
      }
      function tsTypeAnnotation(typeAnnotation2) {
        return (0, _validateNode.default)({
          type: "TSTypeAnnotation",
          typeAnnotation: typeAnnotation2
        });
      }
      function tsTypeParameterInstantiation(params) {
        return (0, _validateNode.default)({
          type: "TSTypeParameterInstantiation",
          params
        });
      }
      function tsTypeParameterDeclaration(params) {
        return (0, _validateNode.default)({
          type: "TSTypeParameterDeclaration",
          params
        });
      }
      function tsTypeParameter(constraint = null, _default = null, name) {
        return (0, _validateNode.default)({
          type: "TSTypeParameter",
          constraint,
          default: _default,
          name
        });
      }
      function NumberLiteral(value) {
        (0, _deprecationWarning.default)("NumberLiteral", "NumericLiteral", "The node type ");
        return numericLiteral(value);
      }
      function RegexLiteral(pattern, flags = "") {
        (0, _deprecationWarning.default)("RegexLiteral", "RegExpLiteral", "The node type ");
        return regExpLiteral(pattern, flags);
      }
      function RestProperty(argument) {
        (0, _deprecationWarning.default)("RestProperty", "RestElement", "The node type ");
        return restElement(argument);
      }
      function SpreadProperty(argument) {
        (0, _deprecationWarning.default)("SpreadProperty", "SpreadElement", "The node type ");
        return spreadElement(argument);
      }
    }
  });

  // node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js
  var require_cleanJSXElementLiteralChild = __commonJS({
    "node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = cleanJSXElementLiteralChild;
      var _index = require_generated2();
      var _index2 = require_lib3();
      function cleanJSXElementLiteralChild(child, args) {
        const lines = child.value.split(/\r\n|\n|\r/);
        let lastNonEmptyLine = 0;
        for (let i = 0; i < lines.length; i++) {
          if (lines[i].match(/[^ \t]/)) {
            lastNonEmptyLine = i;
          }
        }
        let str = "";
        for (let i = 0; i < lines.length; i++) {
          const line = lines[i];
          const isFirstLine = i === 0;
          const isLastLine = i === lines.length - 1;
          const isLastNonEmptyLine = i === lastNonEmptyLine;
          let trimmedLine = line.replace(/\t/g, " ");
          if (!isFirstLine) {
            trimmedLine = trimmedLine.replace(/^[ ]+/, "");
          }
          if (!isLastLine) {
            trimmedLine = trimmedLine.replace(/[ ]+$/, "");
          }
          if (trimmedLine) {
            if (!isLastNonEmptyLine) {
              trimmedLine += " ";
            }
            str += trimmedLine;
          }
        }
        if (str)
          args.push((0, _index2.inherits)((0, _index.stringLiteral)(str), child));
      }
    }
  });

  // node_modules/@babel/types/lib/builders/react/buildChildren.js
  var require_buildChildren = __commonJS({
    "node_modules/@babel/types/lib/builders/react/buildChildren.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = buildChildren;
      var _index = require_generated();
      var _cleanJSXElementLiteralChild = require_cleanJSXElementLiteralChild();
      function buildChildren(node) {
        const elements = [];
        for (let i = 0; i < node.children.length; i++) {
          let child = node.children[i];
          if ((0, _index.isJSXText)(child)) {
            (0, _cleanJSXElementLiteralChild.default)(child, elements);
            continue;
          }
          if ((0, _index.isJSXExpressionContainer)(child))
            child = child.expression;
          if ((0, _index.isJSXEmptyExpression)(child))
            continue;
          elements.push(child);
        }
        return elements;
      }
    }
  });

  // node_modules/@babel/types/lib/validators/isNode.js
  var require_isNode = __commonJS({
    "node_modules/@babel/types/lib/validators/isNode.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = isNode;
      var _index = require_definitions();
      function isNode(node) {
        return !!(node && _index.VISITOR_KEYS[node.type]);
      }
    }
  });

  // node_modules/@babel/types/lib/asserts/assertNode.js
  var require_assertNode = __commonJS({
    "node_modules/@babel/types/lib/asserts/assertNode.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = assertNode;
      var _isNode = require_isNode();
      function assertNode(node) {
        if (!(0, _isNode.default)(node)) {
          var _node$type;
          const type = (_node$type = node == null ? void 0 : node.type) != null ? _node$type : JSON.stringify(node);
          throw new TypeError(`Not a valid node of type "${type}"`);
        }
      }
    }
  });

  // node_modules/@babel/types/lib/asserts/generated/index.js
  var require_generated3 = __commonJS({
    "node_modules/@babel/types/lib/asserts/generated/index.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.assertAccessor = assertAccessor;
      exports.assertAnyTypeAnnotation = assertAnyTypeAnnotation;
      exports.assertArgumentPlaceholder = assertArgumentPlaceholder;
      exports.assertArrayExpression = assertArrayExpression;
      exports.assertArrayPattern = assertArrayPattern;
      exports.assertArrayTypeAnnotation = assertArrayTypeAnnotation;
      exports.assertArrowFunctionExpression = assertArrowFunctionExpression;
      exports.assertAssignmentExpression = assertAssignmentExpression;
      exports.assertAssignmentPattern = assertAssignmentPattern;
      exports.assertAwaitExpression = assertAwaitExpression;
      exports.assertBigIntLiteral = assertBigIntLiteral;
      exports.assertBinary = assertBinary;
      exports.assertBinaryExpression = assertBinaryExpression;
      exports.assertBindExpression = assertBindExpression;
      exports.assertBlock = assertBlock;
      exports.assertBlockParent = assertBlockParent;
      exports.assertBlockStatement = assertBlockStatement;
      exports.assertBooleanLiteral = assertBooleanLiteral;
      exports.assertBooleanLiteralTypeAnnotation = assertBooleanLiteralTypeAnnotation;
      exports.assertBooleanTypeAnnotation = assertBooleanTypeAnnotation;
      exports.assertBreakStatement = assertBreakStatement;
      exports.assertCallExpression = assertCallExpression;
      exports.assertCatchClause = assertCatchClause;
      exports.assertClass = assertClass;
      exports.assertClassAccessorProperty = assertClassAccessorProperty;
      exports.assertClassBody = assertClassBody;
      exports.assertClassDeclaration = assertClassDeclaration;
      exports.assertClassExpression = assertClassExpression;
      exports.assertClassImplements = assertClassImplements;
      exports.assertClassMethod = assertClassMethod;
      exports.assertClassPrivateMethod = assertClassPrivateMethod;
      exports.assertClassPrivateProperty = assertClassPrivateProperty;
      exports.assertClassProperty = assertClassProperty;
      exports.assertCompletionStatement = assertCompletionStatement;
      exports.assertConditional = assertConditional;
      exports.assertConditionalExpression = assertConditionalExpression;
      exports.assertContinueStatement = assertContinueStatement;
      exports.assertDebuggerStatement = assertDebuggerStatement;
      exports.assertDecimalLiteral = assertDecimalLiteral;
      exports.assertDeclaration = assertDeclaration;
      exports.assertDeclareClass = assertDeclareClass;
      exports.assertDeclareExportAllDeclaration = assertDeclareExportAllDeclaration;
      exports.assertDeclareExportDeclaration = assertDeclareExportDeclaration;
      exports.assertDeclareFunction = assertDeclareFunction;
      exports.assertDeclareInterface = assertDeclareInterface;
      exports.assertDeclareModule = assertDeclareModule;
      exports.assertDeclareModuleExports = assertDeclareModuleExports;
      exports.assertDeclareOpaqueType = assertDeclareOpaqueType;
      exports.assertDeclareTypeAlias = assertDeclareTypeAlias;
      exports.assertDeclareVariable = assertDeclareVariable;
      exports.assertDeclaredPredicate = assertDeclaredPredicate;
      exports.assertDecorator = assertDecorator;
      exports.assertDirective = assertDirective;
      exports.assertDirectiveLiteral = assertDirectiveLiteral;
      exports.assertDoExpression = assertDoExpression;
      exports.assertDoWhileStatement = assertDoWhileStatement;
      exports.assertEmptyStatement = assertEmptyStatement;
      exports.assertEmptyTypeAnnotation = assertEmptyTypeAnnotation;
      exports.assertEnumBody = assertEnumBody;
      exports.assertEnumBooleanBody = assertEnumBooleanBody;
      exports.assertEnumBooleanMember = assertEnumBooleanMember;
      exports.assertEnumDeclaration = assertEnumDeclaration;
      exports.assertEnumDefaultedMember = assertEnumDefaultedMember;
      exports.assertEnumMember = assertEnumMember;
      exports.assertEnumNumberBody = assertEnumNumberBody;
      exports.assertEnumNumberMember = assertEnumNumberMember;
      exports.assertEnumStringBody = assertEnumStringBody;
      exports.assertEnumStringMember = assertEnumStringMember;
      exports.assertEnumSymbolBody = assertEnumSymbolBody;
      exports.assertExistsTypeAnnotation = assertExistsTypeAnnotation;
      exports.assertExportAllDeclaration = assertExportAllDeclaration;
      exports.assertExportDeclaration = assertExportDeclaration;
      exports.assertExportDefaultDeclaration = assertExportDefaultDeclaration;
      exports.assertExportDefaultSpecifier = assertExportDefaultSpecifier;
      exports.assertExportNamedDeclaration = assertExportNamedDeclaration;
      exports.assertExportNamespaceSpecifier = assertExportNamespaceSpecifier;
      exports.assertExportSpecifier = assertExportSpecifier;
      exports.assertExpression = assertExpression;
      exports.assertExpressionStatement = assertExpressionStatement;
      exports.assertExpressionWrapper = assertExpressionWrapper;
      exports.assertFile = assertFile;
      exports.assertFlow = assertFlow;
      exports.assertFlowBaseAnnotation = assertFlowBaseAnnotation;
      exports.assertFlowDeclaration = assertFlowDeclaration;
      exports.assertFlowPredicate = assertFlowPredicate;
      exports.assertFlowType = assertFlowType;
      exports.assertFor = assertFor;
      exports.assertForInStatement = assertForInStatement;
      exports.assertForOfStatement = assertForOfStatement;
      exports.assertForStatement = assertForStatement;
      exports.assertForXStatement = assertForXStatement;
      exports.assertFunction = assertFunction;
      exports.assertFunctionDeclaration = assertFunctionDeclaration;
      exports.assertFunctionExpression = assertFunctionExpression;
      exports.assertFunctionParent = assertFunctionParent;
      exports.assertFunctionTypeAnnotation = assertFunctionTypeAnnotation;
      exports.assertFunctionTypeParam = assertFunctionTypeParam;
      exports.assertGenericTypeAnnotation = assertGenericTypeAnnotation;
      exports.assertIdentifier = assertIdentifier;
      exports.assertIfStatement = assertIfStatement;
      exports.assertImmutable = assertImmutable;
      exports.assertImport = assertImport;
      exports.assertImportAttribute = assertImportAttribute;
      exports.assertImportDeclaration = assertImportDeclaration;
      exports.assertImportDefaultSpecifier = assertImportDefaultSpecifier;
      exports.assertImportExpression = assertImportExpression;
      exports.assertImportNamespaceSpecifier = assertImportNamespaceSpecifier;
      exports.assertImportOrExportDeclaration = assertImportOrExportDeclaration;
      exports.assertImportSpecifier = assertImportSpecifier;
      exports.assertIndexedAccessType = assertIndexedAccessType;
      exports.assertInferredPredicate = assertInferredPredicate;
      exports.assertInterfaceDeclaration = assertInterfaceDeclaration;
      exports.assertInterfaceExtends = assertInterfaceExtends;
      exports.assertInterfaceTypeAnnotation = assertInterfaceTypeAnnotation;
      exports.assertInterpreterDirective = assertInterpreterDirective;
      exports.assertIntersectionTypeAnnotation = assertIntersectionTypeAnnotation;
      exports.assertJSX = assertJSX;
      exports.assertJSXAttribute = assertJSXAttribute;
      exports.assertJSXClosingElement = assertJSXClosingElement;
      exports.assertJSXClosingFragment = assertJSXClosingFragment;
      exports.assertJSXElement = assertJSXElement;
      exports.assertJSXEmptyExpression = assertJSXEmptyExpression;
      exports.assertJSXExpressionContainer = assertJSXExpressionContainer;
      exports.assertJSXFragment = assertJSXFragment;
      exports.assertJSXIdentifier = assertJSXIdentifier;
      exports.assertJSXMemberExpression = assertJSXMemberExpression;
      exports.assertJSXNamespacedName = assertJSXNamespacedName;
      exports.assertJSXOpeningElement = assertJSXOpeningElement;
      exports.assertJSXOpeningFragment = assertJSXOpeningFragment;
      exports.assertJSXSpreadAttribute = assertJSXSpreadAttribute;
      exports.assertJSXSpreadChild = assertJSXSpreadChild;
      exports.assertJSXText = assertJSXText;
      exports.assertLVal = assertLVal;
      exports.assertLabeledStatement = assertLabeledStatement;
      exports.assertLiteral = assertLiteral;
      exports.assertLogicalExpression = assertLogicalExpression;
      exports.assertLoop = assertLoop;
      exports.assertMemberExpression = assertMemberExpression;
      exports.assertMetaProperty = assertMetaProperty;
      exports.assertMethod = assertMethod;
      exports.assertMiscellaneous = assertMiscellaneous;
      exports.assertMixedTypeAnnotation = assertMixedTypeAnnotation;
      exports.assertModuleDeclaration = assertModuleDeclaration;
      exports.assertModuleExpression = assertModuleExpression;
      exports.assertModuleSpecifier = assertModuleSpecifier;
      exports.assertNewExpression = assertNewExpression;
      exports.assertNoop = assertNoop;
      exports.assertNullLiteral = assertNullLiteral;
      exports.assertNullLiteralTypeAnnotation = assertNullLiteralTypeAnnotation;
      exports.assertNullableTypeAnnotation = assertNullableTypeAnnotation;
      exports.assertNumberLiteral = assertNumberLiteral;
      exports.assertNumberLiteralTypeAnnotation = assertNumberLiteralTypeAnnotation;
      exports.assertNumberTypeAnnotation = assertNumberTypeAnnotation;
      exports.assertNumericLiteral = assertNumericLiteral;
      exports.assertObjectExpression = assertObjectExpression;
      exports.assertObjectMember = assertObjectMember;
      exports.assertObjectMethod = assertObjectMethod;
      exports.assertObjectPattern = assertObjectPattern;
      exports.assertObjectProperty = assertObjectProperty;
      exports.assertObjectTypeAnnotation = assertObjectTypeAnnotation;
      exports.assertObjectTypeCallProperty = assertObjectTypeCallProperty;
      exports.assertObjectTypeIndexer = assertObjectTypeIndexer;
      exports.assertObjectTypeInternalSlot = assertObjectTypeInternalSlot;
      exports.assertObjectTypeProperty = assertObjectTypeProperty;
      exports.assertObjectTypeSpreadProperty = assertObjectTypeSpreadProperty;
      exports.assertOpaqueType = assertOpaqueType;
      exports.assertOptionalCallExpression = assertOptionalCallExpression;
      exports.assertOptionalIndexedAccessType = assertOptionalIndexedAccessType;
      exports.assertOptionalMemberExpression = assertOptionalMemberExpression;
      exports.assertParenthesizedExpression = assertParenthesizedExpression;
      exports.assertPattern = assertPattern;
      exports.assertPatternLike = assertPatternLike;
      exports.assertPipelineBareFunction = assertPipelineBareFunction;
      exports.assertPipelinePrimaryTopicReference = assertPipelinePrimaryTopicReference;
      exports.assertPipelineTopicExpression = assertPipelineTopicExpression;
      exports.assertPlaceholder = assertPlaceholder;
      exports.assertPrivate = assertPrivate;
      exports.assertPrivateName = assertPrivateName;
      exports.assertProgram = assertProgram;
      exports.assertProperty = assertProperty;
      exports.assertPureish = assertPureish;
      exports.assertQualifiedTypeIdentifier = assertQualifiedTypeIdentifier;
      exports.assertRecordExpression = assertRecordExpression;
      exports.assertRegExpLiteral = assertRegExpLiteral;
      exports.assertRegexLiteral = assertRegexLiteral;
      exports.assertRestElement = assertRestElement;
      exports.assertRestProperty = assertRestProperty;
      exports.assertReturnStatement = assertReturnStatement;
      exports.assertScopable = assertScopable;
      exports.assertSequenceExpression = assertSequenceExpression;
      exports.assertSpreadElement = assertSpreadElement;
      exports.assertSpreadProperty = assertSpreadProperty;
      exports.assertStandardized = assertStandardized;
      exports.assertStatement = assertStatement;
      exports.assertStaticBlock = assertStaticBlock;
      exports.assertStringLiteral = assertStringLiteral;
      exports.assertStringLiteralTypeAnnotation = assertStringLiteralTypeAnnotation;
      exports.assertStringTypeAnnotation = assertStringTypeAnnotation;
      exports.assertSuper = assertSuper;
      exports.assertSwitchCase = assertSwitchCase;
      exports.assertSwitchStatement = assertSwitchStatement;
      exports.assertSymbolTypeAnnotation = assertSymbolTypeAnnotation;
      exports.assertTSAnyKeyword = assertTSAnyKeyword;
      exports.assertTSArrayType = assertTSArrayType;
      exports.assertTSAsExpression = assertTSAsExpression;
      exports.assertTSBaseType = assertTSBaseType;
      exports.assertTSBigIntKeyword = assertTSBigIntKeyword;
      exports.assertTSBooleanKeyword = assertTSBooleanKeyword;
      exports.assertTSCallSignatureDeclaration = assertTSCallSignatureDeclaration;
      exports.assertTSConditionalType = assertTSConditionalType;
      exports.assertTSConstructSignatureDeclaration = assertTSConstructSignatureDeclaration;
      exports.assertTSConstructorType = assertTSConstructorType;
      exports.assertTSDeclareFunction = assertTSDeclareFunction;
      exports.assertTSDeclareMethod = assertTSDeclareMethod;
      exports.assertTSEntityName = assertTSEntityName;
      exports.assertTSEnumDeclaration = assertTSEnumDeclaration;
      exports.assertTSEnumMember = assertTSEnumMember;
      exports.assertTSExportAssignment = assertTSExportAssignment;
      exports.assertTSExpressionWithTypeArguments = assertTSExpressionWithTypeArguments;
      exports.assertTSExternalModuleReference = assertTSExternalModuleReference;
      exports.assertTSFunctionType = assertTSFunctionType;
      exports.assertTSImportEqualsDeclaration = assertTSImportEqualsDeclaration;
      exports.assertTSImportType = assertTSImportType;
      exports.assertTSIndexSignature = assertTSIndexSignature;
      exports.assertTSIndexedAccessType = assertTSIndexedAccessType;
      exports.assertTSInferType = assertTSInferType;
      exports.assertTSInstantiationExpression = assertTSInstantiationExpression;
      exports.assertTSInterfaceBody = assertTSInterfaceBody;
      exports.assertTSInterfaceDeclaration = assertTSInterfaceDeclaration;
      exports.assertTSIntersectionType = assertTSIntersectionType;
      exports.assertTSIntrinsicKeyword = assertTSIntrinsicKeyword;
      exports.assertTSLiteralType = assertTSLiteralType;
      exports.assertTSMappedType = assertTSMappedType;
      exports.assertTSMethodSignature = assertTSMethodSignature;
      exports.assertTSModuleBlock = assertTSModuleBlock;
      exports.assertTSModuleDeclaration = assertTSModuleDeclaration;
      exports.assertTSNamedTupleMember = assertTSNamedTupleMember;
      exports.assertTSNamespaceExportDeclaration = assertTSNamespaceExportDeclaration;
      exports.assertTSNeverKeyword = assertTSNeverKeyword;
      exports.assertTSNonNullExpression = assertTSNonNullExpression;
      exports.assertTSNullKeyword = assertTSNullKeyword;
      exports.assertTSNumberKeyword = assertTSNumberKeyword;
      exports.assertTSObjectKeyword = assertTSObjectKeyword;
      exports.assertTSOptionalType = assertTSOptionalType;
      exports.assertTSParameterProperty = assertTSParameterProperty;
      exports.assertTSParenthesizedType = assertTSParenthesizedType;
      exports.assertTSPropertySignature = assertTSPropertySignature;
      exports.assertTSQualifiedName = assertTSQualifiedName;
      exports.assertTSRestType = assertTSRestType;
      exports.assertTSSatisfiesExpression = assertTSSatisfiesExpression;
      exports.assertTSStringKeyword = assertTSStringKeyword;
      exports.assertTSSymbolKeyword = assertTSSymbolKeyword;
      exports.assertTSThisType = assertTSThisType;
      exports.assertTSTupleType = assertTSTupleType;
      exports.assertTSType = assertTSType;
      exports.assertTSTypeAliasDeclaration = assertTSTypeAliasDeclaration;
      exports.assertTSTypeAnnotation = assertTSTypeAnnotation;
      exports.assertTSTypeAssertion = assertTSTypeAssertion;
      exports.assertTSTypeElement = assertTSTypeElement;
      exports.assertTSTypeLiteral = assertTSTypeLiteral;
      exports.assertTSTypeOperator = assertTSTypeOperator;
      exports.assertTSTypeParameter = assertTSTypeParameter;
      exports.assertTSTypeParameterDeclaration = assertTSTypeParameterDeclaration;
      exports.assertTSTypeParameterInstantiation = assertTSTypeParameterInstantiation;
      exports.assertTSTypePredicate = assertTSTypePredicate;
      exports.assertTSTypeQuery = assertTSTypeQuery;
      exports.assertTSTypeReference = assertTSTypeReference;
      exports.assertTSUndefinedKeyword = assertTSUndefinedKeyword;
      exports.assertTSUnionType = assertTSUnionType;
      exports.assertTSUnknownKeyword = assertTSUnknownKeyword;
      exports.assertTSVoidKeyword = assertTSVoidKeyword;
      exports.assertTaggedTemplateExpression = assertTaggedTemplateExpression;
      exports.assertTemplateElement = assertTemplateElement;
      exports.assertTemplateLiteral = assertTemplateLiteral;
      exports.assertTerminatorless = assertTerminatorless;
      exports.assertThisExpression = assertThisExpression;
      exports.assertThisTypeAnnotation = assertThisTypeAnnotation;
      exports.assertThrowStatement = assertThrowStatement;
      exports.assertTopicReference = assertTopicReference;
      exports.assertTryStatement = assertTryStatement;
      exports.assertTupleExpression = assertTupleExpression;
      exports.assertTupleTypeAnnotation = assertTupleTypeAnnotation;
      exports.assertTypeAlias = assertTypeAlias;
      exports.assertTypeAnnotation = assertTypeAnnotation;
      exports.assertTypeCastExpression = assertTypeCastExpression;
      exports.assertTypeParameter = assertTypeParameter;
      exports.assertTypeParameterDeclaration = assertTypeParameterDeclaration;
      exports.assertTypeParameterInstantiation = assertTypeParameterInstantiation;
      exports.assertTypeScript = assertTypeScript;
      exports.assertTypeofTypeAnnotation = assertTypeofTypeAnnotation;
      exports.assertUnaryExpression = assertUnaryExpression;
      exports.assertUnaryLike = assertUnaryLike;
      exports.assertUnionTypeAnnotation = assertUnionTypeAnnotation;
      exports.assertUpdateExpression = assertUpdateExpression;
      exports.assertUserWhitespacable = assertUserWhitespacable;
      exports.assertV8IntrinsicIdentifier = assertV8IntrinsicIdentifier;
      exports.assertVariableDeclaration = assertVariableDeclaration;
      exports.assertVariableDeclarator = assertVariableDeclarator;
      exports.assertVariance = assertVariance;
      exports.assertVoidTypeAnnotation = assertVoidTypeAnnotation;
      exports.assertWhile = assertWhile;
      exports.assertWhileStatement = assertWhileStatement;
      exports.assertWithStatement = assertWithStatement;
      exports.assertYieldExpression = assertYieldExpression;
      var _is = require_is();
      var _deprecationWarning = require_deprecationWarning();
      function assert(type, node, opts) {
        if (!(0, _is.default)(type, node, opts)) {
          throw new Error(`Expected type "${type}" with option ${JSON.stringify(opts)}, but instead got "${node.type}".`);
        }
      }
      function assertArrayExpression(node, opts) {
        assert("ArrayExpression", node, opts);
      }
      function assertAssignmentExpression(node, opts) {
        assert("AssignmentExpression", node, opts);
      }
      function assertBinaryExpression(node, opts) {
        assert("BinaryExpression", node, opts);
      }
      function assertInterpreterDirective(node, opts) {
        assert("InterpreterDirective", node, opts);
      }
      function assertDirective(node, opts) {
        assert("Directive", node, opts);
      }
      function assertDirectiveLiteral(node, opts) {
        assert("DirectiveLiteral", node, opts);
      }
      function assertBlockStatement(node, opts) {
        assert("BlockStatement", node, opts);
      }
      function assertBreakStatement(node, opts) {
        assert("BreakStatement", node, opts);
      }
      function assertCallExpression(node, opts) {
        assert("CallExpression", node, opts);
      }
      function assertCatchClause(node, opts) {
        assert("CatchClause", node, opts);
      }
      function assertConditionalExpression(node, opts) {
        assert("ConditionalExpression", node, opts);
      }
      function assertContinueStatement(node, opts) {
        assert("ContinueStatement", node, opts);
      }
      function assertDebuggerStatement(node, opts) {
        assert("DebuggerStatement", node, opts);
      }
      function assertDoWhileStatement(node, opts) {
        assert("DoWhileStatement", node, opts);
      }
      function assertEmptyStatement(node, opts) {
        assert("EmptyStatement", node, opts);
      }
      function assertExpressionStatement(node, opts) {
        assert("ExpressionStatement", node, opts);
      }
      function assertFile(node, opts) {
        assert("File", node, opts);
      }
      function assertForInStatement(node, opts) {
        assert("ForInStatement", node, opts);
      }
      function assertForStatement(node, opts) {
        assert("ForStatement", node, opts);
      }
      function assertFunctionDeclaration(node, opts) {
        assert("FunctionDeclaration", node, opts);
      }
      function assertFunctionExpression(node, opts) {
        assert("FunctionExpression", node, opts);
      }
      function assertIdentifier(node, opts) {
        assert("Identifier", node, opts);
      }
      function assertIfStatement(node, opts) {
        assert("IfStatement", node, opts);
      }
      function assertLabeledStatement(node, opts) {
        assert("LabeledStatement", node, opts);
      }
      function assertStringLiteral(node, opts) {
        assert("StringLiteral", node, opts);
      }
      function assertNumericLiteral(node, opts) {
        assert("NumericLiteral", node, opts);
      }
      function assertNullLiteral(node, opts) {
        assert("NullLiteral", node, opts);
      }
      function assertBooleanLiteral(node, opts) {
        assert("BooleanLiteral", node, opts);
      }
      function assertRegExpLiteral(node, opts) {
        assert("RegExpLiteral", node, opts);
      }
      function assertLogicalExpression(node, opts) {
        assert("LogicalExpression", node, opts);
      }
      function assertMemberExpression(node, opts) {
        assert("MemberExpression", node, opts);
      }
      function assertNewExpression(node, opts) {
        assert("NewExpression", node, opts);
      }
      function assertProgram(node, opts) {
        assert("Program", node, opts);
      }
      function assertObjectExpression(node, opts) {
        assert("ObjectExpression", node, opts);
      }
      function assertObjectMethod(node, opts) {
        assert("ObjectMethod", node, opts);
      }
      function assertObjectProperty(node, opts) {
        assert("ObjectProperty", node, opts);
      }
      function assertRestElement(node, opts) {
        assert("RestElement", node, opts);
      }
      function assertReturnStatement(node, opts) {
        assert("ReturnStatement", node, opts);
      }
      function assertSequenceExpression(node, opts) {
        assert("SequenceExpression", node, opts);
      }
      function assertParenthesizedExpression(node, opts) {
        assert("ParenthesizedExpression", node, opts);
      }
      function assertSwitchCase(node, opts) {
        assert("SwitchCase", node, opts);
      }
      function assertSwitchStatement(node, opts) {
        assert("SwitchStatement", node, opts);
      }
      function assertThisExpression(node, opts) {
        assert("ThisExpression", node, opts);
      }
      function assertThrowStatement(node, opts) {
        assert("ThrowStatement", node, opts);
      }
      function assertTryStatement(node, opts) {
        assert("TryStatement", node, opts);
      }
      function assertUnaryExpression(node, opts) {
        assert("UnaryExpression", node, opts);
      }
      function assertUpdateExpression(node, opts) {
        assert("UpdateExpression", node, opts);
      }
      function assertVariableDeclaration(node, opts) {
        assert("VariableDeclaration", node, opts);
      }
      function assertVariableDeclarator(node, opts) {
        assert("VariableDeclarator", node, opts);
      }
      function assertWhileStatement(node, opts) {
        assert("WhileStatement", node, opts);
      }
      function assertWithStatement(node, opts) {
        assert("WithStatement", node, opts);
      }
      function assertAssignmentPattern(node, opts) {
        assert("AssignmentPattern", node, opts);
      }
      function assertArrayPattern(node, opts) {
        assert("ArrayPattern", node, opts);
      }
      function assertArrowFunctionExpression(node, opts) {
        assert("ArrowFunctionExpression", node, opts);
      }
      function assertClassBody(node, opts) {
        assert("ClassBody", node, opts);
      }
      function assertClassExpression(node, opts) {
        assert("ClassExpression", node, opts);
      }
      function assertClassDeclaration(node, opts) {
        assert("ClassDeclaration", node, opts);
      }
      function assertExportAllDeclaration(node, opts) {
        assert("ExportAllDeclaration", node, opts);
      }
      function assertExportDefaultDeclaration(node, opts) {
        assert("ExportDefaultDeclaration", node, opts);
      }
      function assertExportNamedDeclaration(node, opts) {
        assert("ExportNamedDeclaration", node, opts);
      }
      function assertExportSpecifier(node, opts) {
        assert("ExportSpecifier", node, opts);
      }
      function assertForOfStatement(node, opts) {
        assert("ForOfStatement", node, opts);
      }
      function assertImportDeclaration(node, opts) {
        assert("ImportDeclaration", node, opts);
      }
      function assertImportDefaultSpecifier(node, opts) {
        assert("ImportDefaultSpecifier", node, opts);
      }
      function assertImportNamespaceSpecifier(node, opts) {
        assert("ImportNamespaceSpecifier", node, opts);
      }
      function assertImportSpecifier(node, opts) {
        assert("ImportSpecifier", node, opts);
      }
      function assertImportExpression(node, opts) {
        assert("ImportExpression", node, opts);
      }
      function assertMetaProperty(node, opts) {
        assert("MetaProperty", node, opts);
      }
      function assertClassMethod(node, opts) {
        assert("ClassMethod", node, opts);
      }
      function assertObjectPattern(node, opts) {
        assert("ObjectPattern", node, opts);
      }
      function assertSpreadElement(node, opts) {
        assert("SpreadElement", node, opts);
      }
      function assertSuper(node, opts) {
        assert("Super", node, opts);
      }
      function assertTaggedTemplateExpression(node, opts) {
        assert("TaggedTemplateExpression", node, opts);
      }
      function assertTemplateElement(node, opts) {
        assert("TemplateElement", node, opts);
      }
      function assertTemplateLiteral(node, opts) {
        assert("TemplateLiteral", node, opts);
      }
      function assertYieldExpression(node, opts) {
        assert("YieldExpression", node, opts);
      }
      function assertAwaitExpression(node, opts) {
        assert("AwaitExpression", node, opts);
      }
      function assertImport(node, opts) {
        assert("Import", node, opts);
      }
      function assertBigIntLiteral(node, opts) {
        assert("BigIntLiteral", node, opts);
      }
      function assertExportNamespaceSpecifier(node, opts) {
        assert("ExportNamespaceSpecifier", node, opts);
      }
      function assertOptionalMemberExpression(node, opts) {
        assert("OptionalMemberExpression", node, opts);
      }
      function assertOptionalCallExpression(node, opts) {
        assert("OptionalCallExpression", node, opts);
      }
      function assertClassProperty(node, opts) {
        assert("ClassProperty", node, opts);
      }
      function assertClassAccessorProperty(node, opts) {
        assert("ClassAccessorProperty", node, opts);
      }
      function assertClassPrivateProperty(node, opts) {
        assert("ClassPrivateProperty", node, opts);
      }
      function assertClassPrivateMethod(node, opts) {
        assert("ClassPrivateMethod", node, opts);
      }
      function assertPrivateName(node, opts) {
        assert("PrivateName", node, opts);
      }
      function assertStaticBlock(node, opts) {
        assert("StaticBlock", node, opts);
      }
      function assertAnyTypeAnnotation(node, opts) {
        assert("AnyTypeAnnotation", node, opts);
      }
      function assertArrayTypeAnnotation(node, opts) {
        assert("ArrayTypeAnnotation", node, opts);
      }
      function assertBooleanTypeAnnotation(node, opts) {
        assert("BooleanTypeAnnotation", node, opts);
      }
      function assertBooleanLiteralTypeAnnotation(node, opts) {
        assert("BooleanLiteralTypeAnnotation", node, opts);
      }
      function assertNullLiteralTypeAnnotation(node, opts) {
        assert("NullLiteralTypeAnnotation", node, opts);
      }
      function assertClassImplements(node, opts) {
        assert("ClassImplements", node, opts);
      }
      function assertDeclareClass(node, opts) {
        assert("DeclareClass", node, opts);
      }
      function assertDeclareFunction(node, opts) {
        assert("DeclareFunction", node, opts);
      }
      function assertDeclareInterface(node, opts) {
        assert("DeclareInterface", node, opts);
      }
      function assertDeclareModule(node, opts) {
        assert("DeclareModule", node, opts);
      }
      function assertDeclareModuleExports(node, opts) {
        assert("DeclareModuleExports", node, opts);
      }
      function assertDeclareTypeAlias(node, opts) {
        assert("DeclareTypeAlias", node, opts);
      }
      function assertDeclareOpaqueType(node, opts) {
        assert("DeclareOpaqueType", node, opts);
      }
      function assertDeclareVariable(node, opts) {
        assert("DeclareVariable", node, opts);
      }
      function assertDeclareExportDeclaration(node, opts) {
        assert("DeclareExportDeclaration", node, opts);
      }
      function assertDeclareExportAllDeclaration(node, opts) {
        assert("DeclareExportAllDeclaration", node, opts);
      }
      function assertDeclaredPredicate(node, opts) {
        assert("DeclaredPredicate", node, opts);
      }
      function assertExistsTypeAnnotation(node, opts) {
        assert("ExistsTypeAnnotation", node, opts);
      }
      function assertFunctionTypeAnnotation(node, opts) {
        assert("FunctionTypeAnnotation", node, opts);
      }
      function assertFunctionTypeParam(node, opts) {
        assert("FunctionTypeParam", node, opts);
      }
      function assertGenericTypeAnnotation(node, opts) {
        assert("GenericTypeAnnotation", node, opts);
      }
      function assertInferredPredicate(node, opts) {
        assert("InferredPredicate", node, opts);
      }
      function assertInterfaceExtends(node, opts) {
        assert("InterfaceExtends", node, opts);
      }
      function assertInterfaceDeclaration(node, opts) {
        assert("InterfaceDeclaration", node, opts);
      }
      function assertInterfaceTypeAnnotation(node, opts) {
        assert("InterfaceTypeAnnotation", node, opts);
      }
      function assertIntersectionTypeAnnotation(node, opts) {
        assert("IntersectionTypeAnnotation", node, opts);
      }
      function assertMixedTypeAnnotation(node, opts) {
        assert("MixedTypeAnnotation", node, opts);
      }
      function assertEmptyTypeAnnotation(node, opts) {
        assert("EmptyTypeAnnotation", node, opts);
      }
      function assertNullableTypeAnnotation(node, opts) {
        assert("NullableTypeAnnotation", node, opts);
      }
      function assertNumberLiteralTypeAnnotation(node, opts) {
        assert("NumberLiteralTypeAnnotation", node, opts);
      }
      function assertNumberTypeAnnotation(node, opts) {
        assert("NumberTypeAnnotation", node, opts);
      }
      function assertObjectTypeAnnotation(node, opts) {
        assert("ObjectTypeAnnotation", node, opts);
      }
      function assertObjectTypeInternalSlot(node, opts) {
        assert("ObjectTypeInternalSlot", node, opts);
      }
      function assertObjectTypeCallProperty(node, opts) {
        assert("ObjectTypeCallProperty", node, opts);
      }
      function assertObjectTypeIndexer(node, opts) {
        assert("ObjectTypeIndexer", node, opts);
      }
      function assertObjectTypeProperty(node, opts) {
        assert("ObjectTypeProperty", node, opts);
      }
      function assertObjectTypeSpreadProperty(node, opts) {
        assert("ObjectTypeSpreadProperty", node, opts);
      }
      function assertOpaqueType(node, opts) {
        assert("OpaqueType", node, opts);
      }
      function assertQualifiedTypeIdentifier(node, opts) {
        assert("QualifiedTypeIdentifier", node, opts);
      }
      function assertStringLiteralTypeAnnotation(node, opts) {
        assert("StringLiteralTypeAnnotation", node, opts);
      }
      function assertStringTypeAnnotation(node, opts) {
        assert("StringTypeAnnotation", node, opts);
      }
      function assertSymbolTypeAnnotation(node, opts) {
        assert("SymbolTypeAnnotation", node, opts);
      }
      function assertThisTypeAnnotation(node, opts) {
        assert("ThisTypeAnnotation", node, opts);
      }
      function assertTupleTypeAnnotation(node, opts) {
        assert("TupleTypeAnnotation", node, opts);
      }
      function assertTypeofTypeAnnotation(node, opts) {
        assert("TypeofTypeAnnotation", node, opts);
      }
      function assertTypeAlias(node, opts) {
        assert("TypeAlias", node, opts);
      }
      function assertTypeAnnotation(node, opts) {
        assert("TypeAnnotation", node, opts);
      }
      function assertTypeCastExpression(node, opts) {
        assert("TypeCastExpression", node, opts);
      }
      function assertTypeParameter(node, opts) {
        assert("TypeParameter", node, opts);
      }
      function assertTypeParameterDeclaration(node, opts) {
        assert("TypeParameterDeclaration", node, opts);
      }
      function assertTypeParameterInstantiation(node, opts) {
        assert("TypeParameterInstantiation", node, opts);
      }
      function assertUnionTypeAnnotation(node, opts) {
        assert("UnionTypeAnnotation", node, opts);
      }
      function assertVariance(node, opts) {
        assert("Variance", node, opts);
      }
      function assertVoidTypeAnnotation(node, opts) {
        assert("VoidTypeAnnotation", node, opts);
      }
      function assertEnumDeclaration(node, opts) {
        assert("EnumDeclaration", node, opts);
      }
      function assertEnumBooleanBody(node, opts) {
        assert("EnumBooleanBody", node, opts);
      }
      function assertEnumNumberBody(node, opts) {
        assert("EnumNumberBody", node, opts);
      }
      function assertEnumStringBody(node, opts) {
        assert("EnumStringBody", node, opts);
      }
      function assertEnumSymbolBody(node, opts) {
        assert("EnumSymbolBody", node, opts);
      }
      function assertEnumBooleanMember(node, opts) {
        assert("EnumBooleanMember", node, opts);
      }
      function assertEnumNumberMember(node, opts) {
        assert("EnumNumberMember", node, opts);
      }
      function assertEnumStringMember(node, opts) {
        assert("EnumStringMember", node, opts);
      }
      function assertEnumDefaultedMember(node, opts) {
        assert("EnumDefaultedMember", node, opts);
      }
      function assertIndexedAccessType(node, opts) {
        assert("IndexedAccessType", node, opts);
      }
      function assertOptionalIndexedAccessType(node, opts) {
        assert("OptionalIndexedAccessType", node, opts);
      }
      function assertJSXAttribute(node, opts) {
        assert("JSXAttribute", node, opts);
      }
      function assertJSXClosingElement(node, opts) {
        assert("JSXClosingElement", node, opts);
      }
      function assertJSXElement(node, opts) {
        assert("JSXElement", node, opts);
      }
      function assertJSXEmptyExpression(node, opts) {
        assert("JSXEmptyExpression", node, opts);
      }
      function assertJSXExpressionContainer(node, opts) {
        assert("JSXExpressionContainer", node, opts);
      }
      function assertJSXSpreadChild(node, opts) {
        assert("JSXSpreadChild", node, opts);
      }
      function assertJSXIdentifier(node, opts) {
        assert("JSXIdentifier", node, opts);
      }
      function assertJSXMemberExpression(node, opts) {
        assert("JSXMemberExpression", node, opts);
      }
      function assertJSXNamespacedName(node, opts) {
        assert("JSXNamespacedName", node, opts);
      }
      function assertJSXOpeningElement(node, opts) {
        assert("JSXOpeningElement", node, opts);
      }
      function assertJSXSpreadAttribute(node, opts) {
        assert("JSXSpreadAttribute", node, opts);
      }
      function assertJSXText(node, opts) {
        assert("JSXText", node, opts);
      }
      function assertJSXFragment(node, opts) {
        assert("JSXFragment", node, opts);
      }
      function assertJSXOpeningFragment(node, opts) {
        assert("JSXOpeningFragment", node, opts);
      }
      function assertJSXClosingFragment(node, opts) {
        assert("JSXClosingFragment", node, opts);
      }
      function assertNoop(node, opts) {
        assert("Noop", node, opts);
      }
      function assertPlaceholder(node, opts) {
        assert("Placeholder", node, opts);
      }
      function assertV8IntrinsicIdentifier(node, opts) {
        assert("V8IntrinsicIdentifier", node, opts);
      }
      function assertArgumentPlaceholder(node, opts) {
        assert("ArgumentPlaceholder", node, opts);
      }
      function assertBindExpression(node, opts) {
        assert("BindExpression", node, opts);
      }
      function assertImportAttribute(node, opts) {
        assert("ImportAttribute", node, opts);
      }
      function assertDecorator(node, opts) {
        assert("Decorator", node, opts);
      }
      function assertDoExpression(node, opts) {
        assert("DoExpression", node, opts);
      }
      function assertExportDefaultSpecifier(node, opts) {
        assert("ExportDefaultSpecifier", node, opts);
      }
      function assertRecordExpression(node, opts) {
        assert("RecordExpression", node, opts);
      }
      function assertTupleExpression(node, opts) {
        assert("TupleExpression", node, opts);
      }
      function assertDecimalLiteral(node, opts) {
        assert("DecimalLiteral", node, opts);
      }
      function assertModuleExpression(node, opts) {
        assert("ModuleExpression", node, opts);
      }
      function assertTopicReference(node, opts) {
        assert("TopicReference", node, opts);
      }
      function assertPipelineTopicExpression(node, opts) {
        assert("PipelineTopicExpression", node, opts);
      }
      function assertPipelineBareFunction(node, opts) {
        assert("PipelineBareFunction", node, opts);
      }
      function assertPipelinePrimaryTopicReference(node, opts) {
        assert("PipelinePrimaryTopicReference", node, opts);
      }
      function assertTSParameterProperty(node, opts) {
        assert("TSParameterProperty", node, opts);
      }
      function assertTSDeclareFunction(node, opts) {
        assert("TSDeclareFunction", node, opts);
      }
      function assertTSDeclareMethod(node, opts) {
        assert("TSDeclareMethod", node, opts);
      }
      function assertTSQualifiedName(node, opts) {
        assert("TSQualifiedName", node, opts);
      }
      function assertTSCallSignatureDeclaration(node, opts) {
        assert("TSCallSignatureDeclaration", node, opts);
      }
      function assertTSConstructSignatureDeclaration(node, opts) {
        assert("TSConstructSignatureDeclaration", node, opts);
      }
      function assertTSPropertySignature(node, opts) {
        assert("TSPropertySignature", node, opts);
      }
      function assertTSMethodSignature(node, opts) {
        assert("TSMethodSignature", node, opts);
      }
      function assertTSIndexSignature(node, opts) {
        assert("TSIndexSignature", node, opts);
      }
      function assertTSAnyKeyword(node, opts) {
        assert("TSAnyKeyword", node, opts);
      }
      function assertTSBooleanKeyword(node, opts) {
        assert("TSBooleanKeyword", node, opts);
      }
      function assertTSBigIntKeyword(node, opts) {
        assert("TSBigIntKeyword", node, opts);
      }
      function assertTSIntrinsicKeyword(node, opts) {
        assert("TSIntrinsicKeyword", node, opts);
      }
      function assertTSNeverKeyword(node, opts) {
        assert("TSNeverKeyword", node, opts);
      }
      function assertTSNullKeyword(node, opts) {
        assert("TSNullKeyword", node, opts);
      }
      function assertTSNumberKeyword(node, opts) {
        assert("TSNumberKeyword", node, opts);
      }
      function assertTSObjectKeyword(node, opts) {
        assert("TSObjectKeyword", node, opts);
      }
      function assertTSStringKeyword(node, opts) {
        assert("TSStringKeyword", node, opts);
      }
      function assertTSSymbolKeyword(node, opts) {
        assert("TSSymbolKeyword", node, opts);
      }
      function assertTSUndefinedKeyword(node, opts) {
        assert("TSUndefinedKeyword", node, opts);
      }
      function assertTSUnknownKeyword(node, opts) {
        assert("TSUnknownKeyword", node, opts);
      }
      function assertTSVoidKeyword(node, opts) {
        assert("TSVoidKeyword", node, opts);
      }
      function assertTSThisType(node, opts) {
        assert("TSThisType", node, opts);
      }
      function assertTSFunctionType(node, opts) {
        assert("TSFunctionType", node, opts);
      }
      function assertTSConstructorType(node, opts) {
        assert("TSConstructorType", node, opts);
      }
      function assertTSTypeReference(node, opts) {
        assert("TSTypeReference", node, opts);
      }
      function assertTSTypePredicate(node, opts) {
        assert("TSTypePredicate", node, opts);
      }
      function assertTSTypeQuery(node, opts) {
        assert("TSTypeQuery", node, opts);
      }
      function assertTSTypeLiteral(node, opts) {
        assert("TSTypeLiteral", node, opts);
      }
      function assertTSArrayType(node, opts) {
        assert("TSArrayType", node, opts);
      }
      function assertTSTupleType(node, opts) {
        assert("TSTupleType", node, opts);
      }
      function assertTSOptionalType(node, opts) {
        assert("TSOptionalType", node, opts);
      }
      function assertTSRestType(node, opts) {
        assert("TSRestType", node, opts);
      }
      function assertTSNamedTupleMember(node, opts) {
        assert("TSNamedTupleMember", node, opts);
      }
      function assertTSUnionType(node, opts) {
        assert("TSUnionType", node, opts);
      }
      function assertTSIntersectionType(node, opts) {
        assert("TSIntersectionType", node, opts);
      }
      function assertTSConditionalType(node, opts) {
        assert("TSConditionalType", node, opts);
      }
      function assertTSInferType(node, opts) {
        assert("TSInferType", node, opts);
      }
      function assertTSParenthesizedType(node, opts) {
        assert("TSParenthesizedType", node, opts);
      }
      function assertTSTypeOperator(node, opts) {
        assert("TSTypeOperator", node, opts);
      }
      function assertTSIndexedAccessType(node, opts) {
        assert("TSIndexedAccessType", node, opts);
      }
      function assertTSMappedType(node, opts) {
        assert("TSMappedType", node, opts);
      }
      function assertTSLiteralType(node, opts) {
        assert("TSLiteralType", node, opts);
      }
      function assertTSExpressionWithTypeArguments(node, opts) {
        assert("TSExpressionWithTypeArguments", node, opts);
      }
      function assertTSInterfaceDeclaration(node, opts) {
        assert("TSInterfaceDeclaration", node, opts);
      }
      function assertTSInterfaceBody(node, opts) {
        assert("TSInterfaceBody", node, opts);
      }
      function assertTSTypeAliasDeclaration(node, opts) {
        assert("TSTypeAliasDeclaration", node, opts);
      }
      function assertTSInstantiationExpression(node, opts) {
        assert("TSInstantiationExpression", node, opts);
      }
      function assertTSAsExpression(node, opts) {
        assert("TSAsExpression", node, opts);
      }
      function assertTSSatisfiesExpression(node, opts) {
        assert("TSSatisfiesExpression", node, opts);
      }
      function assertTSTypeAssertion(node, opts) {
        assert("TSTypeAssertion", node, opts);
      }
      function assertTSEnumDeclaration(node, opts) {
        assert("TSEnumDeclaration", node, opts);
      }
      function assertTSEnumMember(node, opts) {
        assert("TSEnumMember", node, opts);
      }
      function assertTSModuleDeclaration(node, opts) {
        assert("TSModuleDeclaration", node, opts);
      }
      function assertTSModuleBlock(node, opts) {
        assert("TSModuleBlock", node, opts);
      }
      function assertTSImportType(node, opts) {
        assert("TSImportType", node, opts);
      }
      function assertTSImportEqualsDeclaration(node, opts) {
        assert("TSImportEqualsDeclaration", node, opts);
      }
      function assertTSExternalModuleReference(node, opts) {
        assert("TSExternalModuleReference", node, opts);
      }
      function assertTSNonNullExpression(node, opts) {
        assert("TSNonNullExpression", node, opts);
      }
      function assertTSExportAssignment(node, opts) {
        assert("TSExportAssignment", node, opts);
      }
      function assertTSNamespaceExportDeclaration(node, opts) {
        assert("TSNamespaceExportDeclaration", node, opts);
      }
      function assertTSTypeAnnotation(node, opts) {
        assert("TSTypeAnnotation", node, opts);
      }
      function assertTSTypeParameterInstantiation(node, opts) {
        assert("TSTypeParameterInstantiation", node, opts);
      }
      function assertTSTypeParameterDeclaration(node, opts) {
        assert("TSTypeParameterDeclaration", node, opts);
      }
      function assertTSTypeParameter(node, opts) {
        assert("TSTypeParameter", node, opts);
      }
      function assertStandardized(node, opts) {
        assert("Standardized", node, opts);
      }
      function assertExpression(node, opts) {
        assert("Expression", node, opts);
      }
      function assertBinary(node, opts) {
        assert("Binary", node, opts);
      }
      function assertScopable(node, opts) {
        assert("Scopable", node, opts);
      }
      function assertBlockParent(node, opts) {
        assert("BlockParent", node, opts);
      }
      function assertBlock(node, opts) {
        assert("Block", node, opts);
      }
      function assertStatement(node, opts) {
        assert("Statement", node, opts);
      }
      function assertTerminatorless(node, opts) {
        assert("Terminatorless", node, opts);
      }
      function assertCompletionStatement(node, opts) {
        assert("CompletionStatement", node, opts);
      }
      function assertConditional(node, opts) {
        assert("Conditional", node, opts);
      }
      function assertLoop(node, opts) {
        assert("Loop", node, opts);
      }
      function assertWhile(node, opts) {
        assert("While", node, opts);
      }
      function assertExpressionWrapper(node, opts) {
        assert("ExpressionWrapper", node, opts);
      }
      function assertFor(node, opts) {
        assert("For", node, opts);
      }
      function assertForXStatement(node, opts) {
        assert("ForXStatement", node, opts);
      }
      function assertFunction(node, opts) {
        assert("Function", node, opts);
      }
      function assertFunctionParent(node, opts) {
        assert("FunctionParent", node, opts);
      }
      function assertPureish(node, opts) {
        assert("Pureish", node, opts);
      }
      function assertDeclaration(node, opts) {
        assert("Declaration", node, opts);
      }
      function assertPatternLike(node, opts) {
        assert("PatternLike", node, opts);
      }
      function assertLVal(node, opts) {
        assert("LVal", node, opts);
      }
      function assertTSEntityName(node, opts) {
        assert("TSEntityName", node, opts);
      }
      function assertLiteral(node, opts) {
        assert("Literal", node, opts);
      }
      function assertImmutable(node, opts) {
        assert("Immutable", node, opts);
      }
      function assertUserWhitespacable(node, opts) {
        assert("UserWhitespacable", node, opts);
      }
      function assertMethod(node, opts) {
        assert("Method", node, opts);
      }
      function assertObjectMember(node, opts) {
        assert("ObjectMember", node, opts);
      }
      function assertProperty(node, opts) {
        assert("Property", node, opts);
      }
      function assertUnaryLike(node, opts) {
        assert("UnaryLike", node, opts);
      }
      function assertPattern(node, opts) {
        assert("Pattern", node, opts);
      }
      function assertClass(node, opts) {
        assert("Class", node, opts);
      }
      function assertImportOrExportDeclaration(node, opts) {
        assert("ImportOrExportDeclaration", node, opts);
      }
      function assertExportDeclaration(node, opts) {
        assert("ExportDeclaration", node, opts);
      }
      function assertModuleSpecifier(node, opts) {
        assert("ModuleSpecifier", node, opts);
      }
      function assertAccessor(node, opts) {
        assert("Accessor", node, opts);
      }
      function assertPrivate(node, opts) {
        assert("Private", node, opts);
      }
      function assertFlow(node, opts) {
        assert("Flow", node, opts);
      }
      function assertFlowType(node, opts) {
        assert("FlowType", node, opts);
      }
      function assertFlowBaseAnnotation(node, opts) {
        assert("FlowBaseAnnotation", node, opts);
      }
      function assertFlowDeclaration(node, opts) {
        assert("FlowDeclaration", node, opts);
      }
      function assertFlowPredicate(node, opts) {
        assert("FlowPredicate", node, opts);
      }
      function assertEnumBody(node, opts) {
        assert("EnumBody", node, opts);
      }
      function assertEnumMember(node, opts) {
        assert("EnumMember", node, opts);
      }
      function assertJSX(node, opts) {
        assert("JSX", node, opts);
      }
      function assertMiscellaneous(node, opts) {
        assert("Miscellaneous", node, opts);
      }
      function assertTypeScript(node, opts) {
        assert("TypeScript", node, opts);
      }
      function assertTSTypeElement(node, opts) {
        assert("TSTypeElement", node, opts);
      }
      function assertTSType(node, opts) {
        assert("TSType", node, opts);
      }
      function assertTSBaseType(node, opts) {
        assert("TSBaseType", node, opts);
      }
      function assertNumberLiteral(node, opts) {
        (0, _deprecationWarning.default)("assertNumberLiteral", "assertNumericLiteral");
        assert("NumberLiteral", node, opts);
      }
      function assertRegexLiteral(node, opts) {
        (0, _deprecationWarning.default)("assertRegexLiteral", "assertRegExpLiteral");
        assert("RegexLiteral", node, opts);
      }
      function assertRestProperty(node, opts) {
        (0, _deprecationWarning.default)("assertRestProperty", "assertRestElement");
        assert("RestProperty", node, opts);
      }
      function assertSpreadProperty(node, opts) {
        (0, _deprecationWarning.default)("assertSpreadProperty", "assertSpreadElement");
        assert("SpreadProperty", node, opts);
      }
      function assertModuleDeclaration(node, opts) {
        (0, _deprecationWarning.default)("assertModuleDeclaration", "assertImportOrExportDeclaration");
        assert("ModuleDeclaration", node, opts);
      }
    }
  });

  // node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js
  var require_createTypeAnnotationBasedOnTypeof = __commonJS({
    "node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _index = require_generated2();
      var _default = exports.default = createTypeAnnotationBasedOnTypeof;
      function createTypeAnnotationBasedOnTypeof(type) {
        switch (type) {
          case "string":
            return (0, _index.stringTypeAnnotation)();
          case "number":
            return (0, _index.numberTypeAnnotation)();
          case "undefined":
            return (0, _index.voidTypeAnnotation)();
          case "boolean":
            return (0, _index.booleanTypeAnnotation)();
          case "function":
            return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Function"));
          case "object":
            return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Object"));
          case "symbol":
            return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Symbol"));
          case "bigint":
            return (0, _index.anyTypeAnnotation)();
        }
        throw new Error("Invalid typeof value: " + type);
      }
    }
  });

  // node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js
  var require_removeTypeDuplicates = __commonJS({
    "node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = removeTypeDuplicates;
      var _index = require_generated();
      function getQualifiedName(node) {
        return (0, _index.isIdentifier)(node) ? node.name : `${node.id.name}.${getQualifiedName(node.qualification)}`;
      }
      function removeTypeDuplicates(nodesIn) {
        const nodes = Array.from(nodesIn);
        const generics = /* @__PURE__ */ new Map();
        const bases = /* @__PURE__ */ new Map();
        const typeGroups = /* @__PURE__ */ new Set();
        const types = [];
        for (let i = 0; i < nodes.length; i++) {
          const node = nodes[i];
          if (!node)
            continue;
          if (types.indexOf(node) >= 0) {
            continue;
          }
          if ((0, _index.isAnyTypeAnnotation)(node)) {
            return [node];
          }
          if ((0, _index.isFlowBaseAnnotation)(node)) {
            bases.set(node.type, node);
            continue;
          }
          if ((0, _index.isUnionTypeAnnotation)(node)) {
            if (!typeGroups.has(node.types)) {
              nodes.push(...node.types);
              typeGroups.add(node.types);
            }
            continue;
          }
          if ((0, _index.isGenericTypeAnnotation)(node)) {
            const name = getQualifiedName(node.id);
            if (generics.has(name)) {
              let existing = generics.get(name);
              if (existing.typeParameters) {
                if (node.typeParameters) {
                  existing.typeParameters.params.push(...node.typeParameters.params);
                  existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params);
                }
              } else {
                existing = node.typeParameters;
              }
            } else {
              generics.set(name, node);
            }
            continue;
          }
          types.push(node);
        }
        for (const [, baseType] of bases) {
          types.push(baseType);
        }
        for (const [, genericName] of generics) {
          types.push(genericName);
        }
        return types;
      }
    }
  });

  // node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js
  var require_createFlowUnionType = __commonJS({
    "node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createFlowUnionType;
      var _index = require_generated2();
      var _removeTypeDuplicates = require_removeTypeDuplicates();
      function createFlowUnionType(types) {
        const flattened = (0, _removeTypeDuplicates.default)(types);
        if (flattened.length === 1) {
          return flattened[0];
        } else {
          return (0, _index.unionTypeAnnotation)(flattened);
        }
      }
    }
  });

  // node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js
  var require_removeTypeDuplicates2 = __commonJS({
    "node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = removeTypeDuplicates;
      var _index = require_generated();
      function getQualifiedName(node) {
        return (0, _index.isIdentifier)(node) ? node.name : `${node.right.name}.${getQualifiedName(node.left)}`;
      }
      function removeTypeDuplicates(nodesIn) {
        const nodes = Array.from(nodesIn);
        const generics = /* @__PURE__ */ new Map();
        const bases = /* @__PURE__ */ new Map();
        const typeGroups = /* @__PURE__ */ new Set();
        const types = [];
        for (let i = 0; i < nodes.length; i++) {
          const node = nodes[i];
          if (!node)
            continue;
          if (types.indexOf(node) >= 0) {
            continue;
          }
          if ((0, _index.isTSAnyKeyword)(node)) {
            return [node];
          }
          if ((0, _index.isTSBaseType)(node)) {
            bases.set(node.type, node);
            continue;
          }
          if ((0, _index.isTSUnionType)(node)) {
            if (!typeGroups.has(node.types)) {
              nodes.push(...node.types);
              typeGroups.add(node.types);
            }
            continue;
          }
          if ((0, _index.isTSTypeReference)(node) && node.typeParameters) {
            const name = getQualifiedName(node.typeName);
            if (generics.has(name)) {
              let existing = generics.get(name);
              if (existing.typeParameters) {
                if (node.typeParameters) {
                  existing.typeParameters.params.push(...node.typeParameters.params);
                  existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params);
                }
              } else {
                existing = node.typeParameters;
              }
            } else {
              generics.set(name, node);
            }
            continue;
          }
          types.push(node);
        }
        for (const [, baseType] of bases) {
          types.push(baseType);
        }
        for (const [, genericName] of generics) {
          types.push(genericName);
        }
        return types;
      }
    }
  });

  // node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js
  var require_createTSUnionType = __commonJS({
    "node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createTSUnionType;
      var _index = require_generated2();
      var _removeTypeDuplicates = require_removeTypeDuplicates2();
      var _index2 = require_generated();
      function createTSUnionType(typeAnnotations) {
        const types = typeAnnotations.map((type) => {
          return (0, _index2.isTSTypeAnnotation)(type) ? type.typeAnnotation : type;
        });
        const flattened = (0, _removeTypeDuplicates.default)(types);
        if (flattened.length === 1) {
          return flattened[0];
        } else {
          return (0, _index.tsUnionType)(flattened);
        }
      }
    }
  });

  // node_modules/@babel/types/lib/builders/generated/uppercase.js
  var require_uppercase = __commonJS({
    "node_modules/@babel/types/lib/builders/generated/uppercase.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "AnyTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _index.anyTypeAnnotation;
        }
      });
      Object.defineProperty(exports, "ArgumentPlaceholder", {
        enumerable: true,
        get: function() {
          return _index.argumentPlaceholder;
        }
      });
      Object.defineProperty(exports, "ArrayExpression", {
        enumerable: true,
        get: function() {
          return _index.arrayExpression;
        }
      });
      Object.defineProperty(exports, "ArrayPattern", {
        enumerable: true,
        get: function() {
          return _index.arrayPattern;
        }
      });
      Object.defineProperty(exports, "ArrayTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _index.arrayTypeAnnotation;
        }
      });
      Object.defineProperty(exports, "ArrowFunctionExpression", {
        enumerable: true,
        get: function() {
          return _index.arrowFunctionExpression;
        }
      });
      Object.defineProperty(exports, "AssignmentExpression", {
        enumerable: true,
        get: function() {
          return _index.assignmentExpression;
        }
      });
      Object.defineProperty(exports, "AssignmentPattern", {
        enumerable: true,
        get: function() {
          return _index.assignmentPattern;
        }
      });
      Object.defineProperty(exports, "AwaitExpression", {
        enumerable: true,
        get: function() {
          return _index.awaitExpression;
        }
      });
      Object.defineProperty(exports, "BigIntLiteral", {
        enumerable: true,
        get: function() {
          return _index.bigIntLiteral;
        }
      });
      Object.defineProperty(exports, "BinaryExpression", {
        enumerable: true,
        get: function() {
          return _index.binaryExpression;
        }
      });
      Object.defineProperty(exports, "BindExpression", {
        enumerable: true,
        get: function() {
          return _index.bindExpression;
        }
      });
      Object.defineProperty(exports, "BlockStatement", {
        enumerable: true,
        get: function() {
          return _index.blockStatement;
        }
      });
      Object.defineProperty(exports, "BooleanLiteral", {
        enumerable: true,
        get: function() {
          return _index.booleanLiteral;
        }
      });
      Object.defineProperty(exports, "BooleanLiteralTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _index.booleanLiteralTypeAnnotation;
        }
      });
      Object.defineProperty(exports, "BooleanTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _index.booleanTypeAnnotation;
        }
      });
      Object.defineProperty(exports, "BreakStatement", {
        enumerable: true,
        get: function() {
          return _index.breakStatement;
        }
      });
      Object.defineProperty(exports, "CallExpression", {
        enumerable: true,
        get: function() {
          return _index.callExpression;
        }
      });
      Object.defineProperty(exports, "CatchClause", {
        enumerable: true,
        get: function() {
          return _index.catchClause;
        }
      });
      Object.defineProperty(exports, "ClassAccessorProperty", {
        enumerable: true,
        get: function() {
          return _index.classAccessorProperty;
        }
      });
      Object.defineProperty(exports, "ClassBody", {
        enumerable: true,
        get: function() {
          return _index.classBody;
        }
      });
      Object.defineProperty(exports, "ClassDeclaration", {
        enumerable: true,
        get: function() {
          return _index.classDeclaration;
        }
      });
      Object.defineProperty(exports, "ClassExpression", {
        enumerable: true,
        get: function() {
          return _index.classExpression;
        }
      });
      Object.defineProperty(exports, "ClassImplements", {
        enumerable: true,
        get: function() {
          return _index.classImplements;
        }
      });
      Object.defineProperty(exports, "ClassMethod", {
        enumerable: true,
        get: function() {
          return _index.classMethod;
        }
      });
      Object.defineProperty(exports, "ClassPrivateMethod", {
        enumerable: true,
        get: function() {
          return _index.classPrivateMethod;
        }
      });
      Object.defineProperty(exports, "ClassPrivateProperty", {
        enumerable: true,
        get: function() {
          return _index.classPrivateProperty;
        }
      });
      Object.defineProperty(exports, "ClassProperty", {
        enumerable: true,
        get: function() {
          return _index.classProperty;
        }
      });
      Object.defineProperty(exports, "ConditionalExpression", {
        enumerable: true,
        get: function() {
          return _index.conditionalExpression;
        }
      });
      Object.defineProperty(exports, "ContinueStatement", {
        enumerable: true,
        get: function() {
          return _index.continueStatement;
        }
      });
      Object.defineProperty(exports, "DebuggerStatement", {
        enumerable: true,
        get: function() {
          return _index.debuggerStatement;
        }
      });
      Object.defineProperty(exports, "DecimalLiteral", {
        enumerable: true,
        get: function() {
          return _index.decimalLiteral;
        }
      });
      Object.defineProperty(exports, "DeclareClass", {
        enumerable: true,
        get: function() {
          return _index.declareClass;
        }
      });
      Object.defineProperty(exports, "DeclareExportAllDeclaration", {
        enumerable: true,
        get: function() {
          return _index.declareExportAllDeclaration;
        }
      });
      Object.defineProperty(exports, "DeclareExportDeclaration", {
        enumerable: true,
        get: function() {
          return _index.declareExportDeclaration;
        }
      });
      Object.defineProperty(exports, "DeclareFunction", {
        enumerable: true,
        get: function() {
          return _index.declareFunction;
        }
      });
      Object.defineProperty(exports, "DeclareInterface", {
        enumerable: true,
        get: function() {
          return _index.declareInterface;
        }
      });
      Object.defineProperty(exports, "DeclareModule", {
        enumerable: true,
        get: function() {
          return _index.declareModule;
        }
      });
      Object.defineProperty(exports, "DeclareModuleExports", {
        enumerable: true,
        get: function() {
          return _index.declareModuleExports;
        }
      });
      Object.defineProperty(exports, "DeclareOpaqueType", {
        enumerable: true,
        get: function() {
          return _index.declareOpaqueType;
        }
      });
      Object.defineProperty(exports, "DeclareTypeAlias", {
        enumerable: true,
        get: function() {
          return _index.declareTypeAlias;
        }
      });
      Object.defineProperty(exports, "DeclareVariable", {
        enumerable: true,
        get: function() {
          return _index.declareVariable;
        }
      });
      Object.defineProperty(exports, "DeclaredPredicate", {
        enumerable: true,
        get: function() {
          return _index.declaredPredicate;
        }
      });
      Object.defineProperty(exports, "Decorator", {
        enumerable: true,
        get: function() {
          return _index.decorator;
        }
      });
      Object.defineProperty(exports, "Directive", {
        enumerable: true,
        get: function() {
          return _index.directive;
        }
      });
      Object.defineProperty(exports, "DirectiveLiteral", {
        enumerable: true,
        get: function() {
          return _index.directiveLiteral;
        }
      });
      Object.defineProperty(exports, "DoExpression", {
        enumerable: true,
        get: function() {
          return _index.doExpression;
        }
      });
      Object.defineProperty(exports, "DoWhileStatement", {
        enumerable: true,
        get: function() {
          return _index.doWhileStatement;
        }
      });
      Object.defineProperty(exports, "EmptyStatement", {
        enumerable: true,
        get: function() {
          return _index.emptyStatement;
        }
      });
      Object.defineProperty(exports, "EmptyTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _index.emptyTypeAnnotation;
        }
      });
      Object.defineProperty(exports, "EnumBooleanBody", {
        enumerable: true,
        get: function() {
          return _index.enumBooleanBody;
        }
      });
      Object.defineProperty(exports, "EnumBooleanMember", {
        enumerable: true,
        get: function() {
          return _index.enumBooleanMember;
        }
      });
      Object.defineProperty(exports, "EnumDeclaration", {
        enumerable: true,
        get: function() {
          return _index.enumDeclaration;
        }
      });
      Object.defineProperty(exports, "EnumDefaultedMember", {
        enumerable: true,
        get: function() {
          return _index.enumDefaultedMember;
        }
      });
      Object.defineProperty(exports, "EnumNumberBody", {
        enumerable: true,
        get: function() {
          return _index.enumNumberBody;
        }
      });
      Object.defineProperty(exports, "EnumNumberMember", {
        enumerable: true,
        get: function() {
          return _index.enumNumberMember;
        }
      });
      Object.defineProperty(exports, "EnumStringBody", {
        enumerable: true,
        get: function() {
          return _index.enumStringBody;
        }
      });
      Object.defineProperty(exports, "EnumStringMember", {
        enumerable: true,
        get: function() {
          return _index.enumStringMember;
        }
      });
      Object.defineProperty(exports, "EnumSymbolBody", {
        enumerable: true,
        get: function() {
          return _index.enumSymbolBody;
        }
      });
      Object.defineProperty(exports, "ExistsTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _index.existsTypeAnnotation;
        }
      });
      Object.defineProperty(exports, "ExportAllDeclaration", {
        enumerable: true,
        get: function() {
          return _index.exportAllDeclaration;
        }
      });
      Object.defineProperty(exports, "ExportDefaultDeclaration", {
        enumerable: true,
        get: function() {
          return _index.exportDefaultDeclaration;
        }
      });
      Object.defineProperty(exports, "ExportDefaultSpecifier", {
        enumerable: true,
        get: function() {
          return _index.exportDefaultSpecifier;
        }
      });
      Object.defineProperty(exports, "ExportNamedDeclaration", {
        enumerable: true,
        get: function() {
          return _index.exportNamedDeclaration;
        }
      });
      Object.defineProperty(exports, "ExportNamespaceSpecifier", {
        enumerable: true,
        get: function() {
          return _index.exportNamespaceSpecifier;
        }
      });
      Object.defineProperty(exports, "ExportSpecifier", {
        enumerable: true,
        get: function() {
          return _index.exportSpecifier;
        }
      });
      Object.defineProperty(exports, "ExpressionStatement", {
        enumerable: true,
        get: function() {
          return _index.expressionStatement;
        }
      });
      Object.defineProperty(exports, "File", {
        enumerable: true,
        get: function() {
          return _index.file;
        }
      });
      Object.defineProperty(exports, "ForInStatement", {
        enumerable: true,
        get: function() {
          return _index.forInStatement;
        }
      });
      Object.defineProperty(exports, "ForOfStatement", {
        enumerable: true,
        get: function() {
          return _index.forOfStatement;
        }
      });
      Object.defineProperty(exports, "ForStatement", {
        enumerable: true,
        get: function() {
          return _index.forStatement;
        }
      });
      Object.defineProperty(exports, "FunctionDeclaration", {
        enumerable: true,
        get: function() {
          return _index.functionDeclaration;
        }
      });
      Object.defineProperty(exports, "FunctionExpression", {
        enumerable: true,
        get: function() {
          return _index.functionExpression;
        }
      });
      Object.defineProperty(exports, "FunctionTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _index.functionTypeAnnotation;
        }
      });
      Object.defineProperty(exports, "FunctionTypeParam", {
        enumerable: true,
        get: function() {
          return _index.functionTypeParam;
        }
      });
      Object.defineProperty(exports, "GenericTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _index.genericTypeAnnotation;
        }
      });
      Object.defineProperty(exports, "Identifier", {
        enumerable: true,
        get: function() {
          return _index.identifier;
        }
      });
      Object.defineProperty(exports, "IfStatement", {
        enumerable: true,
        get: function() {
          return _index.ifStatement;
        }
      });
      Object.defineProperty(exports, "Import", {
        enumerable: true,
        get: function() {
          return _index.import;
        }
      });
      Object.defineProperty(exports, "ImportAttribute", {
        enumerable: true,
        get: function() {
          return _index.importAttribute;
        }
      });
      Object.defineProperty(exports, "ImportDeclaration", {
        enumerable: true,
        get: function() {
          return _index.importDeclaration;
        }
      });
      Object.defineProperty(exports, "ImportDefaultSpecifier", {
        enumerable: true,
        get: function() {
          return _index.importDefaultSpecifier;
        }
      });
      Object.defineProperty(exports, "ImportExpression", {
        enumerable: true,
        get: function() {
          return _index.importExpression;
        }
      });
      Object.defineProperty(exports, "ImportNamespaceSpecifier", {
        enumerable: true,
        get: function() {
          return _index.importNamespaceSpecifier;
        }
      });
      Object.defineProperty(exports, "ImportSpecifier", {
        enumerable: true,
        get: function() {
          return _index.importSpecifier;
        }
      });
      Object.defineProperty(exports, "IndexedAccessType", {
        enumerable: true,
        get: function() {
          return _index.indexedAccessType;
        }
      });
      Object.defineProperty(exports, "InferredPredicate", {
        enumerable: true,
        get: function() {
          return _index.inferredPredicate;
        }
      });
      Object.defineProperty(exports, "InterfaceDeclaration", {
        enumerable: true,
        get: function() {
          return _index.interfaceDeclaration;
        }
      });
      Object.defineProperty(exports, "InterfaceExtends", {
        enumerable: true,
        get: function() {
          return _index.interfaceExtends;
        }
      });
      Object.defineProperty(exports, "InterfaceTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _index.interfaceTypeAnnotation;
        }
      });
      Object.defineProperty(exports, "InterpreterDirective", {
        enumerable: true,
        get: function() {
          return _index.interpreterDirective;
        }
      });
      Object.defineProperty(exports, "IntersectionTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _index.intersectionTypeAnnotation;
        }
      });
      Object.defineProperty(exports, "JSXAttribute", {
        enumerable: true,
        get: function() {
          return _index.jsxAttribute;
        }
      });
      Object.defineProperty(exports, "JSXClosingElement", {
        enumerable: true,
        get: function() {
          return _index.jsxClosingElement;
        }
      });
      Object.defineProperty(exports, "JSXClosingFragment", {
        enumerable: true,
        get: function() {
          return _index.jsxClosingFragment;
        }
      });
      Object.defineProperty(exports, "JSXElement", {
        enumerable: true,
        get: function() {
          return _index.jsxElement;
        }
      });
      Object.defineProperty(exports, "JSXEmptyExpression", {
        enumerable: true,
        get: function() {
          return _index.jsxEmptyExpression;
        }
      });
      Object.defineProperty(exports, "JSXExpressionContainer", {
        enumerable: true,
        get: function() {
          return _index.jsxExpressionContainer;
        }
      });
      Object.defineProperty(exports, "JSXFragment", {
        enumerable: true,
        get: function() {
          return _index.jsxFragment;
        }
      });
      Object.defineProperty(exports, "JSXIdentifier", {
        enumerable: true,
        get: function() {
          return _index.jsxIdentifier;
        }
      });
      Object.defineProperty(exports, "JSXMemberExpression", {
        enumerable: true,
        get: function() {
          return _index.jsxMemberExpression;
        }
      });
      Object.defineProperty(exports, "JSXNamespacedName", {
        enumerable: true,
        get: function() {
          return _index.jsxNamespacedName;
        }
      });
      Object.defineProperty(exports, "JSXOpeningElement", {
        enumerable: true,
        get: function() {
          return _index.jsxOpeningElement;
        }
      });
      Object.defineProperty(exports, "JSXOpeningFragment", {
        enumerable: true,
        get: function() {
          return _index.jsxOpeningFragment;
        }
      });
      Object.defineProperty(exports, "JSXSpreadAttribute", {
        enumerable: true,
        get: function() {
          return _index.jsxSpreadAttribute;
        }
      });
      Object.defineProperty(exports, "JSXSpreadChild", {
        enumerable: true,
        get: function() {
          return _index.jsxSpreadChild;
        }
      });
      Object.defineProperty(exports, "JSXText", {
        enumerable: true,
        get: function() {
          return _index.jsxText;
        }
      });
      Object.defineProperty(exports, "LabeledStatement", {
        enumerable: true,
        get: function() {
          return _index.labeledStatement;
        }
      });
      Object.defineProperty(exports, "LogicalExpression", {
        enumerable: true,
        get: function() {
          return _index.logicalExpression;
        }
      });
      Object.defineProperty(exports, "MemberExpression", {
        enumerable: true,
        get: function() {
          return _index.memberExpression;
        }
      });
      Object.defineProperty(exports, "MetaProperty", {
        enumerable: true,
        get: function() {
          return _index.metaProperty;
        }
      });
      Object.defineProperty(exports, "MixedTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _index.mixedTypeAnnotation;
        }
      });
      Object.defineProperty(exports, "ModuleExpression", {
        enumerable: true,
        get: function() {
          return _index.moduleExpression;
        }
      });
      Object.defineProperty(exports, "NewExpression", {
        enumerable: true,
        get: function() {
          return _index.newExpression;
        }
      });
      Object.defineProperty(exports, "Noop", {
        enumerable: true,
        get: function() {
          return _index.noop;
        }
      });
      Object.defineProperty(exports, "NullLiteral", {
        enumerable: true,
        get: function() {
          return _index.nullLiteral;
        }
      });
      Object.defineProperty(exports, "NullLiteralTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _index.nullLiteralTypeAnnotation;
        }
      });
      Object.defineProperty(exports, "NullableTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _index.nullableTypeAnnotation;
        }
      });
      Object.defineProperty(exports, "NumberLiteral", {
        enumerable: true,
        get: function() {
          return _index.numberLiteral;
        }
      });
      Object.defineProperty(exports, "NumberLiteralTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _index.numberLiteralTypeAnnotation;
        }
      });
      Object.defineProperty(exports, "NumberTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _index.numberTypeAnnotation;
        }
      });
      Object.defineProperty(exports, "NumericLiteral", {
        enumerable: true,
        get: function() {
          return _index.numericLiteral;
        }
      });
      Object.defineProperty(exports, "ObjectExpression", {
        enumerable: true,
        get: function() {
          return _index.objectExpression;
        }
      });
      Object.defineProperty(exports, "ObjectMethod", {
        enumerable: true,
        get: function() {
          return _index.objectMethod;
        }
      });
      Object.defineProperty(exports, "ObjectPattern", {
        enumerable: true,
        get: function() {
          return _index.objectPattern;
        }
      });
      Object.defineProperty(exports, "ObjectProperty", {
        enumerable: true,
        get: function() {
          return _index.objectProperty;
        }
      });
      Object.defineProperty(exports, "ObjectTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _index.objectTypeAnnotation;
        }
      });
      Object.defineProperty(exports, "ObjectTypeCallProperty", {
        enumerable: true,
        get: function() {
          return _index.objectTypeCallProperty;
        }
      });
      Object.defineProperty(exports, "ObjectTypeIndexer", {
        enumerable: true,
        get: function() {
          return _index.objectTypeIndexer;
        }
      });
      Object.defineProperty(exports, "ObjectTypeInternalSlot", {
        enumerable: true,
        get: function() {
          return _index.objectTypeInternalSlot;
        }
      });
      Object.defineProperty(exports, "ObjectTypeProperty", {
        enumerable: true,
        get: function() {
          return _index.objectTypeProperty;
        }
      });
      Object.defineProperty(exports, "ObjectTypeSpreadProperty", {
        enumerable: true,
        get: function() {
          return _index.objectTypeSpreadProperty;
        }
      });
      Object.defineProperty(exports, "OpaqueType", {
        enumerable: true,
        get: function() {
          return _index.opaqueType;
        }
      });
      Object.defineProperty(exports, "OptionalCallExpression", {
        enumerable: true,
        get: function() {
          return _index.optionalCallExpression;
        }
      });
      Object.defineProperty(exports, "OptionalIndexedAccessType", {
        enumerable: true,
        get: function() {
          return _index.optionalIndexedAccessType;
        }
      });
      Object.defineProperty(exports, "OptionalMemberExpression", {
        enumerable: true,
        get: function() {
          return _index.optionalMemberExpression;
        }
      });
      Object.defineProperty(exports, "ParenthesizedExpression", {
        enumerable: true,
        get: function() {
          return _index.parenthesizedExpression;
        }
      });
      Object.defineProperty(exports, "PipelineBareFunction", {
        enumerable: true,
        get: function() {
          return _index.pipelineBareFunction;
        }
      });
      Object.defineProperty(exports, "PipelinePrimaryTopicReference", {
        enumerable: true,
        get: function() {
          return _index.pipelinePrimaryTopicReference;
        }
      });
      Object.defineProperty(exports, "PipelineTopicExpression", {
        enumerable: true,
        get: function() {
          return _index.pipelineTopicExpression;
        }
      });
      Object.defineProperty(exports, "Placeholder", {
        enumerable: true,
        get: function() {
          return _index.placeholder;
        }
      });
      Object.defineProperty(exports, "PrivateName", {
        enumerable: true,
        get: function() {
          return _index.privateName;
        }
      });
      Object.defineProperty(exports, "Program", {
        enumerable: true,
        get: function() {
          return _index.program;
        }
      });
      Object.defineProperty(exports, "QualifiedTypeIdentifier", {
        enumerable: true,
        get: function() {
          return _index.qualifiedTypeIdentifier;
        }
      });
      Object.defineProperty(exports, "RecordExpression", {
        enumerable: true,
        get: function() {
          return _index.recordExpression;
        }
      });
      Object.defineProperty(exports, "RegExpLiteral", {
        enumerable: true,
        get: function() {
          return _index.regExpLiteral;
        }
      });
      Object.defineProperty(exports, "RegexLiteral", {
        enumerable: true,
        get: function() {
          return _index.regexLiteral;
        }
      });
      Object.defineProperty(exports, "RestElement", {
        enumerable: true,
        get: function() {
          return _index.restElement;
        }
      });
      Object.defineProperty(exports, "RestProperty", {
        enumerable: true,
        get: function() {
          return _index.restProperty;
        }
      });
      Object.defineProperty(exports, "ReturnStatement", {
        enumerable: true,
        get: function() {
          return _index.returnStatement;
        }
      });
      Object.defineProperty(exports, "SequenceExpression", {
        enumerable: true,
        get: function() {
          return _index.sequenceExpression;
        }
      });
      Object.defineProperty(exports, "SpreadElement", {
        enumerable: true,
        get: function() {
          return _index.spreadElement;
        }
      });
      Object.defineProperty(exports, "SpreadProperty", {
        enumerable: true,
        get: function() {
          return _index.spreadProperty;
        }
      });
      Object.defineProperty(exports, "StaticBlock", {
        enumerable: true,
        get: function() {
          return _index.staticBlock;
        }
      });
      Object.defineProperty(exports, "StringLiteral", {
        enumerable: true,
        get: function() {
          return _index.stringLiteral;
        }
      });
      Object.defineProperty(exports, "StringLiteralTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _index.stringLiteralTypeAnnotation;
        }
      });
      Object.defineProperty(exports, "StringTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _index.stringTypeAnnotation;
        }
      });
      Object.defineProperty(exports, "Super", {
        enumerable: true,
        get: function() {
          return _index.super;
        }
      });
      Object.defineProperty(exports, "SwitchCase", {
        enumerable: true,
        get: function() {
          return _index.switchCase;
        }
      });
      Object.defineProperty(exports, "SwitchStatement", {
        enumerable: true,
        get: function() {
          return _index.switchStatement;
        }
      });
      Object.defineProperty(exports, "SymbolTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _index.symbolTypeAnnotation;
        }
      });
      Object.defineProperty(exports, "TSAnyKeyword", {
        enumerable: true,
        get: function() {
          return _index.tsAnyKeyword;
        }
      });
      Object.defineProperty(exports, "TSArrayType", {
        enumerable: true,
        get: function() {
          return _index.tsArrayType;
        }
      });
      Object.defineProperty(exports, "TSAsExpression", {
        enumerable: true,
        get: function() {
          return _index.tsAsExpression;
        }
      });
      Object.defineProperty(exports, "TSBigIntKeyword", {
        enumerable: true,
        get: function() {
          return _index.tsBigIntKeyword;
        }
      });
      Object.defineProperty(exports, "TSBooleanKeyword", {
        enumerable: true,
        get: function() {
          return _index.tsBooleanKeyword;
        }
      });
      Object.defineProperty(exports, "TSCallSignatureDeclaration", {
        enumerable: true,
        get: function() {
          return _index.tsCallSignatureDeclaration;
        }
      });
      Object.defineProperty(exports, "TSConditionalType", {
        enumerable: true,
        get: function() {
          return _index.tsConditionalType;
        }
      });
      Object.defineProperty(exports, "TSConstructSignatureDeclaration", {
        enumerable: true,
        get: function() {
          return _index.tsConstructSignatureDeclaration;
        }
      });
      Object.defineProperty(exports, "TSConstructorType", {
        enumerable: true,
        get: function() {
          return _index.tsConstructorType;
        }
      });
      Object.defineProperty(exports, "TSDeclareFunction", {
        enumerable: true,
        get: function() {
          return _index.tsDeclareFunction;
        }
      });
      Object.defineProperty(exports, "TSDeclareMethod", {
        enumerable: true,
        get: function() {
          return _index.tsDeclareMethod;
        }
      });
      Object.defineProperty(exports, "TSEnumDeclaration", {
        enumerable: true,
        get: function() {
          return _index.tsEnumDeclaration;
        }
      });
      Object.defineProperty(exports, "TSEnumMember", {
        enumerable: true,
        get: function() {
          return _index.tsEnumMember;
        }
      });
      Object.defineProperty(exports, "TSExportAssignment", {
        enumerable: true,
        get: function() {
          return _index.tsExportAssignment;
        }
      });
      Object.defineProperty(exports, "TSExpressionWithTypeArguments", {
        enumerable: true,
        get: function() {
          return _index.tsExpressionWithTypeArguments;
        }
      });
      Object.defineProperty(exports, "TSExternalModuleReference", {
        enumerable: true,
        get: function() {
          return _index.tsExternalModuleReference;
        }
      });
      Object.defineProperty(exports, "TSFunctionType", {
        enumerable: true,
        get: function() {
          return _index.tsFunctionType;
        }
      });
      Object.defineProperty(exports, "TSImportEqualsDeclaration", {
        enumerable: true,
        get: function() {
          return _index.tsImportEqualsDeclaration;
        }
      });
      Object.defineProperty(exports, "TSImportType", {
        enumerable: true,
        get: function() {
          return _index.tsImportType;
        }
      });
      Object.defineProperty(exports, "TSIndexSignature", {
        enumerable: true,
        get: function() {
          return _index.tsIndexSignature;
        }
      });
      Object.defineProperty(exports, "TSIndexedAccessType", {
        enumerable: true,
        get: function() {
          return _index.tsIndexedAccessType;
        }
      });
      Object.defineProperty(exports, "TSInferType", {
        enumerable: true,
        get: function() {
          return _index.tsInferType;
        }
      });
      Object.defineProperty(exports, "TSInstantiationExpression", {
        enumerable: true,
        get: function() {
          return _index.tsInstantiationExpression;
        }
      });
      Object.defineProperty(exports, "TSInterfaceBody", {
        enumerable: true,
        get: function() {
          return _index.tsInterfaceBody;
        }
      });
      Object.defineProperty(exports, "TSInterfaceDeclaration", {
        enumerable: true,
        get: function() {
          return _index.tsInterfaceDeclaration;
        }
      });
      Object.defineProperty(exports, "TSIntersectionType", {
        enumerable: true,
        get: function() {
          return _index.tsIntersectionType;
        }
      });
      Object.defineProperty(exports, "TSIntrinsicKeyword", {
        enumerable: true,
        get: function() {
          return _index.tsIntrinsicKeyword;
        }
      });
      Object.defineProperty(exports, "TSLiteralType", {
        enumerable: true,
        get: function() {
          return _index.tsLiteralType;
        }
      });
      Object.defineProperty(exports, "TSMappedType", {
        enumerable: true,
        get: function() {
          return _index.tsMappedType;
        }
      });
      Object.defineProperty(exports, "TSMethodSignature", {
        enumerable: true,
        get: function() {
          return _index.tsMethodSignature;
        }
      });
      Object.defineProperty(exports, "TSModuleBlock", {
        enumerable: true,
        get: function() {
          return _index.tsModuleBlock;
        }
      });
      Object.defineProperty(exports, "TSModuleDeclaration", {
        enumerable: true,
        get: function() {
          return _index.tsModuleDeclaration;
        }
      });
      Object.defineProperty(exports, "TSNamedTupleMember", {
        enumerable: true,
        get: function() {
          return _index.tsNamedTupleMember;
        }
      });
      Object.defineProperty(exports, "TSNamespaceExportDeclaration", {
        enumerable: true,
        get: function() {
          return _index.tsNamespaceExportDeclaration;
        }
      });
      Object.defineProperty(exports, "TSNeverKeyword", {
        enumerable: true,
        get: function() {
          return _index.tsNeverKeyword;
        }
      });
      Object.defineProperty(exports, "TSNonNullExpression", {
        enumerable: true,
        get: function() {
          return _index.tsNonNullExpression;
        }
      });
      Object.defineProperty(exports, "TSNullKeyword", {
        enumerable: true,
        get: function() {
          return _index.tsNullKeyword;
        }
      });
      Object.defineProperty(exports, "TSNumberKeyword", {
        enumerable: true,
        get: function() {
          return _index.tsNumberKeyword;
        }
      });
      Object.defineProperty(exports, "TSObjectKeyword", {
        enumerable: true,
        get: function() {
          return _index.tsObjectKeyword;
        }
      });
      Object.defineProperty(exports, "TSOptionalType", {
        enumerable: true,
        get: function() {
          return _index.tsOptionalType;
        }
      });
      Object.defineProperty(exports, "TSParameterProperty", {
        enumerable: true,
        get: function() {
          return _index.tsParameterProperty;
        }
      });
      Object.defineProperty(exports, "TSParenthesizedType", {
        enumerable: true,
        get: function() {
          return _index.tsParenthesizedType;
        }
      });
      Object.defineProperty(exports, "TSPropertySignature", {
        enumerable: true,
        get: function() {
          return _index.tsPropertySignature;
        }
      });
      Object.defineProperty(exports, "TSQualifiedName", {
        enumerable: true,
        get: function() {
          return _index.tsQualifiedName;
        }
      });
      Object.defineProperty(exports, "TSRestType", {
        enumerable: true,
        get: function() {
          return _index.tsRestType;
        }
      });
      Object.defineProperty(exports, "TSSatisfiesExpression", {
        enumerable: true,
        get: function() {
          return _index.tsSatisfiesExpression;
        }
      });
      Object.defineProperty(exports, "TSStringKeyword", {
        enumerable: true,
        get: function() {
          return _index.tsStringKeyword;
        }
      });
      Object.defineProperty(exports, "TSSymbolKeyword", {
        enumerable: true,
        get: function() {
          return _index.tsSymbolKeyword;
        }
      });
      Object.defineProperty(exports, "TSThisType", {
        enumerable: true,
        get: function() {
          return _index.tsThisType;
        }
      });
      Object.defineProperty(exports, "TSTupleType", {
        enumerable: true,
        get: function() {
          return _index.tsTupleType;
        }
      });
      Object.defineProperty(exports, "TSTypeAliasDeclaration", {
        enumerable: true,
        get: function() {
          return _index.tsTypeAliasDeclaration;
        }
      });
      Object.defineProperty(exports, "TSTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _index.tsTypeAnnotation;
        }
      });
      Object.defineProperty(exports, "TSTypeAssertion", {
        enumerable: true,
        get: function() {
          return _index.tsTypeAssertion;
        }
      });
      Object.defineProperty(exports, "TSTypeLiteral", {
        enumerable: true,
        get: function() {
          return _index.tsTypeLiteral;
        }
      });
      Object.defineProperty(exports, "TSTypeOperator", {
        enumerable: true,
        get: function() {
          return _index.tsTypeOperator;
        }
      });
      Object.defineProperty(exports, "TSTypeParameter", {
        enumerable: true,
        get: function() {
          return _index.tsTypeParameter;
        }
      });
      Object.defineProperty(exports, "TSTypeParameterDeclaration", {
        enumerable: true,
        get: function() {
          return _index.tsTypeParameterDeclaration;
        }
      });
      Object.defineProperty(exports, "TSTypeParameterInstantiation", {
        enumerable: true,
        get: function() {
          return _index.tsTypeParameterInstantiation;
        }
      });
      Object.defineProperty(exports, "TSTypePredicate", {
        enumerable: true,
        get: function() {
          return _index.tsTypePredicate;
        }
      });
      Object.defineProperty(exports, "TSTypeQuery", {
        enumerable: true,
        get: function() {
          return _index.tsTypeQuery;
        }
      });
      Object.defineProperty(exports, "TSTypeReference", {
        enumerable: true,
        get: function() {
          return _index.tsTypeReference;
        }
      });
      Object.defineProperty(exports, "TSUndefinedKeyword", {
        enumerable: true,
        get: function() {
          return _index.tsUndefinedKeyword;
        }
      });
      Object.defineProperty(exports, "TSUnionType", {
        enumerable: true,
        get: function() {
          return _index.tsUnionType;
        }
      });
      Object.defineProperty(exports, "TSUnknownKeyword", {
        enumerable: true,
        get: function() {
          return _index.tsUnknownKeyword;
        }
      });
      Object.defineProperty(exports, "TSVoidKeyword", {
        enumerable: true,
        get: function() {
          return _index.tsVoidKeyword;
        }
      });
      Object.defineProperty(exports, "TaggedTemplateExpression", {
        enumerable: true,
        get: function() {
          return _index.taggedTemplateExpression;
        }
      });
      Object.defineProperty(exports, "TemplateElement", {
        enumerable: true,
        get: function() {
          return _index.templateElement;
        }
      });
      Object.defineProperty(exports, "TemplateLiteral", {
        enumerable: true,
        get: function() {
          return _index.templateLiteral;
        }
      });
      Object.defineProperty(exports, "ThisExpression", {
        enumerable: true,
        get: function() {
          return _index.thisExpression;
        }
      });
      Object.defineProperty(exports, "ThisTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _index.thisTypeAnnotation;
        }
      });
      Object.defineProperty(exports, "ThrowStatement", {
        enumerable: true,
        get: function() {
          return _index.throwStatement;
        }
      });
      Object.defineProperty(exports, "TopicReference", {
        enumerable: true,
        get: function() {
          return _index.topicReference;
        }
      });
      Object.defineProperty(exports, "TryStatement", {
        enumerable: true,
        get: function() {
          return _index.tryStatement;
        }
      });
      Object.defineProperty(exports, "TupleExpression", {
        enumerable: true,
        get: function() {
          return _index.tupleExpression;
        }
      });
      Object.defineProperty(exports, "TupleTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _index.tupleTypeAnnotation;
        }
      });
      Object.defineProperty(exports, "TypeAlias", {
        enumerable: true,
        get: function() {
          return _index.typeAlias;
        }
      });
      Object.defineProperty(exports, "TypeAnnotation", {
        enumerable: true,
        get: function() {
          return _index.typeAnnotation;
        }
      });
      Object.defineProperty(exports, "TypeCastExpression", {
        enumerable: true,
        get: function() {
          return _index.typeCastExpression;
        }
      });
      Object.defineProperty(exports, "TypeParameter", {
        enumerable: true,
        get: function() {
          return _index.typeParameter;
        }
      });
      Object.defineProperty(exports, "TypeParameterDeclaration", {
        enumerable: true,
        get: function() {
          return _index.typeParameterDeclaration;
        }
      });
      Object.defineProperty(exports, "TypeParameterInstantiation", {
        enumerable: true,
        get: function() {
          return _index.typeParameterInstantiation;
        }
      });
      Object.defineProperty(exports, "TypeofTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _index.typeofTypeAnnotation;
        }
      });
      Object.defineProperty(exports, "UnaryExpression", {
        enumerable: true,
        get: function() {
          return _index.unaryExpression;
        }
      });
      Object.defineProperty(exports, "UnionTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _index.unionTypeAnnotation;
        }
      });
      Object.defineProperty(exports, "UpdateExpression", {
        enumerable: true,
        get: function() {
          return _index.updateExpression;
        }
      });
      Object.defineProperty(exports, "V8IntrinsicIdentifier", {
        enumerable: true,
        get: function() {
          return _index.v8IntrinsicIdentifier;
        }
      });
      Object.defineProperty(exports, "VariableDeclaration", {
        enumerable: true,
        get: function() {
          return _index.variableDeclaration;
        }
      });
      Object.defineProperty(exports, "VariableDeclarator", {
        enumerable: true,
        get: function() {
          return _index.variableDeclarator;
        }
      });
      Object.defineProperty(exports, "Variance", {
        enumerable: true,
        get: function() {
          return _index.variance;
        }
      });
      Object.defineProperty(exports, "VoidTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _index.voidTypeAnnotation;
        }
      });
      Object.defineProperty(exports, "WhileStatement", {
        enumerable: true,
        get: function() {
          return _index.whileStatement;
        }
      });
      Object.defineProperty(exports, "WithStatement", {
        enumerable: true,
        get: function() {
          return _index.withStatement;
        }
      });
      Object.defineProperty(exports, "YieldExpression", {
        enumerable: true,
        get: function() {
          return _index.yieldExpression;
        }
      });
      var _index = require_generated2();
    }
  });

  // node_modules/@babel/types/lib/builders/productions.js
  var require_productions = __commonJS({
    "node_modules/@babel/types/lib/builders/productions.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.buildUndefinedNode = buildUndefinedNode;
      var _index = require_generated2();
      function buildUndefinedNode() {
        return (0, _index.unaryExpression)("void", (0, _index.numericLiteral)(0), true);
      }
    }
  });

  // node_modules/@babel/types/lib/clone/cloneNode.js
  var require_cloneNode = __commonJS({
    "node_modules/@babel/types/lib/clone/cloneNode.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = cloneNode;
      var _index = require_definitions();
      var _index2 = require_generated();
      var has = Function.call.bind(Object.prototype.hasOwnProperty);
      function cloneIfNode(obj, deep, withoutLoc, commentsCache) {
        if (obj && typeof obj.type === "string") {
          return cloneNodeInternal(obj, deep, withoutLoc, commentsCache);
        }
        return obj;
      }
      function cloneIfNodeOrArray(obj, deep, withoutLoc, commentsCache) {
        if (Array.isArray(obj)) {
          return obj.map((node) => cloneIfNode(node, deep, withoutLoc, commentsCache));
        }
        return cloneIfNode(obj, deep, withoutLoc, commentsCache);
      }
      function cloneNode(node, deep = true, withoutLoc = false) {
        return cloneNodeInternal(node, deep, withoutLoc, /* @__PURE__ */ new Map());
      }
      function cloneNodeInternal(node, deep = true, withoutLoc = false, commentsCache) {
        if (!node)
          return node;
        const {
          type
        } = node;
        const newNode = {
          type: node.type
        };
        if ((0, _index2.isIdentifier)(node)) {
          newNode.name = node.name;
          if (has(node, "optional") && typeof node.optional === "boolean") {
            newNode.optional = node.optional;
          }
          if (has(node, "typeAnnotation")) {
            newNode.typeAnnotation = deep ? cloneIfNodeOrArray(node.typeAnnotation, true, withoutLoc, commentsCache) : node.typeAnnotation;
          }
        } else if (!has(_index.NODE_FIELDS, type)) {
          throw new Error(`Unknown node type: "${type}"`);
        } else {
          for (const field of Object.keys(_index.NODE_FIELDS[type])) {
            if (has(node, field)) {
              if (deep) {
                newNode[field] = (0, _index2.isFile)(node) && field === "comments" ? maybeCloneComments(node.comments, deep, withoutLoc, commentsCache) : cloneIfNodeOrArray(node[field], true, withoutLoc, commentsCache);
              } else {
                newNode[field] = node[field];
              }
            }
          }
        }
        if (has(node, "loc")) {
          if (withoutLoc) {
            newNode.loc = null;
          } else {
            newNode.loc = node.loc;
          }
        }
        if (has(node, "leadingComments")) {
          newNode.leadingComments = maybeCloneComments(node.leadingComments, deep, withoutLoc, commentsCache);
        }
        if (has(node, "innerComments")) {
          newNode.innerComments = maybeCloneComments(node.innerComments, deep, withoutLoc, commentsCache);
        }
        if (has(node, "trailingComments")) {
          newNode.trailingComments = maybeCloneComments(node.trailingComments, deep, withoutLoc, commentsCache);
        }
        if (has(node, "extra")) {
          newNode.extra = Object.assign({}, node.extra);
        }
        return newNode;
      }
      function maybeCloneComments(comments, deep, withoutLoc, commentsCache) {
        if (!comments || !deep) {
          return comments;
        }
        return comments.map((comment) => {
          const cache = commentsCache.get(comment);
          if (cache)
            return cache;
          const {
            type,
            value,
            loc
          } = comment;
          const ret = {
            type,
            value,
            loc
          };
          if (withoutLoc) {
            ret.loc = null;
          }
          commentsCache.set(comment, ret);
          return ret;
        });
      }
    }
  });

  // node_modules/@babel/types/lib/clone/clone.js
  var require_clone = __commonJS({
    "node_modules/@babel/types/lib/clone/clone.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = clone;
      var _cloneNode = require_cloneNode();
      function clone(node) {
        return (0, _cloneNode.default)(node, false);
      }
    }
  });

  // node_modules/@babel/types/lib/clone/cloneDeep.js
  var require_cloneDeep = __commonJS({
    "node_modules/@babel/types/lib/clone/cloneDeep.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = cloneDeep;
      var _cloneNode = require_cloneNode();
      function cloneDeep(node) {
        return (0, _cloneNode.default)(node);
      }
    }
  });

  // node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js
  var require_cloneDeepWithoutLoc = __commonJS({
    "node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = cloneDeepWithoutLoc;
      var _cloneNode = require_cloneNode();
      function cloneDeepWithoutLoc(node) {
        return (0, _cloneNode.default)(node, true, true);
      }
    }
  });

  // node_modules/@babel/types/lib/clone/cloneWithoutLoc.js
  var require_cloneWithoutLoc = __commonJS({
    "node_modules/@babel/types/lib/clone/cloneWithoutLoc.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = cloneWithoutLoc;
      var _cloneNode = require_cloneNode();
      function cloneWithoutLoc(node) {
        return (0, _cloneNode.default)(node, false, true);
      }
    }
  });

  // node_modules/@babel/types/lib/comments/addComments.js
  var require_addComments = __commonJS({
    "node_modules/@babel/types/lib/comments/addComments.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = addComments;
      function addComments(node, type, comments) {
        if (!comments || !node)
          return node;
        const key = `${type}Comments`;
        if (node[key]) {
          if (type === "leading") {
            node[key] = comments.concat(node[key]);
          } else {
            node[key].push(...comments);
          }
        } else {
          node[key] = comments;
        }
        return node;
      }
    }
  });

  // node_modules/@babel/types/lib/comments/addComment.js
  var require_addComment = __commonJS({
    "node_modules/@babel/types/lib/comments/addComment.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = addComment;
      var _addComments = require_addComments();
      function addComment(node, type, content, line) {
        return (0, _addComments.default)(node, type, [{
          type: line ? "CommentLine" : "CommentBlock",
          value: content
        }]);
      }
    }
  });

  // node_modules/@babel/types/lib/utils/inherit.js
  var require_inherit = __commonJS({
    "node_modules/@babel/types/lib/utils/inherit.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = inherit;
      function inherit(key, child, parent) {
        if (child && parent) {
          child[key] = Array.from(new Set([].concat(child[key], parent[key]).filter(Boolean)));
        }
      }
    }
  });

  // node_modules/@babel/types/lib/comments/inheritInnerComments.js
  var require_inheritInnerComments = __commonJS({
    "node_modules/@babel/types/lib/comments/inheritInnerComments.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = inheritInnerComments;
      var _inherit = require_inherit();
      function inheritInnerComments(child, parent) {
        (0, _inherit.default)("innerComments", child, parent);
      }
    }
  });

  // node_modules/@babel/types/lib/comments/inheritLeadingComments.js
  var require_inheritLeadingComments = __commonJS({
    "node_modules/@babel/types/lib/comments/inheritLeadingComments.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = inheritLeadingComments;
      var _inherit = require_inherit();
      function inheritLeadingComments(child, parent) {
        (0, _inherit.default)("leadingComments", child, parent);
      }
    }
  });

  // node_modules/@babel/types/lib/comments/inheritTrailingComments.js
  var require_inheritTrailingComments = __commonJS({
    "node_modules/@babel/types/lib/comments/inheritTrailingComments.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = inheritTrailingComments;
      var _inherit = require_inherit();
      function inheritTrailingComments(child, parent) {
        (0, _inherit.default)("trailingComments", child, parent);
      }
    }
  });

  // node_modules/@babel/types/lib/comments/inheritsComments.js
  var require_inheritsComments = __commonJS({
    "node_modules/@babel/types/lib/comments/inheritsComments.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = inheritsComments;
      var _inheritTrailingComments = require_inheritTrailingComments();
      var _inheritLeadingComments = require_inheritLeadingComments();
      var _inheritInnerComments = require_inheritInnerComments();
      function inheritsComments(child, parent) {
        (0, _inheritTrailingComments.default)(child, parent);
        (0, _inheritLeadingComments.default)(child, parent);
        (0, _inheritInnerComments.default)(child, parent);
        return child;
      }
    }
  });

  // node_modules/@babel/types/lib/comments/removeComments.js
  var require_removeComments = __commonJS({
    "node_modules/@babel/types/lib/comments/removeComments.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = removeComments;
      var _index = require_constants();
      function removeComments(node) {
        _index.COMMENT_KEYS.forEach((key) => {
          node[key] = null;
        });
        return node;
      }
    }
  });

  // node_modules/@babel/types/lib/constants/generated/index.js
  var require_generated4 = __commonJS({
    "node_modules/@babel/types/lib/constants/generated/index.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.WHILE_TYPES = exports.USERWHITESPACABLE_TYPES = exports.UNARYLIKE_TYPES = exports.TYPESCRIPT_TYPES = exports.TSTYPE_TYPES = exports.TSTYPEELEMENT_TYPES = exports.TSENTITYNAME_TYPES = exports.TSBASETYPE_TYPES = exports.TERMINATORLESS_TYPES = exports.STATEMENT_TYPES = exports.STANDARDIZED_TYPES = exports.SCOPABLE_TYPES = exports.PUREISH_TYPES = exports.PROPERTY_TYPES = exports.PRIVATE_TYPES = exports.PATTERN_TYPES = exports.PATTERNLIKE_TYPES = exports.OBJECTMEMBER_TYPES = exports.MODULESPECIFIER_TYPES = exports.MODULEDECLARATION_TYPES = exports.MISCELLANEOUS_TYPES = exports.METHOD_TYPES = exports.LVAL_TYPES = exports.LOOP_TYPES = exports.LITERAL_TYPES = exports.JSX_TYPES = exports.IMPORTOREXPORTDECLARATION_TYPES = exports.IMMUTABLE_TYPES = exports.FUNCTION_TYPES = exports.FUNCTIONPARENT_TYPES = exports.FOR_TYPES = exports.FORXSTATEMENT_TYPES = exports.FLOW_TYPES = exports.FLOWTYPE_TYPES = exports.FLOWPREDICATE_TYPES = exports.FLOWDECLARATION_TYPES = exports.FLOWBASEANNOTATION_TYPES = exports.EXPRESSION_TYPES = exports.EXPRESSIONWRAPPER_TYPES = exports.EXPORTDECLARATION_TYPES = exports.ENUMMEMBER_TYPES = exports.ENUMBODY_TYPES = exports.DECLARATION_TYPES = exports.CONDITIONAL_TYPES = exports.COMPLETIONSTATEMENT_TYPES = exports.CLASS_TYPES = exports.BLOCK_TYPES = exports.BLOCKPARENT_TYPES = exports.BINARY_TYPES = exports.ACCESSOR_TYPES = void 0;
      var _index = require_definitions();
      var STANDARDIZED_TYPES = exports.STANDARDIZED_TYPES = _index.FLIPPED_ALIAS_KEYS["Standardized"];
      var EXPRESSION_TYPES = exports.EXPRESSION_TYPES = _index.FLIPPED_ALIAS_KEYS["Expression"];
      var BINARY_TYPES = exports.BINARY_TYPES = _index.FLIPPED_ALIAS_KEYS["Binary"];
      var SCOPABLE_TYPES = exports.SCOPABLE_TYPES = _index.FLIPPED_ALIAS_KEYS["Scopable"];
      var BLOCKPARENT_TYPES = exports.BLOCKPARENT_TYPES = _index.FLIPPED_ALIAS_KEYS["BlockParent"];
      var BLOCK_TYPES = exports.BLOCK_TYPES = _index.FLIPPED_ALIAS_KEYS["Block"];
      var STATEMENT_TYPES = exports.STATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS["Statement"];
      var TERMINATORLESS_TYPES = exports.TERMINATORLESS_TYPES = _index.FLIPPED_ALIAS_KEYS["Terminatorless"];
      var COMPLETIONSTATEMENT_TYPES = exports.COMPLETIONSTATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS["CompletionStatement"];
      var CONDITIONAL_TYPES = exports.CONDITIONAL_TYPES = _index.FLIPPED_ALIAS_KEYS["Conditional"];
      var LOOP_TYPES = exports.LOOP_TYPES = _index.FLIPPED_ALIAS_KEYS["Loop"];
      var WHILE_TYPES = exports.WHILE_TYPES = _index.FLIPPED_ALIAS_KEYS["While"];
      var EXPRESSIONWRAPPER_TYPES = exports.EXPRESSIONWRAPPER_TYPES = _index.FLIPPED_ALIAS_KEYS["ExpressionWrapper"];
      var FOR_TYPES = exports.FOR_TYPES = _index.FLIPPED_ALIAS_KEYS["For"];
      var FORXSTATEMENT_TYPES = exports.FORXSTATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS["ForXStatement"];
      var FUNCTION_TYPES = exports.FUNCTION_TYPES = _index.FLIPPED_ALIAS_KEYS["Function"];
      var FUNCTIONPARENT_TYPES = exports.FUNCTIONPARENT_TYPES = _index.FLIPPED_ALIAS_KEYS["FunctionParent"];
      var PUREISH_TYPES = exports.PUREISH_TYPES = _index.FLIPPED_ALIAS_KEYS["Pureish"];
      var DECLARATION_TYPES = exports.DECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS["Declaration"];
      var PATTERNLIKE_TYPES = exports.PATTERNLIKE_TYPES = _index.FLIPPED_ALIAS_KEYS["PatternLike"];
      var LVAL_TYPES = exports.LVAL_TYPES = _index.FLIPPED_ALIAS_KEYS["LVal"];
      var TSENTITYNAME_TYPES = exports.TSENTITYNAME_TYPES = _index.FLIPPED_ALIAS_KEYS["TSEntityName"];
      var LITERAL_TYPES = exports.LITERAL_TYPES = _index.FLIPPED_ALIAS_KEYS["Literal"];
      var IMMUTABLE_TYPES = exports.IMMUTABLE_TYPES = _index.FLIPPED_ALIAS_KEYS["Immutable"];
      var USERWHITESPACABLE_TYPES = exports.USERWHITESPACABLE_TYPES = _index.FLIPPED_ALIAS_KEYS["UserWhitespacable"];
      var METHOD_TYPES = exports.METHOD_TYPES = _index.FLIPPED_ALIAS_KEYS["Method"];
      var OBJECTMEMBER_TYPES = exports.OBJECTMEMBER_TYPES = _index.FLIPPED_ALIAS_KEYS["ObjectMember"];
      var PROPERTY_TYPES = exports.PROPERTY_TYPES = _index.FLIPPED_ALIAS_KEYS["Property"];
      var UNARYLIKE_TYPES = exports.UNARYLIKE_TYPES = _index.FLIPPED_ALIAS_KEYS["UnaryLike"];
      var PATTERN_TYPES = exports.PATTERN_TYPES = _index.FLIPPED_ALIAS_KEYS["Pattern"];
      var CLASS_TYPES = exports.CLASS_TYPES = _index.FLIPPED_ALIAS_KEYS["Class"];
      var IMPORTOREXPORTDECLARATION_TYPES = exports.IMPORTOREXPORTDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS["ImportOrExportDeclaration"];
      var EXPORTDECLARATION_TYPES = exports.EXPORTDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS["ExportDeclaration"];
      var MODULESPECIFIER_TYPES = exports.MODULESPECIFIER_TYPES = _index.FLIPPED_ALIAS_KEYS["ModuleSpecifier"];
      var ACCESSOR_TYPES = exports.ACCESSOR_TYPES = _index.FLIPPED_ALIAS_KEYS["Accessor"];
      var PRIVATE_TYPES = exports.PRIVATE_TYPES = _index.FLIPPED_ALIAS_KEYS["Private"];
      var FLOW_TYPES = exports.FLOW_TYPES = _index.FLIPPED_ALIAS_KEYS["Flow"];
      var FLOWTYPE_TYPES = exports.FLOWTYPE_TYPES = _index.FLIPPED_ALIAS_KEYS["FlowType"];
      var FLOWBASEANNOTATION_TYPES = exports.FLOWBASEANNOTATION_TYPES = _index.FLIPPED_ALIAS_KEYS["FlowBaseAnnotation"];
      var FLOWDECLARATION_TYPES = exports.FLOWDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS["FlowDeclaration"];
      var FLOWPREDICATE_TYPES = exports.FLOWPREDICATE_TYPES = _index.FLIPPED_ALIAS_KEYS["FlowPredicate"];
      var ENUMBODY_TYPES = exports.ENUMBODY_TYPES = _index.FLIPPED_ALIAS_KEYS["EnumBody"];
      var ENUMMEMBER_TYPES = exports.ENUMMEMBER_TYPES = _index.FLIPPED_ALIAS_KEYS["EnumMember"];
      var JSX_TYPES = exports.JSX_TYPES = _index.FLIPPED_ALIAS_KEYS["JSX"];
      var MISCELLANEOUS_TYPES = exports.MISCELLANEOUS_TYPES = _index.FLIPPED_ALIAS_KEYS["Miscellaneous"];
      var TYPESCRIPT_TYPES = exports.TYPESCRIPT_TYPES = _index.FLIPPED_ALIAS_KEYS["TypeScript"];
      var TSTYPEELEMENT_TYPES = exports.TSTYPEELEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS["TSTypeElement"];
      var TSTYPE_TYPES = exports.TSTYPE_TYPES = _index.FLIPPED_ALIAS_KEYS["TSType"];
      var TSBASETYPE_TYPES = exports.TSBASETYPE_TYPES = _index.FLIPPED_ALIAS_KEYS["TSBaseType"];
      var MODULEDECLARATION_TYPES = exports.MODULEDECLARATION_TYPES = IMPORTOREXPORTDECLARATION_TYPES;
    }
  });

  // node_modules/@babel/types/lib/converters/toBlock.js
  var require_toBlock = __commonJS({
    "node_modules/@babel/types/lib/converters/toBlock.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = toBlock;
      var _index = require_generated();
      var _index2 = require_generated2();
      function toBlock(node, parent) {
        if ((0, _index.isBlockStatement)(node)) {
          return node;
        }
        let blockNodes = [];
        if ((0, _index.isEmptyStatement)(node)) {
          blockNodes = [];
        } else {
          if (!(0, _index.isStatement)(node)) {
            if ((0, _index.isFunction)(parent)) {
              node = (0, _index2.returnStatement)(node);
            } else {
              node = (0, _index2.expressionStatement)(node);
            }
          }
          blockNodes = [node];
        }
        return (0, _index2.blockStatement)(blockNodes);
      }
    }
  });

  // node_modules/@babel/types/lib/converters/ensureBlock.js
  var require_ensureBlock = __commonJS({
    "node_modules/@babel/types/lib/converters/ensureBlock.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = ensureBlock;
      var _toBlock = require_toBlock();
      function ensureBlock(node, key = "body") {
        const result = (0, _toBlock.default)(node[key], node);
        node[key] = result;
        return result;
      }
    }
  });

  // node_modules/@babel/types/lib/converters/toIdentifier.js
  var require_toIdentifier = __commonJS({
    "node_modules/@babel/types/lib/converters/toIdentifier.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = toIdentifier;
      var _isValidIdentifier = require_isValidIdentifier();
      var _helperValidatorIdentifier = require_lib();
      function toIdentifier(input) {
        input = input + "";
        let name = "";
        for (const c of input) {
          name += (0, _helperValidatorIdentifier.isIdentifierChar)(c.codePointAt(0)) ? c : "-";
        }
        name = name.replace(/^[-0-9]+/, "");
        name = name.replace(/[-\s]+(.)?/g, function(match, c) {
          return c ? c.toUpperCase() : "";
        });
        if (!(0, _isValidIdentifier.default)(name)) {
          name = `_${name}`;
        }
        return name || "_";
      }
    }
  });

  // node_modules/@babel/types/lib/converters/toBindingIdentifierName.js
  var require_toBindingIdentifierName = __commonJS({
    "node_modules/@babel/types/lib/converters/toBindingIdentifierName.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = toBindingIdentifierName;
      var _toIdentifier = require_toIdentifier();
      function toBindingIdentifierName(name) {
        name = (0, _toIdentifier.default)(name);
        if (name === "eval" || name === "arguments")
          name = "_" + name;
        return name;
      }
    }
  });

  // node_modules/@babel/types/lib/converters/toComputedKey.js
  var require_toComputedKey = __commonJS({
    "node_modules/@babel/types/lib/converters/toComputedKey.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = toComputedKey;
      var _index = require_generated();
      var _index2 = require_generated2();
      function toComputedKey(node, key = node.key || node.property) {
        if (!node.computed && (0, _index.isIdentifier)(key))
          key = (0, _index2.stringLiteral)(key.name);
        return key;
      }
    }
  });

  // node_modules/@babel/types/lib/converters/toExpression.js
  var require_toExpression = __commonJS({
    "node_modules/@babel/types/lib/converters/toExpression.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _index = require_generated();
      var _default = exports.default = toExpression;
      function toExpression(node) {
        if ((0, _index.isExpressionStatement)(node)) {
          node = node.expression;
        }
        if ((0, _index.isExpression)(node)) {
          return node;
        }
        if ((0, _index.isClass)(node)) {
          node.type = "ClassExpression";
        } else if ((0, _index.isFunction)(node)) {
          node.type = "FunctionExpression";
        }
        if (!(0, _index.isExpression)(node)) {
          throw new Error(`cannot turn ${node.type} to an expression`);
        }
        return node;
      }
    }
  });

  // node_modules/@babel/types/lib/traverse/traverseFast.js
  var require_traverseFast = __commonJS({
    "node_modules/@babel/types/lib/traverse/traverseFast.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = traverseFast;
      var _index = require_definitions();
      function traverseFast(node, enter, opts) {
        if (!node)
          return;
        const keys = _index.VISITOR_KEYS[node.type];
        if (!keys)
          return;
        opts = opts || {};
        enter(node, opts);
        for (const key of keys) {
          const subNode = node[key];
          if (Array.isArray(subNode)) {
            for (const node2 of subNode) {
              traverseFast(node2, enter, opts);
            }
          } else {
            traverseFast(subNode, enter, opts);
          }
        }
      }
    }
  });

  // node_modules/@babel/types/lib/modifications/removeProperties.js
  var require_removeProperties = __commonJS({
    "node_modules/@babel/types/lib/modifications/removeProperties.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = removeProperties;
      var _index = require_constants();
      var CLEAR_KEYS = ["tokens", "start", "end", "loc", "raw", "rawValue"];
      var CLEAR_KEYS_PLUS_COMMENTS = [..._index.COMMENT_KEYS, "comments", ...CLEAR_KEYS];
      function removeProperties(node, opts = {}) {
        const map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;
        for (const key of map) {
          if (node[key] != null)
            node[key] = void 0;
        }
        for (const key of Object.keys(node)) {
          if (key[0] === "_" && node[key] != null)
            node[key] = void 0;
        }
        const symbols = Object.getOwnPropertySymbols(node);
        for (const sym of symbols) {
          node[sym] = null;
        }
      }
    }
  });

  // node_modules/@babel/types/lib/modifications/removePropertiesDeep.js
  var require_removePropertiesDeep = __commonJS({
    "node_modules/@babel/types/lib/modifications/removePropertiesDeep.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = removePropertiesDeep;
      var _traverseFast = require_traverseFast();
      var _removeProperties = require_removeProperties();
      function removePropertiesDeep(tree, opts) {
        (0, _traverseFast.default)(tree, _removeProperties.default, opts);
        return tree;
      }
    }
  });

  // node_modules/@babel/types/lib/converters/toKeyAlias.js
  var require_toKeyAlias = __commonJS({
    "node_modules/@babel/types/lib/converters/toKeyAlias.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = toKeyAlias;
      var _index = require_generated();
      var _cloneNode = require_cloneNode();
      var _removePropertiesDeep = require_removePropertiesDeep();
      function toKeyAlias(node, key = node.key) {
        let alias;
        if (node.kind === "method") {
          return toKeyAlias.increment() + "";
        } else if ((0, _index.isIdentifier)(key)) {
          alias = key.name;
        } else if ((0, _index.isStringLiteral)(key)) {
          alias = JSON.stringify(key.value);
        } else {
          alias = JSON.stringify((0, _removePropertiesDeep.default)((0, _cloneNode.default)(key)));
        }
        if (node.computed) {
          alias = `[${alias}]`;
        }
        if (node.static) {
          alias = `static:${alias}`;
        }
        return alias;
      }
      toKeyAlias.uid = 0;
      toKeyAlias.increment = function() {
        if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {
          return toKeyAlias.uid = 0;
        } else {
          return toKeyAlias.uid++;
        }
      };
    }
  });

  // node_modules/@babel/types/lib/converters/toStatement.js
  var require_toStatement = __commonJS({
    "node_modules/@babel/types/lib/converters/toStatement.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _index = require_generated();
      var _index2 = require_generated2();
      var _default = exports.default = toStatement;
      function toStatement(node, ignore) {
        if ((0, _index.isStatement)(node)) {
          return node;
        }
        let mustHaveId = false;
        let newType;
        if ((0, _index.isClass)(node)) {
          mustHaveId = true;
          newType = "ClassDeclaration";
        } else if ((0, _index.isFunction)(node)) {
          mustHaveId = true;
          newType = "FunctionDeclaration";
        } else if ((0, _index.isAssignmentExpression)(node)) {
          return (0, _index2.expressionStatement)(node);
        }
        if (mustHaveId && !node.id) {
          newType = false;
        }
        if (!newType) {
          if (ignore) {
            return false;
          } else {
            throw new Error(`cannot turn ${node.type} to a statement`);
          }
        }
        node.type = newType;
        return node;
      }
    }
  });

  // node_modules/@babel/types/lib/converters/valueToNode.js
  var require_valueToNode = __commonJS({
    "node_modules/@babel/types/lib/converters/valueToNode.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _isValidIdentifier = require_isValidIdentifier();
      var _index = require_generated2();
      var _default = exports.default = valueToNode;
      var objectToString = Function.call.bind(Object.prototype.toString);
      function isRegExp(value) {
        return objectToString(value) === "[object RegExp]";
      }
      function isPlainObject(value) {
        if (typeof value !== "object" || value === null || Object.prototype.toString.call(value) !== "[object Object]") {
          return false;
        }
        const proto = Object.getPrototypeOf(value);
        return proto === null || Object.getPrototypeOf(proto) === null;
      }
      function valueToNode(value) {
        if (value === void 0) {
          return (0, _index.identifier)("undefined");
        }
        if (value === true || value === false) {
          return (0, _index.booleanLiteral)(value);
        }
        if (value === null) {
          return (0, _index.nullLiteral)();
        }
        if (typeof value === "string") {
          return (0, _index.stringLiteral)(value);
        }
        if (typeof value === "number") {
          let result;
          if (Number.isFinite(value)) {
            result = (0, _index.numericLiteral)(Math.abs(value));
          } else {
            let numerator;
            if (Number.isNaN(value)) {
              numerator = (0, _index.numericLiteral)(0);
            } else {
              numerator = (0, _index.numericLiteral)(1);
            }
            result = (0, _index.binaryExpression)("/", numerator, (0, _index.numericLiteral)(0));
          }
          if (value < 0 || Object.is(value, -0)) {
            result = (0, _index.unaryExpression)("-", result);
          }
          return result;
        }
        if (isRegExp(value)) {
          const pattern = value.source;
          const flags = value.toString().match(/\/([a-z]+|)$/)[1];
          return (0, _index.regExpLiteral)(pattern, flags);
        }
        if (Array.isArray(value)) {
          return (0, _index.arrayExpression)(value.map(valueToNode));
        }
        if (isPlainObject(value)) {
          const props = [];
          for (const key of Object.keys(value)) {
            let nodeKey;
            if ((0, _isValidIdentifier.default)(key)) {
              nodeKey = (0, _index.identifier)(key);
            } else {
              nodeKey = (0, _index.stringLiteral)(key);
            }
            props.push((0, _index.objectProperty)(nodeKey, valueToNode(value[key])));
          }
          return (0, _index.objectExpression)(props);
        }
        throw new Error("don't know how to turn this value into a node");
      }
    }
  });

  // node_modules/@babel/types/lib/modifications/appendToMemberExpression.js
  var require_appendToMemberExpression = __commonJS({
    "node_modules/@babel/types/lib/modifications/appendToMemberExpression.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = appendToMemberExpression;
      var _index = require_generated2();
      function appendToMemberExpression(member, append, computed = false) {
        member.object = (0, _index.memberExpression)(member.object, member.property, member.computed);
        member.property = append;
        member.computed = !!computed;
        return member;
      }
    }
  });

  // node_modules/@babel/types/lib/modifications/inherits.js
  var require_inherits = __commonJS({
    "node_modules/@babel/types/lib/modifications/inherits.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = inherits;
      var _index = require_constants();
      var _inheritsComments = require_inheritsComments();
      function inherits(child, parent) {
        if (!child || !parent)
          return child;
        for (const key of _index.INHERIT_KEYS.optional) {
          if (child[key] == null) {
            child[key] = parent[key];
          }
        }
        for (const key of Object.keys(parent)) {
          if (key[0] === "_" && key !== "__clone") {
            child[key] = parent[key];
          }
        }
        for (const key of _index.INHERIT_KEYS.force) {
          child[key] = parent[key];
        }
        (0, _inheritsComments.default)(child, parent);
        return child;
      }
    }
  });

  // node_modules/@babel/types/lib/modifications/prependToMemberExpression.js
  var require_prependToMemberExpression = __commonJS({
    "node_modules/@babel/types/lib/modifications/prependToMemberExpression.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = prependToMemberExpression;
      var _index = require_generated2();
      var _index2 = require_lib3();
      function prependToMemberExpression(member, prepend) {
        if ((0, _index2.isSuper)(member.object)) {
          throw new Error("Cannot prepend node to super property access (`super.foo`).");
        }
        member.object = (0, _index.memberExpression)(prepend, member.object);
        return member;
      }
    }
  });

  // node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js
  var require_getBindingIdentifiers = __commonJS({
    "node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = getBindingIdentifiers;
      var _index = require_generated();
      function getBindingIdentifiers(node, duplicates, outerOnly, newBindingsOnly) {
        const search = [].concat(node);
        const ids = /* @__PURE__ */ Object.create(null);
        while (search.length) {
          const id = search.shift();
          if (!id)
            continue;
          if (newBindingsOnly && ((0, _index.isAssignmentExpression)(id) || (0, _index.isUnaryExpression)(id))) {
            continue;
          }
          const keys = getBindingIdentifiers.keys[id.type];
          if ((0, _index.isIdentifier)(id)) {
            if (duplicates) {
              const _ids = ids[id.name] = ids[id.name] || [];
              _ids.push(id);
            } else {
              ids[id.name] = id;
            }
            continue;
          }
          if ((0, _index.isExportDeclaration)(id) && !(0, _index.isExportAllDeclaration)(id)) {
            if ((0, _index.isDeclaration)(id.declaration)) {
              search.push(id.declaration);
            }
            continue;
          }
          if (outerOnly) {
            if ((0, _index.isFunctionDeclaration)(id)) {
              search.push(id.id);
              continue;
            }
            if ((0, _index.isFunctionExpression)(id)) {
              continue;
            }
          }
          if (keys) {
            for (let i = 0; i < keys.length; i++) {
              const key = keys[i];
              const nodes = id[key];
              if (nodes) {
                Array.isArray(nodes) ? search.push(...nodes) : search.push(nodes);
              }
            }
          }
        }
        return ids;
      }
      getBindingIdentifiers.keys = {
        DeclareClass: ["id"],
        DeclareFunction: ["id"],
        DeclareModule: ["id"],
        DeclareVariable: ["id"],
        DeclareInterface: ["id"],
        DeclareTypeAlias: ["id"],
        DeclareOpaqueType: ["id"],
        InterfaceDeclaration: ["id"],
        TypeAlias: ["id"],
        OpaqueType: ["id"],
        CatchClause: ["param"],
        LabeledStatement: ["label"],
        UnaryExpression: ["argument"],
        AssignmentExpression: ["left"],
        ImportSpecifier: ["local"],
        ImportNamespaceSpecifier: ["local"],
        ImportDefaultSpecifier: ["local"],
        ImportDeclaration: ["specifiers"],
        ExportSpecifier: ["exported"],
        ExportNamespaceSpecifier: ["exported"],
        ExportDefaultSpecifier: ["exported"],
        FunctionDeclaration: ["id", "params"],
        FunctionExpression: ["id", "params"],
        ArrowFunctionExpression: ["params"],
        ObjectMethod: ["params"],
        ClassMethod: ["params"],
        ClassPrivateMethod: ["params"],
        ForInStatement: ["left"],
        ForOfStatement: ["left"],
        ClassDeclaration: ["id"],
        ClassExpression: ["id"],
        RestElement: ["argument"],
        UpdateExpression: ["argument"],
        ObjectProperty: ["value"],
        AssignmentPattern: ["left"],
        ArrayPattern: ["elements"],
        ObjectPattern: ["properties"],
        VariableDeclaration: ["declarations"],
        VariableDeclarator: ["id"]
      };
    }
  });

  // node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js
  var require_getOuterBindingIdentifiers = __commonJS({
    "node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _getBindingIdentifiers = require_getBindingIdentifiers();
      var _default = exports.default = getOuterBindingIdentifiers;
      function getOuterBindingIdentifiers(node, duplicates) {
        return (0, _getBindingIdentifiers.default)(node, duplicates, true);
      }
    }
  });

  // node_modules/@babel/types/lib/traverse/traverse.js
  var require_traverse = __commonJS({
    "node_modules/@babel/types/lib/traverse/traverse.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = traverse2;
      var _index = require_definitions();
      function traverse2(node, handlers, state) {
        if (typeof handlers === "function") {
          handlers = {
            enter: handlers
          };
        }
        const {
          enter,
          exit
        } = handlers;
        traverseSimpleImpl(node, enter, exit, state, []);
      }
      function traverseSimpleImpl(node, enter, exit, state, ancestors) {
        const keys = _index.VISITOR_KEYS[node.type];
        if (!keys)
          return;
        if (enter)
          enter(node, ancestors, state);
        for (const key of keys) {
          const subNode = node[key];
          if (Array.isArray(subNode)) {
            for (let i = 0; i < subNode.length; i++) {
              const child = subNode[i];
              if (!child)
                continue;
              ancestors.push({
                node,
                key,
                index: i
              });
              traverseSimpleImpl(child, enter, exit, state, ancestors);
              ancestors.pop();
            }
          } else if (subNode) {
            ancestors.push({
              node,
              key
            });
            traverseSimpleImpl(subNode, enter, exit, state, ancestors);
            ancestors.pop();
          }
        }
        if (exit)
          exit(node, ancestors, state);
      }
    }
  });

  // node_modules/@babel/types/lib/validators/isBinding.js
  var require_isBinding = __commonJS({
    "node_modules/@babel/types/lib/validators/isBinding.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = isBinding;
      var _getBindingIdentifiers = require_getBindingIdentifiers();
      function isBinding(node, parent, grandparent) {
        if (grandparent && node.type === "Identifier" && parent.type === "ObjectProperty" && grandparent.type === "ObjectExpression") {
          return false;
        }
        const keys = _getBindingIdentifiers.default.keys[parent.type];
        if (keys) {
          for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            const val = parent[key];
            if (Array.isArray(val)) {
              if (val.indexOf(node) >= 0)
                return true;
            } else {
              if (val === node)
                return true;
            }
          }
        }
        return false;
      }
    }
  });

  // node_modules/@babel/types/lib/validators/isLet.js
  var require_isLet = __commonJS({
    "node_modules/@babel/types/lib/validators/isLet.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = isLet;
      var _index = require_generated();
      var _index2 = require_constants();
      function isLet(node) {
        return (0, _index.isVariableDeclaration)(node) && (node.kind !== "var" || node[_index2.BLOCK_SCOPED_SYMBOL]);
      }
    }
  });

  // node_modules/@babel/types/lib/validators/isBlockScoped.js
  var require_isBlockScoped = __commonJS({
    "node_modules/@babel/types/lib/validators/isBlockScoped.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = isBlockScoped;
      var _index = require_generated();
      var _isLet = require_isLet();
      function isBlockScoped(node) {
        return (0, _index.isFunctionDeclaration)(node) || (0, _index.isClassDeclaration)(node) || (0, _isLet.default)(node);
      }
    }
  });

  // node_modules/@babel/types/lib/validators/isImmutable.js
  var require_isImmutable = __commonJS({
    "node_modules/@babel/types/lib/validators/isImmutable.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = isImmutable;
      var _isType = require_isType();
      var _index = require_generated();
      function isImmutable(node) {
        if ((0, _isType.default)(node.type, "Immutable"))
          return true;
        if ((0, _index.isIdentifier)(node)) {
          if (node.name === "undefined") {
            return true;
          } else {
            return false;
          }
        }
        return false;
      }
    }
  });

  // node_modules/@babel/types/lib/validators/isNodesEquivalent.js
  var require_isNodesEquivalent = __commonJS({
    "node_modules/@babel/types/lib/validators/isNodesEquivalent.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = isNodesEquivalent;
      var _index = require_definitions();
      function isNodesEquivalent(a2, b) {
        if (typeof a2 !== "object" || typeof b !== "object" || a2 == null || b == null) {
          return a2 === b;
        }
        if (a2.type !== b.type) {
          return false;
        }
        const fields = Object.keys(_index.NODE_FIELDS[a2.type] || a2.type);
        const visitorKeys = _index.VISITOR_KEYS[a2.type];
        for (const field of fields) {
          const val_a = a2[field];
          const val_b = b[field];
          if (typeof val_a !== typeof val_b) {
            return false;
          }
          if (val_a == null && val_b == null) {
            continue;
          } else if (val_a == null || val_b == null) {
            return false;
          }
          if (Array.isArray(val_a)) {
            if (!Array.isArray(val_b)) {
              return false;
            }
            if (val_a.length !== val_b.length) {
              return false;
            }
            for (let i = 0; i < val_a.length; i++) {
              if (!isNodesEquivalent(val_a[i], val_b[i])) {
                return false;
              }
            }
            continue;
          }
          if (typeof val_a === "object" && !(visitorKeys != null && visitorKeys.includes(field))) {
            for (const key of Object.keys(val_a)) {
              if (val_a[key] !== val_b[key]) {
                return false;
              }
            }
            continue;
          }
          if (!isNodesEquivalent(val_a, val_b)) {
            return false;
          }
        }
        return true;
      }
    }
  });

  // node_modules/@babel/types/lib/validators/isReferenced.js
  var require_isReferenced = __commonJS({
    "node_modules/@babel/types/lib/validators/isReferenced.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = isReferenced;
      function isReferenced(node, parent, grandparent) {
        switch (parent.type) {
          case "MemberExpression":
          case "OptionalMemberExpression":
            if (parent.property === node) {
              return !!parent.computed;
            }
            return parent.object === node;
          case "JSXMemberExpression":
            return parent.object === node;
          case "VariableDeclarator":
            return parent.init === node;
          case "ArrowFunctionExpression":
            return parent.body === node;
          case "PrivateName":
            return false;
          case "ClassMethod":
          case "ClassPrivateMethod":
          case "ObjectMethod":
            if (parent.key === node) {
              return !!parent.computed;
            }
            return false;
          case "ObjectProperty":
            if (parent.key === node) {
              return !!parent.computed;
            }
            return !grandparent || grandparent.type !== "ObjectPattern";
          case "ClassProperty":
          case "ClassAccessorProperty":
            if (parent.key === node) {
              return !!parent.computed;
            }
            return true;
          case "ClassPrivateProperty":
            return parent.key !== node;
          case "ClassDeclaration":
          case "ClassExpression":
            return parent.superClass === node;
          case "AssignmentExpression":
            return parent.right === node;
          case "AssignmentPattern":
            return parent.right === node;
          case "LabeledStatement":
            return false;
          case "CatchClause":
            return false;
          case "RestElement":
            return false;
          case "BreakStatement":
          case "ContinueStatement":
            return false;
          case "FunctionDeclaration":
          case "FunctionExpression":
            return false;
          case "ExportNamespaceSpecifier":
          case "ExportDefaultSpecifier":
            return false;
          case "ExportSpecifier":
            if (grandparent != null && grandparent.source) {
              return false;
            }
            return parent.local === node;
          case "ImportDefaultSpecifier":
          case "ImportNamespaceSpecifier":
          case "ImportSpecifier":
            return false;
          case "ImportAttribute":
            return false;
          case "JSXAttribute":
            return false;
          case "ObjectPattern":
          case "ArrayPattern":
            return false;
          case "MetaProperty":
            return false;
          case "ObjectTypeProperty":
            return parent.key !== node;
          case "TSEnumMember":
            return parent.id !== node;
          case "TSPropertySignature":
            if (parent.key === node) {
              return !!parent.computed;
            }
            return true;
        }
        return true;
      }
    }
  });

  // node_modules/@babel/types/lib/validators/isScope.js
  var require_isScope = __commonJS({
    "node_modules/@babel/types/lib/validators/isScope.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = isScope;
      var _index = require_generated();
      function isScope(node, parent) {
        if ((0, _index.isBlockStatement)(node) && ((0, _index.isFunction)(parent) || (0, _index.isCatchClause)(parent))) {
          return false;
        }
        if ((0, _index.isPattern)(node) && ((0, _index.isFunction)(parent) || (0, _index.isCatchClause)(parent))) {
          return true;
        }
        return (0, _index.isScopable)(node);
      }
    }
  });

  // node_modules/@babel/types/lib/validators/isSpecifierDefault.js
  var require_isSpecifierDefault = __commonJS({
    "node_modules/@babel/types/lib/validators/isSpecifierDefault.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = isSpecifierDefault;
      var _index = require_generated();
      function isSpecifierDefault(specifier) {
        return (0, _index.isImportDefaultSpecifier)(specifier) || (0, _index.isIdentifier)(specifier.imported || specifier.exported, {
          name: "default"
        });
      }
    }
  });

  // node_modules/@babel/types/lib/validators/isValidES3Identifier.js
  var require_isValidES3Identifier = __commonJS({
    "node_modules/@babel/types/lib/validators/isValidES3Identifier.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = isValidES3Identifier;
      var _isValidIdentifier = require_isValidIdentifier();
      var RESERVED_WORDS_ES3_ONLY = /* @__PURE__ */ new Set(["abstract", "boolean", "byte", "char", "double", "enum", "final", "float", "goto", "implements", "int", "interface", "long", "native", "package", "private", "protected", "public", "short", "static", "synchronized", "throws", "transient", "volatile"]);
      function isValidES3Identifier(name) {
        return (0, _isValidIdentifier.default)(name) && !RESERVED_WORDS_ES3_ONLY.has(name);
      }
    }
  });

  // node_modules/@babel/types/lib/validators/isVar.js
  var require_isVar = __commonJS({
    "node_modules/@babel/types/lib/validators/isVar.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = isVar;
      var _index = require_generated();
      var _index2 = require_constants();
      function isVar(node) {
        return (0, _index.isVariableDeclaration)(node, {
          kind: "var"
        }) && !node[_index2.BLOCK_SCOPED_SYMBOL];
      }
    }
  });

  // node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js
  var require_gatherSequenceExpressions = __commonJS({
    "node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = gatherSequenceExpressions;
      var _getBindingIdentifiers = require_getBindingIdentifiers();
      var _index = require_generated();
      var _index2 = require_generated2();
      var _cloneNode = require_cloneNode();
      function gatherSequenceExpressions(nodes, scope, declars) {
        const exprs = [];
        let ensureLastUndefined = true;
        for (const node of nodes) {
          if (!(0, _index.isEmptyStatement)(node)) {
            ensureLastUndefined = false;
          }
          if ((0, _index.isExpression)(node)) {
            exprs.push(node);
          } else if ((0, _index.isExpressionStatement)(node)) {
            exprs.push(node.expression);
          } else if ((0, _index.isVariableDeclaration)(node)) {
            if (node.kind !== "var")
              return;
            for (const declar of node.declarations) {
              const bindings = (0, _getBindingIdentifiers.default)(declar);
              for (const key of Object.keys(bindings)) {
                declars.push({
                  kind: node.kind,
                  id: (0, _cloneNode.default)(bindings[key])
                });
              }
              if (declar.init) {
                exprs.push((0, _index2.assignmentExpression)("=", declar.id, declar.init));
              }
            }
            ensureLastUndefined = true;
          } else if ((0, _index.isIfStatement)(node)) {
            const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], scope, declars) : scope.buildUndefinedNode();
            const alternate = node.alternate ? gatherSequenceExpressions([node.alternate], scope, declars) : scope.buildUndefinedNode();
            if (!consequent || !alternate)
              return;
            exprs.push((0, _index2.conditionalExpression)(node.test, consequent, alternate));
          } else if ((0, _index.isBlockStatement)(node)) {
            const body = gatherSequenceExpressions(node.body, scope, declars);
            if (!body)
              return;
            exprs.push(body);
          } else if ((0, _index.isEmptyStatement)(node)) {
            if (nodes.indexOf(node) === 0) {
              ensureLastUndefined = true;
            }
          } else {
            return;
          }
        }
        if (ensureLastUndefined) {
          exprs.push(scope.buildUndefinedNode());
        }
        if (exprs.length === 1) {
          return exprs[0];
        } else {
          return (0, _index2.sequenceExpression)(exprs);
        }
      }
    }
  });

  // node_modules/@babel/types/lib/converters/toSequenceExpression.js
  var require_toSequenceExpression = __commonJS({
    "node_modules/@babel/types/lib/converters/toSequenceExpression.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = toSequenceExpression;
      var _gatherSequenceExpressions = require_gatherSequenceExpressions();
      function toSequenceExpression(nodes, scope) {
        if (!(nodes != null && nodes.length))
          return;
        const declars = [];
        const result = (0, _gatherSequenceExpressions.default)(nodes, scope, declars);
        if (!result)
          return;
        for (const declar of declars) {
          scope.push(declar);
        }
        return result;
      }
    }
  });

  // node_modules/@babel/types/lib/index.js
  var require_lib3 = __commonJS({
    "node_modules/@babel/types/lib/index.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        react: true,
        assertNode: true,
        createTypeAnnotationBasedOnTypeof: true,
        createUnionTypeAnnotation: true,
        createFlowUnionType: true,
        createTSUnionType: true,
        cloneNode: true,
        clone: true,
        cloneDeep: true,
        cloneDeepWithoutLoc: true,
        cloneWithoutLoc: true,
        addComment: true,
        addComments: true,
        inheritInnerComments: true,
        inheritLeadingComments: true,
        inheritsComments: true,
        inheritTrailingComments: true,
        removeComments: true,
        ensureBlock: true,
        toBindingIdentifierName: true,
        toBlock: true,
        toComputedKey: true,
        toExpression: true,
        toIdentifier: true,
        toKeyAlias: true,
        toStatement: true,
        valueToNode: true,
        appendToMemberExpression: true,
        inherits: true,
        prependToMemberExpression: true,
        removeProperties: true,
        removePropertiesDeep: true,
        removeTypeDuplicates: true,
        getBindingIdentifiers: true,
        getOuterBindingIdentifiers: true,
        traverse: true,
        traverseFast: true,
        shallowEqual: true,
        is: true,
        isBinding: true,
        isBlockScoped: true,
        isImmutable: true,
        isLet: true,
        isNode: true,
        isNodesEquivalent: true,
        isPlaceholderType: true,
        isReferenced: true,
        isScope: true,
        isSpecifierDefault: true,
        isType: true,
        isValidES3Identifier: true,
        isValidIdentifier: true,
        isVar: true,
        matchesPattern: true,
        validate: true,
        buildMatchMemberExpression: true,
        __internal__deprecationWarning: true
      };
      Object.defineProperty(exports, "__internal__deprecationWarning", {
        enumerable: true,
        get: function() {
          return _deprecationWarning.default;
        }
      });
      Object.defineProperty(exports, "addComment", {
        enumerable: true,
        get: function() {
          return _addComment.default;
        }
      });
      Object.defineProperty(exports, "addComments", {
        enumerable: true,
        get: function() {
          return _addComments.default;
        }
      });
      Object.defineProperty(exports, "appendToMemberExpression", {
        enumerable: true,
        get: function() {
          return _appendToMemberExpression.default;
        }
      });
      Object.defineProperty(exports, "assertNode", {
        enumerable: true,
        get: function() {
          return _assertNode.default;
        }
      });
      Object.defineProperty(exports, "buildMatchMemberExpression", {
        enumerable: true,
        get: function() {
          return _buildMatchMemberExpression.default;
        }
      });
      Object.defineProperty(exports, "clone", {
        enumerable: true,
        get: function() {
          return _clone.default;
        }
      });
      Object.defineProperty(exports, "cloneDeep", {
        enumerable: true,
        get: function() {
          return _cloneDeep.default;
        }
      });
      Object.defineProperty(exports, "cloneDeepWithoutLoc", {
        enumerable: true,
        get: function() {
          return _cloneDeepWithoutLoc.default;
        }
      });
      Object.defineProperty(exports, "cloneNode", {
        enumerable: true,
        get: function() {
          return _cloneNode.default;
        }
      });
      Object.defineProperty(exports, "cloneWithoutLoc", {
        enumerable: true,
        get: function() {
          return _cloneWithoutLoc.default;
        }
      });
      Object.defineProperty(exports, "createFlowUnionType", {
        enumerable: true,
        get: function() {
          return _createFlowUnionType.default;
        }
      });
      Object.defineProperty(exports, "createTSUnionType", {
        enumerable: true,
        get: function() {
          return _createTSUnionType.default;
        }
      });
      Object.defineProperty(exports, "createTypeAnnotationBasedOnTypeof", {
        enumerable: true,
        get: function() {
          return _createTypeAnnotationBasedOnTypeof.default;
        }
      });
      Object.defineProperty(exports, "createUnionTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _createFlowUnionType.default;
        }
      });
      Object.defineProperty(exports, "ensureBlock", {
        enumerable: true,
        get: function() {
          return _ensureBlock.default;
        }
      });
      Object.defineProperty(exports, "getBindingIdentifiers", {
        enumerable: true,
        get: function() {
          return _getBindingIdentifiers.default;
        }
      });
      Object.defineProperty(exports, "getOuterBindingIdentifiers", {
        enumerable: true,
        get: function() {
          return _getOuterBindingIdentifiers.default;
        }
      });
      Object.defineProperty(exports, "inheritInnerComments", {
        enumerable: true,
        get: function() {
          return _inheritInnerComments.default;
        }
      });
      Object.defineProperty(exports, "inheritLeadingComments", {
        enumerable: true,
        get: function() {
          return _inheritLeadingComments.default;
        }
      });
      Object.defineProperty(exports, "inheritTrailingComments", {
        enumerable: true,
        get: function() {
          return _inheritTrailingComments.default;
        }
      });
      Object.defineProperty(exports, "inherits", {
        enumerable: true,
        get: function() {
          return _inherits.default;
        }
      });
      Object.defineProperty(exports, "inheritsComments", {
        enumerable: true,
        get: function() {
          return _inheritsComments.default;
        }
      });
      Object.defineProperty(exports, "is", {
        enumerable: true,
        get: function() {
          return _is.default;
        }
      });
      Object.defineProperty(exports, "isBinding", {
        enumerable: true,
        get: function() {
          return _isBinding.default;
        }
      });
      Object.defineProperty(exports, "isBlockScoped", {
        enumerable: true,
        get: function() {
          return _isBlockScoped.default;
        }
      });
      Object.defineProperty(exports, "isImmutable", {
        enumerable: true,
        get: function() {
          return _isImmutable.default;
        }
      });
      Object.defineProperty(exports, "isLet", {
        enumerable: true,
        get: function() {
          return _isLet.default;
        }
      });
      Object.defineProperty(exports, "isNode", {
        enumerable: true,
        get: function() {
          return _isNode.default;
        }
      });
      Object.defineProperty(exports, "isNodesEquivalent", {
        enumerable: true,
        get: function() {
          return _isNodesEquivalent.default;
        }
      });
      Object.defineProperty(exports, "isPlaceholderType", {
        enumerable: true,
        get: function() {
          return _isPlaceholderType.default;
        }
      });
      Object.defineProperty(exports, "isReferenced", {
        enumerable: true,
        get: function() {
          return _isReferenced.default;
        }
      });
      Object.defineProperty(exports, "isScope", {
        enumerable: true,
        get: function() {
          return _isScope.default;
        }
      });
      Object.defineProperty(exports, "isSpecifierDefault", {
        enumerable: true,
        get: function() {
          return _isSpecifierDefault.default;
        }
      });
      Object.defineProperty(exports, "isType", {
        enumerable: true,
        get: function() {
          return _isType.default;
        }
      });
      Object.defineProperty(exports, "isValidES3Identifier", {
        enumerable: true,
        get: function() {
          return _isValidES3Identifier.default;
        }
      });
      Object.defineProperty(exports, "isValidIdentifier", {
        enumerable: true,
        get: function() {
          return _isValidIdentifier.default;
        }
      });
      Object.defineProperty(exports, "isVar", {
        enumerable: true,
        get: function() {
          return _isVar.default;
        }
      });
      Object.defineProperty(exports, "matchesPattern", {
        enumerable: true,
        get: function() {
          return _matchesPattern.default;
        }
      });
      Object.defineProperty(exports, "prependToMemberExpression", {
        enumerable: true,
        get: function() {
          return _prependToMemberExpression.default;
        }
      });
      exports.react = void 0;
      Object.defineProperty(exports, "removeComments", {
        enumerable: true,
        get: function() {
          return _removeComments.default;
        }
      });
      Object.defineProperty(exports, "removeProperties", {
        enumerable: true,
        get: function() {
          return _removeProperties.default;
        }
      });
      Object.defineProperty(exports, "removePropertiesDeep", {
        enumerable: true,
        get: function() {
          return _removePropertiesDeep.default;
        }
      });
      Object.defineProperty(exports, "removeTypeDuplicates", {
        enumerable: true,
        get: function() {
          return _removeTypeDuplicates.default;
        }
      });
      Object.defineProperty(exports, "shallowEqual", {
        enumerable: true,
        get: function() {
          return _shallowEqual.default;
        }
      });
      Object.defineProperty(exports, "toBindingIdentifierName", {
        enumerable: true,
        get: function() {
          return _toBindingIdentifierName.default;
        }
      });
      Object.defineProperty(exports, "toBlock", {
        enumerable: true,
        get: function() {
          return _toBlock.default;
        }
      });
      Object.defineProperty(exports, "toComputedKey", {
        enumerable: true,
        get: function() {
          return _toComputedKey.default;
        }
      });
      Object.defineProperty(exports, "toExpression", {
        enumerable: true,
        get: function() {
          return _toExpression.default;
        }
      });
      Object.defineProperty(exports, "toIdentifier", {
        enumerable: true,
        get: function() {
          return _toIdentifier.default;
        }
      });
      Object.defineProperty(exports, "toKeyAlias", {
        enumerable: true,
        get: function() {
          return _toKeyAlias.default;
        }
      });
      Object.defineProperty(exports, "toStatement", {
        enumerable: true,
        get: function() {
          return _toStatement.default;
        }
      });
      Object.defineProperty(exports, "traverse", {
        enumerable: true,
        get: function() {
          return _traverse.default;
        }
      });
      Object.defineProperty(exports, "traverseFast", {
        enumerable: true,
        get: function() {
          return _traverseFast.default;
        }
      });
      Object.defineProperty(exports, "validate", {
        enumerable: true,
        get: function() {
          return _validate.default;
        }
      });
      Object.defineProperty(exports, "valueToNode", {
        enumerable: true,
        get: function() {
          return _valueToNode.default;
        }
      });
      var _isReactComponent = require_isReactComponent();
      var _isCompatTag = require_isCompatTag();
      var _buildChildren = require_buildChildren();
      var _assertNode = require_assertNode();
      var _index = require_generated3();
      Object.keys(_index).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _index[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _index[key];
          }
        });
      });
      var _createTypeAnnotationBasedOnTypeof = require_createTypeAnnotationBasedOnTypeof();
      var _createFlowUnionType = require_createFlowUnionType();
      var _createTSUnionType = require_createTSUnionType();
      var _index2 = require_generated2();
      Object.keys(_index2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _index2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _index2[key];
          }
        });
      });
      var _uppercase = require_uppercase();
      Object.keys(_uppercase).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _uppercase[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _uppercase[key];
          }
        });
      });
      var _productions = require_productions();
      Object.keys(_productions).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _productions[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _productions[key];
          }
        });
      });
      var _cloneNode = require_cloneNode();
      var _clone = require_clone();
      var _cloneDeep = require_cloneDeep();
      var _cloneDeepWithoutLoc = require_cloneDeepWithoutLoc();
      var _cloneWithoutLoc = require_cloneWithoutLoc();
      var _addComment = require_addComment();
      var _addComments = require_addComments();
      var _inheritInnerComments = require_inheritInnerComments();
      var _inheritLeadingComments = require_inheritLeadingComments();
      var _inheritsComments = require_inheritsComments();
      var _inheritTrailingComments = require_inheritTrailingComments();
      var _removeComments = require_removeComments();
      var _index3 = require_generated4();
      Object.keys(_index3).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _index3[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _index3[key];
          }
        });
      });
      var _index4 = require_constants();
      Object.keys(_index4).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _index4[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _index4[key];
          }
        });
      });
      var _ensureBlock = require_ensureBlock();
      var _toBindingIdentifierName = require_toBindingIdentifierName();
      var _toBlock = require_toBlock();
      var _toComputedKey = require_toComputedKey();
      var _toExpression = require_toExpression();
      var _toIdentifier = require_toIdentifier();
      var _toKeyAlias = require_toKeyAlias();
      var _toStatement = require_toStatement();
      var _valueToNode = require_valueToNode();
      var _index5 = require_definitions();
      Object.keys(_index5).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _index5[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _index5[key];
          }
        });
      });
      var _appendToMemberExpression = require_appendToMemberExpression();
      var _inherits = require_inherits();
      var _prependToMemberExpression = require_prependToMemberExpression();
      var _removeProperties = require_removeProperties();
      var _removePropertiesDeep = require_removePropertiesDeep();
      var _removeTypeDuplicates = require_removeTypeDuplicates();
      var _getBindingIdentifiers = require_getBindingIdentifiers();
      var _getOuterBindingIdentifiers = require_getOuterBindingIdentifiers();
      var _traverse = require_traverse();
      Object.keys(_traverse).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _traverse[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _traverse[key];
          }
        });
      });
      var _traverseFast = require_traverseFast();
      var _shallowEqual = require_shallowEqual();
      var _is = require_is();
      var _isBinding = require_isBinding();
      var _isBlockScoped = require_isBlockScoped();
      var _isImmutable = require_isImmutable();
      var _isLet = require_isLet();
      var _isNode = require_isNode();
      var _isNodesEquivalent = require_isNodesEquivalent();
      var _isPlaceholderType = require_isPlaceholderType();
      var _isReferenced = require_isReferenced();
      var _isScope = require_isScope();
      var _isSpecifierDefault = require_isSpecifierDefault();
      var _isType = require_isType();
      var _isValidES3Identifier = require_isValidES3Identifier();
      var _isValidIdentifier = require_isValidIdentifier();
      var _isVar = require_isVar();
      var _matchesPattern = require_matchesPattern();
      var _validate = require_validate();
      var _buildMatchMemberExpression = require_buildMatchMemberExpression();
      var _index6 = require_generated();
      Object.keys(_index6).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _index6[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _index6[key];
          }
        });
      });
      var _deprecationWarning = require_deprecationWarning();
      var react = exports.react = {
        isReactComponent: _isReactComponent.default,
        isCompatTag: _isCompatTag.default,
        buildChildren: _buildChildren.default
      };
      {
        exports.toSequenceExpression = require_toSequenceExpression().default;
      }
    }
  });

  // node_modules/@babel/generator/lib/node/whitespace.js
  var require_whitespace = __commonJS({
    "node_modules/@babel/generator/lib/node/whitespace.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.nodes = void 0;
      var _t = require_lib3();
      var {
        FLIPPED_ALIAS_KEYS,
        isArrayExpression,
        isAssignmentExpression,
        isBinary,
        isBlockStatement,
        isCallExpression,
        isFunction,
        isIdentifier,
        isLiteral,
        isMemberExpression,
        isObjectExpression,
        isOptionalCallExpression,
        isOptionalMemberExpression,
        isStringLiteral
      } = _t;
      function crawlInternal(node, state) {
        if (!node)
          return state;
        if (isMemberExpression(node) || isOptionalMemberExpression(node)) {
          crawlInternal(node.object, state);
          if (node.computed)
            crawlInternal(node.property, state);
        } else if (isBinary(node) || isAssignmentExpression(node)) {
          crawlInternal(node.left, state);
          crawlInternal(node.right, state);
        } else if (isCallExpression(node) || isOptionalCallExpression(node)) {
          state.hasCall = true;
          crawlInternal(node.callee, state);
        } else if (isFunction(node)) {
          state.hasFunction = true;
        } else if (isIdentifier(node)) {
          state.hasHelper = state.hasHelper || node.callee && isHelper(node.callee);
        }
        return state;
      }
      function crawl(node) {
        return crawlInternal(node, {
          hasCall: false,
          hasFunction: false,
          hasHelper: false
        });
      }
      function isHelper(node) {
        if (!node)
          return false;
        if (isMemberExpression(node)) {
          return isHelper(node.object) || isHelper(node.property);
        } else if (isIdentifier(node)) {
          return node.name === "require" || node.name.charCodeAt(0) === 95;
        } else if (isCallExpression(node)) {
          return isHelper(node.callee);
        } else if (isBinary(node) || isAssignmentExpression(node)) {
          return isIdentifier(node.left) && isHelper(node.left) || isHelper(node.right);
        } else {
          return false;
        }
      }
      function isType(node) {
        return isLiteral(node) || isObjectExpression(node) || isArrayExpression(node) || isIdentifier(node) || isMemberExpression(node);
      }
      var nodes = exports.nodes = {
        AssignmentExpression(node) {
          const state = crawl(node.right);
          if (state.hasCall && state.hasHelper || state.hasFunction) {
            return state.hasFunction ? 1 | 2 : 2;
          }
        },
        SwitchCase(node, parent) {
          return (!!node.consequent.length || parent.cases[0] === node ? 1 : 0) | (!node.consequent.length && parent.cases[parent.cases.length - 1] === node ? 2 : 0);
        },
        LogicalExpression(node) {
          if (isFunction(node.left) || isFunction(node.right)) {
            return 2;
          }
        },
        Literal(node) {
          if (isStringLiteral(node) && node.value === "use strict") {
            return 2;
          }
        },
        CallExpression(node) {
          if (isFunction(node.callee) || isHelper(node)) {
            return 1 | 2;
          }
        },
        OptionalCallExpression(node) {
          if (isFunction(node.callee)) {
            return 1 | 2;
          }
        },
        VariableDeclaration(node) {
          for (let i = 0; i < node.declarations.length; i++) {
            const declar = node.declarations[i];
            let enabled = isHelper(declar.id) && !isType(declar.init);
            if (!enabled && declar.init) {
              const state = crawl(declar.init);
              enabled = isHelper(declar.init) && state.hasCall || state.hasFunction;
            }
            if (enabled) {
              return 1 | 2;
            }
          }
        },
        IfStatement(node) {
          if (isBlockStatement(node.consequent)) {
            return 1 | 2;
          }
        }
      };
      nodes.ObjectProperty = nodes.ObjectTypeProperty = nodes.ObjectMethod = function(node, parent) {
        if (parent.properties[0] === node) {
          return 1;
        }
      };
      nodes.ObjectTypeCallProperty = function(node, parent) {
        var _parent$properties;
        if (parent.callProperties[0] === node && !((_parent$properties = parent.properties) != null && _parent$properties.length)) {
          return 1;
        }
      };
      nodes.ObjectTypeIndexer = function(node, parent) {
        var _parent$properties2, _parent$callPropertie;
        if (parent.indexers[0] === node && !((_parent$properties2 = parent.properties) != null && _parent$properties2.length) && !((_parent$callPropertie = parent.callProperties) != null && _parent$callPropertie.length)) {
          return 1;
        }
      };
      nodes.ObjectTypeInternalSlot = function(node, parent) {
        var _parent$properties3, _parent$callPropertie2, _parent$indexers;
        if (parent.internalSlots[0] === node && !((_parent$properties3 = parent.properties) != null && _parent$properties3.length) && !((_parent$callPropertie2 = parent.callProperties) != null && _parent$callPropertie2.length) && !((_parent$indexers = parent.indexers) != null && _parent$indexers.length)) {
          return 1;
        }
      };
      [["Function", true], ["Class", true], ["Loop", true], ["LabeledStatement", true], ["SwitchStatement", true], ["TryStatement", true]].forEach(function([type, amounts]) {
        [type].concat(FLIPPED_ALIAS_KEYS[type] || []).forEach(function(type2) {
          const ret = amounts ? 1 | 2 : 0;
          nodes[type2] = () => ret;
        });
      });
    }
  });

  // node_modules/@babel/generator/lib/node/parentheses.js
  var require_parentheses = __commonJS({
    "node_modules/@babel/generator/lib/node/parentheses.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ArrowFunctionExpression = ArrowFunctionExpression;
      exports.AssignmentExpression = AssignmentExpression;
      exports.Binary = Binary;
      exports.BinaryExpression = BinaryExpression;
      exports.ClassExpression = ClassExpression;
      exports.ConditionalExpression = ConditionalExpression;
      exports.DoExpression = DoExpression;
      exports.FunctionExpression = FunctionExpression;
      exports.FunctionTypeAnnotation = FunctionTypeAnnotation;
      exports.Identifier = Identifier;
      exports.LogicalExpression = LogicalExpression;
      exports.NullableTypeAnnotation = NullableTypeAnnotation;
      exports.ObjectExpression = ObjectExpression;
      exports.OptionalIndexedAccessType = OptionalIndexedAccessType;
      exports.OptionalCallExpression = exports.OptionalMemberExpression = OptionalMemberExpression;
      exports.SequenceExpression = SequenceExpression;
      exports.TSTypeAssertion = exports.TSSatisfiesExpression = exports.TSAsExpression = TSAsExpression;
      exports.TSInferType = TSInferType;
      exports.TSInstantiationExpression = TSInstantiationExpression;
      exports.TSIntersectionType = exports.TSUnionType = TSUnionType;
      exports.UnaryLike = UnaryLike;
      exports.IntersectionTypeAnnotation = exports.UnionTypeAnnotation = UnionTypeAnnotation;
      exports.UpdateExpression = UpdateExpression;
      exports.AwaitExpression = exports.YieldExpression = YieldExpression;
      var _t = require_lib3();
      var {
        isArrayTypeAnnotation,
        isArrowFunctionExpression,
        isBinaryExpression,
        isCallExpression,
        isExportDeclaration,
        isForOfStatement,
        isIndexedAccessType,
        isMemberExpression,
        isObjectPattern,
        isOptionalMemberExpression,
        isYieldExpression
      } = _t;
      var PRECEDENCE = /* @__PURE__ */ new Map([["||", 0], ["??", 0], ["|>", 0], ["&&", 1], ["|", 2], ["^", 3], ["&", 4], ["==", 5], ["===", 5], ["!=", 5], ["!==", 5], ["<", 6], [">", 6], ["<=", 6], [">=", 6], ["in", 6], ["instanceof", 6], [">>", 7], ["<<", 7], [">>>", 7], ["+", 8], ["-", 8], ["*", 9], ["/", 9], ["%", 9], ["**", 10]]);
      function isTSTypeExpression(nodeType) {
        return nodeType === "TSAsExpression" || nodeType === "TSSatisfiesExpression" || nodeType === "TSTypeAssertion";
      }
      var isClassExtendsClause = (node, parent) => {
        const parentType = parent.type;
        return (parentType === "ClassDeclaration" || parentType === "ClassExpression") && parent.superClass === node;
      };
      var hasPostfixPart = (node, parent) => {
        const parentType = parent.type;
        return (parentType === "MemberExpression" || parentType === "OptionalMemberExpression") && parent.object === node || (parentType === "CallExpression" || parentType === "OptionalCallExpression" || parentType === "NewExpression") && parent.callee === node || parentType === "TaggedTemplateExpression" && parent.tag === node || parentType === "TSNonNullExpression";
      };
      function NullableTypeAnnotation(node, parent) {
        return isArrayTypeAnnotation(parent);
      }
      function FunctionTypeAnnotation(node, parent, printStack) {
        if (printStack.length < 3)
          return;
        const parentType = parent.type;
        return parentType === "UnionTypeAnnotation" || parentType === "IntersectionTypeAnnotation" || parentType === "ArrayTypeAnnotation" || parentType === "TypeAnnotation" && isArrowFunctionExpression(printStack[printStack.length - 3]);
      }
      function UpdateExpression(node, parent) {
        return hasPostfixPart(node, parent) || isClassExtendsClause(node, parent);
      }
      function ObjectExpression(node, parent, printStack) {
        return isFirstInContext(printStack, 1 | 2);
      }
      function DoExpression(node, parent, printStack) {
        return !node.async && isFirstInContext(printStack, 1);
      }
      function Binary(node, parent) {
        const parentType = parent.type;
        if (node.operator === "**" && parentType === "BinaryExpression" && parent.operator === "**") {
          return parent.left === node;
        }
        if (isClassExtendsClause(node, parent)) {
          return true;
        }
        if (hasPostfixPart(node, parent) || parentType === "UnaryExpression" || parentType === "SpreadElement" || parentType === "AwaitExpression") {
          return true;
        }
        if (parentType === "BinaryExpression" || parentType === "LogicalExpression") {
          const parentPos = PRECEDENCE.get(parent.operator);
          const nodePos = PRECEDENCE.get(node.operator);
          if (parentPos === nodePos && parent.right === node && parentType !== "LogicalExpression" || parentPos > nodePos) {
            return true;
          }
        }
        return void 0;
      }
      function UnionTypeAnnotation(node, parent) {
        const parentType = parent.type;
        return parentType === "ArrayTypeAnnotation" || parentType === "NullableTypeAnnotation" || parentType === "IntersectionTypeAnnotation" || parentType === "UnionTypeAnnotation";
      }
      function OptionalIndexedAccessType(node, parent) {
        return isIndexedAccessType(parent) && parent.objectType === node;
      }
      function TSAsExpression() {
        return true;
      }
      function TSUnionType(node, parent) {
        const parentType = parent.type;
        return parentType === "TSArrayType" || parentType === "TSOptionalType" || parentType === "TSIntersectionType" || parentType === "TSUnionType" || parentType === "TSRestType";
      }
      function TSInferType(node, parent) {
        const parentType = parent.type;
        return parentType === "TSArrayType" || parentType === "TSOptionalType";
      }
      function TSInstantiationExpression(node, parent) {
        const parentType = parent.type;
        return (parentType === "CallExpression" || parentType === "OptionalCallExpression" || parentType === "NewExpression" || parentType === "TSInstantiationExpression") && !!parent.typeParameters;
      }
      function BinaryExpression(node, parent) {
        if (node.operator === "in") {
          const parentType = parent.type;
          return parentType === "VariableDeclarator" || parentType === "ForStatement" || parentType === "ForInStatement" || parentType === "ForOfStatement";
        }
        return false;
      }
      function SequenceExpression(node, parent) {
        const parentType = parent.type;
        if (parentType === "ForStatement" || parentType === "ThrowStatement" || parentType === "ReturnStatement" || parentType === "IfStatement" && parent.test === node || parentType === "WhileStatement" && parent.test === node || parentType === "ForInStatement" && parent.right === node || parentType === "SwitchStatement" && parent.discriminant === node || parentType === "ExpressionStatement" && parent.expression === node) {
          return false;
        }
        return true;
      }
      function YieldExpression(node, parent) {
        const parentType = parent.type;
        return parentType === "BinaryExpression" || parentType === "LogicalExpression" || parentType === "UnaryExpression" || parentType === "SpreadElement" || hasPostfixPart(node, parent) || parentType === "AwaitExpression" && isYieldExpression(node) || parentType === "ConditionalExpression" && node === parent.test || isClassExtendsClause(node, parent);
      }
      function ClassExpression(node, parent, printStack) {
        return isFirstInContext(printStack, 1 | 4);
      }
      function UnaryLike(node, parent) {
        return hasPostfixPart(node, parent) || isBinaryExpression(parent) && parent.operator === "**" && parent.left === node || isClassExtendsClause(node, parent);
      }
      function FunctionExpression(node, parent, printStack) {
        return isFirstInContext(printStack, 1 | 4);
      }
      function ArrowFunctionExpression(node, parent) {
        return isExportDeclaration(parent) || ConditionalExpression(node, parent);
      }
      function ConditionalExpression(node, parent) {
        const parentType = parent.type;
        if (parentType === "UnaryExpression" || parentType === "SpreadElement" || parentType === "BinaryExpression" || parentType === "LogicalExpression" || parentType === "ConditionalExpression" && parent.test === node || parentType === "AwaitExpression" || isTSTypeExpression(parentType)) {
          return true;
        }
        return UnaryLike(node, parent);
      }
      function OptionalMemberExpression(node, parent) {
        return isCallExpression(parent) && parent.callee === node || isMemberExpression(parent) && parent.object === node;
      }
      function AssignmentExpression(node, parent) {
        if (isObjectPattern(node.left)) {
          return true;
        } else {
          return ConditionalExpression(node, parent);
        }
      }
      function LogicalExpression(node, parent) {
        const parentType = parent.type;
        if (isTSTypeExpression(parentType))
          return true;
        if (parentType !== "LogicalExpression")
          return false;
        switch (node.operator) {
          case "||":
            return parent.operator === "??" || parent.operator === "&&";
          case "&&":
            return parent.operator === "??";
          case "??":
            return parent.operator !== "??";
        }
      }
      function Identifier(node, parent, printStack) {
        var _node$extra;
        const parentType = parent.type;
        if ((_node$extra = node.extra) != null && _node$extra.parenthesized && parentType === "AssignmentExpression" && parent.left === node) {
          const rightType = parent.right.type;
          if ((rightType === "FunctionExpression" || rightType === "ClassExpression") && parent.right.id == null) {
            return true;
          }
        }
        if (node.name === "let") {
          const isFollowedByBracket = isMemberExpression(parent, {
            object: node,
            computed: true
          }) || isOptionalMemberExpression(parent, {
            object: node,
            computed: true,
            optional: false
          });
          return isFirstInContext(printStack, isFollowedByBracket ? 1 | 8 | 16 | 32 : 32);
        }
        return node.name === "async" && isForOfStatement(parent) && node === parent.left;
      }
      function isFirstInContext(printStack, checkParam) {
        const expressionStatement = checkParam & 1;
        const arrowBody = checkParam & 2;
        const exportDefault = checkParam & 4;
        const forHead = checkParam & 8;
        const forInHead = checkParam & 16;
        const forOfHead = checkParam & 32;
        let i = printStack.length - 1;
        if (i <= 0)
          return;
        let node = printStack[i];
        i--;
        let parent = printStack[i];
        while (i >= 0) {
          const parentType = parent.type;
          if (expressionStatement && parentType === "ExpressionStatement" && parent.expression === node || exportDefault && parentType === "ExportDefaultDeclaration" && node === parent.declaration || arrowBody && parentType === "ArrowFunctionExpression" && parent.body === node || forHead && parentType === "ForStatement" && parent.init === node || forInHead && parentType === "ForInStatement" && parent.left === node || forOfHead && parentType === "ForOfStatement" && parent.left === node) {
            return true;
          }
          if (i > 0 && (hasPostfixPart(node, parent) && parentType !== "NewExpression" || parentType === "SequenceExpression" && parent.expressions[0] === node || parentType === "UpdateExpression" && !parent.prefix || parentType === "ConditionalExpression" && parent.test === node || (parentType === "BinaryExpression" || parentType === "LogicalExpression") && parent.left === node || parentType === "AssignmentExpression" && parent.left === node)) {
            node = parent;
            i--;
            parent = printStack[i];
          } else {
            return false;
          }
        }
        return false;
      }
    }
  });

  // node_modules/@babel/generator/lib/node/index.js
  var require_node = __commonJS({
    "node_modules/@babel/generator/lib/node/index.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.needsParens = needsParens;
      exports.needsWhitespace = needsWhitespace;
      exports.needsWhitespaceAfter = needsWhitespaceAfter;
      exports.needsWhitespaceBefore = needsWhitespaceBefore;
      var whitespace = require_whitespace();
      var parens = require_parentheses();
      var _t = require_lib3();
      var {
        FLIPPED_ALIAS_KEYS,
        isCallExpression,
        isExpressionStatement,
        isMemberExpression,
        isNewExpression
      } = _t;
      function expandAliases(obj) {
        const map = /* @__PURE__ */ new Map();
        function add(type, func) {
          const fn = map.get(type);
          map.set(type, fn ? function(node, parent, stack) {
            var _fn;
            return (_fn = fn(node, parent, stack)) != null ? _fn : func(node, parent, stack);
          } : func);
        }
        for (const type of Object.keys(obj)) {
          const aliases = FLIPPED_ALIAS_KEYS[type];
          if (aliases) {
            for (const alias of aliases) {
              add(alias, obj[type]);
            }
          } else {
            add(type, obj[type]);
          }
        }
        return map;
      }
      var expandedParens = expandAliases(parens);
      var expandedWhitespaceNodes = expandAliases(whitespace.nodes);
      function isOrHasCallExpression(node) {
        if (isCallExpression(node)) {
          return true;
        }
        return isMemberExpression(node) && isOrHasCallExpression(node.object);
      }
      function needsWhitespace(node, parent, type) {
        var _expandedWhitespaceNo;
        if (!node)
          return false;
        if (isExpressionStatement(node)) {
          node = node.expression;
        }
        const flag = (_expandedWhitespaceNo = expandedWhitespaceNodes.get(node.type)) == null ? void 0 : _expandedWhitespaceNo(node, parent);
        if (typeof flag === "number") {
          return (flag & type) !== 0;
        }
        return false;
      }
      function needsWhitespaceBefore(node, parent) {
        return needsWhitespace(node, parent, 1);
      }
      function needsWhitespaceAfter(node, parent) {
        return needsWhitespace(node, parent, 2);
      }
      function needsParens(node, parent, printStack) {
        var _expandedParens$get;
        if (!parent)
          return false;
        if (isNewExpression(parent) && parent.callee === node) {
          if (isOrHasCallExpression(node))
            return true;
        }
        return (_expandedParens$get = expandedParens.get(node.type)) == null ? void 0 : _expandedParens$get(node, parent, printStack);
      }
    }
  });

  // node_modules/@babel/generator/lib/generators/template-literals.js
  var require_template_literals = __commonJS({
    "node_modules/@babel/generator/lib/generators/template-literals.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.TaggedTemplateExpression = TaggedTemplateExpression;
      exports.TemplateElement = TemplateElement;
      exports.TemplateLiteral = TemplateLiteral;
      function TaggedTemplateExpression(node) {
        this.print(node.tag, node);
        this.print(node.typeParameters, node);
        this.print(node.quasi, node);
      }
      function TemplateElement(node, parent) {
        const isFirst = parent.quasis[0] === node;
        const isLast = parent.quasis[parent.quasis.length - 1] === node;
        const value = (isFirst ? "`" : "}") + node.value.raw + (isLast ? "`" : "${");
        this.token(value, true);
      }
      function TemplateLiteral(node) {
        const quasis = node.quasis;
        for (let i = 0; i < quasis.length; i++) {
          this.print(quasis[i], node);
          if (i + 1 < quasis.length) {
            this.print(node.expressions[i], node);
          }
        }
      }
    }
  });

  // node_modules/@babel/generator/lib/generators/expressions.js
  var require_expressions = __commonJS({
    "node_modules/@babel/generator/lib/generators/expressions.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.LogicalExpression = exports.BinaryExpression = exports.AssignmentExpression = AssignmentExpression;
      exports.AssignmentPattern = AssignmentPattern;
      exports.AwaitExpression = AwaitExpression;
      exports.BindExpression = BindExpression;
      exports.CallExpression = CallExpression;
      exports.ConditionalExpression = ConditionalExpression;
      exports.Decorator = Decorator;
      exports.DoExpression = DoExpression;
      exports.EmptyStatement = EmptyStatement;
      exports.ExpressionStatement = ExpressionStatement;
      exports.Import = Import;
      exports.MemberExpression = MemberExpression;
      exports.MetaProperty = MetaProperty;
      exports.ModuleExpression = ModuleExpression;
      exports.NewExpression = NewExpression;
      exports.OptionalCallExpression = OptionalCallExpression;
      exports.OptionalMemberExpression = OptionalMemberExpression;
      exports.ParenthesizedExpression = ParenthesizedExpression;
      exports.PrivateName = PrivateName;
      exports.SequenceExpression = SequenceExpression;
      exports.Super = Super;
      exports.ThisExpression = ThisExpression;
      exports.UnaryExpression = UnaryExpression;
      exports.UpdateExpression = UpdateExpression;
      exports.V8IntrinsicIdentifier = V8IntrinsicIdentifier;
      exports.YieldExpression = YieldExpression;
      exports._shouldPrintDecoratorsBeforeExport = _shouldPrintDecoratorsBeforeExport;
      var _t = require_lib3();
      var n = require_node();
      var {
        isCallExpression,
        isLiteral,
        isMemberExpression,
        isNewExpression
      } = _t;
      function UnaryExpression(node) {
        const {
          operator
        } = node;
        if (operator === "void" || operator === "delete" || operator === "typeof" || operator === "throw") {
          this.word(operator);
          this.space();
        } else {
          this.token(operator);
        }
        this.print(node.argument, node);
      }
      function DoExpression(node) {
        if (node.async) {
          this.word("async", true);
          this.space();
        }
        this.word("do");
        this.space();
        this.print(node.body, node);
      }
      function ParenthesizedExpression(node) {
        this.tokenChar(40);
        this.print(node.expression, node);
        this.rightParens(node);
      }
      function UpdateExpression(node) {
        if (node.prefix) {
          this.token(node.operator);
          this.print(node.argument, node);
        } else {
          this.printTerminatorless(node.argument, node, true);
          this.token(node.operator);
        }
      }
      function ConditionalExpression(node) {
        this.print(node.test, node);
        this.space();
        this.tokenChar(63);
        this.space();
        this.print(node.consequent, node);
        this.space();
        this.tokenChar(58);
        this.space();
        this.print(node.alternate, node);
      }
      function NewExpression(node, parent) {
        this.word("new");
        this.space();
        this.print(node.callee, node);
        if (this.format.minified && node.arguments.length === 0 && !node.optional && !isCallExpression(parent, {
          callee: node
        }) && !isMemberExpression(parent) && !isNewExpression(parent)) {
          return;
        }
        this.print(node.typeArguments, node);
        this.print(node.typeParameters, node);
        if (node.optional) {
          this.token("?.");
        }
        this.tokenChar(40);
        this.printList(node.arguments, node);
        this.rightParens(node);
      }
      function SequenceExpression(node) {
        this.printList(node.expressions, node);
      }
      function ThisExpression() {
        this.word("this");
      }
      function Super() {
        this.word("super");
      }
      function isDecoratorMemberExpression(node) {
        switch (node.type) {
          case "Identifier":
            return true;
          case "MemberExpression":
            return !node.computed && node.property.type === "Identifier" && isDecoratorMemberExpression(node.object);
          default:
            return false;
        }
      }
      function shouldParenthesizeDecoratorExpression(node) {
        if (node.type === "ParenthesizedExpression") {
          return false;
        }
        return !isDecoratorMemberExpression(node.type === "CallExpression" ? node.callee : node);
      }
      function _shouldPrintDecoratorsBeforeExport(node) {
        if (typeof this.format.decoratorsBeforeExport === "boolean") {
          return this.format.decoratorsBeforeExport;
        }
        return typeof node.start === "number" && node.start === node.declaration.start;
      }
      function Decorator(node) {
        this.tokenChar(64);
        const {
          expression
        } = node;
        if (shouldParenthesizeDecoratorExpression(expression)) {
          this.tokenChar(40);
          this.print(expression, node);
          this.tokenChar(41);
        } else {
          this.print(expression, node);
        }
        this.newline();
      }
      function OptionalMemberExpression(node) {
        let {
          computed
        } = node;
        const {
          optional,
          property
        } = node;
        this.print(node.object, node);
        if (!computed && isMemberExpression(property)) {
          throw new TypeError("Got a MemberExpression for MemberExpression property");
        }
        if (isLiteral(property) && typeof property.value === "number") {
          computed = true;
        }
        if (optional) {
          this.token("?.");
        }
        if (computed) {
          this.tokenChar(91);
          this.print(property, node);
          this.tokenChar(93);
        } else {
          if (!optional) {
            this.tokenChar(46);
          }
          this.print(property, node);
        }
      }
      function OptionalCallExpression(node) {
        this.print(node.callee, node);
        this.print(node.typeParameters, node);
        if (node.optional) {
          this.token("?.");
        }
        this.print(node.typeArguments, node);
        this.tokenChar(40);
        this.printList(node.arguments, node);
        this.rightParens(node);
      }
      function CallExpression(node) {
        this.print(node.callee, node);
        this.print(node.typeArguments, node);
        this.print(node.typeParameters, node);
        this.tokenChar(40);
        this.printList(node.arguments, node);
        this.rightParens(node);
      }
      function Import() {
        this.word("import");
      }
      function AwaitExpression(node) {
        this.word("await");
        if (node.argument) {
          this.space();
          this.printTerminatorless(node.argument, node, false);
        }
      }
      function YieldExpression(node) {
        this.word("yield", true);
        if (node.delegate) {
          this.tokenChar(42);
          if (node.argument) {
            this.space();
            this.print(node.argument, node);
          }
        } else {
          if (node.argument) {
            this.space();
            this.printTerminatorless(node.argument, node, false);
          }
        }
      }
      function EmptyStatement() {
        this.semicolon(true);
      }
      function ExpressionStatement(node) {
        this.print(node.expression, node);
        this.semicolon();
      }
      function AssignmentPattern(node) {
        this.print(node.left, node);
        if (node.left.optional)
          this.tokenChar(63);
        this.print(node.left.typeAnnotation, node);
        this.space();
        this.tokenChar(61);
        this.space();
        this.print(node.right, node);
      }
      function AssignmentExpression(node, parent) {
        const parens = this.inForStatementInitCounter && node.operator === "in" && !n.needsParens(node, parent);
        if (parens) {
          this.tokenChar(40);
        }
        this.print(node.left, node);
        this.space();
        if (node.operator === "in" || node.operator === "instanceof") {
          this.word(node.operator);
        } else {
          this.token(node.operator);
        }
        this.space();
        this.print(node.right, node);
        if (parens) {
          this.tokenChar(41);
        }
      }
      function BindExpression(node) {
        this.print(node.object, node);
        this.token("::");
        this.print(node.callee, node);
      }
      function MemberExpression(node) {
        this.print(node.object, node);
        if (!node.computed && isMemberExpression(node.property)) {
          throw new TypeError("Got a MemberExpression for MemberExpression property");
        }
        let computed = node.computed;
        if (isLiteral(node.property) && typeof node.property.value === "number") {
          computed = true;
        }
        if (computed) {
          this.tokenChar(91);
          this.print(node.property, node);
          this.tokenChar(93);
        } else {
          this.tokenChar(46);
          this.print(node.property, node);
        }
      }
      function MetaProperty(node) {
        this.print(node.meta, node);
        this.tokenChar(46);
        this.print(node.property, node);
      }
      function PrivateName(node) {
        this.tokenChar(35);
        this.print(node.id, node);
      }
      function V8IntrinsicIdentifier(node) {
        this.tokenChar(37);
        this.word(node.name);
      }
      function ModuleExpression(node) {
        this.word("module", true);
        this.space();
        this.tokenChar(123);
        this.indent();
        const {
          body
        } = node;
        if (body.body.length || body.directives.length) {
          this.newline();
        }
        this.print(body, node);
        this.dedent();
        this.rightBrace(node);
      }
    }
  });

  // node_modules/@babel/generator/lib/generators/statements.js
  var require_statements = __commonJS({
    "node_modules/@babel/generator/lib/generators/statements.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.BreakStatement = BreakStatement;
      exports.CatchClause = CatchClause;
      exports.ContinueStatement = ContinueStatement;
      exports.DebuggerStatement = DebuggerStatement;
      exports.DoWhileStatement = DoWhileStatement;
      exports.ForOfStatement = exports.ForInStatement = void 0;
      exports.ForStatement = ForStatement;
      exports.IfStatement = IfStatement;
      exports.LabeledStatement = LabeledStatement;
      exports.ReturnStatement = ReturnStatement;
      exports.SwitchCase = SwitchCase;
      exports.SwitchStatement = SwitchStatement;
      exports.ThrowStatement = ThrowStatement;
      exports.TryStatement = TryStatement;
      exports.VariableDeclaration = VariableDeclaration;
      exports.VariableDeclarator = VariableDeclarator;
      exports.WhileStatement = WhileStatement;
      exports.WithStatement = WithStatement;
      var _t = require_lib3();
      var {
        isFor,
        isForStatement,
        isIfStatement,
        isStatement
      } = _t;
      function WithStatement(node) {
        this.word("with");
        this.space();
        this.tokenChar(40);
        this.print(node.object, node);
        this.tokenChar(41);
        this.printBlock(node);
      }
      function IfStatement(node) {
        this.word("if");
        this.space();
        this.tokenChar(40);
        this.print(node.test, node);
        this.tokenChar(41);
        this.space();
        const needsBlock = node.alternate && isIfStatement(getLastStatement(node.consequent));
        if (needsBlock) {
          this.tokenChar(123);
          this.newline();
          this.indent();
        }
        this.printAndIndentOnComments(node.consequent, node);
        if (needsBlock) {
          this.dedent();
          this.newline();
          this.tokenChar(125);
        }
        if (node.alternate) {
          if (this.endsWith(125))
            this.space();
          this.word("else");
          this.space();
          this.printAndIndentOnComments(node.alternate, node);
        }
      }
      function getLastStatement(statement) {
        const {
          body
        } = statement;
        if (isStatement(body) === false) {
          return statement;
        }
        return getLastStatement(body);
      }
      function ForStatement(node) {
        this.word("for");
        this.space();
        this.tokenChar(40);
        this.inForStatementInitCounter++;
        this.print(node.init, node);
        this.inForStatementInitCounter--;
        this.tokenChar(59);
        if (node.test) {
          this.space();
          this.print(node.test, node);
        }
        this.tokenChar(59);
        if (node.update) {
          this.space();
          this.print(node.update, node);
        }
        this.tokenChar(41);
        this.printBlock(node);
      }
      function WhileStatement(node) {
        this.word("while");
        this.space();
        this.tokenChar(40);
        this.print(node.test, node);
        this.tokenChar(41);
        this.printBlock(node);
      }
      function ForXStatement(node) {
        this.word("for");
        this.space();
        const isForOf = node.type === "ForOfStatement";
        if (isForOf && node.await) {
          this.word("await");
          this.space();
        }
        this.noIndentInnerCommentsHere();
        this.tokenChar(40);
        this.print(node.left, node);
        this.space();
        this.word(isForOf ? "of" : "in");
        this.space();
        this.print(node.right, node);
        this.tokenChar(41);
        this.printBlock(node);
      }
      var ForInStatement = exports.ForInStatement = ForXStatement;
      var ForOfStatement = exports.ForOfStatement = ForXStatement;
      function DoWhileStatement(node) {
        this.word("do");
        this.space();
        this.print(node.body, node);
        this.space();
        this.word("while");
        this.space();
        this.tokenChar(40);
        this.print(node.test, node);
        this.tokenChar(41);
        this.semicolon();
      }
      function printStatementAfterKeyword(printer, node, parent, isLabel) {
        if (node) {
          printer.space();
          printer.printTerminatorless(node, parent, isLabel);
        }
        printer.semicolon();
      }
      function BreakStatement(node) {
        this.word("break");
        printStatementAfterKeyword(this, node.label, node, true);
      }
      function ContinueStatement(node) {
        this.word("continue");
        printStatementAfterKeyword(this, node.label, node, true);
      }
      function ReturnStatement(node) {
        this.word("return");
        printStatementAfterKeyword(this, node.argument, node, false);
      }
      function ThrowStatement(node) {
        this.word("throw");
        printStatementAfterKeyword(this, node.argument, node, false);
      }
      function LabeledStatement(node) {
        this.print(node.label, node);
        this.tokenChar(58);
        this.space();
        this.print(node.body, node);
      }
      function TryStatement(node) {
        this.word("try");
        this.space();
        this.print(node.block, node);
        this.space();
        if (node.handlers) {
          this.print(node.handlers[0], node);
        } else {
          this.print(node.handler, node);
        }
        if (node.finalizer) {
          this.space();
          this.word("finally");
          this.space();
          this.print(node.finalizer, node);
        }
      }
      function CatchClause(node) {
        this.word("catch");
        this.space();
        if (node.param) {
          this.tokenChar(40);
          this.print(node.param, node);
          this.print(node.param.typeAnnotation, node);
          this.tokenChar(41);
          this.space();
        }
        this.print(node.body, node);
      }
      function SwitchStatement(node) {
        this.word("switch");
        this.space();
        this.tokenChar(40);
        this.print(node.discriminant, node);
        this.tokenChar(41);
        this.space();
        this.tokenChar(123);
        this.printSequence(node.cases, node, {
          indent: true,
          addNewlines(leading, cas) {
            if (!leading && node.cases[node.cases.length - 1] === cas)
              return -1;
          }
        });
        this.rightBrace(node);
      }
      function SwitchCase(node) {
        if (node.test) {
          this.word("case");
          this.space();
          this.print(node.test, node);
          this.tokenChar(58);
        } else {
          this.word("default");
          this.tokenChar(58);
        }
        if (node.consequent.length) {
          this.newline();
          this.printSequence(node.consequent, node, {
            indent: true
          });
        }
      }
      function DebuggerStatement() {
        this.word("debugger");
        this.semicolon();
      }
      function VariableDeclaration(node, parent) {
        if (node.declare) {
          this.word("declare");
          this.space();
        }
        const {
          kind
        } = node;
        this.word(kind, kind === "using" || kind === "await using");
        this.space();
        let hasInits = false;
        if (!isFor(parent)) {
          for (const declar of node.declarations) {
            if (declar.init) {
              hasInits = true;
            }
          }
        }
        this.printList(node.declarations, node, {
          separator: hasInits ? function() {
            this.tokenChar(44);
            this.newline();
          } : void 0,
          indent: node.declarations.length > 1 ? true : false
        });
        if (isFor(parent)) {
          if (isForStatement(parent)) {
            if (parent.init === node)
              return;
          } else {
            if (parent.left === node)
              return;
          }
        }
        this.semicolon();
      }
      function VariableDeclarator(node) {
        this.print(node.id, node);
        if (node.definite)
          this.tokenChar(33);
        this.print(node.id.typeAnnotation, node);
        if (node.init) {
          this.space();
          this.tokenChar(61);
          this.space();
          this.print(node.init, node);
        }
      }
    }
  });

  // node_modules/@babel/generator/lib/generators/classes.js
  var require_classes = __commonJS({
    "node_modules/@babel/generator/lib/generators/classes.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ClassAccessorProperty = ClassAccessorProperty;
      exports.ClassBody = ClassBody;
      exports.ClassExpression = exports.ClassDeclaration = ClassDeclaration;
      exports.ClassMethod = ClassMethod;
      exports.ClassPrivateMethod = ClassPrivateMethod;
      exports.ClassPrivateProperty = ClassPrivateProperty;
      exports.ClassProperty = ClassProperty;
      exports.StaticBlock = StaticBlock;
      exports._classMethodHead = _classMethodHead;
      var _t = require_lib3();
      var {
        isExportDefaultDeclaration,
        isExportNamedDeclaration
      } = _t;
      function ClassDeclaration(node, parent) {
        const inExport = isExportDefaultDeclaration(parent) || isExportNamedDeclaration(parent);
        if (!inExport || !this._shouldPrintDecoratorsBeforeExport(parent)) {
          this.printJoin(node.decorators, node);
        }
        if (node.declare) {
          this.word("declare");
          this.space();
        }
        if (node.abstract) {
          this.word("abstract");
          this.space();
        }
        this.word("class");
        if (node.id) {
          this.space();
          this.print(node.id, node);
        }
        this.print(node.typeParameters, node);
        if (node.superClass) {
          this.space();
          this.word("extends");
          this.space();
          this.print(node.superClass, node);
          this.print(node.superTypeParameters, node);
        }
        if (node.implements) {
          this.space();
          this.word("implements");
          this.space();
          this.printList(node.implements, node);
        }
        this.space();
        this.print(node.body, node);
      }
      function ClassBody(node) {
        this.tokenChar(123);
        if (node.body.length === 0) {
          this.tokenChar(125);
        } else {
          this.newline();
          this.printSequence(node.body, node, {
            indent: true
          });
          if (!this.endsWith(10))
            this.newline();
          this.rightBrace(node);
        }
      }
      function ClassProperty(node) {
        var _node$key$loc;
        this.printJoin(node.decorators, node);
        const endLine = (_node$key$loc = node.key.loc) == null || (_node$key$loc = _node$key$loc.end) == null ? void 0 : _node$key$loc.line;
        if (endLine)
          this.catchUp(endLine);
        this.tsPrintClassMemberModifiers(node);
        if (node.computed) {
          this.tokenChar(91);
          this.print(node.key, node);
          this.tokenChar(93);
        } else {
          this._variance(node);
          this.print(node.key, node);
        }
        if (node.optional) {
          this.tokenChar(63);
        }
        if (node.definite) {
          this.tokenChar(33);
        }
        this.print(node.typeAnnotation, node);
        if (node.value) {
          this.space();
          this.tokenChar(61);
          this.space();
          this.print(node.value, node);
        }
        this.semicolon();
      }
      function ClassAccessorProperty(node) {
        var _node$key$loc2;
        this.printJoin(node.decorators, node);
        const endLine = (_node$key$loc2 = node.key.loc) == null || (_node$key$loc2 = _node$key$loc2.end) == null ? void 0 : _node$key$loc2.line;
        if (endLine)
          this.catchUp(endLine);
        this.tsPrintClassMemberModifiers(node);
        this.word("accessor", true);
        this.space();
        if (node.computed) {
          this.tokenChar(91);
          this.print(node.key, node);
          this.tokenChar(93);
        } else {
          this._variance(node);
          this.print(node.key, node);
        }
        if (node.optional) {
          this.tokenChar(63);
        }
        if (node.definite) {
          this.tokenChar(33);
        }
        this.print(node.typeAnnotation, node);
        if (node.value) {
          this.space();
          this.tokenChar(61);
          this.space();
          this.print(node.value, node);
        }
        this.semicolon();
      }
      function ClassPrivateProperty(node) {
        this.printJoin(node.decorators, node);
        if (node.static) {
          this.word("static");
          this.space();
        }
        this.print(node.key, node);
        this.print(node.typeAnnotation, node);
        if (node.value) {
          this.space();
          this.tokenChar(61);
          this.space();
          this.print(node.value, node);
        }
        this.semicolon();
      }
      function ClassMethod(node) {
        this._classMethodHead(node);
        this.space();
        this.print(node.body, node);
      }
      function ClassPrivateMethod(node) {
        this._classMethodHead(node);
        this.space();
        this.print(node.body, node);
      }
      function _classMethodHead(node) {
        var _node$key$loc3;
        this.printJoin(node.decorators, node);
        const endLine = (_node$key$loc3 = node.key.loc) == null || (_node$key$loc3 = _node$key$loc3.end) == null ? void 0 : _node$key$loc3.line;
        if (endLine)
          this.catchUp(endLine);
        this.tsPrintClassMemberModifiers(node);
        this._methodHead(node);
      }
      function StaticBlock(node) {
        this.word("static");
        this.space();
        this.tokenChar(123);
        if (node.body.length === 0) {
          this.tokenChar(125);
        } else {
          this.newline();
          this.printSequence(node.body, node, {
            indent: true
          });
          this.rightBrace(node);
        }
      }
    }
  });

  // node_modules/@babel/generator/lib/generators/methods.js
  var require_methods = __commonJS({
    "node_modules/@babel/generator/lib/generators/methods.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ArrowFunctionExpression = ArrowFunctionExpression;
      exports.FunctionDeclaration = exports.FunctionExpression = FunctionExpression;
      exports._functionHead = _functionHead;
      exports._methodHead = _methodHead;
      exports._param = _param;
      exports._parameters = _parameters;
      exports._params = _params;
      exports._predicate = _predicate;
      var _t = require_lib3();
      var {
        isIdentifier
      } = _t;
      function _params(node, idNode, parentNode) {
        this.print(node.typeParameters, node);
        const nameInfo = _getFuncIdName.call(this, idNode, parentNode);
        if (nameInfo) {
          this.sourceIdentifierName(nameInfo.name, nameInfo.pos);
        }
        this.tokenChar(40);
        this._parameters(node.params, node);
        this.tokenChar(41);
        const noLineTerminator = node.type === "ArrowFunctionExpression";
        this.print(node.returnType, node, noLineTerminator);
        this._noLineTerminator = noLineTerminator;
      }
      function _parameters(parameters, parent) {
        const paramLength = parameters.length;
        for (let i = 0; i < paramLength; i++) {
          this._param(parameters[i], parent);
          if (i < parameters.length - 1) {
            this.tokenChar(44);
            this.space();
          }
        }
      }
      function _param(parameter, parent) {
        this.printJoin(parameter.decorators, parameter);
        this.print(parameter, parent);
        if (parameter.optional) {
          this.tokenChar(63);
        }
        this.print(parameter.typeAnnotation, parameter);
      }
      function _methodHead(node) {
        const kind = node.kind;
        const key = node.key;
        if (kind === "get" || kind === "set") {
          this.word(kind);
          this.space();
        }
        if (node.async) {
          this.word("async", true);
          this.space();
        }
        if (kind === "method" || kind === "init") {
          if (node.generator) {
            this.tokenChar(42);
          }
        }
        if (node.computed) {
          this.tokenChar(91);
          this.print(key, node);
          this.tokenChar(93);
        } else {
          this.print(key, node);
        }
        if (node.optional) {
          this.tokenChar(63);
        }
        this._params(node, node.computed && node.key.type !== "StringLiteral" ? void 0 : node.key, void 0);
      }
      function _predicate(node, noLineTerminatorAfter) {
        if (node.predicate) {
          if (!node.returnType) {
            this.tokenChar(58);
          }
          this.space();
          this.print(node.predicate, node, noLineTerminatorAfter);
        }
      }
      function _functionHead(node, parent) {
        if (node.async) {
          this.word("async");
          this._endsWithInnerRaw = false;
          this.space();
        }
        this.word("function");
        if (node.generator) {
          this._endsWithInnerRaw = false;
          this.tokenChar(42);
        }
        this.space();
        if (node.id) {
          this.print(node.id, node);
        }
        this._params(node, node.id, parent);
        if (node.type !== "TSDeclareFunction") {
          this._predicate(node);
        }
      }
      function FunctionExpression(node, parent) {
        this._functionHead(node, parent);
        this.space();
        this.print(node.body, node);
      }
      function ArrowFunctionExpression(node, parent) {
        if (node.async) {
          this.word("async", true);
          this.space();
        }
        let firstParam;
        if (!this.format.retainLines && node.params.length === 1 && isIdentifier(firstParam = node.params[0]) && !hasTypesOrComments(node, firstParam)) {
          this.print(firstParam, node, true);
        } else {
          this._params(node, void 0, parent);
        }
        this._predicate(node, true);
        this.space();
        this.printInnerComments();
        this.token("=>");
        this.space();
        this.print(node.body, node);
      }
      function hasTypesOrComments(node, param) {
        var _param$leadingComment, _param$trailingCommen;
        return !!(node.typeParameters || node.returnType || node.predicate || param.typeAnnotation || param.optional || (_param$leadingComment = param.leadingComments) != null && _param$leadingComment.length || (_param$trailingCommen = param.trailingComments) != null && _param$trailingCommen.length);
      }
      function _getFuncIdName(idNode, parent) {
        let id = idNode;
        if (!id && parent) {
          const parentType = parent.type;
          if (parentType === "VariableDeclarator") {
            id = parent.id;
          } else if (parentType === "AssignmentExpression" || parentType === "AssignmentPattern") {
            id = parent.left;
          } else if (parentType === "ObjectProperty" || parentType === "ClassProperty") {
            if (!parent.computed || parent.key.type === "StringLiteral") {
              id = parent.key;
            }
          } else if (parentType === "ClassPrivateProperty" || parentType === "ClassAccessorProperty") {
            id = parent.key;
          }
        }
        if (!id)
          return;
        let nameInfo;
        if (id.type === "Identifier") {
          var _id$loc, _id$loc2;
          nameInfo = {
            pos: (_id$loc = id.loc) == null ? void 0 : _id$loc.start,
            name: ((_id$loc2 = id.loc) == null ? void 0 : _id$loc2.identifierName) || id.name
          };
        } else if (id.type === "PrivateName") {
          var _id$loc3;
          nameInfo = {
            pos: (_id$loc3 = id.loc) == null ? void 0 : _id$loc3.start,
            name: "#" + id.id.name
          };
        } else if (id.type === "StringLiteral") {
          var _id$loc4;
          nameInfo = {
            pos: (_id$loc4 = id.loc) == null ? void 0 : _id$loc4.start,
            name: id.value
          };
        }
        return nameInfo;
      }
    }
  });

  // node_modules/@babel/generator/lib/generators/modules.js
  var require_modules = __commonJS({
    "node_modules/@babel/generator/lib/generators/modules.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ExportAllDeclaration = ExportAllDeclaration;
      exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
      exports.ExportDefaultSpecifier = ExportDefaultSpecifier;
      exports.ExportNamedDeclaration = ExportNamedDeclaration;
      exports.ExportNamespaceSpecifier = ExportNamespaceSpecifier;
      exports.ExportSpecifier = ExportSpecifier;
      exports.ImportAttribute = ImportAttribute;
      exports.ImportDeclaration = ImportDeclaration;
      exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
      exports.ImportExpression = ImportExpression;
      exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;
      exports.ImportSpecifier = ImportSpecifier;
      exports._printAttributes = _printAttributes;
      var _t = require_lib3();
      var {
        isClassDeclaration,
        isExportDefaultSpecifier,
        isExportNamespaceSpecifier,
        isImportDefaultSpecifier,
        isImportNamespaceSpecifier,
        isStatement
      } = _t;
      function ImportSpecifier(node) {
        if (node.importKind === "type" || node.importKind === "typeof") {
          this.word(node.importKind);
          this.space();
        }
        this.print(node.imported, node);
        if (node.local && node.local.name !== node.imported.name) {
          this.space();
          this.word("as");
          this.space();
          this.print(node.local, node);
        }
      }
      function ImportDefaultSpecifier(node) {
        this.print(node.local, node);
      }
      function ExportDefaultSpecifier(node) {
        this.print(node.exported, node);
      }
      function ExportSpecifier(node) {
        if (node.exportKind === "type") {
          this.word("type");
          this.space();
        }
        this.print(node.local, node);
        if (node.exported && node.local.name !== node.exported.name) {
          this.space();
          this.word("as");
          this.space();
          this.print(node.exported, node);
        }
      }
      function ExportNamespaceSpecifier(node) {
        this.tokenChar(42);
        this.space();
        this.word("as");
        this.space();
        this.print(node.exported, node);
      }
      var warningShown = false;
      function _printAttributes(node) {
        const {
          importAttributesKeyword
        } = this.format;
        const {
          attributes,
          assertions
        } = node;
        if (attributes && !importAttributesKeyword && !warningShown) {
          warningShown = true;
          console.warn(`You are using import attributes, without specifying the desired output syntax.
Please specify the "importAttributesKeyword" generator option, whose value can be one of:
 - "with"        : \`import { a } from "b" with { type: "json" };\`
 - "assert"      : \`import { a } from "b" assert { type: "json" };\`
 - "with-legacy" : \`import { a } from "b" with type: "json";\`
`);
        }
        const useAssertKeyword = importAttributesKeyword === "assert" || !importAttributesKeyword && assertions;
        this.word(useAssertKeyword ? "assert" : "with");
        this.space();
        if (!useAssertKeyword && importAttributesKeyword !== "with") {
          this.printList(attributes || assertions, node);
          return;
        }
        this.tokenChar(123);
        this.space();
        this.printList(attributes || assertions, node);
        this.space();
        this.tokenChar(125);
      }
      function ExportAllDeclaration(node) {
        var _node$attributes, _node$assertions;
        this.word("export");
        this.space();
        if (node.exportKind === "type") {
          this.word("type");
          this.space();
        }
        this.tokenChar(42);
        this.space();
        this.word("from");
        this.space();
        if ((_node$attributes = node.attributes) != null && _node$attributes.length || (_node$assertions = node.assertions) != null && _node$assertions.length) {
          this.print(node.source, node, true);
          this.space();
          this._printAttributes(node);
        } else {
          this.print(node.source, node);
        }
        this.semicolon();
      }
      function maybePrintDecoratorsBeforeExport(printer, node) {
        if (isClassDeclaration(node.declaration) && printer._shouldPrintDecoratorsBeforeExport(node)) {
          printer.printJoin(node.declaration.decorators, node);
        }
      }
      function ExportNamedDeclaration(node) {
        maybePrintDecoratorsBeforeExport(this, node);
        this.word("export");
        this.space();
        if (node.declaration) {
          const declar = node.declaration;
          this.print(declar, node);
          if (!isStatement(declar))
            this.semicolon();
        } else {
          if (node.exportKind === "type") {
            this.word("type");
            this.space();
          }
          const specifiers = node.specifiers.slice(0);
          let hasSpecial = false;
          for (; ; ) {
            const first = specifiers[0];
            if (isExportDefaultSpecifier(first) || isExportNamespaceSpecifier(first)) {
              hasSpecial = true;
              this.print(specifiers.shift(), node);
              if (specifiers.length) {
                this.tokenChar(44);
                this.space();
              }
            } else {
              break;
            }
          }
          if (specifiers.length || !specifiers.length && !hasSpecial) {
            this.tokenChar(123);
            if (specifiers.length) {
              this.space();
              this.printList(specifiers, node);
              this.space();
            }
            this.tokenChar(125);
          }
          if (node.source) {
            var _node$attributes2, _node$assertions2;
            this.space();
            this.word("from");
            this.space();
            if ((_node$attributes2 = node.attributes) != null && _node$attributes2.length || (_node$assertions2 = node.assertions) != null && _node$assertions2.length) {
              this.print(node.source, node, true);
              this.space();
              this._printAttributes(node);
            } else {
              this.print(node.source, node);
            }
          }
          this.semicolon();
        }
      }
      function ExportDefaultDeclaration(node) {
        maybePrintDecoratorsBeforeExport(this, node);
        this.word("export");
        this.noIndentInnerCommentsHere();
        this.space();
        this.word("default");
        this.space();
        const declar = node.declaration;
        this.print(declar, node);
        if (!isStatement(declar))
          this.semicolon();
      }
      function ImportDeclaration(node) {
        var _node$attributes3, _node$assertions3;
        this.word("import");
        this.space();
        const isTypeKind = node.importKind === "type" || node.importKind === "typeof";
        if (isTypeKind) {
          this.noIndentInnerCommentsHere();
          this.word(node.importKind);
          this.space();
        } else if (node.module) {
          this.noIndentInnerCommentsHere();
          this.word("module");
          this.space();
        } else if (node.phase) {
          this.noIndentInnerCommentsHere();
          this.word(node.phase);
          this.space();
        }
        const specifiers = node.specifiers.slice(0);
        const hasSpecifiers = !!specifiers.length;
        while (hasSpecifiers) {
          const first = specifiers[0];
          if (isImportDefaultSpecifier(first) || isImportNamespaceSpecifier(first)) {
            this.print(specifiers.shift(), node);
            if (specifiers.length) {
              this.tokenChar(44);
              this.space();
            }
          } else {
            break;
          }
        }
        if (specifiers.length) {
          this.tokenChar(123);
          this.space();
          this.printList(specifiers, node);
          this.space();
          this.tokenChar(125);
        } else if (isTypeKind && !hasSpecifiers) {
          this.tokenChar(123);
          this.tokenChar(125);
        }
        if (hasSpecifiers || isTypeKind) {
          this.space();
          this.word("from");
          this.space();
        }
        if ((_node$attributes3 = node.attributes) != null && _node$attributes3.length || (_node$assertions3 = node.assertions) != null && _node$assertions3.length) {
          this.print(node.source, node, true);
          this.space();
          this._printAttributes(node);
        } else {
          this.print(node.source, node);
        }
        this.semicolon();
      }
      function ImportAttribute(node) {
        this.print(node.key);
        this.tokenChar(58);
        this.space();
        this.print(node.value);
      }
      function ImportNamespaceSpecifier(node) {
        this.tokenChar(42);
        this.space();
        this.word("as");
        this.space();
        this.print(node.local, node);
      }
      function ImportExpression(node) {
        this.word("import");
        if (node.phase) {
          this.tokenChar(46);
          this.word(node.phase);
        }
        this.tokenChar(40);
        this.print(node.source, node);
        if (node.options != null) {
          this.tokenChar(44);
          this.space();
          this.print(node.options, node);
        }
        this.tokenChar(41);
      }
    }
  });

  // node_modules/jsesc/jsesc.js
  var require_jsesc = __commonJS({
    "node_modules/jsesc/jsesc.js"(exports, module) {
      "use strict";
      init_esbuild_inject();
      var object = {};
      var hasOwnProperty = object.hasOwnProperty;
      var forOwn = (object2, callback) => {
        for (const key in object2) {
          if (hasOwnProperty.call(object2, key)) {
            callback(key, object2[key]);
          }
        }
      };
      var extend = (destination, source) => {
        if (!source) {
          return destination;
        }
        forOwn(source, (key, value) => {
          destination[key] = value;
        });
        return destination;
      };
      var forEach = (array, callback) => {
        const length = array.length;
        let index = -1;
        while (++index < length) {
          callback(array[index]);
        }
      };
      var toString = object.toString;
      var isArray = Array.isArray;
      var isBuffer = Buffer2.isBuffer;
      var isObject = (value) => {
        return toString.call(value) == "[object Object]";
      };
      var isString = (value) => {
        return typeof value == "string" || toString.call(value) == "[object String]";
      };
      var isNumber = (value) => {
        return typeof value == "number" || toString.call(value) == "[object Number]";
      };
      var isFunction = (value) => {
        return typeof value == "function";
      };
      var isMap = (value) => {
        return toString.call(value) == "[object Map]";
      };
      var isSet = (value) => {
        return toString.call(value) == "[object Set]";
      };
      var singleEscapes = {
        '"': '\\"',
        "'": "\\'",
        "\\": "\\\\",
        "\b": "\\b",
        "\f": "\\f",
        "\n": "\\n",
        "\r": "\\r",
        "	": "\\t"
        // `\v` is omitted intentionally, because in IE < 9, '\v' == 'v'.
        // '\v': '\\x0B'
      };
      var regexSingleEscape = /["'\\\b\f\n\r\t]/;
      var regexDigit = /[0-9]/;
      var regexWhitelist = /[ !#-&\(-\[\]-_a-~]/;
      var jsesc = (argument, options) => {
        const increaseIndentation = () => {
          oldIndent = indent;
          ++options.indentLevel;
          indent = options.indent.repeat(options.indentLevel);
        };
        const defaults = {
          "escapeEverything": false,
          "minimal": false,
          "isScriptContext": false,
          "quotes": "single",
          "wrap": false,
          "es6": false,
          "json": false,
          "compact": true,
          "lowercaseHex": false,
          "numbers": "decimal",
          "indent": "	",
          "indentLevel": 0,
          "__inline1__": false,
          "__inline2__": false
        };
        const json = options && options.json;
        if (json) {
          defaults.quotes = "double";
          defaults.wrap = true;
        }
        options = extend(defaults, options);
        if (options.quotes != "single" && options.quotes != "double" && options.quotes != "backtick") {
          options.quotes = "single";
        }
        const quote = options.quotes == "double" ? '"' : options.quotes == "backtick" ? "`" : "'";
        const compact = options.compact;
        const lowercaseHex = options.lowercaseHex;
        let indent = options.indent.repeat(options.indentLevel);
        let oldIndent = "";
        const inline1 = options.__inline1__;
        const inline2 = options.__inline2__;
        const newLine = compact ? "" : "\n";
        let result;
        let isEmpty = true;
        const useBinNumbers = options.numbers == "binary";
        const useOctNumbers = options.numbers == "octal";
        const useDecNumbers = options.numbers == "decimal";
        const useHexNumbers = options.numbers == "hexadecimal";
        if (json && argument && isFunction(argument.toJSON)) {
          argument = argument.toJSON();
        }
        if (!isString(argument)) {
          if (isMap(argument)) {
            if (argument.size == 0) {
              return "new Map()";
            }
            if (!compact) {
              options.__inline1__ = true;
              options.__inline2__ = false;
            }
            return "new Map(" + jsesc(Array.from(argument), options) + ")";
          }
          if (isSet(argument)) {
            if (argument.size == 0) {
              return "new Set()";
            }
            return "new Set(" + jsesc(Array.from(argument), options) + ")";
          }
          if (isBuffer(argument)) {
            if (argument.length == 0) {
              return "Buffer.from([])";
            }
            return "Buffer.from(" + jsesc(Array.from(argument), options) + ")";
          }
          if (isArray(argument)) {
            result = [];
            options.wrap = true;
            if (inline1) {
              options.__inline1__ = false;
              options.__inline2__ = true;
            }
            if (!inline2) {
              increaseIndentation();
            }
            forEach(argument, (value) => {
              isEmpty = false;
              if (inline2) {
                options.__inline2__ = false;
              }
              result.push(
                (compact || inline2 ? "" : indent) + jsesc(value, options)
              );
            });
            if (isEmpty) {
              return "[]";
            }
            if (inline2) {
              return "[" + result.join(", ") + "]";
            }
            return "[" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "]";
          } else if (isNumber(argument)) {
            if (json) {
              return JSON.stringify(argument);
            }
            if (useDecNumbers) {
              return String(argument);
            }
            if (useHexNumbers) {
              let hexadecimal = argument.toString(16);
              if (!lowercaseHex) {
                hexadecimal = hexadecimal.toUpperCase();
              }
              return "0x" + hexadecimal;
            }
            if (useBinNumbers) {
              return "0b" + argument.toString(2);
            }
            if (useOctNumbers) {
              return "0o" + argument.toString(8);
            }
          } else if (!isObject(argument)) {
            if (json) {
              return JSON.stringify(argument) || "null";
            }
            return String(argument);
          } else {
            result = [];
            options.wrap = true;
            increaseIndentation();
            forOwn(argument, (key, value) => {
              isEmpty = false;
              result.push(
                (compact ? "" : indent) + jsesc(key, options) + ":" + (compact ? "" : " ") + jsesc(value, options)
              );
            });
            if (isEmpty) {
              return "{}";
            }
            return "{" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "}";
          }
        }
        const string = argument;
        let index = -1;
        const length = string.length;
        result = "";
        while (++index < length) {
          const character = string.charAt(index);
          if (options.es6) {
            const first = string.charCodeAt(index);
            if (
              // check if it’s the start of a surrogate pair
              first >= 55296 && first <= 56319 && // high surrogate
              length > index + 1
            ) {
              const second = string.charCodeAt(index + 1);
              if (second >= 56320 && second <= 57343) {
                const codePoint = (first - 55296) * 1024 + second - 56320 + 65536;
                let hexadecimal2 = codePoint.toString(16);
                if (!lowercaseHex) {
                  hexadecimal2 = hexadecimal2.toUpperCase();
                }
                result += "\\u{" + hexadecimal2 + "}";
                ++index;
                continue;
              }
            }
          }
          if (!options.escapeEverything) {
            if (regexWhitelist.test(character)) {
              result += character;
              continue;
            }
            if (character == '"') {
              result += quote == character ? '\\"' : character;
              continue;
            }
            if (character == "`") {
              result += quote == character ? "\\`" : character;
              continue;
            }
            if (character == "'") {
              result += quote == character ? "\\'" : character;
              continue;
            }
          }
          if (character == "\0" && !json && !regexDigit.test(string.charAt(index + 1))) {
            result += "\\0";
            continue;
          }
          if (regexSingleEscape.test(character)) {
            result += singleEscapes[character];
            continue;
          }
          const charCode = character.charCodeAt(0);
          if (options.minimal && charCode != 8232 && charCode != 8233) {
            result += character;
            continue;
          }
          let hexadecimal = charCode.toString(16);
          if (!lowercaseHex) {
            hexadecimal = hexadecimal.toUpperCase();
          }
          const longhand = hexadecimal.length > 2 || json;
          const escaped = "\\" + (longhand ? "u" : "x") + ("0000" + hexadecimal).slice(longhand ? -4 : -2);
          result += escaped;
          continue;
        }
        if (options.wrap) {
          result = quote + result + quote;
        }
        if (quote == "`") {
          result = result.replace(/\$\{/g, "\\${");
        }
        if (options.isScriptContext) {
          return result.replace(/<\/(script|style)/gi, "<\\/$1").replace(/<!--/g, json ? "\\u003C!--" : "\\x3C!--");
        }
        return result;
      };
      jsesc.version = "2.5.2";
      module.exports = jsesc;
    }
  });

  // node_modules/@babel/generator/lib/generators/types.js
  var require_types = __commonJS({
    "node_modules/@babel/generator/lib/generators/types.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ArgumentPlaceholder = ArgumentPlaceholder;
      exports.ArrayPattern = exports.ArrayExpression = ArrayExpression;
      exports.BigIntLiteral = BigIntLiteral;
      exports.BooleanLiteral = BooleanLiteral;
      exports.DecimalLiteral = DecimalLiteral;
      exports.Identifier = Identifier;
      exports.NullLiteral = NullLiteral;
      exports.NumericLiteral = NumericLiteral;
      exports.ObjectPattern = exports.ObjectExpression = ObjectExpression;
      exports.ObjectMethod = ObjectMethod;
      exports.ObjectProperty = ObjectProperty;
      exports.PipelineBareFunction = PipelineBareFunction;
      exports.PipelinePrimaryTopicReference = PipelinePrimaryTopicReference;
      exports.PipelineTopicExpression = PipelineTopicExpression;
      exports.RecordExpression = RecordExpression;
      exports.RegExpLiteral = RegExpLiteral;
      exports.SpreadElement = exports.RestElement = RestElement;
      exports.StringLiteral = StringLiteral;
      exports.TopicReference = TopicReference;
      exports.TupleExpression = TupleExpression;
      var _t = require_lib3();
      var _jsesc = require_jsesc();
      var {
        isAssignmentPattern,
        isIdentifier
      } = _t;
      function Identifier(node) {
        var _node$loc;
        this.sourceIdentifierName(((_node$loc = node.loc) == null ? void 0 : _node$loc.identifierName) || node.name);
        this.word(node.name);
      }
      function ArgumentPlaceholder() {
        this.tokenChar(63);
      }
      function RestElement(node) {
        this.token("...");
        this.print(node.argument, node);
      }
      function ObjectExpression(node) {
        const props = node.properties;
        this.tokenChar(123);
        if (props.length) {
          this.space();
          this.printList(props, node, {
            indent: true,
            statement: true
          });
          this.space();
        }
        this.sourceWithOffset("end", node.loc, -1);
        this.tokenChar(125);
      }
      function ObjectMethod(node) {
        this.printJoin(node.decorators, node);
        this._methodHead(node);
        this.space();
        this.print(node.body, node);
      }
      function ObjectProperty(node) {
        this.printJoin(node.decorators, node);
        if (node.computed) {
          this.tokenChar(91);
          this.print(node.key, node);
          this.tokenChar(93);
        } else {
          if (isAssignmentPattern(node.value) && isIdentifier(node.key) && node.key.name === node.value.left.name) {
            this.print(node.value, node);
            return;
          }
          this.print(node.key, node);
          if (node.shorthand && isIdentifier(node.key) && isIdentifier(node.value) && node.key.name === node.value.name) {
            return;
          }
        }
        this.tokenChar(58);
        this.space();
        this.print(node.value, node);
      }
      function ArrayExpression(node) {
        const elems = node.elements;
        const len = elems.length;
        this.tokenChar(91);
        for (let i = 0; i < elems.length; i++) {
          const elem = elems[i];
          if (elem) {
            if (i > 0)
              this.space();
            this.print(elem, node);
            if (i < len - 1)
              this.tokenChar(44);
          } else {
            this.tokenChar(44);
          }
        }
        this.tokenChar(93);
      }
      function RecordExpression(node) {
        const props = node.properties;
        let startToken;
        let endToken;
        if (this.format.recordAndTupleSyntaxType === "bar") {
          startToken = "{|";
          endToken = "|}";
        } else if (this.format.recordAndTupleSyntaxType !== "hash" && this.format.recordAndTupleSyntaxType != null) {
          throw new Error(`The "recordAndTupleSyntaxType" generator option must be "bar" or "hash" (${JSON.stringify(this.format.recordAndTupleSyntaxType)} received).`);
        } else {
          startToken = "#{";
          endToken = "}";
        }
        this.token(startToken);
        if (props.length) {
          this.space();
          this.printList(props, node, {
            indent: true,
            statement: true
          });
          this.space();
        }
        this.token(endToken);
      }
      function TupleExpression(node) {
        const elems = node.elements;
        const len = elems.length;
        let startToken;
        let endToken;
        if (this.format.recordAndTupleSyntaxType === "bar") {
          startToken = "[|";
          endToken = "|]";
        } else if (this.format.recordAndTupleSyntaxType === "hash") {
          startToken = "#[";
          endToken = "]";
        } else {
          throw new Error(`${this.format.recordAndTupleSyntaxType} is not a valid recordAndTuple syntax type`);
        }
        this.token(startToken);
        for (let i = 0; i < elems.length; i++) {
          const elem = elems[i];
          if (elem) {
            if (i > 0)
              this.space();
            this.print(elem, node);
            if (i < len - 1)
              this.tokenChar(44);
          }
        }
        this.token(endToken);
      }
      function RegExpLiteral(node) {
        this.word(`/${node.pattern}/${node.flags}`);
      }
      function BooleanLiteral(node) {
        this.word(node.value ? "true" : "false");
      }
      function NullLiteral() {
        this.word("null");
      }
      function NumericLiteral(node) {
        const raw = this.getPossibleRaw(node);
        const opts = this.format.jsescOption;
        const value = node.value;
        const str = value + "";
        if (opts.numbers) {
          this.number(_jsesc(value, opts), value);
        } else if (raw == null) {
          this.number(str, value);
        } else if (this.format.minified) {
          this.number(raw.length < str.length ? raw : str, value);
        } else {
          this.number(raw, value);
        }
      }
      function StringLiteral(node) {
        const raw = this.getPossibleRaw(node);
        if (!this.format.minified && raw !== void 0) {
          this.token(raw);
          return;
        }
        const val = _jsesc(node.value, this.format.jsescOption);
        this.token(val);
      }
      function BigIntLiteral(node) {
        const raw = this.getPossibleRaw(node);
        if (!this.format.minified && raw !== void 0) {
          this.word(raw);
          return;
        }
        this.word(node.value + "n");
      }
      function DecimalLiteral(node) {
        const raw = this.getPossibleRaw(node);
        if (!this.format.minified && raw !== void 0) {
          this.word(raw);
          return;
        }
        this.word(node.value + "m");
      }
      var validTopicTokenSet = /* @__PURE__ */ new Set(["^^", "@@", "^", "%", "#"]);
      function TopicReference() {
        const {
          topicToken
        } = this.format;
        if (validTopicTokenSet.has(topicToken)) {
          this.token(topicToken);
        } else {
          const givenTopicTokenJSON = JSON.stringify(topicToken);
          const validTopics = Array.from(validTopicTokenSet, (v) => JSON.stringify(v));
          throw new Error(`The "topicToken" generator option must be one of ${validTopics.join(", ")} (${givenTopicTokenJSON} received instead).`);
        }
      }
      function PipelineTopicExpression(node) {
        this.print(node.expression, node);
      }
      function PipelineBareFunction(node) {
        this.print(node.callee, node);
      }
      function PipelinePrimaryTopicReference() {
        this.tokenChar(35);
      }
    }
  });

  // node_modules/@babel/generator/lib/generators/flow.js
  var require_flow2 = __commonJS({
    "node_modules/@babel/generator/lib/generators/flow.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.AnyTypeAnnotation = AnyTypeAnnotation;
      exports.ArrayTypeAnnotation = ArrayTypeAnnotation;
      exports.BooleanLiteralTypeAnnotation = BooleanLiteralTypeAnnotation;
      exports.BooleanTypeAnnotation = BooleanTypeAnnotation;
      exports.DeclareClass = DeclareClass;
      exports.DeclareExportAllDeclaration = DeclareExportAllDeclaration;
      exports.DeclareExportDeclaration = DeclareExportDeclaration;
      exports.DeclareFunction = DeclareFunction;
      exports.DeclareInterface = DeclareInterface;
      exports.DeclareModule = DeclareModule;
      exports.DeclareModuleExports = DeclareModuleExports;
      exports.DeclareOpaqueType = DeclareOpaqueType;
      exports.DeclareTypeAlias = DeclareTypeAlias;
      exports.DeclareVariable = DeclareVariable;
      exports.DeclaredPredicate = DeclaredPredicate;
      exports.EmptyTypeAnnotation = EmptyTypeAnnotation;
      exports.EnumBooleanBody = EnumBooleanBody;
      exports.EnumBooleanMember = EnumBooleanMember;
      exports.EnumDeclaration = EnumDeclaration;
      exports.EnumDefaultedMember = EnumDefaultedMember;
      exports.EnumNumberBody = EnumNumberBody;
      exports.EnumNumberMember = EnumNumberMember;
      exports.EnumStringBody = EnumStringBody;
      exports.EnumStringMember = EnumStringMember;
      exports.EnumSymbolBody = EnumSymbolBody;
      exports.ExistsTypeAnnotation = ExistsTypeAnnotation;
      exports.FunctionTypeAnnotation = FunctionTypeAnnotation;
      exports.FunctionTypeParam = FunctionTypeParam;
      exports.IndexedAccessType = IndexedAccessType;
      exports.InferredPredicate = InferredPredicate;
      exports.InterfaceDeclaration = InterfaceDeclaration;
      exports.GenericTypeAnnotation = exports.ClassImplements = exports.InterfaceExtends = InterfaceExtends;
      exports.InterfaceTypeAnnotation = InterfaceTypeAnnotation;
      exports.IntersectionTypeAnnotation = IntersectionTypeAnnotation;
      exports.MixedTypeAnnotation = MixedTypeAnnotation;
      exports.NullLiteralTypeAnnotation = NullLiteralTypeAnnotation;
      exports.NullableTypeAnnotation = NullableTypeAnnotation;
      Object.defineProperty(exports, "NumberLiteralTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _types2.NumericLiteral;
        }
      });
      exports.NumberTypeAnnotation = NumberTypeAnnotation;
      exports.ObjectTypeAnnotation = ObjectTypeAnnotation;
      exports.ObjectTypeCallProperty = ObjectTypeCallProperty;
      exports.ObjectTypeIndexer = ObjectTypeIndexer;
      exports.ObjectTypeInternalSlot = ObjectTypeInternalSlot;
      exports.ObjectTypeProperty = ObjectTypeProperty;
      exports.ObjectTypeSpreadProperty = ObjectTypeSpreadProperty;
      exports.OpaqueType = OpaqueType;
      exports.OptionalIndexedAccessType = OptionalIndexedAccessType;
      exports.QualifiedTypeIdentifier = QualifiedTypeIdentifier;
      Object.defineProperty(exports, "StringLiteralTypeAnnotation", {
        enumerable: true,
        get: function() {
          return _types2.StringLiteral;
        }
      });
      exports.StringTypeAnnotation = StringTypeAnnotation;
      exports.SymbolTypeAnnotation = SymbolTypeAnnotation;
      exports.ThisTypeAnnotation = ThisTypeAnnotation;
      exports.TupleTypeAnnotation = TupleTypeAnnotation;
      exports.TypeAlias = TypeAlias;
      exports.TypeAnnotation = TypeAnnotation;
      exports.TypeCastExpression = TypeCastExpression;
      exports.TypeParameter = TypeParameter;
      exports.TypeParameterDeclaration = exports.TypeParameterInstantiation = TypeParameterInstantiation;
      exports.TypeofTypeAnnotation = TypeofTypeAnnotation;
      exports.UnionTypeAnnotation = UnionTypeAnnotation;
      exports.Variance = Variance;
      exports.VoidTypeAnnotation = VoidTypeAnnotation;
      exports._interfaceish = _interfaceish;
      exports._variance = _variance;
      var _t = require_lib3();
      var _modules = require_modules();
      var _types2 = require_types();
      var {
        isDeclareExportDeclaration,
        isStatement
      } = _t;
      function AnyTypeAnnotation() {
        this.word("any");
      }
      function ArrayTypeAnnotation(node) {
        this.print(node.elementType, node, true);
        this.tokenChar(91);
        this.tokenChar(93);
      }
      function BooleanTypeAnnotation() {
        this.word("boolean");
      }
      function BooleanLiteralTypeAnnotation(node) {
        this.word(node.value ? "true" : "false");
      }
      function NullLiteralTypeAnnotation() {
        this.word("null");
      }
      function DeclareClass(node, parent) {
        if (!isDeclareExportDeclaration(parent)) {
          this.word("declare");
          this.space();
        }
        this.word("class");
        this.space();
        this._interfaceish(node);
      }
      function DeclareFunction(node, parent) {
        if (!isDeclareExportDeclaration(parent)) {
          this.word("declare");
          this.space();
        }
        this.word("function");
        this.space();
        this.print(node.id, node);
        this.print(node.id.typeAnnotation.typeAnnotation, node);
        if (node.predicate) {
          this.space();
          this.print(node.predicate, node);
        }
        this.semicolon();
      }
      function InferredPredicate() {
        this.tokenChar(37);
        this.word("checks");
      }
      function DeclaredPredicate(node) {
        this.tokenChar(37);
        this.word("checks");
        this.tokenChar(40);
        this.print(node.value, node);
        this.tokenChar(41);
      }
      function DeclareInterface(node) {
        this.word("declare");
        this.space();
        this.InterfaceDeclaration(node);
      }
      function DeclareModule(node) {
        this.word("declare");
        this.space();
        this.word("module");
        this.space();
        this.print(node.id, node);
        this.space();
        this.print(node.body, node);
      }
      function DeclareModuleExports(node) {
        this.word("declare");
        this.space();
        this.word("module");
        this.tokenChar(46);
        this.word("exports");
        this.print(node.typeAnnotation, node);
      }
      function DeclareTypeAlias(node) {
        this.word("declare");
        this.space();
        this.TypeAlias(node);
      }
      function DeclareOpaqueType(node, parent) {
        if (!isDeclareExportDeclaration(parent)) {
          this.word("declare");
          this.space();
        }
        this.OpaqueType(node);
      }
      function DeclareVariable(node, parent) {
        if (!isDeclareExportDeclaration(parent)) {
          this.word("declare");
          this.space();
        }
        this.word("var");
        this.space();
        this.print(node.id, node);
        this.print(node.id.typeAnnotation, node);
        this.semicolon();
      }
      function DeclareExportDeclaration(node) {
        this.word("declare");
        this.space();
        this.word("export");
        this.space();
        if (node.default) {
          this.word("default");
          this.space();
        }
        FlowExportDeclaration.call(this, node);
      }
      function DeclareExportAllDeclaration(node) {
        this.word("declare");
        this.space();
        _modules.ExportAllDeclaration.call(this, node);
      }
      function EnumDeclaration(node) {
        const {
          id,
          body
        } = node;
        this.word("enum");
        this.space();
        this.print(id, node);
        this.print(body, node);
      }
      function enumExplicitType(context, name, hasExplicitType) {
        if (hasExplicitType) {
          context.space();
          context.word("of");
          context.space();
          context.word(name);
        }
        context.space();
      }
      function enumBody(context, node) {
        const {
          members
        } = node;
        context.token("{");
        context.indent();
        context.newline();
        for (const member of members) {
          context.print(member, node);
          context.newline();
        }
        if (node.hasUnknownMembers) {
          context.token("...");
          context.newline();
        }
        context.dedent();
        context.token("}");
      }
      function EnumBooleanBody(node) {
        const {
          explicitType
        } = node;
        enumExplicitType(this, "boolean", explicitType);
        enumBody(this, node);
      }
      function EnumNumberBody(node) {
        const {
          explicitType
        } = node;
        enumExplicitType(this, "number", explicitType);
        enumBody(this, node);
      }
      function EnumStringBody(node) {
        const {
          explicitType
        } = node;
        enumExplicitType(this, "string", explicitType);
        enumBody(this, node);
      }
      function EnumSymbolBody(node) {
        enumExplicitType(this, "symbol", true);
        enumBody(this, node);
      }
      function EnumDefaultedMember(node) {
        const {
          id
        } = node;
        this.print(id, node);
        this.tokenChar(44);
      }
      function enumInitializedMember(context, node) {
        const {
          id,
          init
        } = node;
        context.print(id, node);
        context.space();
        context.token("=");
        context.space();
        context.print(init, node);
        context.token(",");
      }
      function EnumBooleanMember(node) {
        enumInitializedMember(this, node);
      }
      function EnumNumberMember(node) {
        enumInitializedMember(this, node);
      }
      function EnumStringMember(node) {
        enumInitializedMember(this, node);
      }
      function FlowExportDeclaration(node) {
        if (node.declaration) {
          const declar = node.declaration;
          this.print(declar, node);
          if (!isStatement(declar))
            this.semicolon();
        } else {
          this.tokenChar(123);
          if (node.specifiers.length) {
            this.space();
            this.printList(node.specifiers, node);
            this.space();
          }
          this.tokenChar(125);
          if (node.source) {
            this.space();
            this.word("from");
            this.space();
            this.print(node.source, node);
          }
          this.semicolon();
        }
      }
      function ExistsTypeAnnotation() {
        this.tokenChar(42);
      }
      function FunctionTypeAnnotation(node, parent) {
        this.print(node.typeParameters, node);
        this.tokenChar(40);
        if (node.this) {
          this.word("this");
          this.tokenChar(58);
          this.space();
          this.print(node.this.typeAnnotation, node);
          if (node.params.length || node.rest) {
            this.tokenChar(44);
            this.space();
          }
        }
        this.printList(node.params, node);
        if (node.rest) {
          if (node.params.length) {
            this.tokenChar(44);
            this.space();
          }
          this.token("...");
          this.print(node.rest, node);
        }
        this.tokenChar(41);
        const type = parent == null ? void 0 : parent.type;
        if (type != null && (type === "ObjectTypeCallProperty" || type === "ObjectTypeInternalSlot" || type === "DeclareFunction" || type === "ObjectTypeProperty" && parent.method)) {
          this.tokenChar(58);
        } else {
          this.space();
          this.token("=>");
        }
        this.space();
        this.print(node.returnType, node);
      }
      function FunctionTypeParam(node) {
        this.print(node.name, node);
        if (node.optional)
          this.tokenChar(63);
        if (node.name) {
          this.tokenChar(58);
          this.space();
        }
        this.print(node.typeAnnotation, node);
      }
      function InterfaceExtends(node) {
        this.print(node.id, node);
        this.print(node.typeParameters, node, true);
      }
      function _interfaceish(node) {
        var _node$extends;
        this.print(node.id, node);
        this.print(node.typeParameters, node);
        if ((_node$extends = node.extends) != null && _node$extends.length) {
          this.space();
          this.word("extends");
          this.space();
          this.printList(node.extends, node);
        }
        if (node.type === "DeclareClass") {
          var _node$mixins, _node$implements;
          if ((_node$mixins = node.mixins) != null && _node$mixins.length) {
            this.space();
            this.word("mixins");
            this.space();
            this.printList(node.mixins, node);
          }
          if ((_node$implements = node.implements) != null && _node$implements.length) {
            this.space();
            this.word("implements");
            this.space();
            this.printList(node.implements, node);
          }
        }
        this.space();
        this.print(node.body, node);
      }
      function _variance(node) {
        var _node$variance;
        const kind = (_node$variance = node.variance) == null ? void 0 : _node$variance.kind;
        if (kind != null) {
          if (kind === "plus") {
            this.tokenChar(43);
          } else if (kind === "minus") {
            this.tokenChar(45);
          }
        }
      }
      function InterfaceDeclaration(node) {
        this.word("interface");
        this.space();
        this._interfaceish(node);
      }
      function andSeparator() {
        this.space();
        this.tokenChar(38);
        this.space();
      }
      function InterfaceTypeAnnotation(node) {
        var _node$extends2;
        this.word("interface");
        if ((_node$extends2 = node.extends) != null && _node$extends2.length) {
          this.space();
          this.word("extends");
          this.space();
          this.printList(node.extends, node);
        }
        this.space();
        this.print(node.body, node);
      }
      function IntersectionTypeAnnotation(node) {
        this.printJoin(node.types, node, {
          separator: andSeparator
        });
      }
      function MixedTypeAnnotation() {
        this.word("mixed");
      }
      function EmptyTypeAnnotation() {
        this.word("empty");
      }
      function NullableTypeAnnotation(node) {
        this.tokenChar(63);
        this.print(node.typeAnnotation, node);
      }
      function NumberTypeAnnotation() {
        this.word("number");
      }
      function StringTypeAnnotation() {
        this.word("string");
      }
      function ThisTypeAnnotation() {
        this.word("this");
      }
      function TupleTypeAnnotation(node) {
        this.tokenChar(91);
        this.printList(node.types, node);
        this.tokenChar(93);
      }
      function TypeofTypeAnnotation(node) {
        this.word("typeof");
        this.space();
        this.print(node.argument, node);
      }
      function TypeAlias(node) {
        this.word("type");
        this.space();
        this.print(node.id, node);
        this.print(node.typeParameters, node);
        this.space();
        this.tokenChar(61);
        this.space();
        this.print(node.right, node);
        this.semicolon();
      }
      function TypeAnnotation(node) {
        this.tokenChar(58);
        this.space();
        if (node.optional)
          this.tokenChar(63);
        this.print(node.typeAnnotation, node);
      }
      function TypeParameterInstantiation(node) {
        this.tokenChar(60);
        this.printList(node.params, node, {});
        this.tokenChar(62);
      }
      function TypeParameter(node) {
        this._variance(node);
        this.word(node.name);
        if (node.bound) {
          this.print(node.bound, node);
        }
        if (node.default) {
          this.space();
          this.tokenChar(61);
          this.space();
          this.print(node.default, node);
        }
      }
      function OpaqueType(node) {
        this.word("opaque");
        this.space();
        this.word("type");
        this.space();
        this.print(node.id, node);
        this.print(node.typeParameters, node);
        if (node.supertype) {
          this.tokenChar(58);
          this.space();
          this.print(node.supertype, node);
        }
        if (node.impltype) {
          this.space();
          this.tokenChar(61);
          this.space();
          this.print(node.impltype, node);
        }
        this.semicolon();
      }
      function ObjectTypeAnnotation(node) {
        if (node.exact) {
          this.token("{|");
        } else {
          this.tokenChar(123);
        }
        const props = [...node.properties, ...node.callProperties || [], ...node.indexers || [], ...node.internalSlots || []];
        if (props.length) {
          this.newline();
          this.space();
          this.printJoin(props, node, {
            addNewlines(leading) {
              if (leading && !props[0])
                return 1;
            },
            indent: true,
            statement: true,
            iterator: () => {
              if (props.length !== 1 || node.inexact) {
                this.tokenChar(44);
                this.space();
              }
            }
          });
          this.space();
        }
        if (node.inexact) {
          this.indent();
          this.token("...");
          if (props.length) {
            this.newline();
          }
          this.dedent();
        }
        if (node.exact) {
          this.token("|}");
        } else {
          this.tokenChar(125);
        }
      }
      function ObjectTypeInternalSlot(node) {
        if (node.static) {
          this.word("static");
          this.space();
        }
        this.tokenChar(91);
        this.tokenChar(91);
        this.print(node.id, node);
        this.tokenChar(93);
        this.tokenChar(93);
        if (node.optional)
          this.tokenChar(63);
        if (!node.method) {
          this.tokenChar(58);
          this.space();
        }
        this.print(node.value, node);
      }
      function ObjectTypeCallProperty(node) {
        if (node.static) {
          this.word("static");
          this.space();
        }
        this.print(node.value, node);
      }
      function ObjectTypeIndexer(node) {
        if (node.static) {
          this.word("static");
          this.space();
        }
        this._variance(node);
        this.tokenChar(91);
        if (node.id) {
          this.print(node.id, node);
          this.tokenChar(58);
          this.space();
        }
        this.print(node.key, node);
        this.tokenChar(93);
        this.tokenChar(58);
        this.space();
        this.print(node.value, node);
      }
      function ObjectTypeProperty(node) {
        if (node.proto) {
          this.word("proto");
          this.space();
        }
        if (node.static) {
          this.word("static");
          this.space();
        }
        if (node.kind === "get" || node.kind === "set") {
          this.word(node.kind);
          this.space();
        }
        this._variance(node);
        this.print(node.key, node);
        if (node.optional)
          this.tokenChar(63);
        if (!node.method) {
          this.tokenChar(58);
          this.space();
        }
        this.print(node.value, node);
      }
      function ObjectTypeSpreadProperty(node) {
        this.token("...");
        this.print(node.argument, node);
      }
      function QualifiedTypeIdentifier(node) {
        this.print(node.qualification, node);
        this.tokenChar(46);
        this.print(node.id, node);
      }
      function SymbolTypeAnnotation() {
        this.word("symbol");
      }
      function orSeparator() {
        this.space();
        this.tokenChar(124);
        this.space();
      }
      function UnionTypeAnnotation(node) {
        this.printJoin(node.types, node, {
          separator: orSeparator
        });
      }
      function TypeCastExpression(node) {
        this.tokenChar(40);
        this.print(node.expression, node);
        this.print(node.typeAnnotation, node);
        this.tokenChar(41);
      }
      function Variance(node) {
        if (node.kind === "plus") {
          this.tokenChar(43);
        } else {
          this.tokenChar(45);
        }
      }
      function VoidTypeAnnotation() {
        this.word("void");
      }
      function IndexedAccessType(node) {
        this.print(node.objectType, node, true);
        this.tokenChar(91);
        this.print(node.indexType, node);
        this.tokenChar(93);
      }
      function OptionalIndexedAccessType(node) {
        this.print(node.objectType, node);
        if (node.optional) {
          this.token("?.");
        }
        this.tokenChar(91);
        this.print(node.indexType, node);
        this.tokenChar(93);
      }
    }
  });

  // node_modules/@babel/generator/lib/generators/base.js
  var require_base = __commonJS({
    "node_modules/@babel/generator/lib/generators/base.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.BlockStatement = BlockStatement;
      exports.Directive = Directive;
      exports.DirectiveLiteral = DirectiveLiteral;
      exports.File = File;
      exports.InterpreterDirective = InterpreterDirective;
      exports.Placeholder = Placeholder;
      exports.Program = Program;
      function File(node) {
        if (node.program) {
          this.print(node.program.interpreter, node);
        }
        this.print(node.program, node);
      }
      function Program(node) {
        var _node$directives;
        this.noIndentInnerCommentsHere();
        this.printInnerComments();
        const directivesLen = (_node$directives = node.directives) == null ? void 0 : _node$directives.length;
        if (directivesLen) {
          var _node$directives$trai;
          const newline = node.body.length ? 2 : 1;
          this.printSequence(node.directives, node, {
            trailingCommentsLineOffset: newline
          });
          if (!((_node$directives$trai = node.directives[directivesLen - 1].trailingComments) != null && _node$directives$trai.length)) {
            this.newline(newline);
          }
        }
        this.printSequence(node.body, node);
      }
      function BlockStatement(node) {
        var _node$directives2;
        this.tokenChar(123);
        const directivesLen = (_node$directives2 = node.directives) == null ? void 0 : _node$directives2.length;
        if (directivesLen) {
          var _node$directives$trai2;
          const newline = node.body.length ? 2 : 1;
          this.printSequence(node.directives, node, {
            indent: true,
            trailingCommentsLineOffset: newline
          });
          if (!((_node$directives$trai2 = node.directives[directivesLen - 1].trailingComments) != null && _node$directives$trai2.length)) {
            this.newline(newline);
          }
        }
        this.printSequence(node.body, node, {
          indent: true
        });
        this.rightBrace(node);
      }
      function Directive(node) {
        this.print(node.value, node);
        this.semicolon();
      }
      var unescapedSingleQuoteRE = /(?:^|[^\\])(?:\\\\)*'/;
      var unescapedDoubleQuoteRE = /(?:^|[^\\])(?:\\\\)*"/;
      function DirectiveLiteral(node) {
        const raw = this.getPossibleRaw(node);
        if (!this.format.minified && raw !== void 0) {
          this.token(raw);
          return;
        }
        const {
          value
        } = node;
        if (!unescapedDoubleQuoteRE.test(value)) {
          this.token(`"${value}"`);
        } else if (!unescapedSingleQuoteRE.test(value)) {
          this.token(`'${value}'`);
        } else {
          throw new Error("Malformed AST: it is not possible to print a directive containing both unescaped single and double quotes.");
        }
      }
      function InterpreterDirective(node) {
        this.token(`#!${node.value}`);
        this.newline(1, true);
      }
      function Placeholder(node) {
        this.token("%%");
        this.print(node.name);
        this.token("%%");
        if (node.expectedNode === "Statement") {
          this.semicolon();
        }
      }
    }
  });

  // node_modules/@babel/generator/lib/generators/jsx.js
  var require_jsx2 = __commonJS({
    "node_modules/@babel/generator/lib/generators/jsx.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.JSXAttribute = JSXAttribute;
      exports.JSXClosingElement = JSXClosingElement;
      exports.JSXClosingFragment = JSXClosingFragment;
      exports.JSXElement = JSXElement;
      exports.JSXEmptyExpression = JSXEmptyExpression;
      exports.JSXExpressionContainer = JSXExpressionContainer;
      exports.JSXFragment = JSXFragment;
      exports.JSXIdentifier = JSXIdentifier;
      exports.JSXMemberExpression = JSXMemberExpression;
      exports.JSXNamespacedName = JSXNamespacedName;
      exports.JSXOpeningElement = JSXOpeningElement;
      exports.JSXOpeningFragment = JSXOpeningFragment;
      exports.JSXSpreadAttribute = JSXSpreadAttribute;
      exports.JSXSpreadChild = JSXSpreadChild;
      exports.JSXText = JSXText;
      function JSXAttribute(node) {
        this.print(node.name, node);
        if (node.value) {
          this.tokenChar(61);
          this.print(node.value, node);
        }
      }
      function JSXIdentifier(node) {
        this.word(node.name);
      }
      function JSXNamespacedName(node) {
        this.print(node.namespace, node);
        this.tokenChar(58);
        this.print(node.name, node);
      }
      function JSXMemberExpression(node) {
        this.print(node.object, node);
        this.tokenChar(46);
        this.print(node.property, node);
      }
      function JSXSpreadAttribute(node) {
        this.tokenChar(123);
        this.token("...");
        this.print(node.argument, node);
        this.tokenChar(125);
      }
      function JSXExpressionContainer(node) {
        this.tokenChar(123);
        this.print(node.expression, node);
        this.tokenChar(125);
      }
      function JSXSpreadChild(node) {
        this.tokenChar(123);
        this.token("...");
        this.print(node.expression, node);
        this.tokenChar(125);
      }
      function JSXText(node) {
        const raw = this.getPossibleRaw(node);
        if (raw !== void 0) {
          this.token(raw, true);
        } else {
          this.token(node.value, true);
        }
      }
      function JSXElement(node) {
        const open = node.openingElement;
        this.print(open, node);
        if (open.selfClosing)
          return;
        this.indent();
        for (const child of node.children) {
          this.print(child, node);
        }
        this.dedent();
        this.print(node.closingElement, node);
      }
      function spaceSeparator() {
        this.space();
      }
      function JSXOpeningElement(node) {
        this.tokenChar(60);
        this.print(node.name, node);
        this.print(node.typeParameters, node);
        if (node.attributes.length > 0) {
          this.space();
          this.printJoin(node.attributes, node, {
            separator: spaceSeparator
          });
        }
        if (node.selfClosing) {
          this.space();
          this.token("/>");
        } else {
          this.tokenChar(62);
        }
      }
      function JSXClosingElement(node) {
        this.token("</");
        this.print(node.name, node);
        this.tokenChar(62);
      }
      function JSXEmptyExpression() {
        this.printInnerComments();
      }
      function JSXFragment(node) {
        this.print(node.openingFragment, node);
        this.indent();
        for (const child of node.children) {
          this.print(child, node);
        }
        this.dedent();
        this.print(node.closingFragment, node);
      }
      function JSXOpeningFragment() {
        this.tokenChar(60);
        this.tokenChar(62);
      }
      function JSXClosingFragment() {
        this.token("</");
        this.tokenChar(62);
      }
    }
  });

  // node_modules/@babel/generator/lib/generators/typescript.js
  var require_typescript2 = __commonJS({
    "node_modules/@babel/generator/lib/generators/typescript.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.TSAnyKeyword = TSAnyKeyword;
      exports.TSArrayType = TSArrayType;
      exports.TSSatisfiesExpression = exports.TSAsExpression = TSTypeExpression;
      exports.TSBigIntKeyword = TSBigIntKeyword;
      exports.TSBooleanKeyword = TSBooleanKeyword;
      exports.TSCallSignatureDeclaration = TSCallSignatureDeclaration;
      exports.TSConditionalType = TSConditionalType;
      exports.TSConstructSignatureDeclaration = TSConstructSignatureDeclaration;
      exports.TSConstructorType = TSConstructorType;
      exports.TSDeclareFunction = TSDeclareFunction;
      exports.TSDeclareMethod = TSDeclareMethod;
      exports.TSEnumDeclaration = TSEnumDeclaration;
      exports.TSEnumMember = TSEnumMember;
      exports.TSExportAssignment = TSExportAssignment;
      exports.TSExpressionWithTypeArguments = TSExpressionWithTypeArguments;
      exports.TSExternalModuleReference = TSExternalModuleReference;
      exports.TSFunctionType = TSFunctionType;
      exports.TSImportEqualsDeclaration = TSImportEqualsDeclaration;
      exports.TSImportType = TSImportType;
      exports.TSIndexSignature = TSIndexSignature;
      exports.TSIndexedAccessType = TSIndexedAccessType;
      exports.TSInferType = TSInferType;
      exports.TSInstantiationExpression = TSInstantiationExpression;
      exports.TSInterfaceBody = TSInterfaceBody;
      exports.TSInterfaceDeclaration = TSInterfaceDeclaration;
      exports.TSIntersectionType = TSIntersectionType;
      exports.TSIntrinsicKeyword = TSIntrinsicKeyword;
      exports.TSLiteralType = TSLiteralType;
      exports.TSMappedType = TSMappedType;
      exports.TSMethodSignature = TSMethodSignature;
      exports.TSModuleBlock = TSModuleBlock;
      exports.TSModuleDeclaration = TSModuleDeclaration;
      exports.TSNamedTupleMember = TSNamedTupleMember;
      exports.TSNamespaceExportDeclaration = TSNamespaceExportDeclaration;
      exports.TSNeverKeyword = TSNeverKeyword;
      exports.TSNonNullExpression = TSNonNullExpression;
      exports.TSNullKeyword = TSNullKeyword;
      exports.TSNumberKeyword = TSNumberKeyword;
      exports.TSObjectKeyword = TSObjectKeyword;
      exports.TSOptionalType = TSOptionalType;
      exports.TSParameterProperty = TSParameterProperty;
      exports.TSParenthesizedType = TSParenthesizedType;
      exports.TSPropertySignature = TSPropertySignature;
      exports.TSQualifiedName = TSQualifiedName;
      exports.TSRestType = TSRestType;
      exports.TSStringKeyword = TSStringKeyword;
      exports.TSSymbolKeyword = TSSymbolKeyword;
      exports.TSThisType = TSThisType;
      exports.TSTupleType = TSTupleType;
      exports.TSTypeAliasDeclaration = TSTypeAliasDeclaration;
      exports.TSTypeAnnotation = TSTypeAnnotation;
      exports.TSTypeAssertion = TSTypeAssertion;
      exports.TSTypeLiteral = TSTypeLiteral;
      exports.TSTypeOperator = TSTypeOperator;
      exports.TSTypeParameter = TSTypeParameter;
      exports.TSTypeParameterDeclaration = exports.TSTypeParameterInstantiation = TSTypeParameterInstantiation;
      exports.TSTypePredicate = TSTypePredicate;
      exports.TSTypeQuery = TSTypeQuery;
      exports.TSTypeReference = TSTypeReference;
      exports.TSUndefinedKeyword = TSUndefinedKeyword;
      exports.TSUnionType = TSUnionType;
      exports.TSUnknownKeyword = TSUnknownKeyword;
      exports.TSVoidKeyword = TSVoidKeyword;
      exports.tsPrintClassMemberModifiers = tsPrintClassMemberModifiers;
      exports.tsPrintFunctionOrConstructorType = tsPrintFunctionOrConstructorType;
      exports.tsPrintPropertyOrMethodName = tsPrintPropertyOrMethodName;
      exports.tsPrintSignatureDeclarationBase = tsPrintSignatureDeclarationBase;
      exports.tsPrintTypeLiteralOrInterfaceBody = tsPrintTypeLiteralOrInterfaceBody;
      function TSTypeAnnotation(node) {
        this.tokenChar(58);
        this.space();
        if (node.optional)
          this.tokenChar(63);
        this.print(node.typeAnnotation, node);
      }
      function TSTypeParameterInstantiation(node, parent) {
        this.tokenChar(60);
        this.printList(node.params, node, {});
        if (parent.type === "ArrowFunctionExpression" && node.params.length === 1) {
          this.tokenChar(44);
        }
        this.tokenChar(62);
      }
      function TSTypeParameter(node) {
        if (node.in) {
          this.word("in");
          this.space();
        }
        if (node.out) {
          this.word("out");
          this.space();
        }
        this.word(node.name);
        if (node.constraint) {
          this.space();
          this.word("extends");
          this.space();
          this.print(node.constraint, node);
        }
        if (node.default) {
          this.space();
          this.tokenChar(61);
          this.space();
          this.print(node.default, node);
        }
      }
      function TSParameterProperty(node) {
        if (node.accessibility) {
          this.word(node.accessibility);
          this.space();
        }
        if (node.readonly) {
          this.word("readonly");
          this.space();
        }
        this._param(node.parameter);
      }
      function TSDeclareFunction(node, parent) {
        if (node.declare) {
          this.word("declare");
          this.space();
        }
        this._functionHead(node, parent);
        this.tokenChar(59);
      }
      function TSDeclareMethod(node) {
        this._classMethodHead(node);
        this.tokenChar(59);
      }
      function TSQualifiedName(node) {
        this.print(node.left, node);
        this.tokenChar(46);
        this.print(node.right, node);
      }
      function TSCallSignatureDeclaration(node) {
        this.tsPrintSignatureDeclarationBase(node);
        this.tokenChar(59);
      }
      function TSConstructSignatureDeclaration(node) {
        this.word("new");
        this.space();
        this.tsPrintSignatureDeclarationBase(node);
        this.tokenChar(59);
      }
      function TSPropertySignature(node) {
        const {
          readonly
        } = node;
        if (readonly) {
          this.word("readonly");
          this.space();
        }
        this.tsPrintPropertyOrMethodName(node);
        this.print(node.typeAnnotation, node);
        this.tokenChar(59);
      }
      function tsPrintPropertyOrMethodName(node) {
        if (node.computed) {
          this.tokenChar(91);
        }
        this.print(node.key, node);
        if (node.computed) {
          this.tokenChar(93);
        }
        if (node.optional) {
          this.tokenChar(63);
        }
      }
      function TSMethodSignature(node) {
        const {
          kind
        } = node;
        if (kind === "set" || kind === "get") {
          this.word(kind);
          this.space();
        }
        this.tsPrintPropertyOrMethodName(node);
        this.tsPrintSignatureDeclarationBase(node);
        this.tokenChar(59);
      }
      function TSIndexSignature(node) {
        const {
          readonly,
          static: isStatic
        } = node;
        if (isStatic) {
          this.word("static");
          this.space();
        }
        if (readonly) {
          this.word("readonly");
          this.space();
        }
        this.tokenChar(91);
        this._parameters(node.parameters, node);
        this.tokenChar(93);
        this.print(node.typeAnnotation, node);
        this.tokenChar(59);
      }
      function TSAnyKeyword() {
        this.word("any");
      }
      function TSBigIntKeyword() {
        this.word("bigint");
      }
      function TSUnknownKeyword() {
        this.word("unknown");
      }
      function TSNumberKeyword() {
        this.word("number");
      }
      function TSObjectKeyword() {
        this.word("object");
      }
      function TSBooleanKeyword() {
        this.word("boolean");
      }
      function TSStringKeyword() {
        this.word("string");
      }
      function TSSymbolKeyword() {
        this.word("symbol");
      }
      function TSVoidKeyword() {
        this.word("void");
      }
      function TSUndefinedKeyword() {
        this.word("undefined");
      }
      function TSNullKeyword() {
        this.word("null");
      }
      function TSNeverKeyword() {
        this.word("never");
      }
      function TSIntrinsicKeyword() {
        this.word("intrinsic");
      }
      function TSThisType() {
        this.word("this");
      }
      function TSFunctionType(node) {
        this.tsPrintFunctionOrConstructorType(node);
      }
      function TSConstructorType(node) {
        if (node.abstract) {
          this.word("abstract");
          this.space();
        }
        this.word("new");
        this.space();
        this.tsPrintFunctionOrConstructorType(node);
      }
      function tsPrintFunctionOrConstructorType(node) {
        const {
          typeParameters
        } = node;
        const parameters = node.parameters;
        this.print(typeParameters, node);
        this.tokenChar(40);
        this._parameters(parameters, node);
        this.tokenChar(41);
        this.space();
        this.token("=>");
        this.space();
        const returnType = node.typeAnnotation;
        this.print(returnType.typeAnnotation, node);
      }
      function TSTypeReference(node) {
        this.print(node.typeName, node, true);
        this.print(node.typeParameters, node, true);
      }
      function TSTypePredicate(node) {
        if (node.asserts) {
          this.word("asserts");
          this.space();
        }
        this.print(node.parameterName);
        if (node.typeAnnotation) {
          this.space();
          this.word("is");
          this.space();
          this.print(node.typeAnnotation.typeAnnotation);
        }
      }
      function TSTypeQuery(node) {
        this.word("typeof");
        this.space();
        this.print(node.exprName);
        if (node.typeParameters) {
          this.print(node.typeParameters, node);
        }
      }
      function TSTypeLiteral(node) {
        this.tsPrintTypeLiteralOrInterfaceBody(node.members, node);
      }
      function tsPrintTypeLiteralOrInterfaceBody(members, node) {
        tsPrintBraced(this, members, node);
      }
      function tsPrintBraced(printer, members, node) {
        printer.token("{");
        if (members.length) {
          printer.indent();
          printer.newline();
          for (const member of members) {
            printer.print(member, node);
            printer.newline();
          }
          printer.dedent();
        }
        printer.rightBrace(node);
      }
      function TSArrayType(node) {
        this.print(node.elementType, node, true);
        this.token("[]");
      }
      function TSTupleType(node) {
        this.tokenChar(91);
        this.printList(node.elementTypes, node);
        this.tokenChar(93);
      }
      function TSOptionalType(node) {
        this.print(node.typeAnnotation, node);
        this.tokenChar(63);
      }
      function TSRestType(node) {
        this.token("...");
        this.print(node.typeAnnotation, node);
      }
      function TSNamedTupleMember(node) {
        this.print(node.label, node);
        if (node.optional)
          this.tokenChar(63);
        this.tokenChar(58);
        this.space();
        this.print(node.elementType, node);
      }
      function TSUnionType(node) {
        tsPrintUnionOrIntersectionType(this, node, "|");
      }
      function TSIntersectionType(node) {
        tsPrintUnionOrIntersectionType(this, node, "&");
      }
      function tsPrintUnionOrIntersectionType(printer, node, sep) {
        printer.printJoin(node.types, node, {
          separator() {
            this.space();
            this.token(sep);
            this.space();
          }
        });
      }
      function TSConditionalType(node) {
        this.print(node.checkType);
        this.space();
        this.word("extends");
        this.space();
        this.print(node.extendsType);
        this.space();
        this.tokenChar(63);
        this.space();
        this.print(node.trueType);
        this.space();
        this.tokenChar(58);
        this.space();
        this.print(node.falseType);
      }
      function TSInferType(node) {
        this.token("infer");
        this.space();
        this.print(node.typeParameter);
      }
      function TSParenthesizedType(node) {
        this.tokenChar(40);
        this.print(node.typeAnnotation, node);
        this.tokenChar(41);
      }
      function TSTypeOperator(node) {
        this.word(node.operator);
        this.space();
        this.print(node.typeAnnotation, node);
      }
      function TSIndexedAccessType(node) {
        this.print(node.objectType, node, true);
        this.tokenChar(91);
        this.print(node.indexType, node);
        this.tokenChar(93);
      }
      function TSMappedType(node) {
        const {
          nameType,
          optional,
          readonly,
          typeParameter
        } = node;
        this.tokenChar(123);
        this.space();
        if (readonly) {
          tokenIfPlusMinus(this, readonly);
          this.word("readonly");
          this.space();
        }
        this.tokenChar(91);
        this.word(typeParameter.name);
        this.space();
        this.word("in");
        this.space();
        this.print(typeParameter.constraint, typeParameter);
        if (nameType) {
          this.space();
          this.word("as");
          this.space();
          this.print(nameType, node);
        }
        this.tokenChar(93);
        if (optional) {
          tokenIfPlusMinus(this, optional);
          this.tokenChar(63);
        }
        this.tokenChar(58);
        this.space();
        this.print(node.typeAnnotation, node);
        this.space();
        this.tokenChar(125);
      }
      function tokenIfPlusMinus(self2, tok) {
        if (tok !== true) {
          self2.token(tok);
        }
      }
      function TSLiteralType(node) {
        this.print(node.literal, node);
      }
      function TSExpressionWithTypeArguments(node) {
        this.print(node.expression, node);
        this.print(node.typeParameters, node);
      }
      function TSInterfaceDeclaration(node) {
        const {
          declare,
          id,
          typeParameters,
          extends: extendz,
          body
        } = node;
        if (declare) {
          this.word("declare");
          this.space();
        }
        this.word("interface");
        this.space();
        this.print(id, node);
        this.print(typeParameters, node);
        if (extendz != null && extendz.length) {
          this.space();
          this.word("extends");
          this.space();
          this.printList(extendz, node);
        }
        this.space();
        this.print(body, node);
      }
      function TSInterfaceBody(node) {
        this.tsPrintTypeLiteralOrInterfaceBody(node.body, node);
      }
      function TSTypeAliasDeclaration(node) {
        const {
          declare,
          id,
          typeParameters,
          typeAnnotation
        } = node;
        if (declare) {
          this.word("declare");
          this.space();
        }
        this.word("type");
        this.space();
        this.print(id, node);
        this.print(typeParameters, node);
        this.space();
        this.tokenChar(61);
        this.space();
        this.print(typeAnnotation, node);
        this.tokenChar(59);
      }
      function TSTypeExpression(node) {
        var _expression$trailingC;
        const {
          type,
          expression,
          typeAnnotation
        } = node;
        const forceParens = !!((_expression$trailingC = expression.trailingComments) != null && _expression$trailingC.length);
        this.print(expression, node, true, void 0, forceParens);
        this.space();
        this.word(type === "TSAsExpression" ? "as" : "satisfies");
        this.space();
        this.print(typeAnnotation, node);
      }
      function TSTypeAssertion(node) {
        const {
          typeAnnotation,
          expression
        } = node;
        this.tokenChar(60);
        this.print(typeAnnotation, node);
        this.tokenChar(62);
        this.space();
        this.print(expression, node);
      }
      function TSInstantiationExpression(node) {
        this.print(node.expression, node);
        this.print(node.typeParameters, node);
      }
      function TSEnumDeclaration(node) {
        const {
          declare,
          const: isConst,
          id,
          members
        } = node;
        if (declare) {
          this.word("declare");
          this.space();
        }
        if (isConst) {
          this.word("const");
          this.space();
        }
        this.word("enum");
        this.space();
        this.print(id, node);
        this.space();
        tsPrintBraced(this, members, node);
      }
      function TSEnumMember(node) {
        const {
          id,
          initializer
        } = node;
        this.print(id, node);
        if (initializer) {
          this.space();
          this.tokenChar(61);
          this.space();
          this.print(initializer, node);
        }
        this.tokenChar(44);
      }
      function TSModuleDeclaration(node) {
        const {
          declare,
          id
        } = node;
        if (declare) {
          this.word("declare");
          this.space();
        }
        if (!node.global) {
          this.word(id.type === "Identifier" ? "namespace" : "module");
          this.space();
        }
        this.print(id, node);
        if (!node.body) {
          this.tokenChar(59);
          return;
        }
        let body = node.body;
        while (body.type === "TSModuleDeclaration") {
          this.tokenChar(46);
          this.print(body.id, body);
          body = body.body;
        }
        this.space();
        this.print(body, node);
      }
      function TSModuleBlock(node) {
        tsPrintBraced(this, node.body, node);
      }
      function TSImportType(node) {
        const {
          argument,
          qualifier,
          typeParameters
        } = node;
        this.word("import");
        this.tokenChar(40);
        this.print(argument, node);
        this.tokenChar(41);
        if (qualifier) {
          this.tokenChar(46);
          this.print(qualifier, node);
        }
        if (typeParameters) {
          this.print(typeParameters, node);
        }
      }
      function TSImportEqualsDeclaration(node) {
        const {
          isExport,
          id,
          moduleReference
        } = node;
        if (isExport) {
          this.word("export");
          this.space();
        }
        this.word("import");
        this.space();
        this.print(id, node);
        this.space();
        this.tokenChar(61);
        this.space();
        this.print(moduleReference, node);
        this.tokenChar(59);
      }
      function TSExternalModuleReference(node) {
        this.token("require(");
        this.print(node.expression, node);
        this.tokenChar(41);
      }
      function TSNonNullExpression(node) {
        this.print(node.expression, node);
        this.tokenChar(33);
      }
      function TSExportAssignment(node) {
        this.word("export");
        this.space();
        this.tokenChar(61);
        this.space();
        this.print(node.expression, node);
        this.tokenChar(59);
      }
      function TSNamespaceExportDeclaration(node) {
        this.word("export");
        this.space();
        this.word("as");
        this.space();
        this.word("namespace");
        this.space();
        this.print(node.id, node);
      }
      function tsPrintSignatureDeclarationBase(node) {
        const {
          typeParameters
        } = node;
        const parameters = node.parameters;
        this.print(typeParameters, node);
        this.tokenChar(40);
        this._parameters(parameters, node);
        this.tokenChar(41);
        const returnType = node.typeAnnotation;
        this.print(returnType, node);
      }
      function tsPrintClassMemberModifiers(node) {
        const isField = node.type === "ClassAccessorProperty" || node.type === "ClassProperty";
        if (isField && node.declare) {
          this.word("declare");
          this.space();
        }
        if (node.accessibility) {
          this.word(node.accessibility);
          this.space();
        }
        if (node.static) {
          this.word("static");
          this.space();
        }
        if (node.override) {
          this.word("override");
          this.space();
        }
        if (node.abstract) {
          this.word("abstract");
          this.space();
        }
        if (isField && node.readonly) {
          this.word("readonly");
          this.space();
        }
      }
    }
  });

  // node_modules/@babel/generator/lib/generators/index.js
  var require_generators = __commonJS({
    "node_modules/@babel/generator/lib/generators/index.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _templateLiterals = require_template_literals();
      Object.keys(_templateLiterals).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (key in exports && exports[key] === _templateLiterals[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _templateLiterals[key];
          }
        });
      });
      var _expressions = require_expressions();
      Object.keys(_expressions).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (key in exports && exports[key] === _expressions[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _expressions[key];
          }
        });
      });
      var _statements = require_statements();
      Object.keys(_statements).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (key in exports && exports[key] === _statements[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _statements[key];
          }
        });
      });
      var _classes = require_classes();
      Object.keys(_classes).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (key in exports && exports[key] === _classes[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _classes[key];
          }
        });
      });
      var _methods = require_methods();
      Object.keys(_methods).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (key in exports && exports[key] === _methods[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _methods[key];
          }
        });
      });
      var _modules = require_modules();
      Object.keys(_modules).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (key in exports && exports[key] === _modules[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _modules[key];
          }
        });
      });
      var _types = require_types();
      Object.keys(_types).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (key in exports && exports[key] === _types[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _types[key];
          }
        });
      });
      var _flow = require_flow2();
      Object.keys(_flow).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (key in exports && exports[key] === _flow[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _flow[key];
          }
        });
      });
      var _base = require_base();
      Object.keys(_base).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (key in exports && exports[key] === _base[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _base[key];
          }
        });
      });
      var _jsx = require_jsx2();
      Object.keys(_jsx).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (key in exports && exports[key] === _jsx[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _jsx[key];
          }
        });
      });
      var _typescript = require_typescript2();
      Object.keys(_typescript).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (key in exports && exports[key] === _typescript[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _typescript[key];
          }
        });
      });
    }
  });

  // node_modules/@babel/generator/lib/printer.js
  var require_printer = __commonJS({
    "node_modules/@babel/generator/lib/printer.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _buffer = require_buffer2();
      var n = require_node();
      var _t = require_lib3();
      var generatorFunctions = require_generators();
      var {
        isFunction,
        isStatement,
        isClassBody,
        isTSInterfaceBody,
        isTSEnumDeclaration
      } = _t;
      var SCIENTIFIC_NOTATION = /e/i;
      var ZERO_DECIMAL_INTEGER = /\.0+$/;
      var HAS_NEWLINE = /[\n\r\u2028\u2029]/;
      var HAS_NEWLINE_OR_BlOCK_COMMENT_END = /[\n\r\u2028\u2029]|\*\//;
      var {
        needsParens
      } = n;
      var Printer = class {
        constructor(format, map) {
          this.inForStatementInitCounter = 0;
          this._printStack = [];
          this._indent = 0;
          this._indentRepeat = 0;
          this._insideAux = false;
          this._parenPushNewlineState = null;
          this._noLineTerminator = false;
          this._printAuxAfterOnNextUserNode = false;
          this._printedComments = /* @__PURE__ */ new Set();
          this._endsWithInteger = false;
          this._endsWithWord = false;
          this._lastCommentLine = 0;
          this._endsWithInnerRaw = false;
          this._indentInnerComments = true;
          this.format = format;
          this._indentRepeat = format.indent.style.length;
          this._inputMap = map == null ? void 0 : map._inputMap;
          this._buf = new _buffer.default(map, format.indent.style[0]);
        }
        generate(ast) {
          this.print(ast);
          this._maybeAddAuxComment();
          return this._buf.get();
        }
        indent() {
          if (this.format.compact || this.format.concise)
            return;
          this._indent++;
        }
        dedent() {
          if (this.format.compact || this.format.concise)
            return;
          this._indent--;
        }
        semicolon(force = false) {
          this._maybeAddAuxComment();
          if (force) {
            this._appendChar(59);
          } else {
            this._queue(59);
          }
          this._noLineTerminator = false;
        }
        rightBrace(node) {
          if (this.format.minified) {
            this._buf.removeLastSemicolon();
          }
          this.sourceWithOffset("end", node.loc, -1);
          this.tokenChar(125);
        }
        rightParens(node) {
          this.sourceWithOffset("end", node.loc, -1);
          this.tokenChar(41);
        }
        space(force = false) {
          if (this.format.compact)
            return;
          if (force) {
            this._space();
          } else if (this._buf.hasContent()) {
            const lastCp = this.getLastChar();
            if (lastCp !== 32 && lastCp !== 10) {
              this._space();
            }
          }
        }
        word(str, noLineTerminatorAfter = false) {
          this._maybePrintInnerComments();
          if (this._endsWithWord || str.charCodeAt(0) === 47 && this.endsWith(47)) {
            this._space();
          }
          this._maybeAddAuxComment();
          this._append(str, false);
          this._endsWithWord = true;
          this._noLineTerminator = noLineTerminatorAfter;
        }
        number(str, number) {
          function isNonDecimalLiteral(str2) {
            if (str2.length > 2 && str2.charCodeAt(0) === 48) {
              const secondChar = str2.charCodeAt(1);
              return secondChar === 98 || secondChar === 111 || secondChar === 120;
            }
            return false;
          }
          this.word(str);
          this._endsWithInteger = Number.isInteger(number) && !isNonDecimalLiteral(str) && !SCIENTIFIC_NOTATION.test(str) && !ZERO_DECIMAL_INTEGER.test(str) && str.charCodeAt(str.length - 1) !== 46;
        }
        token(str, maybeNewline = false) {
          this._maybePrintInnerComments();
          const lastChar2 = this.getLastChar();
          const strFirst = str.charCodeAt(0);
          if (lastChar2 === 33 && (str === "--" || strFirst === 61) || strFirst === 43 && lastChar2 === 43 || strFirst === 45 && lastChar2 === 45 || strFirst === 46 && this._endsWithInteger) {
            this._space();
          }
          this._maybeAddAuxComment();
          this._append(str, maybeNewline);
          this._noLineTerminator = false;
        }
        tokenChar(char) {
          this._maybePrintInnerComments();
          const lastChar2 = this.getLastChar();
          if (char === 43 && lastChar2 === 43 || char === 45 && lastChar2 === 45 || char === 46 && this._endsWithInteger) {
            this._space();
          }
          this._maybeAddAuxComment();
          this._appendChar(char);
          this._noLineTerminator = false;
        }
        newline(i = 1, force) {
          if (i <= 0)
            return;
          if (!force) {
            if (this.format.retainLines || this.format.compact)
              return;
            if (this.format.concise) {
              this.space();
              return;
            }
          }
          if (i > 2)
            i = 2;
          i -= this._buf.getNewlineCount();
          for (let j = 0; j < i; j++) {
            this._newline();
          }
          return;
        }
        endsWith(char) {
          return this.getLastChar() === char;
        }
        getLastChar() {
          return this._buf.getLastChar();
        }
        endsWithCharAndNewline() {
          return this._buf.endsWithCharAndNewline();
        }
        removeTrailingNewline() {
          this._buf.removeTrailingNewline();
        }
        exactSource(loc, cb) {
          if (!loc) {
            cb();
            return;
          }
          this._catchUp("start", loc);
          this._buf.exactSource(loc, cb);
        }
        source(prop, loc) {
          if (!loc)
            return;
          this._catchUp(prop, loc);
          this._buf.source(prop, loc);
        }
        sourceWithOffset(prop, loc, columnOffset) {
          if (!loc)
            return;
          this._catchUp(prop, loc);
          this._buf.sourceWithOffset(prop, loc, columnOffset);
        }
        withSource(prop, loc, cb) {
          if (!loc) {
            cb();
            return;
          }
          this._catchUp(prop, loc);
          this._buf.withSource(prop, loc, cb);
        }
        sourceIdentifierName(identifierName, pos) {
          if (!this._buf._canMarkIdName)
            return;
          const sourcePosition = this._buf._sourcePosition;
          sourcePosition.identifierNamePos = pos;
          sourcePosition.identifierName = identifierName;
        }
        _space() {
          this._queue(32);
        }
        _newline() {
          this._queue(10);
        }
        _append(str, maybeNewline) {
          this._maybeAddParen(str);
          this._maybeIndent(str.charCodeAt(0));
          this._buf.append(str, maybeNewline);
          this._endsWithWord = false;
          this._endsWithInteger = false;
        }
        _appendChar(char) {
          this._maybeAddParenChar(char);
          this._maybeIndent(char);
          this._buf.appendChar(char);
          this._endsWithWord = false;
          this._endsWithInteger = false;
        }
        _queue(char) {
          this._maybeAddParenChar(char);
          this._maybeIndent(char);
          this._buf.queue(char);
          this._endsWithWord = false;
          this._endsWithInteger = false;
        }
        _maybeIndent(firstChar) {
          if (this._indent && firstChar !== 10 && this.endsWith(10)) {
            this._buf.queueIndentation(this._getIndent());
          }
        }
        _shouldIndent(firstChar) {
          if (this._indent && firstChar !== 10 && this.endsWith(10)) {
            return true;
          }
        }
        _maybeAddParenChar(char) {
          const parenPushNewlineState = this._parenPushNewlineState;
          if (!parenPushNewlineState)
            return;
          if (char === 32) {
            return;
          }
          if (char !== 10) {
            this._parenPushNewlineState = null;
            return;
          }
          this.tokenChar(40);
          this.indent();
          parenPushNewlineState.printed = true;
        }
        _maybeAddParen(str) {
          const parenPushNewlineState = this._parenPushNewlineState;
          if (!parenPushNewlineState)
            return;
          const len = str.length;
          let i;
          for (i = 0; i < len && str.charCodeAt(i) === 32; i++)
            continue;
          if (i === len) {
            return;
          }
          const cha = str.charCodeAt(i);
          if (cha !== 10) {
            if (cha !== 47 || i + 1 === len) {
              this._parenPushNewlineState = null;
              return;
            }
            const chaPost = str.charCodeAt(i + 1);
            if (chaPost === 42) {
              return;
            } else if (chaPost !== 47) {
              this._parenPushNewlineState = null;
              return;
            }
          }
          this.tokenChar(40);
          this.indent();
          parenPushNewlineState.printed = true;
        }
        catchUp(line) {
          if (!this.format.retainLines)
            return;
          const count = line - this._buf.getCurrentLine();
          for (let i = 0; i < count; i++) {
            this._newline();
          }
        }
        _catchUp(prop, loc) {
          var _loc$prop;
          if (!this.format.retainLines)
            return;
          const line = loc == null || (_loc$prop = loc[prop]) == null ? void 0 : _loc$prop.line;
          if (line != null) {
            const count = line - this._buf.getCurrentLine();
            for (let i = 0; i < count; i++) {
              this._newline();
            }
          }
        }
        _getIndent() {
          return this._indentRepeat * this._indent;
        }
        printTerminatorless(node, parent, isLabel) {
          if (isLabel) {
            this._noLineTerminator = true;
            this.print(node, parent);
          } else {
            const terminatorState = {
              printed: false
            };
            this._parenPushNewlineState = terminatorState;
            this.print(node, parent);
            if (terminatorState.printed) {
              this.dedent();
              this.newline();
              this.tokenChar(41);
            }
          }
        }
        print(node, parent, noLineTerminatorAfter, trailingCommentsLineOffset, forceParens) {
          var _node$extra, _node$leadingComments;
          if (!node)
            return;
          this._endsWithInnerRaw = false;
          const nodeType = node.type;
          const format = this.format;
          const oldConcise = format.concise;
          if (node._compact) {
            format.concise = true;
          }
          const printMethod = this[nodeType];
          if (printMethod === void 0) {
            throw new ReferenceError(`unknown node of type ${JSON.stringify(nodeType)} with constructor ${JSON.stringify(node.constructor.name)}`);
          }
          this._printStack.push(node);
          const oldInAux = this._insideAux;
          this._insideAux = node.loc == void 0;
          this._maybeAddAuxComment(this._insideAux && !oldInAux);
          const parenthesized = (_node$extra = node.extra) == null ? void 0 : _node$extra.parenthesized;
          let shouldPrintParens = forceParens || parenthesized && format.retainFunctionParens && nodeType === "FunctionExpression" || needsParens(node, parent, this._printStack);
          if (!shouldPrintParens && parenthesized && (_node$leadingComments = node.leadingComments) != null && _node$leadingComments.length && node.leadingComments[0].type === "CommentBlock") {
            const parentType = parent == null ? void 0 : parent.type;
            switch (parentType) {
              case "ExpressionStatement":
              case "VariableDeclarator":
              case "AssignmentExpression":
              case "ReturnStatement":
                break;
              case "CallExpression":
              case "OptionalCallExpression":
              case "NewExpression":
                if (parent.callee !== node)
                  break;
              default:
                shouldPrintParens = true;
            }
          }
          if (shouldPrintParens) {
            this.tokenChar(40);
            this._endsWithInnerRaw = false;
          }
          this._lastCommentLine = 0;
          this._printLeadingComments(node, parent);
          const loc = nodeType === "Program" || nodeType === "File" ? null : node.loc;
          this.exactSource(loc, printMethod.bind(this, node, parent));
          if (shouldPrintParens) {
            this._printTrailingComments(node, parent);
            this.tokenChar(41);
            this._noLineTerminator = noLineTerminatorAfter;
          } else if (noLineTerminatorAfter && !this._noLineTerminator) {
            this._noLineTerminator = true;
            this._printTrailingComments(node, parent);
          } else {
            this._printTrailingComments(node, parent, trailingCommentsLineOffset);
          }
          this._printStack.pop();
          format.concise = oldConcise;
          this._insideAux = oldInAux;
          this._endsWithInnerRaw = false;
        }
        _maybeAddAuxComment(enteredPositionlessNode) {
          if (enteredPositionlessNode)
            this._printAuxBeforeComment();
          if (!this._insideAux)
            this._printAuxAfterComment();
        }
        _printAuxBeforeComment() {
          if (this._printAuxAfterOnNextUserNode)
            return;
          this._printAuxAfterOnNextUserNode = true;
          const comment = this.format.auxiliaryCommentBefore;
          if (comment) {
            this._printComment({
              type: "CommentBlock",
              value: comment
            }, 0);
          }
        }
        _printAuxAfterComment() {
          if (!this._printAuxAfterOnNextUserNode)
            return;
          this._printAuxAfterOnNextUserNode = false;
          const comment = this.format.auxiliaryCommentAfter;
          if (comment) {
            this._printComment({
              type: "CommentBlock",
              value: comment
            }, 0);
          }
        }
        getPossibleRaw(node) {
          const extra = node.extra;
          if ((extra == null ? void 0 : extra.raw) != null && extra.rawValue != null && node.value === extra.rawValue) {
            return extra.raw;
          }
        }
        printJoin(nodes, parent, opts = {}) {
          if (!(nodes != null && nodes.length))
            return;
          let {
            indent
          } = opts;
          if (indent == null && this.format.retainLines) {
            var _nodes$0$loc;
            const startLine = (_nodes$0$loc = nodes[0].loc) == null ? void 0 : _nodes$0$loc.start.line;
            if (startLine != null && startLine !== this._buf.getCurrentLine()) {
              indent = true;
            }
          }
          if (indent)
            this.indent();
          const newlineOpts = {
            addNewlines: opts.addNewlines,
            nextNodeStartLine: 0
          };
          const separator = opts.separator ? opts.separator.bind(this) : null;
          const len = nodes.length;
          for (let i = 0; i < len; i++) {
            const node = nodes[i];
            if (!node)
              continue;
            if (opts.statement)
              this._printNewline(i === 0, newlineOpts);
            this.print(node, parent, void 0, opts.trailingCommentsLineOffset || 0);
            opts.iterator == null || opts.iterator(node, i);
            if (i < len - 1)
              separator == null || separator();
            if (opts.statement) {
              var _node$trailingComment;
              if (!((_node$trailingComment = node.trailingComments) != null && _node$trailingComment.length)) {
                this._lastCommentLine = 0;
              }
              if (i + 1 === len) {
                this.newline(1);
              } else {
                var _nextNode$loc;
                const nextNode = nodes[i + 1];
                newlineOpts.nextNodeStartLine = ((_nextNode$loc = nextNode.loc) == null ? void 0 : _nextNode$loc.start.line) || 0;
                this._printNewline(true, newlineOpts);
              }
            }
          }
          if (indent)
            this.dedent();
        }
        printAndIndentOnComments(node, parent) {
          const indent = node.leadingComments && node.leadingComments.length > 0;
          if (indent)
            this.indent();
          this.print(node, parent);
          if (indent)
            this.dedent();
        }
        printBlock(parent) {
          const node = parent.body;
          if (node.type !== "EmptyStatement") {
            this.space();
          }
          this.print(node, parent);
        }
        _printTrailingComments(node, parent, lineOffset) {
          const {
            innerComments,
            trailingComments
          } = node;
          if (innerComments != null && innerComments.length) {
            this._printComments(2, innerComments, node, parent, lineOffset);
          }
          if (trailingComments != null && trailingComments.length) {
            this._printComments(2, trailingComments, node, parent, lineOffset);
          }
        }
        _printLeadingComments(node, parent) {
          const comments = node.leadingComments;
          if (!(comments != null && comments.length))
            return;
          this._printComments(0, comments, node, parent);
        }
        _maybePrintInnerComments() {
          if (this._endsWithInnerRaw)
            this.printInnerComments();
          this._endsWithInnerRaw = true;
          this._indentInnerComments = true;
        }
        printInnerComments() {
          const node = this._printStack[this._printStack.length - 1];
          const comments = node.innerComments;
          if (!(comments != null && comments.length))
            return;
          const hasSpace = this.endsWith(32);
          const indent = this._indentInnerComments;
          const printedCommentsCount = this._printedComments.size;
          if (indent)
            this.indent();
          this._printComments(1, comments, node);
          if (hasSpace && printedCommentsCount !== this._printedComments.size) {
            this.space();
          }
          if (indent)
            this.dedent();
        }
        noIndentInnerCommentsHere() {
          this._indentInnerComments = false;
        }
        printSequence(nodes, parent, opts = {}) {
          var _opts$indent;
          opts.statement = true;
          (_opts$indent = opts.indent) != null ? _opts$indent : opts.indent = false;
          this.printJoin(nodes, parent, opts);
        }
        printList(items, parent, opts = {}) {
          if (opts.separator == null) {
            opts.separator = commaSeparator;
          }
          this.printJoin(items, parent, opts);
        }
        _printNewline(newLine, opts) {
          const format = this.format;
          if (format.retainLines || format.compact)
            return;
          if (format.concise) {
            this.space();
            return;
          }
          if (!newLine) {
            return;
          }
          const startLine = opts.nextNodeStartLine;
          const lastCommentLine = this._lastCommentLine;
          if (startLine > 0 && lastCommentLine > 0) {
            const offset = startLine - lastCommentLine;
            if (offset >= 0) {
              this.newline(offset || 1);
              return;
            }
          }
          if (this._buf.hasContent()) {
            this.newline(1);
          }
        }
        _shouldPrintComment(comment) {
          if (comment.ignore)
            return 0;
          if (this._printedComments.has(comment))
            return 0;
          if (this._noLineTerminator && HAS_NEWLINE_OR_BlOCK_COMMENT_END.test(comment.value)) {
            return 2;
          }
          this._printedComments.add(comment);
          if (!this.format.shouldPrintComment(comment.value)) {
            return 0;
          }
          return 1;
        }
        _printComment(comment, skipNewLines) {
          const noLineTerminator = this._noLineTerminator;
          const isBlockComment = comment.type === "CommentBlock";
          const printNewLines = isBlockComment && skipNewLines !== 1 && !this._noLineTerminator;
          if (printNewLines && this._buf.hasContent() && skipNewLines !== 2) {
            this.newline(1);
          }
          const lastCharCode = this.getLastChar();
          if (lastCharCode !== 91 && lastCharCode !== 123) {
            this.space();
          }
          let val;
          if (isBlockComment) {
            const {
              _parenPushNewlineState
            } = this;
            if ((_parenPushNewlineState == null ? void 0 : _parenPushNewlineState.printed) === false && HAS_NEWLINE.test(comment.value)) {
              this.tokenChar(40);
              this.indent();
              _parenPushNewlineState.printed = true;
            }
            val = `/*${comment.value}*/`;
            if (this.format.indent.adjustMultilineComment) {
              var _comment$loc;
              const offset = (_comment$loc = comment.loc) == null ? void 0 : _comment$loc.start.column;
              if (offset) {
                const newlineRegex = new RegExp("\\n\\s{1," + offset + "}", "g");
                val = val.replace(newlineRegex, "\n");
              }
              if (this.format.concise) {
                val = val.replace(/\n(?!$)/g, `
`);
              } else {
                let indentSize = this.format.retainLines ? 0 : this._buf.getCurrentColumn();
                if (this._shouldIndent(47) || this.format.retainLines) {
                  indentSize += this._getIndent();
                }
                val = val.replace(/\n(?!$)/g, `
${" ".repeat(indentSize)}`);
              }
            }
          } else if (!noLineTerminator) {
            val = `//${comment.value}`;
          } else {
            val = `/*${comment.value}*/`;
          }
          if (this.endsWith(47))
            this._space();
          this.source("start", comment.loc);
          this._append(val, isBlockComment);
          if (!isBlockComment && !noLineTerminator) {
            this.newline(1, true);
          }
          if (printNewLines && skipNewLines !== 3) {
            this.newline(1);
          }
        }
        _printComments(type, comments, node, parent, lineOffset = 0) {
          const nodeLoc = node.loc;
          const len = comments.length;
          let hasLoc = !!nodeLoc;
          const nodeStartLine = hasLoc ? nodeLoc.start.line : 0;
          const nodeEndLine = hasLoc ? nodeLoc.end.line : 0;
          let lastLine = 0;
          let leadingCommentNewline = 0;
          const maybeNewline = this._noLineTerminator ? function() {
          } : this.newline.bind(this);
          for (let i = 0; i < len; i++) {
            const comment = comments[i];
            const shouldPrint = this._shouldPrintComment(comment);
            if (shouldPrint === 2) {
              hasLoc = false;
              break;
            }
            if (hasLoc && comment.loc && shouldPrint === 1) {
              const commentStartLine = comment.loc.start.line;
              const commentEndLine = comment.loc.end.line;
              if (type === 0) {
                let offset = 0;
                if (i === 0) {
                  if (this._buf.hasContent() && (comment.type === "CommentLine" || commentStartLine != commentEndLine)) {
                    offset = leadingCommentNewline = 1;
                  }
                } else {
                  offset = commentStartLine - lastLine;
                }
                lastLine = commentEndLine;
                maybeNewline(offset);
                this._printComment(comment, 1);
                if (i + 1 === len) {
                  maybeNewline(Math.max(nodeStartLine - lastLine, leadingCommentNewline));
                  lastLine = nodeStartLine;
                }
              } else if (type === 1) {
                const offset = commentStartLine - (i === 0 ? nodeStartLine : lastLine);
                lastLine = commentEndLine;
                maybeNewline(offset);
                this._printComment(comment, 1);
                if (i + 1 === len) {
                  maybeNewline(Math.min(1, nodeEndLine - lastLine));
                  lastLine = nodeEndLine;
                }
              } else {
                const offset = commentStartLine - (i === 0 ? nodeEndLine - lineOffset : lastLine);
                lastLine = commentEndLine;
                maybeNewline(offset);
                this._printComment(comment, 1);
              }
            } else {
              hasLoc = false;
              if (shouldPrint !== 1) {
                continue;
              }
              if (len === 1) {
                const singleLine = comment.loc ? comment.loc.start.line === comment.loc.end.line : !HAS_NEWLINE.test(comment.value);
                const shouldSkipNewline = singleLine && !isStatement(node) && !isClassBody(parent) && !isTSInterfaceBody(parent) && !isTSEnumDeclaration(parent);
                if (type === 0) {
                  this._printComment(comment, shouldSkipNewline && node.type !== "ObjectExpression" || singleLine && isFunction(parent, {
                    body: node
                  }) ? 1 : 0);
                } else if (shouldSkipNewline && type === 2) {
                  this._printComment(comment, 1);
                } else {
                  this._printComment(comment, 0);
                }
              } else if (type === 1 && !(node.type === "ObjectExpression" && node.properties.length > 1) && node.type !== "ClassBody" && node.type !== "TSInterfaceBody") {
                this._printComment(comment, i === 0 ? 2 : i === len - 1 ? 3 : 0);
              } else {
                this._printComment(comment, 0);
              }
            }
          }
          if (type === 2 && hasLoc && lastLine) {
            this._lastCommentLine = lastLine;
          }
        }
      };
      Object.assign(Printer.prototype, generatorFunctions);
      {
        Printer.prototype.Noop = function Noop() {
        };
      }
      var _default = exports.default = Printer;
      function commaSeparator() {
        this.tokenChar(44);
        this.space();
      }
    }
  });

  // node_modules/@babel/generator/lib/index.js
  var require_lib4 = __commonJS({
    "node_modules/@babel/generator/lib/index.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = generate2;
      var _sourceMap = require_source_map();
      var _printer = require_printer();
      function normalizeOptions(code, opts) {
        var _opts$recordAndTupleS;
        const format = {
          auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
          auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
          shouldPrintComment: opts.shouldPrintComment,
          retainLines: opts.retainLines,
          retainFunctionParens: opts.retainFunctionParens,
          comments: opts.comments == null || opts.comments,
          compact: opts.compact,
          minified: opts.minified,
          concise: opts.concise,
          indent: {
            adjustMultilineComment: true,
            style: "  "
          },
          jsescOption: Object.assign({
            quotes: "double",
            wrap: true,
            minimal: false
          }, opts.jsescOption),
          recordAndTupleSyntaxType: (_opts$recordAndTupleS = opts.recordAndTupleSyntaxType) != null ? _opts$recordAndTupleS : "hash",
          topicToken: opts.topicToken,
          importAttributesKeyword: opts.importAttributesKeyword
        };
        {
          format.decoratorsBeforeExport = opts.decoratorsBeforeExport;
          format.jsescOption.json = opts.jsonCompatibleStrings;
        }
        if (format.minified) {
          format.compact = true;
          format.shouldPrintComment = format.shouldPrintComment || (() => format.comments);
        } else {
          format.shouldPrintComment = format.shouldPrintComment || ((value) => format.comments || value.includes("@license") || value.includes("@preserve"));
        }
        if (format.compact === "auto") {
          format.compact = typeof code === "string" && code.length > 5e5;
          if (format.compact) {
            console.error(`[BABEL] Note: The code generator has deoptimised the styling of ${opts.filename} as it exceeds the max of ${"500KB"}.`);
          }
        }
        if (format.compact) {
          format.indent.adjustMultilineComment = false;
        }
        const {
          auxiliaryCommentBefore,
          auxiliaryCommentAfter,
          shouldPrintComment
        } = format;
        if (auxiliaryCommentBefore && !shouldPrintComment(auxiliaryCommentBefore)) {
          format.auxiliaryCommentBefore = void 0;
        }
        if (auxiliaryCommentAfter && !shouldPrintComment(auxiliaryCommentAfter)) {
          format.auxiliaryCommentAfter = void 0;
        }
        return format;
      }
      {
        exports.CodeGenerator = class CodeGenerator {
          constructor(ast, opts = {}, code) {
            this._ast = void 0;
            this._format = void 0;
            this._map = void 0;
            this._ast = ast;
            this._format = normalizeOptions(code, opts);
            this._map = opts.sourceMaps ? new _sourceMap.default(opts, code) : null;
          }
          generate() {
            const printer = new _printer.default(this._format, this._map);
            return printer.generate(this._ast);
          }
        };
      }
      function generate2(ast, opts = {}, code) {
        const format = normalizeOptions(code, opts);
        const map = opts.sourceMaps ? new _sourceMap.default(opts, code) : null;
        const printer = new _printer.default(format, map);
        return printer.generate(ast);
      }
    }
  });

  // node_modules/@babel/parser/lib/index.js
  var require_lib5 = __commonJS({
    "node_modules/@babel/parser/lib/index.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      function _objectWithoutPropertiesLoose(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      var Position = class {
        constructor(line, col, index) {
          this.line = void 0;
          this.column = void 0;
          this.index = void 0;
          this.line = line;
          this.column = col;
          this.index = index;
        }
      };
      var SourceLocation = class {
        constructor(start, end) {
          this.start = void 0;
          this.end = void 0;
          this.filename = void 0;
          this.identifierName = void 0;
          this.start = start;
          this.end = end;
        }
      };
      function createPositionWithColumnOffset(position, columnOffset) {
        const {
          line,
          column,
          index
        } = position;
        return new Position(line, column + columnOffset, index + columnOffset);
      }
      var code = "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED";
      var ModuleErrors = {
        ImportMetaOutsideModule: {
          message: `import.meta may appear only with 'sourceType: "module"'`,
          code
        },
        ImportOutsideModule: {
          message: `'import' and 'export' may appear only with 'sourceType: "module"'`,
          code
        }
      };
      var NodeDescriptions = {
        ArrayPattern: "array destructuring pattern",
        AssignmentExpression: "assignment expression",
        AssignmentPattern: "assignment expression",
        ArrowFunctionExpression: "arrow function expression",
        ConditionalExpression: "conditional expression",
        CatchClause: "catch clause",
        ForOfStatement: "for-of statement",
        ForInStatement: "for-in statement",
        ForStatement: "for-loop",
        FormalParameters: "function parameter list",
        Identifier: "identifier",
        ImportSpecifier: "import specifier",
        ImportDefaultSpecifier: "import default specifier",
        ImportNamespaceSpecifier: "import namespace specifier",
        ObjectPattern: "object destructuring pattern",
        ParenthesizedExpression: "parenthesized expression",
        RestElement: "rest element",
        UpdateExpression: {
          true: "prefix operation",
          false: "postfix operation"
        },
        VariableDeclarator: "variable declaration",
        YieldExpression: "yield expression"
      };
      var toNodeDescription = ({
        type,
        prefix: prefix2
      }) => type === "UpdateExpression" ? NodeDescriptions.UpdateExpression[String(prefix2)] : NodeDescriptions[type];
      var StandardErrors = {
        AccessorIsGenerator: ({
          kind
        }) => `A ${kind}ter cannot be a generator.`,
        ArgumentsInClass: "'arguments' is only allowed in functions and class methods.",
        AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.",
        AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.",
        AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.",
        AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.",
        AwaitUsingNotInAsyncContext: "'await using' is only allowed within async functions and at the top levels of modules.",
        AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.",
        AwaitNotInAsyncFunction: "'await' is only allowed within async functions.",
        BadGetterArity: "A 'get' accessor must not have any formal parameters.",
        BadSetterArity: "A 'set' accessor must have exactly one formal parameter.",
        BadSetterRestParameter: "A 'set' accessor function argument must not be a rest parameter.",
        ConstructorClassField: "Classes may not have a field named 'constructor'.",
        ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.",
        ConstructorIsAccessor: "Class constructor may not be an accessor.",
        ConstructorIsAsync: "Constructor can't be an async function.",
        ConstructorIsGenerator: "Constructor can't be a generator.",
        DeclarationMissingInitializer: ({
          kind
        }) => `Missing initializer in ${kind} declaration.`,
        DecoratorArgumentsOutsideParentheses: "Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.",
        DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.",
        DecoratorsBeforeAfterExport: "Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.",
        DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?",
        DecoratorExportClass: "Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.",
        DecoratorSemicolon: "Decorators must not be followed by a semicolon.",
        DecoratorStaticBlock: "Decorators can't be used with a static block.",
        DeferImportRequiresNamespace: 'Only `import defer * as x from "./module"` is valid.',
        DeletePrivateField: "Deleting a private field is not allowed.",
        DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.",
        DuplicateConstructor: "Duplicate constructor in the same class.",
        DuplicateDefaultExport: "Only one default export allowed per module.",
        DuplicateExport: ({
          exportName
        }) => `\`${exportName}\` has already been exported. Exported identifiers must be unique.`,
        DuplicateProto: "Redefinition of __proto__ property.",
        DuplicateRegExpFlags: "Duplicate regular expression flag.",
        DynamicImportPhaseRequiresImportExpressions: ({
          phase
        }) => `'import.${phase}(...)' can only be parsed when using the 'createImportExpressions' option.`,
        ElementAfterRest: "Rest element must be last element.",
        EscapedCharNotAnIdentifier: "Invalid Unicode escape.",
        ExportBindingIsString: ({
          localName,
          exportName
        }) => `A string literal cannot be used as an exported binding without \`from\`.
- Did you mean \`export { '${localName}' as '${exportName}' } from 'some-module'\`?`,
        ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.",
        ForInOfLoopInitializer: ({
          type
        }) => `'${type === "ForInStatement" ? "for-in" : "for-of"}' loop variable declaration may not have an initializer.`,
        ForInUsing: "For-in loop may not start with 'using' declaration.",
        ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.",
        ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.",
        GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.",
        IllegalBreakContinue: ({
          type
        }) => `Unsyntactic ${type === "BreakStatement" ? "break" : "continue"}.`,
        IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.",
        IllegalReturn: "'return' outside of function.",
        ImportAttributesUseAssert: "The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedAssertSyntax: true` option in the import attributes plugin to suppress this error.",
        ImportBindingIsString: ({
          importName
        }) => `A string literal cannot be used as an imported binding.
- Did you mean \`import { "${importName}" as foo }\`?`,
        ImportCallArgumentTrailingComma: "Trailing comma is disallowed inside import(...) arguments.",
        ImportCallArity: ({
          maxArgumentCount
        }) => `\`import()\` requires exactly ${maxArgumentCount === 1 ? "one argument" : "one or two arguments"}.`,
        ImportCallNotNewExpression: "Cannot use new with import(...).",
        ImportCallSpreadArgument: "`...` is not allowed in `import()`.",
        ImportJSONBindingNotDefault: "A JSON module can only be imported with `default`.",
        ImportReflectionHasAssertion: "`import module x` cannot have assertions.",
        ImportReflectionNotBinding: 'Only `import module x from "./module"` is valid.',
        IncompatibleRegExpUVFlags: "The 'u' and 'v' regular expression flags cannot be enabled at the same time.",
        InvalidBigIntLiteral: "Invalid BigIntLiteral.",
        InvalidCodePoint: "Code point out of bounds.",
        InvalidCoverInitializedName: "Invalid shorthand property initializer.",
        InvalidDecimal: "Invalid decimal.",
        InvalidDigit: ({
          radix
        }) => `Expected number in radix ${radix}.`,
        InvalidEscapeSequence: "Bad character escape sequence.",
        InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.",
        InvalidEscapedReservedWord: ({
          reservedWord
        }) => `Escape sequence in keyword ${reservedWord}.`,
        InvalidIdentifier: ({
          identifierName
        }) => `Invalid identifier ${identifierName}.`,
        InvalidLhs: ({
          ancestor
        }) => `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,
        InvalidLhsBinding: ({
          ancestor
        }) => `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,
        InvalidLhsOptionalChaining: ({
          ancestor
        }) => `Invalid optional chaining in the left-hand side of ${toNodeDescription(ancestor)}.`,
        InvalidNumber: "Invalid number.",
        InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.",
        InvalidOrUnexpectedToken: ({
          unexpected
        }) => `Unexpected character '${unexpected}'.`,
        InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.",
        InvalidPrivateFieldResolution: ({
          identifierName
        }) => `Private name #${identifierName} is not defined.`,
        InvalidPropertyBindingPattern: "Binding member expression.",
        InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.",
        InvalidRestAssignmentPattern: "Invalid rest operator's argument.",
        LabelRedeclaration: ({
          labelName
        }) => `Label '${labelName}' is already declared.`,
        LetInLexicalBinding: "'let' is disallowed as a lexically bound name.",
        LineTerminatorBeforeArrow: "No line break is allowed before '=>'.",
        MalformedRegExpFlags: "Invalid regular expression flag.",
        MissingClassName: "A class name is required.",
        MissingEqInAssignment: "Only '=' operator can be used for specifying default value.",
        MissingSemicolon: "Missing semicolon.",
        MissingPlugin: ({
          missingPlugin
        }) => `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map((name) => JSON.stringify(name)).join(", ")}.`,
        MissingOneOfPlugins: ({
          missingPlugin
        }) => `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map((name) => JSON.stringify(name)).join(", ")}.`,
        MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.",
        MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.",
        ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.",
        ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.",
        ModuleAttributesWithDuplicateKeys: ({
          key
        }) => `Duplicate key "${key}" is not allowed in module attributes.`,
        ModuleExportNameHasLoneSurrogate: ({
          surrogateCharCode
        }) => `An export name cannot include a lone surrogate, found '\\u${surrogateCharCode.toString(16)}'.`,
        ModuleExportUndefined: ({
          localName
        }) => `Export '${localName}' is not defined.`,
        MultipleDefaultsInSwitch: "Multiple default clauses.",
        NewlineAfterThrow: "Illegal newline after throw.",
        NoCatchOrFinally: "Missing catch or finally clause.",
        NumberIdentifier: "Identifier directly after number.",
        NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.",
        ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.",
        OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.",
        OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.",
        OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.",
        ParamDupe: "Argument name clash.",
        PatternHasAccessor: "Object pattern can't contain getter or setter.",
        PatternHasMethod: "Object pattern can't contain methods.",
        PrivateInExpectedIn: ({
          identifierName
        }) => `Private names are only allowed in property accesses (\`obj.#${identifierName}\`) or in \`in\` expressions (\`#${identifierName} in obj\`).`,
        PrivateNameRedeclaration: ({
          identifierName
        }) => `Duplicate private name #${identifierName}.`,
        RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
        RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
        RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
        RecordNoProto: "'__proto__' is not allowed in Record expressions.",
        RestTrailingComma: "Unexpected trailing comma after rest element.",
        SloppyFunction: "In non-strict mode code, functions can only be declared at top level or inside a block.",
        SloppyFunctionAnnexB: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.",
        SourcePhaseImportRequiresDefault: 'Only `import source x from "./module"` is valid.',
        StaticPrototype: "Classes may not have static property named prototype.",
        SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?",
        SuperPrivateField: "Private fields can't be accessed on super.",
        TrailingDecorator: "Decorators must be attached to a class element.",
        TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
        TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
        TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
        UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.",
        UnexpectedAwaitAfterPipelineBody: 'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.',
        UnexpectedDigitAfterHash: "Unexpected digit after hash token.",
        UnexpectedImportExport: "'import' and 'export' may only appear at the top level.",
        UnexpectedKeyword: ({
          keyword
        }) => `Unexpected keyword '${keyword}'.`,
        UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.",
        UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.",
        UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.",
        UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.",
        UnexpectedPrivateField: "Unexpected private name.",
        UnexpectedReservedWord: ({
          reservedWord
        }) => `Unexpected reserved word '${reservedWord}'.`,
        UnexpectedSuper: "'super' is only allowed in object methods and classes.",
        UnexpectedToken: ({
          expected,
          unexpected
        }) => `Unexpected token${unexpected ? ` '${unexpected}'.` : ""}${expected ? `, expected "${expected}"` : ""}`,
        UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.",
        UnexpectedUsingDeclaration: "Using declaration cannot appear in the top level when source type is `script`.",
        UnsupportedBind: "Binding should be performed on object property.",
        UnsupportedDecoratorExport: "A decorated export must export a class declaration.",
        UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.",
        UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.",
        UnsupportedMetaProperty: ({
          target,
          onlyValidPropertyName
        }) => `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,
        UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.",
        UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.",
        UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).",
        UnterminatedComment: "Unterminated comment.",
        UnterminatedRegExp: "Unterminated regular expression.",
        UnterminatedString: "Unterminated string constant.",
        UnterminatedTemplate: "Unterminated template.",
        UsingDeclarationHasBindingPattern: "Using declaration cannot have destructuring patterns.",
        VarRedeclaration: ({
          identifierName
        }) => `Identifier '${identifierName}' has already been declared.`,
        YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.",
        YieldInParameter: "Yield expression is not allowed in formal parameters.",
        ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0."
      };
      var StrictModeErrors = {
        StrictDelete: "Deleting local variable in strict mode.",
        StrictEvalArguments: ({
          referenceName
        }) => `Assigning to '${referenceName}' in strict mode.`,
        StrictEvalArgumentsBinding: ({
          bindingName
        }) => `Binding '${bindingName}' in strict mode.`,
        StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.",
        StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.",
        StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.",
        StrictWith: "'with' in strict mode."
      };
      var UnparenthesizedPipeBodyDescriptions = /* @__PURE__ */ new Set(["ArrowFunctionExpression", "AssignmentExpression", "ConditionalExpression", "YieldExpression"]);
      var PipelineOperatorErrors = {
        PipeBodyIsTighter: "Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.",
        PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.',
        PipeTopicUnbound: "Topic reference is unbound; it must be inside a pipe body.",
        PipeTopicUnconfiguredToken: ({
          token
        }) => `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "${token}" }.`,
        PipeTopicUnused: "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.",
        PipeUnparenthesizedBody: ({
          type
        }) => `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({
          type
        })}; please wrap it in parentheses.`,
        PipelineBodyNoArrow: 'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.',
        PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.",
        PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.",
        PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.",
        PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.",
        PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.'
      };
      var _excluded = ["toMessage"];
      var _excluded2 = ["message"];
      function defineHidden(obj, key, value) {
        Object.defineProperty(obj, key, {
          enumerable: false,
          configurable: true,
          value
        });
      }
      function toParseErrorConstructor(_ref) {
        let {
          toMessage
        } = _ref, properties = _objectWithoutPropertiesLoose(_ref, _excluded);
        return function constructor(loc, details) {
          const error = new SyntaxError();
          Object.assign(error, properties, {
            loc,
            pos: loc.index
          });
          if ("missingPlugin" in details) {
            Object.assign(error, {
              missingPlugin: details.missingPlugin
            });
          }
          defineHidden(error, "clone", function clone(overrides = {}) {
            var _overrides$loc;
            const {
              line,
              column,
              index
            } = (_overrides$loc = overrides.loc) != null ? _overrides$loc : loc;
            return constructor(new Position(line, column, index), Object.assign({}, details, overrides.details));
          });
          defineHidden(error, "details", details);
          Object.defineProperty(error, "message", {
            configurable: true,
            get() {
              const message = `${toMessage(details)} (${loc.line}:${loc.column})`;
              this.message = message;
              return message;
            },
            set(value) {
              Object.defineProperty(this, "message", {
                value,
                writable: true
              });
            }
          });
          return error;
        };
      }
      function ParseErrorEnum(argument, syntaxPlugin) {
        if (Array.isArray(argument)) {
          return (parseErrorTemplates) => ParseErrorEnum(parseErrorTemplates, argument[0]);
        }
        const ParseErrorConstructors = {};
        for (const reasonCode of Object.keys(argument)) {
          const template = argument[reasonCode];
          const _ref2 = typeof template === "string" ? {
            message: () => template
          } : typeof template === "function" ? {
            message: template
          } : template, {
            message
          } = _ref2, rest = _objectWithoutPropertiesLoose(_ref2, _excluded2);
          const toMessage = typeof message === "string" ? () => message : message;
          ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({
            code: "BABEL_PARSER_SYNTAX_ERROR",
            reasonCode,
            toMessage
          }, syntaxPlugin ? {
            syntaxPlugin
          } : {}, rest));
        }
        return ParseErrorConstructors;
      }
      var Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum(StrictModeErrors), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors));
      var {
        defineProperty
      } = Object;
      var toUnenumerable = (object, key) => defineProperty(object, key, {
        enumerable: false,
        value: object[key]
      });
      function toESTreeLocation(node) {
        node.loc.start && toUnenumerable(node.loc.start, "index");
        node.loc.end && toUnenumerable(node.loc.end, "index");
        return node;
      }
      var estree = (superClass) => class ESTreeParserMixin extends superClass {
        parse() {
          const file = toESTreeLocation(super.parse());
          if (this.options.tokens) {
            file.tokens = file.tokens.map(toESTreeLocation);
          }
          return file;
        }
        parseRegExpLiteral({
          pattern,
          flags
        }) {
          let regex = null;
          try {
            regex = new RegExp(pattern, flags);
          } catch (e) {
          }
          const node = this.estreeParseLiteral(regex);
          node.regex = {
            pattern,
            flags
          };
          return node;
        }
        parseBigIntLiteral(value) {
          let bigInt;
          try {
            bigInt = BigInt(value);
          } catch (_unused) {
            bigInt = null;
          }
          const node = this.estreeParseLiteral(bigInt);
          node.bigint = String(node.value || value);
          return node;
        }
        parseDecimalLiteral(value) {
          const decimal = null;
          const node = this.estreeParseLiteral(decimal);
          node.decimal = String(node.value || value);
          return node;
        }
        estreeParseLiteral(value) {
          return this.parseLiteral(value, "Literal");
        }
        parseStringLiteral(value) {
          return this.estreeParseLiteral(value);
        }
        parseNumericLiteral(value) {
          return this.estreeParseLiteral(value);
        }
        parseNullLiteral() {
          return this.estreeParseLiteral(null);
        }
        parseBooleanLiteral(value) {
          return this.estreeParseLiteral(value);
        }
        directiveToStmt(directive) {
          const expression = directive.value;
          delete directive.value;
          expression.type = "Literal";
          expression.raw = expression.extra.raw;
          expression.value = expression.extra.expressionValue;
          const stmt = directive;
          stmt.type = "ExpressionStatement";
          stmt.expression = expression;
          stmt.directive = expression.extra.rawValue;
          delete expression.extra;
          return stmt;
        }
        initFunction(node, isAsync) {
          super.initFunction(node, isAsync);
          node.expression = false;
        }
        checkDeclaration(node) {
          if (node != null && this.isObjectProperty(node)) {
            this.checkDeclaration(node.value);
          } else {
            super.checkDeclaration(node);
          }
        }
        getObjectOrClassMethodParams(method) {
          return method.value.params;
        }
        isValidDirective(stmt) {
          var _stmt$expression$extr;
          return stmt.type === "ExpressionStatement" && stmt.expression.type === "Literal" && typeof stmt.expression.value === "string" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);
        }
        parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
          super.parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse);
          const directiveStatements = node.directives.map((d2) => this.directiveToStmt(d2));
          node.body = directiveStatements.concat(node.body);
          delete node.directives;
        }
        pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
          this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true);
          if (method.typeParameters) {
            method.value.typeParameters = method.typeParameters;
            delete method.typeParameters;
          }
          classBody.body.push(method);
        }
        parsePrivateName() {
          const node = super.parsePrivateName();
          {
            if (!this.getPluginOption("estree", "classFeatures")) {
              return node;
            }
          }
          return this.convertPrivateNameToPrivateIdentifier(node);
        }
        convertPrivateNameToPrivateIdentifier(node) {
          const name = super.getPrivateNameSV(node);
          node = node;
          delete node.id;
          node.name = name;
          node.type = "PrivateIdentifier";
          return node;
        }
        isPrivateName(node) {
          {
            if (!this.getPluginOption("estree", "classFeatures")) {
              return super.isPrivateName(node);
            }
          }
          return node.type === "PrivateIdentifier";
        }
        getPrivateNameSV(node) {
          {
            if (!this.getPluginOption("estree", "classFeatures")) {
              return super.getPrivateNameSV(node);
            }
          }
          return node.name;
        }
        parseLiteral(value, type) {
          const node = super.parseLiteral(value, type);
          node.raw = node.extra.raw;
          delete node.extra;
          return node;
        }
        parseFunctionBody(node, allowExpression, isMethod = false) {
          super.parseFunctionBody(node, allowExpression, isMethod);
          node.expression = node.body.type !== "BlockStatement";
        }
        parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
          let funcNode = this.startNode();
          funcNode.kind = node.kind;
          funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
          funcNode.type = "FunctionExpression";
          delete funcNode.kind;
          node.value = funcNode;
          if (type === "ClassPrivateMethod") {
            node.computed = false;
          }
          return this.finishNode(node, "MethodDefinition");
        }
        parseClassProperty(...args) {
          const propertyNode = super.parseClassProperty(...args);
          {
            if (!this.getPluginOption("estree", "classFeatures")) {
              return propertyNode;
            }
          }
          propertyNode.type = "PropertyDefinition";
          return propertyNode;
        }
        parseClassPrivateProperty(...args) {
          const propertyNode = super.parseClassPrivateProperty(...args);
          {
            if (!this.getPluginOption("estree", "classFeatures")) {
              return propertyNode;
            }
          }
          propertyNode.type = "PropertyDefinition";
          propertyNode.computed = false;
          return propertyNode;
        }
        parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
          const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);
          if (node) {
            node.type = "Property";
            if (node.kind === "method") {
              node.kind = "init";
            }
            node.shorthand = false;
          }
          return node;
        }
        parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
          const node = super.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
          if (node) {
            node.kind = "init";
            node.type = "Property";
          }
          return node;
        }
        isValidLVal(type, isUnparenthesizedInAssign, binding) {
          return type === "Property" ? "value" : super.isValidLVal(type, isUnparenthesizedInAssign, binding);
        }
        isAssignable(node, isBinding) {
          if (node != null && this.isObjectProperty(node)) {
            return this.isAssignable(node.value, isBinding);
          }
          return super.isAssignable(node, isBinding);
        }
        toAssignable(node, isLHS = false) {
          if (node != null && this.isObjectProperty(node)) {
            const {
              key,
              value
            } = node;
            if (this.isPrivateName(key)) {
              this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);
            }
            this.toAssignable(value, isLHS);
          } else {
            super.toAssignable(node, isLHS);
          }
        }
        toAssignableObjectExpressionProp(prop, isLast, isLHS) {
          if (prop.kind === "get" || prop.kind === "set") {
            this.raise(Errors.PatternHasAccessor, prop.key);
          } else if (prop.method) {
            this.raise(Errors.PatternHasMethod, prop.key);
          } else {
            super.toAssignableObjectExpressionProp(prop, isLast, isLHS);
          }
        }
        finishCallExpression(unfinished, optional) {
          const node = super.finishCallExpression(unfinished, optional);
          if (node.callee.type === "Import") {
            node.type = "ImportExpression";
            node.source = node.arguments[0];
            if (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) {
              var _node$arguments$, _node$arguments$2;
              node.options = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;
              node.attributes = (_node$arguments$2 = node.arguments[1]) != null ? _node$arguments$2 : null;
            }
            delete node.arguments;
            delete node.callee;
          }
          return node;
        }
        toReferencedArguments(node) {
          if (node.type === "ImportExpression") {
            return;
          }
          super.toReferencedArguments(node);
        }
        parseExport(unfinished, decorators) {
          const exportStartLoc = this.state.lastTokStartLoc;
          const node = super.parseExport(unfinished, decorators);
          switch (node.type) {
            case "ExportAllDeclaration":
              node.exported = null;
              break;
            case "ExportNamedDeclaration":
              if (node.specifiers.length === 1 && node.specifiers[0].type === "ExportNamespaceSpecifier") {
                node.type = "ExportAllDeclaration";
                node.exported = node.specifiers[0].exported;
                delete node.specifiers;
              }
            case "ExportDefaultDeclaration":
              {
                var _declaration$decorato;
                const {
                  declaration
                } = node;
                if ((declaration == null ? void 0 : declaration.type) === "ClassDeclaration" && ((_declaration$decorato = declaration.decorators) == null ? void 0 : _declaration$decorato.length) > 0 && declaration.start === node.start) {
                  this.resetStartLocation(node, exportStartLoc);
                }
              }
              break;
          }
          return node;
        }
        parseSubscript(base, startLoc, noCalls, state) {
          const node = super.parseSubscript(base, startLoc, noCalls, state);
          if (state.optionalChainMember) {
            if (node.type === "OptionalMemberExpression" || node.type === "OptionalCallExpression") {
              node.type = node.type.substring(8);
            }
            if (state.stop) {
              const chain = this.startNodeAtNode(node);
              chain.expression = node;
              return this.finishNode(chain, "ChainExpression");
            }
          } else if (node.type === "MemberExpression" || node.type === "CallExpression") {
            node.optional = false;
          }
          return node;
        }
        isOptionalMemberExpression(node) {
          if (node.type === "ChainExpression") {
            return node.expression.type === "MemberExpression";
          }
          return super.isOptionalMemberExpression(node);
        }
        hasPropertyAsPrivateName(node) {
          if (node.type === "ChainExpression") {
            node = node.expression;
          }
          return super.hasPropertyAsPrivateName(node);
        }
        isObjectProperty(node) {
          return node.type === "Property" && node.kind === "init" && !node.method;
        }
        isObjectMethod(node) {
          return node.method || node.kind === "get" || node.kind === "set";
        }
        finishNodeAt(node, type, endLoc) {
          return toESTreeLocation(super.finishNodeAt(node, type, endLoc));
        }
        resetStartLocation(node, startLoc) {
          super.resetStartLocation(node, startLoc);
          toESTreeLocation(node);
        }
        resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
          super.resetEndLocation(node, endLoc);
          toESTreeLocation(node);
        }
      };
      var TokContext = class {
        constructor(token, preserveSpace) {
          this.token = void 0;
          this.preserveSpace = void 0;
          this.token = token;
          this.preserveSpace = !!preserveSpace;
        }
      };
      var types = {
        brace: new TokContext("{"),
        j_oTag: new TokContext("<tag"),
        j_cTag: new TokContext("</tag"),
        j_expr: new TokContext("<tag>...</tag>", true)
      };
      {
        types.template = new TokContext("`", true);
      }
      var beforeExpr = true;
      var startsExpr = true;
      var isLoop = true;
      var isAssign = true;
      var prefix = true;
      var postfix = true;
      var ExportedTokenType = class {
        constructor(label, conf = {}) {
          this.label = void 0;
          this.keyword = void 0;
          this.beforeExpr = void 0;
          this.startsExpr = void 0;
          this.rightAssociative = void 0;
          this.isLoop = void 0;
          this.isAssign = void 0;
          this.prefix = void 0;
          this.postfix = void 0;
          this.binop = void 0;
          this.label = label;
          this.keyword = conf.keyword;
          this.beforeExpr = !!conf.beforeExpr;
          this.startsExpr = !!conf.startsExpr;
          this.rightAssociative = !!conf.rightAssociative;
          this.isLoop = !!conf.isLoop;
          this.isAssign = !!conf.isAssign;
          this.prefix = !!conf.prefix;
          this.postfix = !!conf.postfix;
          this.binop = conf.binop != null ? conf.binop : null;
          {
            this.updateContext = null;
          }
        }
      };
      var keywords$1 = /* @__PURE__ */ new Map();
      function createKeyword(name, options = {}) {
        options.keyword = name;
        const token = createToken(name, options);
        keywords$1.set(name, token);
        return token;
      }
      function createBinop(name, binop) {
        return createToken(name, {
          beforeExpr,
          binop
        });
      }
      var tokenTypeCounter = -1;
      var tokenTypes = [];
      var tokenLabels = [];
      var tokenBinops = [];
      var tokenBeforeExprs = [];
      var tokenStartsExprs = [];
      var tokenPrefixes = [];
      function createToken(name, options = {}) {
        var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;
        ++tokenTypeCounter;
        tokenLabels.push(name);
        tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);
        tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);
        tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);
        tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);
        tokenTypes.push(new ExportedTokenType(name, options));
        return tokenTypeCounter;
      }
      function createKeywordLike(name, options = {}) {
        var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;
        ++tokenTypeCounter;
        keywords$1.set(name, tokenTypeCounter);
        tokenLabels.push(name);
        tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);
        tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);
        tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);
        tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);
        tokenTypes.push(new ExportedTokenType("name", options));
        return tokenTypeCounter;
      }
      var tt = {
        bracketL: createToken("[", {
          beforeExpr,
          startsExpr
        }),
        bracketHashL: createToken("#[", {
          beforeExpr,
          startsExpr
        }),
        bracketBarL: createToken("[|", {
          beforeExpr,
          startsExpr
        }),
        bracketR: createToken("]"),
        bracketBarR: createToken("|]"),
        braceL: createToken("{", {
          beforeExpr,
          startsExpr
        }),
        braceBarL: createToken("{|", {
          beforeExpr,
          startsExpr
        }),
        braceHashL: createToken("#{", {
          beforeExpr,
          startsExpr
        }),
        braceR: createToken("}"),
        braceBarR: createToken("|}"),
        parenL: createToken("(", {
          beforeExpr,
          startsExpr
        }),
        parenR: createToken(")"),
        comma: createToken(",", {
          beforeExpr
        }),
        semi: createToken(";", {
          beforeExpr
        }),
        colon: createToken(":", {
          beforeExpr
        }),
        doubleColon: createToken("::", {
          beforeExpr
        }),
        dot: createToken("."),
        question: createToken("?", {
          beforeExpr
        }),
        questionDot: createToken("?."),
        arrow: createToken("=>", {
          beforeExpr
        }),
        template: createToken("template"),
        ellipsis: createToken("...", {
          beforeExpr
        }),
        backQuote: createToken("`", {
          startsExpr
        }),
        dollarBraceL: createToken("${", {
          beforeExpr,
          startsExpr
        }),
        templateTail: createToken("...`", {
          startsExpr
        }),
        templateNonTail: createToken("...${", {
          beforeExpr,
          startsExpr
        }),
        at: createToken("@"),
        hash: createToken("#", {
          startsExpr
        }),
        interpreterDirective: createToken("#!..."),
        eq: createToken("=", {
          beforeExpr,
          isAssign
        }),
        assign: createToken("_=", {
          beforeExpr,
          isAssign
        }),
        slashAssign: createToken("_=", {
          beforeExpr,
          isAssign
        }),
        xorAssign: createToken("_=", {
          beforeExpr,
          isAssign
        }),
        moduloAssign: createToken("_=", {
          beforeExpr,
          isAssign
        }),
        incDec: createToken("++/--", {
          prefix,
          postfix,
          startsExpr
        }),
        bang: createToken("!", {
          beforeExpr,
          prefix,
          startsExpr
        }),
        tilde: createToken("~", {
          beforeExpr,
          prefix,
          startsExpr
        }),
        doubleCaret: createToken("^^", {
          startsExpr
        }),
        doubleAt: createToken("@@", {
          startsExpr
        }),
        pipeline: createBinop("|>", 0),
        nullishCoalescing: createBinop("??", 1),
        logicalOR: createBinop("||", 1),
        logicalAND: createBinop("&&", 2),
        bitwiseOR: createBinop("|", 3),
        bitwiseXOR: createBinop("^", 4),
        bitwiseAND: createBinop("&", 5),
        equality: createBinop("==/!=/===/!==", 6),
        lt: createBinop("</>/<=/>=", 7),
        gt: createBinop("</>/<=/>=", 7),
        relational: createBinop("</>/<=/>=", 7),
        bitShift: createBinop("<</>>/>>>", 8),
        bitShiftL: createBinop("<</>>/>>>", 8),
        bitShiftR: createBinop("<</>>/>>>", 8),
        plusMin: createToken("+/-", {
          beforeExpr,
          binop: 9,
          prefix,
          startsExpr
        }),
        modulo: createToken("%", {
          binop: 10,
          startsExpr
        }),
        star: createToken("*", {
          binop: 10
        }),
        slash: createBinop("/", 10),
        exponent: createToken("**", {
          beforeExpr,
          binop: 11,
          rightAssociative: true
        }),
        _in: createKeyword("in", {
          beforeExpr,
          binop: 7
        }),
        _instanceof: createKeyword("instanceof", {
          beforeExpr,
          binop: 7
        }),
        _break: createKeyword("break"),
        _case: createKeyword("case", {
          beforeExpr
        }),
        _catch: createKeyword("catch"),
        _continue: createKeyword("continue"),
        _debugger: createKeyword("debugger"),
        _default: createKeyword("default", {
          beforeExpr
        }),
        _else: createKeyword("else", {
          beforeExpr
        }),
        _finally: createKeyword("finally"),
        _function: createKeyword("function", {
          startsExpr
        }),
        _if: createKeyword("if"),
        _return: createKeyword("return", {
          beforeExpr
        }),
        _switch: createKeyword("switch"),
        _throw: createKeyword("throw", {
          beforeExpr,
          prefix,
          startsExpr
        }),
        _try: createKeyword("try"),
        _var: createKeyword("var"),
        _const: createKeyword("const"),
        _with: createKeyword("with"),
        _new: createKeyword("new", {
          beforeExpr,
          startsExpr
        }),
        _this: createKeyword("this", {
          startsExpr
        }),
        _super: createKeyword("super", {
          startsExpr
        }),
        _class: createKeyword("class", {
          startsExpr
        }),
        _extends: createKeyword("extends", {
          beforeExpr
        }),
        _export: createKeyword("export"),
        _import: createKeyword("import", {
          startsExpr
        }),
        _null: createKeyword("null", {
          startsExpr
        }),
        _true: createKeyword("true", {
          startsExpr
        }),
        _false: createKeyword("false", {
          startsExpr
        }),
        _typeof: createKeyword("typeof", {
          beforeExpr,
          prefix,
          startsExpr
        }),
        _void: createKeyword("void", {
          beforeExpr,
          prefix,
          startsExpr
        }),
        _delete: createKeyword("delete", {
          beforeExpr,
          prefix,
          startsExpr
        }),
        _do: createKeyword("do", {
          isLoop,
          beforeExpr
        }),
        _for: createKeyword("for", {
          isLoop
        }),
        _while: createKeyword("while", {
          isLoop
        }),
        _as: createKeywordLike("as", {
          startsExpr
        }),
        _assert: createKeywordLike("assert", {
          startsExpr
        }),
        _async: createKeywordLike("async", {
          startsExpr
        }),
        _await: createKeywordLike("await", {
          startsExpr
        }),
        _defer: createKeywordLike("defer", {
          startsExpr
        }),
        _from: createKeywordLike("from", {
          startsExpr
        }),
        _get: createKeywordLike("get", {
          startsExpr
        }),
        _let: createKeywordLike("let", {
          startsExpr
        }),
        _meta: createKeywordLike("meta", {
          startsExpr
        }),
        _of: createKeywordLike("of", {
          startsExpr
        }),
        _sent: createKeywordLike("sent", {
          startsExpr
        }),
        _set: createKeywordLike("set", {
          startsExpr
        }),
        _source: createKeywordLike("source", {
          startsExpr
        }),
        _static: createKeywordLike("static", {
          startsExpr
        }),
        _using: createKeywordLike("using", {
          startsExpr
        }),
        _yield: createKeywordLike("yield", {
          startsExpr
        }),
        _asserts: createKeywordLike("asserts", {
          startsExpr
        }),
        _checks: createKeywordLike("checks", {
          startsExpr
        }),
        _exports: createKeywordLike("exports", {
          startsExpr
        }),
        _global: createKeywordLike("global", {
          startsExpr
        }),
        _implements: createKeywordLike("implements", {
          startsExpr
        }),
        _intrinsic: createKeywordLike("intrinsic", {
          startsExpr
        }),
        _infer: createKeywordLike("infer", {
          startsExpr
        }),
        _is: createKeywordLike("is", {
          startsExpr
        }),
        _mixins: createKeywordLike("mixins", {
          startsExpr
        }),
        _proto: createKeywordLike("proto", {
          startsExpr
        }),
        _require: createKeywordLike("require", {
          startsExpr
        }),
        _satisfies: createKeywordLike("satisfies", {
          startsExpr
        }),
        _keyof: createKeywordLike("keyof", {
          startsExpr
        }),
        _readonly: createKeywordLike("readonly", {
          startsExpr
        }),
        _unique: createKeywordLike("unique", {
          startsExpr
        }),
        _abstract: createKeywordLike("abstract", {
          startsExpr
        }),
        _declare: createKeywordLike("declare", {
          startsExpr
        }),
        _enum: createKeywordLike("enum", {
          startsExpr
        }),
        _module: createKeywordLike("module", {
          startsExpr
        }),
        _namespace: createKeywordLike("namespace", {
          startsExpr
        }),
        _interface: createKeywordLike("interface", {
          startsExpr
        }),
        _type: createKeywordLike("type", {
          startsExpr
        }),
        _opaque: createKeywordLike("opaque", {
          startsExpr
        }),
        name: createToken("name", {
          startsExpr
        }),
        string: createToken("string", {
          startsExpr
        }),
        num: createToken("num", {
          startsExpr
        }),
        bigint: createToken("bigint", {
          startsExpr
        }),
        decimal: createToken("decimal", {
          startsExpr
        }),
        regexp: createToken("regexp", {
          startsExpr
        }),
        privateName: createToken("#name", {
          startsExpr
        }),
        eof: createToken("eof"),
        jsxName: createToken("jsxName"),
        jsxText: createToken("jsxText", {
          beforeExpr: true
        }),
        jsxTagStart: createToken("jsxTagStart", {
          startsExpr: true
        }),
        jsxTagEnd: createToken("jsxTagEnd"),
        placeholder: createToken("%%", {
          startsExpr: true
        })
      };
      function tokenIsIdentifier(token) {
        return token >= 93 && token <= 132;
      }
      function tokenKeywordOrIdentifierIsKeyword(token) {
        return token <= 92;
      }
      function tokenIsKeywordOrIdentifier(token) {
        return token >= 58 && token <= 132;
      }
      function tokenIsLiteralPropertyName(token) {
        return token >= 58 && token <= 136;
      }
      function tokenComesBeforeExpression(token) {
        return tokenBeforeExprs[token];
      }
      function tokenCanStartExpression(token) {
        return tokenStartsExprs[token];
      }
      function tokenIsAssignment(token) {
        return token >= 29 && token <= 33;
      }
      function tokenIsFlowInterfaceOrTypeOrOpaque(token) {
        return token >= 129 && token <= 131;
      }
      function tokenIsLoop(token) {
        return token >= 90 && token <= 92;
      }
      function tokenIsKeyword(token) {
        return token >= 58 && token <= 92;
      }
      function tokenIsOperator(token) {
        return token >= 39 && token <= 59;
      }
      function tokenIsPostfix(token) {
        return token === 34;
      }
      function tokenIsPrefix(token) {
        return tokenPrefixes[token];
      }
      function tokenIsTSTypeOperator(token) {
        return token >= 121 && token <= 123;
      }
      function tokenIsTSDeclarationStart(token) {
        return token >= 124 && token <= 130;
      }
      function tokenLabelName(token) {
        return tokenLabels[token];
      }
      function tokenOperatorPrecedence(token) {
        return tokenBinops[token];
      }
      function tokenIsRightAssociative(token) {
        return token === 57;
      }
      function tokenIsTemplate(token) {
        return token >= 24 && token <= 25;
      }
      function getExportedToken(token) {
        return tokenTypes[token];
      }
      {
        tokenTypes[8].updateContext = (context) => {
          context.pop();
        };
        tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = (context) => {
          context.push(types.brace);
        };
        tokenTypes[22].updateContext = (context) => {
          if (context[context.length - 1] === types.template) {
            context.pop();
          } else {
            context.push(types.template);
          }
        };
        tokenTypes[142].updateContext = (context) => {
          context.push(types.j_expr, types.j_oTag);
        };
      }
      var nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
      var nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\u30FB\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F\uFF65";
      var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
      var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
      nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
      var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];
      var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
      function isInAstralSet(code2, set) {
        let pos = 65536;
        for (let i = 0, length = set.length; i < length; i += 2) {
          pos += set[i];
          if (pos > code2)
            return false;
          pos += set[i + 1];
          if (pos >= code2)
            return true;
        }
        return false;
      }
      function isIdentifierStart(code2) {
        if (code2 < 65)
          return code2 === 36;
        if (code2 <= 90)
          return true;
        if (code2 < 97)
          return code2 === 95;
        if (code2 <= 122)
          return true;
        if (code2 <= 65535) {
          return code2 >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code2));
        }
        return isInAstralSet(code2, astralIdentifierStartCodes);
      }
      function isIdentifierChar2(code2) {
        if (code2 < 48)
          return code2 === 36;
        if (code2 < 58)
          return true;
        if (code2 < 65)
          return false;
        if (code2 <= 90)
          return true;
        if (code2 < 97)
          return code2 === 95;
        if (code2 <= 122)
          return true;
        if (code2 <= 65535) {
          return code2 >= 170 && nonASCIIidentifier.test(String.fromCharCode(code2));
        }
        return isInAstralSet(code2, astralIdentifierStartCodes) || isInAstralSet(code2, astralIdentifierCodes);
      }
      var reservedWords = {
        keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
        strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
        strictBind: ["eval", "arguments"]
      };
      var keywords = new Set(reservedWords.keyword);
      var reservedWordsStrictSet = new Set(reservedWords.strict);
      var reservedWordsStrictBindSet = new Set(reservedWords.strictBind);
      function isReservedWord(word, inModule) {
        return inModule && word === "await" || word === "enum";
      }
      function isStrictReservedWord(word, inModule) {
        return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
      }
      function isStrictBindOnlyReservedWord(word) {
        return reservedWordsStrictBindSet.has(word);
      }
      function isStrictBindReservedWord(word, inModule) {
        return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
      }
      function isKeyword(word) {
        return keywords.has(word);
      }
      function isIteratorStart(current, next, next2) {
        return current === 64 && next === 64 && isIdentifierStart(next2);
      }
      var reservedWordLikeSet = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "eval", "arguments", "enum", "await"]);
      function canBeReservedWord(word) {
        return reservedWordLikeSet.has(word);
      }
      var Scope = class {
        constructor(flags) {
          this.flags = 0;
          this.names = /* @__PURE__ */ new Map();
          this.firstLexicalName = "";
          this.flags = flags;
        }
      };
      var ScopeHandler = class {
        constructor(parser2, inModule) {
          this.parser = void 0;
          this.scopeStack = [];
          this.inModule = void 0;
          this.undefinedExports = /* @__PURE__ */ new Map();
          this.parser = parser2;
          this.inModule = inModule;
        }
        get inTopLevel() {
          return (this.currentScope().flags & 1) > 0;
        }
        get inFunction() {
          return (this.currentVarScopeFlags() & 2) > 0;
        }
        get allowSuper() {
          return (this.currentThisScopeFlags() & 16) > 0;
        }
        get allowDirectSuper() {
          return (this.currentThisScopeFlags() & 32) > 0;
        }
        get inClass() {
          return (this.currentThisScopeFlags() & 64) > 0;
        }
        get inClassAndNotInNonArrowFunction() {
          const flags = this.currentThisScopeFlags();
          return (flags & 64) > 0 && (flags & 2) === 0;
        }
        get inStaticBlock() {
          for (let i = this.scopeStack.length - 1; ; i--) {
            const {
              flags
            } = this.scopeStack[i];
            if (flags & 128) {
              return true;
            }
            if (flags & (387 | 64)) {
              return false;
            }
          }
        }
        get inNonArrowFunction() {
          return (this.currentThisScopeFlags() & 2) > 0;
        }
        get treatFunctionsAsVar() {
          return this.treatFunctionsAsVarInScope(this.currentScope());
        }
        createScope(flags) {
          return new Scope(flags);
        }
        enter(flags) {
          this.scopeStack.push(this.createScope(flags));
        }
        exit() {
          const scope = this.scopeStack.pop();
          return scope.flags;
        }
        treatFunctionsAsVarInScope(scope) {
          return !!(scope.flags & (2 | 128) || !this.parser.inModule && scope.flags & 1);
        }
        declareName(name, bindingType, loc) {
          let scope = this.currentScope();
          if (bindingType & 8 || bindingType & 16) {
            this.checkRedeclarationInScope(scope, name, bindingType, loc);
            let type = scope.names.get(name) || 0;
            if (bindingType & 16) {
              type = type | 4;
            } else {
              if (!scope.firstLexicalName) {
                scope.firstLexicalName = name;
              }
              type = type | 2;
            }
            scope.names.set(name, type);
            if (bindingType & 8) {
              this.maybeExportDefined(scope, name);
            }
          } else if (bindingType & 4) {
            for (let i = this.scopeStack.length - 1; i >= 0; --i) {
              scope = this.scopeStack[i];
              this.checkRedeclarationInScope(scope, name, bindingType, loc);
              scope.names.set(name, (scope.names.get(name) || 0) | 1);
              this.maybeExportDefined(scope, name);
              if (scope.flags & 387)
                break;
            }
          }
          if (this.parser.inModule && scope.flags & 1) {
            this.undefinedExports.delete(name);
          }
        }
        maybeExportDefined(scope, name) {
          if (this.parser.inModule && scope.flags & 1) {
            this.undefinedExports.delete(name);
          }
        }
        checkRedeclarationInScope(scope, name, bindingType, loc) {
          if (this.isRedeclaredInScope(scope, name, bindingType)) {
            this.parser.raise(Errors.VarRedeclaration, loc, {
              identifierName: name
            });
          }
        }
        isRedeclaredInScope(scope, name, bindingType) {
          if (!(bindingType & 1))
            return false;
          if (bindingType & 8) {
            return scope.names.has(name);
          }
          const type = scope.names.get(name);
          if (bindingType & 16) {
            return (type & 2) > 0 || !this.treatFunctionsAsVarInScope(scope) && (type & 1) > 0;
          }
          return (type & 2) > 0 && !(scope.flags & 8 && scope.firstLexicalName === name) || !this.treatFunctionsAsVarInScope(scope) && (type & 4) > 0;
        }
        checkLocalExport(id) {
          const {
            name
          } = id;
          const topLevelScope = this.scopeStack[0];
          if (!topLevelScope.names.has(name)) {
            this.undefinedExports.set(name, id.loc.start);
          }
        }
        currentScope() {
          return this.scopeStack[this.scopeStack.length - 1];
        }
        currentVarScopeFlags() {
          for (let i = this.scopeStack.length - 1; ; i--) {
            const {
              flags
            } = this.scopeStack[i];
            if (flags & 387) {
              return flags;
            }
          }
        }
        currentThisScopeFlags() {
          for (let i = this.scopeStack.length - 1; ; i--) {
            const {
              flags
            } = this.scopeStack[i];
            if (flags & (387 | 64) && !(flags & 4)) {
              return flags;
            }
          }
        }
      };
      var FlowScope = class extends Scope {
        constructor(...args) {
          super(...args);
          this.declareFunctions = /* @__PURE__ */ new Set();
        }
      };
      var FlowScopeHandler = class extends ScopeHandler {
        createScope(flags) {
          return new FlowScope(flags);
        }
        declareName(name, bindingType, loc) {
          const scope = this.currentScope();
          if (bindingType & 2048) {
            this.checkRedeclarationInScope(scope, name, bindingType, loc);
            this.maybeExportDefined(scope, name);
            scope.declareFunctions.add(name);
            return;
          }
          super.declareName(name, bindingType, loc);
        }
        isRedeclaredInScope(scope, name, bindingType) {
          if (super.isRedeclaredInScope(scope, name, bindingType))
            return true;
          if (bindingType & 2048 && !scope.declareFunctions.has(name)) {
            const type = scope.names.get(name);
            return (type & 4) > 0 || (type & 2) > 0;
          }
          return false;
        }
        checkLocalExport(id) {
          if (!this.scopeStack[0].declareFunctions.has(id.name)) {
            super.checkLocalExport(id);
          }
        }
      };
      var BaseParser = class {
        constructor() {
          this.sawUnambiguousESM = false;
          this.ambiguousScriptDifferentAst = false;
        }
        hasPlugin(pluginConfig) {
          if (typeof pluginConfig === "string") {
            return this.plugins.has(pluginConfig);
          } else {
            const [pluginName, pluginOptions] = pluginConfig;
            if (!this.hasPlugin(pluginName)) {
              return false;
            }
            const actualOptions = this.plugins.get(pluginName);
            for (const key of Object.keys(pluginOptions)) {
              if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) {
                return false;
              }
            }
            return true;
          }
        }
        getPluginOption(plugin, name) {
          var _this$plugins$get;
          return (_this$plugins$get = this.plugins.get(plugin)) == null ? void 0 : _this$plugins$get[name];
        }
      };
      function setTrailingComments(node, comments) {
        if (node.trailingComments === void 0) {
          node.trailingComments = comments;
        } else {
          node.trailingComments.unshift(...comments);
        }
      }
      function setLeadingComments(node, comments) {
        if (node.leadingComments === void 0) {
          node.leadingComments = comments;
        } else {
          node.leadingComments.unshift(...comments);
        }
      }
      function setInnerComments(node, comments) {
        if (node.innerComments === void 0) {
          node.innerComments = comments;
        } else {
          node.innerComments.unshift(...comments);
        }
      }
      function adjustInnerComments(node, elements, commentWS) {
        let lastElement = null;
        let i = elements.length;
        while (lastElement === null && i > 0) {
          lastElement = elements[--i];
        }
        if (lastElement === null || lastElement.start > commentWS.start) {
          setInnerComments(node, commentWS.comments);
        } else {
          setTrailingComments(lastElement, commentWS.comments);
        }
      }
      var CommentsParser = class extends BaseParser {
        addComment(comment) {
          if (this.filename)
            comment.loc.filename = this.filename;
          const {
            commentsLen
          } = this.state;
          if (this.comments.length != commentsLen)
            this.comments.length = commentsLen;
          this.comments.push(comment);
          this.state.commentsLen++;
        }
        processComment(node) {
          const {
            commentStack
          } = this.state;
          const commentStackLength = commentStack.length;
          if (commentStackLength === 0)
            return;
          let i = commentStackLength - 1;
          const lastCommentWS = commentStack[i];
          if (lastCommentWS.start === node.end) {
            lastCommentWS.leadingNode = node;
            i--;
          }
          const {
            start: nodeStart
          } = node;
          for (; i >= 0; i--) {
            const commentWS = commentStack[i];
            const commentEnd = commentWS.end;
            if (commentEnd > nodeStart) {
              commentWS.containingNode = node;
              this.finalizeComment(commentWS);
              commentStack.splice(i, 1);
            } else {
              if (commentEnd === nodeStart) {
                commentWS.trailingNode = node;
              }
              break;
            }
          }
        }
        finalizeComment(commentWS) {
          const {
            comments
          } = commentWS;
          if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {
            if (commentWS.leadingNode !== null) {
              setTrailingComments(commentWS.leadingNode, comments);
            }
            if (commentWS.trailingNode !== null) {
              setLeadingComments(commentWS.trailingNode, comments);
            }
          } else {
            const {
              containingNode: node,
              start: commentStart
            } = commentWS;
            if (this.input.charCodeAt(commentStart - 1) === 44) {
              switch (node.type) {
                case "ObjectExpression":
                case "ObjectPattern":
                case "RecordExpression":
                  adjustInnerComments(node, node.properties, commentWS);
                  break;
                case "CallExpression":
                case "OptionalCallExpression":
                  adjustInnerComments(node, node.arguments, commentWS);
                  break;
                case "FunctionDeclaration":
                case "FunctionExpression":
                case "ArrowFunctionExpression":
                case "ObjectMethod":
                case "ClassMethod":
                case "ClassPrivateMethod":
                  adjustInnerComments(node, node.params, commentWS);
                  break;
                case "ArrayExpression":
                case "ArrayPattern":
                case "TupleExpression":
                  adjustInnerComments(node, node.elements, commentWS);
                  break;
                case "ExportNamedDeclaration":
                case "ImportDeclaration":
                  adjustInnerComments(node, node.specifiers, commentWS);
                  break;
                default: {
                  setInnerComments(node, comments);
                }
              }
            } else {
              setInnerComments(node, comments);
            }
          }
        }
        finalizeRemainingComments() {
          const {
            commentStack
          } = this.state;
          for (let i = commentStack.length - 1; i >= 0; i--) {
            this.finalizeComment(commentStack[i]);
          }
          this.state.commentStack = [];
        }
        resetPreviousNodeTrailingComments(node) {
          const {
            commentStack
          } = this.state;
          const {
            length
          } = commentStack;
          if (length === 0)
            return;
          const commentWS = commentStack[length - 1];
          if (commentWS.leadingNode === node) {
            commentWS.leadingNode = null;
          }
        }
        resetPreviousIdentifierLeadingComments(node) {
          const {
            commentStack
          } = this.state;
          const {
            length
          } = commentStack;
          if (length === 0)
            return;
          if (commentStack[length - 1].trailingNode === node) {
            commentStack[length - 1].trailingNode = null;
          } else if (length >= 2 && commentStack[length - 2].trailingNode === node) {
            commentStack[length - 2].trailingNode = null;
          }
        }
        takeSurroundingComments(node, start, end) {
          const {
            commentStack
          } = this.state;
          const commentStackLength = commentStack.length;
          if (commentStackLength === 0)
            return;
          let i = commentStackLength - 1;
          for (; i >= 0; i--) {
            const commentWS = commentStack[i];
            const commentEnd = commentWS.end;
            const commentStart = commentWS.start;
            if (commentStart === end) {
              commentWS.leadingNode = node;
            } else if (commentEnd === start) {
              commentWS.trailingNode = node;
            } else if (commentEnd < start) {
              break;
            }
          }
        }
      };
      var lineBreak = /\r\n?|[\n\u2028\u2029]/;
      var lineBreakG = new RegExp(lineBreak.source, "g");
      function isNewLine(code2) {
        switch (code2) {
          case 10:
          case 13:
          case 8232:
          case 8233:
            return true;
          default:
            return false;
        }
      }
      var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
      var skipWhiteSpaceInLine = /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/g;
      var skipWhiteSpaceToLineBreak = new RegExp("(?=(" + skipWhiteSpaceInLine.source + "))\\1" + /(?=[\n\r\u2028\u2029]|\/\*(?!.*?\*\/)|$)/.source, "y");
      function isWhitespace(code2) {
        switch (code2) {
          case 9:
          case 11:
          case 12:
          case 32:
          case 160:
          case 5760:
          case 8192:
          case 8193:
          case 8194:
          case 8195:
          case 8196:
          case 8197:
          case 8198:
          case 8199:
          case 8200:
          case 8201:
          case 8202:
          case 8239:
          case 8287:
          case 12288:
          case 65279:
            return true;
          default:
            return false;
        }
      }
      var State = class _State {
        constructor() {
          this.flags = 1024;
          this.curLine = void 0;
          this.lineStart = void 0;
          this.startLoc = void 0;
          this.endLoc = void 0;
          this.errors = [];
          this.potentialArrowAt = -1;
          this.noArrowAt = [];
          this.noArrowParamsConversionAt = [];
          this.topicContext = {
            maxNumOfResolvableTopics: 0,
            maxTopicIndex: null
          };
          this.labels = [];
          this.commentsLen = 0;
          this.commentStack = [];
          this.pos = 0;
          this.type = 139;
          this.value = null;
          this.start = 0;
          this.end = 0;
          this.lastTokEndLoc = null;
          this.lastTokStartLoc = null;
          this.context = [types.brace];
          this.firstInvalidTemplateEscapePos = null;
          this.strictErrors = /* @__PURE__ */ new Map();
          this.tokensLength = 0;
        }
        get strict() {
          return (this.flags & 1) > 0;
        }
        set strict(value) {
          if (value) {
            this.flags |= 1;
          } else {
            this.flags &= ~1;
          }
        }
        init({
          strictMode,
          sourceType,
          startLine,
          startColumn
        }) {
          this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === "module";
          this.curLine = startLine;
          this.lineStart = -startColumn;
          this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);
        }
        get maybeInArrowParameters() {
          return (this.flags & 2) > 0;
        }
        set maybeInArrowParameters(value) {
          if (value) {
            this.flags |= 2;
          } else {
            this.flags &= ~2;
          }
        }
        get inType() {
          return (this.flags & 4) > 0;
        }
        set inType(value) {
          if (value) {
            this.flags |= 4;
          } else {
            this.flags &= ~4;
          }
        }
        get noAnonFunctionType() {
          return (this.flags & 8) > 0;
        }
        set noAnonFunctionType(value) {
          if (value) {
            this.flags |= 8;
          } else {
            this.flags &= ~8;
          }
        }
        get hasFlowComment() {
          return (this.flags & 16) > 0;
        }
        set hasFlowComment(value) {
          if (value) {
            this.flags |= 16;
          } else {
            this.flags &= ~16;
          }
        }
        get isAmbientContext() {
          return (this.flags & 32) > 0;
        }
        set isAmbientContext(value) {
          if (value) {
            this.flags |= 32;
          } else {
            this.flags &= ~32;
          }
        }
        get inAbstractClass() {
          return (this.flags & 64) > 0;
        }
        set inAbstractClass(value) {
          if (value) {
            this.flags |= 64;
          } else {
            this.flags &= ~64;
          }
        }
        get inDisallowConditionalTypesContext() {
          return (this.flags & 128) > 0;
        }
        set inDisallowConditionalTypesContext(value) {
          if (value) {
            this.flags |= 128;
          } else {
            this.flags &= ~128;
          }
        }
        get soloAwait() {
          return (this.flags & 256) > 0;
        }
        set soloAwait(value) {
          if (value) {
            this.flags |= 256;
          } else {
            this.flags &= ~256;
          }
        }
        get inFSharpPipelineDirectBody() {
          return (this.flags & 512) > 0;
        }
        set inFSharpPipelineDirectBody(value) {
          if (value) {
            this.flags |= 512;
          } else {
            this.flags &= ~512;
          }
        }
        get canStartJSXElement() {
          return (this.flags & 1024) > 0;
        }
        set canStartJSXElement(value) {
          if (value) {
            this.flags |= 1024;
          } else {
            this.flags &= ~1024;
          }
        }
        get containsEsc() {
          return (this.flags & 2048) > 0;
        }
        set containsEsc(value) {
          if (value) {
            this.flags |= 2048;
          } else {
            this.flags &= ~2048;
          }
        }
        curPosition() {
          return new Position(this.curLine, this.pos - this.lineStart, this.pos);
        }
        clone() {
          const state = new _State();
          state.flags = this.flags;
          state.curLine = this.curLine;
          state.lineStart = this.lineStart;
          state.startLoc = this.startLoc;
          state.endLoc = this.endLoc;
          state.errors = this.errors.slice();
          state.potentialArrowAt = this.potentialArrowAt;
          state.noArrowAt = this.noArrowAt.slice();
          state.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice();
          state.topicContext = this.topicContext;
          state.labels = this.labels.slice();
          state.commentsLen = this.commentsLen;
          state.commentStack = this.commentStack.slice();
          state.pos = this.pos;
          state.type = this.type;
          state.value = this.value;
          state.start = this.start;
          state.end = this.end;
          state.lastTokEndLoc = this.lastTokEndLoc;
          state.lastTokStartLoc = this.lastTokStartLoc;
          state.context = this.context.slice();
          state.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos;
          state.strictErrors = this.strictErrors;
          state.tokensLength = this.tokensLength;
          return state;
        }
      };
      var _isDigit = function isDigit(code2) {
        return code2 >= 48 && code2 <= 57;
      };
      var forbiddenNumericSeparatorSiblings = {
        decBinOct: /* @__PURE__ */ new Set([46, 66, 69, 79, 95, 98, 101, 111]),
        hex: /* @__PURE__ */ new Set([46, 88, 95, 120])
      };
      var isAllowedNumericSeparatorSibling = {
        bin: (ch) => ch === 48 || ch === 49,
        oct: (ch) => ch >= 48 && ch <= 55,
        dec: (ch) => ch >= 48 && ch <= 57,
        hex: (ch) => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102
      };
      function readStringContents(type, input, pos, lineStart, curLine, errors) {
        const initialPos = pos;
        const initialLineStart = lineStart;
        const initialCurLine = curLine;
        let out = "";
        let firstInvalidLoc = null;
        let chunkStart = pos;
        const {
          length
        } = input;
        for (; ; ) {
          if (pos >= length) {
            errors.unterminated(initialPos, initialLineStart, initialCurLine);
            out += input.slice(chunkStart, pos);
            break;
          }
          const ch = input.charCodeAt(pos);
          if (isStringEnd(type, ch, input, pos)) {
            out += input.slice(chunkStart, pos);
            break;
          }
          if (ch === 92) {
            out += input.slice(chunkStart, pos);
            const res = readEscapedChar(input, pos, lineStart, curLine, type === "template", errors);
            if (res.ch === null && !firstInvalidLoc) {
              firstInvalidLoc = {
                pos,
                lineStart,
                curLine
              };
            } else {
              out += res.ch;
            }
            ({
              pos,
              lineStart,
              curLine
            } = res);
            chunkStart = pos;
          } else if (ch === 8232 || ch === 8233) {
            ++pos;
            ++curLine;
            lineStart = pos;
          } else if (ch === 10 || ch === 13) {
            if (type === "template") {
              out += input.slice(chunkStart, pos) + "\n";
              ++pos;
              if (ch === 13 && input.charCodeAt(pos) === 10) {
                ++pos;
              }
              ++curLine;
              chunkStart = lineStart = pos;
            } else {
              errors.unterminated(initialPos, initialLineStart, initialCurLine);
            }
          } else {
            ++pos;
          }
        }
        return {
          pos,
          str: out,
          firstInvalidLoc,
          lineStart,
          curLine,
          containsInvalid: !!firstInvalidLoc
        };
      }
      function isStringEnd(type, ch, input, pos) {
        if (type === "template") {
          return ch === 96 || ch === 36 && input.charCodeAt(pos + 1) === 123;
        }
        return ch === (type === "double" ? 34 : 39);
      }
      function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {
        const throwOnInvalid = !inTemplate;
        pos++;
        const res = (ch2) => ({
          pos,
          ch: ch2,
          lineStart,
          curLine
        });
        const ch = input.charCodeAt(pos++);
        switch (ch) {
          case 110:
            return res("\n");
          case 114:
            return res("\r");
          case 120: {
            let code2;
            ({
              code: code2,
              pos
            } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors));
            return res(code2 === null ? null : String.fromCharCode(code2));
          }
          case 117: {
            let code2;
            ({
              code: code2,
              pos
            } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors));
            return res(code2 === null ? null : String.fromCodePoint(code2));
          }
          case 116:
            return res("	");
          case 98:
            return res("\b");
          case 118:
            return res("\v");
          case 102:
            return res("\f");
          case 13:
            if (input.charCodeAt(pos) === 10) {
              ++pos;
            }
          case 10:
            lineStart = pos;
            ++curLine;
          case 8232:
          case 8233:
            return res("");
          case 56:
          case 57:
            if (inTemplate) {
              return res(null);
            } else {
              errors.strictNumericEscape(pos - 1, lineStart, curLine);
            }
          default:
            if (ch >= 48 && ch <= 55) {
              const startPos = pos - 1;
              const match = input.slice(startPos, pos + 2).match(/^[0-7]+/);
              let octalStr = match[0];
              let octal = parseInt(octalStr, 8);
              if (octal > 255) {
                octalStr = octalStr.slice(0, -1);
                octal = parseInt(octalStr, 8);
              }
              pos += octalStr.length - 1;
              const next = input.charCodeAt(pos);
              if (octalStr !== "0" || next === 56 || next === 57) {
                if (inTemplate) {
                  return res(null);
                } else {
                  errors.strictNumericEscape(startPos, lineStart, curLine);
                }
              }
              return res(String.fromCharCode(octal));
            }
            return res(String.fromCharCode(ch));
        }
      }
      function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {
        const initialPos = pos;
        let n;
        ({
          n,
          pos
        } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid));
        if (n === null) {
          if (throwOnInvalid) {
            errors.invalidEscapeSequence(initialPos, lineStart, curLine);
          } else {
            pos = initialPos - 1;
          }
        }
        return {
          code: n,
          pos
        };
      }
      function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {
        const start = pos;
        const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;
        const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
        let invalid = false;
        let total = 0;
        for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {
          const code2 = input.charCodeAt(pos);
          let val;
          if (code2 === 95 && allowNumSeparator !== "bail") {
            const prev = input.charCodeAt(pos - 1);
            const next = input.charCodeAt(pos + 1);
            if (!allowNumSeparator) {
              if (bailOnError)
                return {
                  n: null,
                  pos
                };
              errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);
            } else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
              if (bailOnError)
                return {
                  n: null,
                  pos
                };
              errors.unexpectedNumericSeparator(pos, lineStart, curLine);
            }
            ++pos;
            continue;
          }
          if (code2 >= 97) {
            val = code2 - 97 + 10;
          } else if (code2 >= 65) {
            val = code2 - 65 + 10;
          } else if (_isDigit(code2)) {
            val = code2 - 48;
          } else {
            val = Infinity;
          }
          if (val >= radix) {
            if (val <= 9 && bailOnError) {
              return {
                n: null,
                pos
              };
            } else if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) {
              val = 0;
            } else if (forceLen) {
              val = 0;
              invalid = true;
            } else {
              break;
            }
          }
          ++pos;
          total = total * radix + val;
        }
        if (pos === start || len != null && pos - start !== len || invalid) {
          return {
            n: null,
            pos
          };
        }
        return {
          n: total,
          pos
        };
      }
      function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {
        const ch = input.charCodeAt(pos);
        let code2;
        if (ch === 123) {
          ++pos;
          ({
            code: code2,
            pos
          } = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors));
          ++pos;
          if (code2 !== null && code2 > 1114111) {
            if (throwOnInvalid) {
              errors.invalidCodePoint(pos, lineStart, curLine);
            } else {
              return {
                code: null,
                pos
              };
            }
          }
        } else {
          ({
            code: code2,
            pos
          } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));
        }
        return {
          code: code2,
          pos
        };
      }
      function buildPosition(pos, lineStart, curLine) {
        return new Position(curLine, pos - lineStart, pos);
      }
      var VALID_REGEX_FLAGS = /* @__PURE__ */ new Set([103, 109, 115, 105, 121, 117, 100, 118]);
      var Token = class {
        constructor(state) {
          this.type = state.type;
          this.value = state.value;
          this.start = state.start;
          this.end = state.end;
          this.loc = new SourceLocation(state.startLoc, state.endLoc);
        }
      };
      var Tokenizer = class extends CommentsParser {
        constructor(options, input) {
          super();
          this.isLookahead = void 0;
          this.tokens = [];
          this.errorHandlers_readInt = {
            invalidDigit: (pos, lineStart, curLine, radix) => {
              if (!this.options.errorRecovery)
                return false;
              this.raise(Errors.InvalidDigit, buildPosition(pos, lineStart, curLine), {
                radix
              });
              return true;
            },
            numericSeparatorInEscapeSequence: this.errorBuilder(Errors.NumericSeparatorInEscapeSequence),
            unexpectedNumericSeparator: this.errorBuilder(Errors.UnexpectedNumericSeparator)
          };
          this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, {
            invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),
            invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint)
          });
          this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, {
            strictNumericEscape: (pos, lineStart, curLine) => {
              this.recordStrictModeErrors(Errors.StrictNumericEscape, buildPosition(pos, lineStart, curLine));
            },
            unterminated: (pos, lineStart, curLine) => {
              throw this.raise(Errors.UnterminatedString, buildPosition(pos - 1, lineStart, curLine));
            }
          });
          this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, {
            strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),
            unterminated: (pos, lineStart, curLine) => {
              throw this.raise(Errors.UnterminatedTemplate, buildPosition(pos, lineStart, curLine));
            }
          });
          this.state = new State();
          this.state.init(options);
          this.input = input;
          this.length = input.length;
          this.comments = [];
          this.isLookahead = false;
        }
        pushToken(token) {
          this.tokens.length = this.state.tokensLength;
          this.tokens.push(token);
          ++this.state.tokensLength;
        }
        next() {
          this.checkKeywordEscapes();
          if (this.options.tokens) {
            this.pushToken(new Token(this.state));
          }
          this.state.lastTokEndLoc = this.state.endLoc;
          this.state.lastTokStartLoc = this.state.startLoc;
          this.nextToken();
        }
        eat(type) {
          if (this.match(type)) {
            this.next();
            return true;
          } else {
            return false;
          }
        }
        match(type) {
          return this.state.type === type;
        }
        createLookaheadState(state) {
          return {
            pos: state.pos,
            value: null,
            type: state.type,
            start: state.start,
            end: state.end,
            context: [this.curContext()],
            inType: state.inType,
            startLoc: state.startLoc,
            lastTokEndLoc: state.lastTokEndLoc,
            curLine: state.curLine,
            lineStart: state.lineStart,
            curPosition: state.curPosition
          };
        }
        lookahead() {
          const old = this.state;
          this.state = this.createLookaheadState(old);
          this.isLookahead = true;
          this.nextToken();
          this.isLookahead = false;
          const curr = this.state;
          this.state = old;
          return curr;
        }
        nextTokenStart() {
          return this.nextTokenStartSince(this.state.pos);
        }
        nextTokenStartSince(pos) {
          skipWhiteSpace.lastIndex = pos;
          return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;
        }
        lookaheadCharCode() {
          return this.input.charCodeAt(this.nextTokenStart());
        }
        nextTokenInLineStart() {
          return this.nextTokenInLineStartSince(this.state.pos);
        }
        nextTokenInLineStartSince(pos) {
          skipWhiteSpaceInLine.lastIndex = pos;
          return skipWhiteSpaceInLine.test(this.input) ? skipWhiteSpaceInLine.lastIndex : pos;
        }
        lookaheadInLineCharCode() {
          return this.input.charCodeAt(this.nextTokenInLineStart());
        }
        codePointAtPos(pos) {
          let cp = this.input.charCodeAt(pos);
          if ((cp & 64512) === 55296 && ++pos < this.input.length) {
            const trail = this.input.charCodeAt(pos);
            if ((trail & 64512) === 56320) {
              cp = 65536 + ((cp & 1023) << 10) + (trail & 1023);
            }
          }
          return cp;
        }
        setStrict(strict) {
          this.state.strict = strict;
          if (strict) {
            this.state.strictErrors.forEach(([toParseError, at]) => this.raise(toParseError, at));
            this.state.strictErrors.clear();
          }
        }
        curContext() {
          return this.state.context[this.state.context.length - 1];
        }
        nextToken() {
          this.skipSpace();
          this.state.start = this.state.pos;
          if (!this.isLookahead)
            this.state.startLoc = this.state.curPosition();
          if (this.state.pos >= this.length) {
            this.finishToken(139);
            return;
          }
          this.getTokenFromCode(this.codePointAtPos(this.state.pos));
        }
        skipBlockComment(commentEnd) {
          let startLoc;
          if (!this.isLookahead)
            startLoc = this.state.curPosition();
          const start = this.state.pos;
          const end = this.input.indexOf(commentEnd, start + 2);
          if (end === -1) {
            throw this.raise(Errors.UnterminatedComment, this.state.curPosition());
          }
          this.state.pos = end + commentEnd.length;
          lineBreakG.lastIndex = start + 2;
          while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {
            ++this.state.curLine;
            this.state.lineStart = lineBreakG.lastIndex;
          }
          if (this.isLookahead)
            return;
          const comment = {
            type: "CommentBlock",
            value: this.input.slice(start + 2, end),
            start,
            end: end + commentEnd.length,
            loc: new SourceLocation(startLoc, this.state.curPosition())
          };
          if (this.options.tokens)
            this.pushToken(comment);
          return comment;
        }
        skipLineComment(startSkip) {
          const start = this.state.pos;
          let startLoc;
          if (!this.isLookahead)
            startLoc = this.state.curPosition();
          let ch = this.input.charCodeAt(this.state.pos += startSkip);
          if (this.state.pos < this.length) {
            while (!isNewLine(ch) && ++this.state.pos < this.length) {
              ch = this.input.charCodeAt(this.state.pos);
            }
          }
          if (this.isLookahead)
            return;
          const end = this.state.pos;
          const value = this.input.slice(start + startSkip, end);
          const comment = {
            type: "CommentLine",
            value,
            start,
            end,
            loc: new SourceLocation(startLoc, this.state.curPosition())
          };
          if (this.options.tokens)
            this.pushToken(comment);
          return comment;
        }
        skipSpace() {
          const spaceStart = this.state.pos;
          const comments = [];
          loop:
            while (this.state.pos < this.length) {
              const ch = this.input.charCodeAt(this.state.pos);
              switch (ch) {
                case 32:
                case 160:
                case 9:
                  ++this.state.pos;
                  break;
                case 13:
                  if (this.input.charCodeAt(this.state.pos + 1) === 10) {
                    ++this.state.pos;
                  }
                case 10:
                case 8232:
                case 8233:
                  ++this.state.pos;
                  ++this.state.curLine;
                  this.state.lineStart = this.state.pos;
                  break;
                case 47:
                  switch (this.input.charCodeAt(this.state.pos + 1)) {
                    case 42: {
                      const comment = this.skipBlockComment("*/");
                      if (comment !== void 0) {
                        this.addComment(comment);
                        if (this.options.attachComment)
                          comments.push(comment);
                      }
                      break;
                    }
                    case 47: {
                      const comment = this.skipLineComment(2);
                      if (comment !== void 0) {
                        this.addComment(comment);
                        if (this.options.attachComment)
                          comments.push(comment);
                      }
                      break;
                    }
                    default:
                      break loop;
                  }
                  break;
                default:
                  if (isWhitespace(ch)) {
                    ++this.state.pos;
                  } else if (ch === 45 && !this.inModule && this.options.annexB) {
                    const pos = this.state.pos;
                    if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {
                      const comment = this.skipLineComment(3);
                      if (comment !== void 0) {
                        this.addComment(comment);
                        if (this.options.attachComment)
                          comments.push(comment);
                      }
                    } else {
                      break loop;
                    }
                  } else if (ch === 60 && !this.inModule && this.options.annexB) {
                    const pos = this.state.pos;
                    if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {
                      const comment = this.skipLineComment(4);
                      if (comment !== void 0) {
                        this.addComment(comment);
                        if (this.options.attachComment)
                          comments.push(comment);
                      }
                    } else {
                      break loop;
                    }
                  } else {
                    break loop;
                  }
              }
            }
          if (comments.length > 0) {
            const end = this.state.pos;
            const commentWhitespace = {
              start: spaceStart,
              end,
              comments,
              leadingNode: null,
              trailingNode: null,
              containingNode: null
            };
            this.state.commentStack.push(commentWhitespace);
          }
        }
        finishToken(type, val) {
          this.state.end = this.state.pos;
          this.state.endLoc = this.state.curPosition();
          const prevType = this.state.type;
          this.state.type = type;
          this.state.value = val;
          if (!this.isLookahead) {
            this.updateContext(prevType);
          }
        }
        replaceToken(type) {
          this.state.type = type;
          this.updateContext();
        }
        readToken_numberSign() {
          if (this.state.pos === 0 && this.readToken_interpreter()) {
            return;
          }
          const nextPos = this.state.pos + 1;
          const next = this.codePointAtPos(nextPos);
          if (next >= 48 && next <= 57) {
            throw this.raise(Errors.UnexpectedDigitAfterHash, this.state.curPosition());
          }
          if (next === 123 || next === 91 && this.hasPlugin("recordAndTuple")) {
            this.expectPlugin("recordAndTuple");
            if (this.getPluginOption("recordAndTuple", "syntaxType") === "bar") {
              throw this.raise(next === 123 ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, this.state.curPosition());
            }
            this.state.pos += 2;
            if (next === 123) {
              this.finishToken(7);
            } else {
              this.finishToken(1);
            }
          } else if (isIdentifierStart(next)) {
            ++this.state.pos;
            this.finishToken(138, this.readWord1(next));
          } else if (next === 92) {
            ++this.state.pos;
            this.finishToken(138, this.readWord1());
          } else {
            this.finishOp(27, 1);
          }
        }
        readToken_dot() {
          const next = this.input.charCodeAt(this.state.pos + 1);
          if (next >= 48 && next <= 57) {
            this.readNumber(true);
            return;
          }
          if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {
            this.state.pos += 3;
            this.finishToken(21);
          } else {
            ++this.state.pos;
            this.finishToken(16);
          }
        }
        readToken_slash() {
          const next = this.input.charCodeAt(this.state.pos + 1);
          if (next === 61) {
            this.finishOp(31, 2);
          } else {
            this.finishOp(56, 1);
          }
        }
        readToken_interpreter() {
          if (this.state.pos !== 0 || this.length < 2)
            return false;
          let ch = this.input.charCodeAt(this.state.pos + 1);
          if (ch !== 33)
            return false;
          const start = this.state.pos;
          this.state.pos += 1;
          while (!isNewLine(ch) && ++this.state.pos < this.length) {
            ch = this.input.charCodeAt(this.state.pos);
          }
          const value = this.input.slice(start + 2, this.state.pos);
          this.finishToken(28, value);
          return true;
        }
        readToken_mult_modulo(code2) {
          let type = code2 === 42 ? 55 : 54;
          let width = 1;
          let next = this.input.charCodeAt(this.state.pos + 1);
          if (code2 === 42 && next === 42) {
            width++;
            next = this.input.charCodeAt(this.state.pos + 2);
            type = 57;
          }
          if (next === 61 && !this.state.inType) {
            width++;
            type = code2 === 37 ? 33 : 30;
          }
          this.finishOp(type, width);
        }
        readToken_pipe_amp(code2) {
          const next = this.input.charCodeAt(this.state.pos + 1);
          if (next === code2) {
            if (this.input.charCodeAt(this.state.pos + 2) === 61) {
              this.finishOp(30, 3);
            } else {
              this.finishOp(code2 === 124 ? 41 : 42, 2);
            }
            return;
          }
          if (code2 === 124) {
            if (next === 62) {
              this.finishOp(39, 2);
              return;
            }
            if (this.hasPlugin("recordAndTuple") && next === 125) {
              if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
                throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, this.state.curPosition());
              }
              this.state.pos += 2;
              this.finishToken(9);
              return;
            }
            if (this.hasPlugin("recordAndTuple") && next === 93) {
              if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
                throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, this.state.curPosition());
              }
              this.state.pos += 2;
              this.finishToken(4);
              return;
            }
          }
          if (next === 61) {
            this.finishOp(30, 2);
            return;
          }
          this.finishOp(code2 === 124 ? 43 : 45, 1);
        }
        readToken_caret() {
          const next = this.input.charCodeAt(this.state.pos + 1);
          if (next === 61 && !this.state.inType) {
            this.finishOp(32, 2);
          } else if (next === 94 && this.hasPlugin(["pipelineOperator", {
            proposal: "hack",
            topicToken: "^^"
          }])) {
            this.finishOp(37, 2);
            const lookaheadCh = this.input.codePointAt(this.state.pos);
            if (lookaheadCh === 94) {
              this.unexpected();
            }
          } else {
            this.finishOp(44, 1);
          }
        }
        readToken_atSign() {
          const next = this.input.charCodeAt(this.state.pos + 1);
          if (next === 64 && this.hasPlugin(["pipelineOperator", {
            proposal: "hack",
            topicToken: "@@"
          }])) {
            this.finishOp(38, 2);
          } else {
            this.finishOp(26, 1);
          }
        }
        readToken_plus_min(code2) {
          const next = this.input.charCodeAt(this.state.pos + 1);
          if (next === code2) {
            this.finishOp(34, 2);
            return;
          }
          if (next === 61) {
            this.finishOp(30, 2);
          } else {
            this.finishOp(53, 1);
          }
        }
        readToken_lt() {
          const {
            pos
          } = this.state;
          const next = this.input.charCodeAt(pos + 1);
          if (next === 60) {
            if (this.input.charCodeAt(pos + 2) === 61) {
              this.finishOp(30, 3);
              return;
            }
            this.finishOp(51, 2);
            return;
          }
          if (next === 61) {
            this.finishOp(49, 2);
            return;
          }
          this.finishOp(47, 1);
        }
        readToken_gt() {
          const {
            pos
          } = this.state;
          const next = this.input.charCodeAt(pos + 1);
          if (next === 62) {
            const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;
            if (this.input.charCodeAt(pos + size) === 61) {
              this.finishOp(30, size + 1);
              return;
            }
            this.finishOp(52, size);
            return;
          }
          if (next === 61) {
            this.finishOp(49, 2);
            return;
          }
          this.finishOp(48, 1);
        }
        readToken_eq_excl(code2) {
          const next = this.input.charCodeAt(this.state.pos + 1);
          if (next === 61) {
            this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
            return;
          }
          if (code2 === 61 && next === 62) {
            this.state.pos += 2;
            this.finishToken(19);
            return;
          }
          this.finishOp(code2 === 61 ? 29 : 35, 1);
        }
        readToken_question() {
          const next = this.input.charCodeAt(this.state.pos + 1);
          const next2 = this.input.charCodeAt(this.state.pos + 2);
          if (next === 63) {
            if (next2 === 61) {
              this.finishOp(30, 3);
            } else {
              this.finishOp(40, 2);
            }
          } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {
            this.state.pos += 2;
            this.finishToken(18);
          } else {
            ++this.state.pos;
            this.finishToken(17);
          }
        }
        getTokenFromCode(code2) {
          switch (code2) {
            case 46:
              this.readToken_dot();
              return;
            case 40:
              ++this.state.pos;
              this.finishToken(10);
              return;
            case 41:
              ++this.state.pos;
              this.finishToken(11);
              return;
            case 59:
              ++this.state.pos;
              this.finishToken(13);
              return;
            case 44:
              ++this.state.pos;
              this.finishToken(12);
              return;
            case 91:
              if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
                if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
                  throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, this.state.curPosition());
                }
                this.state.pos += 2;
                this.finishToken(2);
              } else {
                ++this.state.pos;
                this.finishToken(0);
              }
              return;
            case 93:
              ++this.state.pos;
              this.finishToken(3);
              return;
            case 123:
              if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
                if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
                  throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, this.state.curPosition());
                }
                this.state.pos += 2;
                this.finishToken(6);
              } else {
                ++this.state.pos;
                this.finishToken(5);
              }
              return;
            case 125:
              ++this.state.pos;
              this.finishToken(8);
              return;
            case 58:
              if (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58) {
                this.finishOp(15, 2);
              } else {
                ++this.state.pos;
                this.finishToken(14);
              }
              return;
            case 63:
              this.readToken_question();
              return;
            case 96:
              this.readTemplateToken();
              return;
            case 48: {
              const next = this.input.charCodeAt(this.state.pos + 1);
              if (next === 120 || next === 88) {
                this.readRadixNumber(16);
                return;
              }
              if (next === 111 || next === 79) {
                this.readRadixNumber(8);
                return;
              }
              if (next === 98 || next === 66) {
                this.readRadixNumber(2);
                return;
              }
            }
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
              this.readNumber(false);
              return;
            case 34:
            case 39:
              this.readString(code2);
              return;
            case 47:
              this.readToken_slash();
              return;
            case 37:
            case 42:
              this.readToken_mult_modulo(code2);
              return;
            case 124:
            case 38:
              this.readToken_pipe_amp(code2);
              return;
            case 94:
              this.readToken_caret();
              return;
            case 43:
            case 45:
              this.readToken_plus_min(code2);
              return;
            case 60:
              this.readToken_lt();
              return;
            case 62:
              this.readToken_gt();
              return;
            case 61:
            case 33:
              this.readToken_eq_excl(code2);
              return;
            case 126:
              this.finishOp(36, 1);
              return;
            case 64:
              this.readToken_atSign();
              return;
            case 35:
              this.readToken_numberSign();
              return;
            case 92:
              this.readWord();
              return;
            default:
              if (isIdentifierStart(code2)) {
                this.readWord(code2);
                return;
              }
          }
          throw this.raise(Errors.InvalidOrUnexpectedToken, this.state.curPosition(), {
            unexpected: String.fromCodePoint(code2)
          });
        }
        finishOp(type, size) {
          const str = this.input.slice(this.state.pos, this.state.pos + size);
          this.state.pos += size;
          this.finishToken(type, str);
        }
        readRegexp() {
          const startLoc = this.state.startLoc;
          const start = this.state.start + 1;
          let escaped, inClass;
          let {
            pos
          } = this.state;
          for (; ; ++pos) {
            if (pos >= this.length) {
              throw this.raise(Errors.UnterminatedRegExp, createPositionWithColumnOffset(startLoc, 1));
            }
            const ch = this.input.charCodeAt(pos);
            if (isNewLine(ch)) {
              throw this.raise(Errors.UnterminatedRegExp, createPositionWithColumnOffset(startLoc, 1));
            }
            if (escaped) {
              escaped = false;
            } else {
              if (ch === 91) {
                inClass = true;
              } else if (ch === 93 && inClass) {
                inClass = false;
              } else if (ch === 47 && !inClass) {
                break;
              }
              escaped = ch === 92;
            }
          }
          const content = this.input.slice(start, pos);
          ++pos;
          let mods = "";
          const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);
          while (pos < this.length) {
            const cp = this.codePointAtPos(pos);
            const char = String.fromCharCode(cp);
            if (VALID_REGEX_FLAGS.has(cp)) {
              if (cp === 118) {
                if (mods.includes("u")) {
                  this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());
                }
              } else if (cp === 117) {
                if (mods.includes("v")) {
                  this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());
                }
              }
              if (mods.includes(char)) {
                this.raise(Errors.DuplicateRegExpFlags, nextPos());
              }
            } else if (isIdentifierChar2(cp) || cp === 92) {
              this.raise(Errors.MalformedRegExpFlags, nextPos());
            } else {
              break;
            }
            ++pos;
            mods += char;
          }
          this.state.pos = pos;
          this.finishToken(137, {
            pattern: content,
            flags: mods
          });
        }
        readInt(radix, len, forceLen = false, allowNumSeparator = true) {
          const {
            n,
            pos
          } = readInt(this.input, this.state.pos, this.state.lineStart, this.state.curLine, radix, len, forceLen, allowNumSeparator, this.errorHandlers_readInt, false);
          this.state.pos = pos;
          return n;
        }
        readRadixNumber(radix) {
          const startLoc = this.state.curPosition();
          let isBigInt = false;
          this.state.pos += 2;
          const val = this.readInt(radix);
          if (val == null) {
            this.raise(Errors.InvalidDigit, createPositionWithColumnOffset(startLoc, 2), {
              radix
            });
          }
          const next = this.input.charCodeAt(this.state.pos);
          if (next === 110) {
            ++this.state.pos;
            isBigInt = true;
          } else if (next === 109) {
            throw this.raise(Errors.InvalidDecimal, startLoc);
          }
          if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {
            throw this.raise(Errors.NumberIdentifier, this.state.curPosition());
          }
          if (isBigInt) {
            const str = this.input.slice(startLoc.index, this.state.pos).replace(/[_n]/g, "");
            this.finishToken(135, str);
            return;
          }
          this.finishToken(134, val);
        }
        readNumber(startsWithDot) {
          const start = this.state.pos;
          const startLoc = this.state.curPosition();
          let isFloat = false;
          let isBigInt = false;
          let isDecimal = false;
          let hasExponent = false;
          let isOctal = false;
          if (!startsWithDot && this.readInt(10) === null) {
            this.raise(Errors.InvalidNumber, this.state.curPosition());
          }
          const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;
          if (hasLeadingZero) {
            const integer = this.input.slice(start, this.state.pos);
            this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);
            if (!this.state.strict) {
              const underscorePos = integer.indexOf("_");
              if (underscorePos > 0) {
                this.raise(Errors.ZeroDigitNumericSeparator, createPositionWithColumnOffset(startLoc, underscorePos));
              }
            }
            isOctal = hasLeadingZero && !/[89]/.test(integer);
          }
          let next = this.input.charCodeAt(this.state.pos);
          if (next === 46 && !isOctal) {
            ++this.state.pos;
            this.readInt(10);
            isFloat = true;
            next = this.input.charCodeAt(this.state.pos);
          }
          if ((next === 69 || next === 101) && !isOctal) {
            next = this.input.charCodeAt(++this.state.pos);
            if (next === 43 || next === 45) {
              ++this.state.pos;
            }
            if (this.readInt(10) === null) {
              this.raise(Errors.InvalidOrMissingExponent, startLoc);
            }
            isFloat = true;
            hasExponent = true;
            next = this.input.charCodeAt(this.state.pos);
          }
          if (next === 110) {
            if (isFloat || hasLeadingZero) {
              this.raise(Errors.InvalidBigIntLiteral, startLoc);
            }
            ++this.state.pos;
            isBigInt = true;
          }
          if (next === 109) {
            this.expectPlugin("decimal", this.state.curPosition());
            if (hasExponent || hasLeadingZero) {
              this.raise(Errors.InvalidDecimal, startLoc);
            }
            ++this.state.pos;
            isDecimal = true;
          }
          if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {
            throw this.raise(Errors.NumberIdentifier, this.state.curPosition());
          }
          const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, "");
          if (isBigInt) {
            this.finishToken(135, str);
            return;
          }
          if (isDecimal) {
            this.finishToken(136, str);
            return;
          }
          const val = isOctal ? parseInt(str, 8) : parseFloat(str);
          this.finishToken(134, val);
        }
        readCodePoint(throwOnInvalid) {
          const {
            code: code2,
            pos
          } = readCodePoint(this.input, this.state.pos, this.state.lineStart, this.state.curLine, throwOnInvalid, this.errorHandlers_readCodePoint);
          this.state.pos = pos;
          return code2;
        }
        readString(quote) {
          const {
            str,
            pos,
            curLine,
            lineStart
          } = readStringContents(quote === 34 ? "double" : "single", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);
          this.state.pos = pos + 1;
          this.state.lineStart = lineStart;
          this.state.curLine = curLine;
          this.finishToken(133, str);
        }
        readTemplateContinuation() {
          if (!this.match(8)) {
            this.unexpected(null, 8);
          }
          this.state.pos--;
          this.readTemplateToken();
        }
        readTemplateToken() {
          const opening = this.input[this.state.pos];
          const {
            str,
            firstInvalidLoc,
            pos,
            curLine,
            lineStart
          } = readStringContents("template", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);
          this.state.pos = pos + 1;
          this.state.lineStart = lineStart;
          this.state.curLine = curLine;
          if (firstInvalidLoc) {
            this.state.firstInvalidTemplateEscapePos = new Position(firstInvalidLoc.curLine, firstInvalidLoc.pos - firstInvalidLoc.lineStart, firstInvalidLoc.pos);
          }
          if (this.input.codePointAt(pos) === 96) {
            this.finishToken(24, firstInvalidLoc ? null : opening + str + "`");
          } else {
            this.state.pos++;
            this.finishToken(25, firstInvalidLoc ? null : opening + str + "${");
          }
        }
        recordStrictModeErrors(toParseError, at) {
          const index = at.index;
          if (this.state.strict && !this.state.strictErrors.has(index)) {
            this.raise(toParseError, at);
          } else {
            this.state.strictErrors.set(index, [toParseError, at]);
          }
        }
        readWord1(firstCode) {
          this.state.containsEsc = false;
          let word = "";
          const start = this.state.pos;
          let chunkStart = this.state.pos;
          if (firstCode !== void 0) {
            this.state.pos += firstCode <= 65535 ? 1 : 2;
          }
          while (this.state.pos < this.length) {
            const ch = this.codePointAtPos(this.state.pos);
            if (isIdentifierChar2(ch)) {
              this.state.pos += ch <= 65535 ? 1 : 2;
            } else if (ch === 92) {
              this.state.containsEsc = true;
              word += this.input.slice(chunkStart, this.state.pos);
              const escStart = this.state.curPosition();
              const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar2;
              if (this.input.charCodeAt(++this.state.pos) !== 117) {
                this.raise(Errors.MissingUnicodeEscape, this.state.curPosition());
                chunkStart = this.state.pos - 1;
                continue;
              }
              ++this.state.pos;
              const esc = this.readCodePoint(true);
              if (esc !== null) {
                if (!identifierCheck(esc)) {
                  this.raise(Errors.EscapedCharNotAnIdentifier, escStart);
                }
                word += String.fromCodePoint(esc);
              }
              chunkStart = this.state.pos;
            } else {
              break;
            }
          }
          return word + this.input.slice(chunkStart, this.state.pos);
        }
        readWord(firstCode) {
          const word = this.readWord1(firstCode);
          const type = keywords$1.get(word);
          if (type !== void 0) {
            this.finishToken(type, tokenLabelName(type));
          } else {
            this.finishToken(132, word);
          }
        }
        checkKeywordEscapes() {
          const {
            type
          } = this.state;
          if (tokenIsKeyword(type) && this.state.containsEsc) {
            this.raise(Errors.InvalidEscapedReservedWord, this.state.startLoc, {
              reservedWord: tokenLabelName(type)
            });
          }
        }
        raise(toParseError, at, details = {}) {
          const loc = at instanceof Position ? at : at.loc.start;
          const error = toParseError(loc, details);
          if (!this.options.errorRecovery)
            throw error;
          if (!this.isLookahead)
            this.state.errors.push(error);
          return error;
        }
        raiseOverwrite(toParseError, at, details = {}) {
          const loc = at instanceof Position ? at : at.loc.start;
          const pos = loc.index;
          const errors = this.state.errors;
          for (let i = errors.length - 1; i >= 0; i--) {
            const error = errors[i];
            if (error.loc.index === pos) {
              return errors[i] = toParseError(loc, details);
            }
            if (error.loc.index < pos)
              break;
          }
          return this.raise(toParseError, at, details);
        }
        updateContext(prevType) {
        }
        unexpected(loc, type) {
          throw this.raise(Errors.UnexpectedToken, loc != null ? loc : this.state.startLoc, {
            expected: type ? tokenLabelName(type) : null
          });
        }
        expectPlugin(pluginName, loc) {
          if (this.hasPlugin(pluginName)) {
            return true;
          }
          throw this.raise(Errors.MissingPlugin, loc != null ? loc : this.state.startLoc, {
            missingPlugin: [pluginName]
          });
        }
        expectOnePlugin(pluginNames) {
          if (!pluginNames.some((name) => this.hasPlugin(name))) {
            throw this.raise(Errors.MissingOneOfPlugins, this.state.startLoc, {
              missingPlugin: pluginNames
            });
          }
        }
        errorBuilder(error) {
          return (pos, lineStart, curLine) => {
            this.raise(error, buildPosition(pos, lineStart, curLine));
          };
        }
      };
      var ClassScope = class {
        constructor() {
          this.privateNames = /* @__PURE__ */ new Set();
          this.loneAccessors = /* @__PURE__ */ new Map();
          this.undefinedPrivateNames = /* @__PURE__ */ new Map();
        }
      };
      var ClassScopeHandler = class {
        constructor(parser2) {
          this.parser = void 0;
          this.stack = [];
          this.undefinedPrivateNames = /* @__PURE__ */ new Map();
          this.parser = parser2;
        }
        current() {
          return this.stack[this.stack.length - 1];
        }
        enter() {
          this.stack.push(new ClassScope());
        }
        exit() {
          const oldClassScope = this.stack.pop();
          const current = this.current();
          for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {
            if (current) {
              if (!current.undefinedPrivateNames.has(name)) {
                current.undefinedPrivateNames.set(name, loc);
              }
            } else {
              this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {
                identifierName: name
              });
            }
          }
        }
        declarePrivateName(name, elementType, loc) {
          const {
            privateNames,
            loneAccessors,
            undefinedPrivateNames
          } = this.current();
          let redefined = privateNames.has(name);
          if (elementType & 3) {
            const accessor = redefined && loneAccessors.get(name);
            if (accessor) {
              const oldStatic = accessor & 4;
              const newStatic = elementType & 4;
              const oldKind = accessor & 3;
              const newKind = elementType & 3;
              redefined = oldKind === newKind || oldStatic !== newStatic;
              if (!redefined)
                loneAccessors.delete(name);
            } else if (!redefined) {
              loneAccessors.set(name, elementType);
            }
          }
          if (redefined) {
            this.parser.raise(Errors.PrivateNameRedeclaration, loc, {
              identifierName: name
            });
          }
          privateNames.add(name);
          undefinedPrivateNames.delete(name);
        }
        usePrivateName(name, loc) {
          let classScope;
          for (classScope of this.stack) {
            if (classScope.privateNames.has(name))
              return;
          }
          if (classScope) {
            classScope.undefinedPrivateNames.set(name, loc);
          } else {
            this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {
              identifierName: name
            });
          }
        }
      };
      var ExpressionScope = class {
        constructor(type = 0) {
          this.type = type;
        }
        canBeArrowParameterDeclaration() {
          return this.type === 2 || this.type === 1;
        }
        isCertainlyParameterDeclaration() {
          return this.type === 3;
        }
      };
      var ArrowHeadParsingScope = class extends ExpressionScope {
        constructor(type) {
          super(type);
          this.declarationErrors = /* @__PURE__ */ new Map();
        }
        recordDeclarationError(ParsingErrorClass, at) {
          const index = at.index;
          this.declarationErrors.set(index, [ParsingErrorClass, at]);
        }
        clearDeclarationError(index) {
          this.declarationErrors.delete(index);
        }
        iterateErrors(iterator) {
          this.declarationErrors.forEach(iterator);
        }
      };
      var ExpressionScopeHandler = class {
        constructor(parser2) {
          this.parser = void 0;
          this.stack = [new ExpressionScope()];
          this.parser = parser2;
        }
        enter(scope) {
          this.stack.push(scope);
        }
        exit() {
          this.stack.pop();
        }
        recordParameterInitializerError(toParseError, node) {
          const origin = node.loc.start;
          const {
            stack
          } = this;
          let i = stack.length - 1;
          let scope = stack[i];
          while (!scope.isCertainlyParameterDeclaration()) {
            if (scope.canBeArrowParameterDeclaration()) {
              scope.recordDeclarationError(toParseError, origin);
            } else {
              return;
            }
            scope = stack[--i];
          }
          this.parser.raise(toParseError, origin);
        }
        recordArrowParameterBindingError(error, node) {
          const {
            stack
          } = this;
          const scope = stack[stack.length - 1];
          const origin = node.loc.start;
          if (scope.isCertainlyParameterDeclaration()) {
            this.parser.raise(error, origin);
          } else if (scope.canBeArrowParameterDeclaration()) {
            scope.recordDeclarationError(error, origin);
          } else {
            return;
          }
        }
        recordAsyncArrowParametersError(at) {
          const {
            stack
          } = this;
          let i = stack.length - 1;
          let scope = stack[i];
          while (scope.canBeArrowParameterDeclaration()) {
            if (scope.type === 2) {
              scope.recordDeclarationError(Errors.AwaitBindingIdentifier, at);
            }
            scope = stack[--i];
          }
        }
        validateAsPattern() {
          const {
            stack
          } = this;
          const currentScope = stack[stack.length - 1];
          if (!currentScope.canBeArrowParameterDeclaration())
            return;
          currentScope.iterateErrors(([toParseError, loc]) => {
            this.parser.raise(toParseError, loc);
            let i = stack.length - 2;
            let scope = stack[i];
            while (scope.canBeArrowParameterDeclaration()) {
              scope.clearDeclarationError(loc.index);
              scope = stack[--i];
            }
          });
        }
      };
      function newParameterDeclarationScope() {
        return new ExpressionScope(3);
      }
      function newArrowHeadScope() {
        return new ArrowHeadParsingScope(1);
      }
      function newAsyncArrowScope() {
        return new ArrowHeadParsingScope(2);
      }
      function newExpressionScope() {
        return new ExpressionScope();
      }
      var ProductionParameterHandler = class {
        constructor() {
          this.stacks = [];
        }
        enter(flags) {
          this.stacks.push(flags);
        }
        exit() {
          this.stacks.pop();
        }
        currentFlags() {
          return this.stacks[this.stacks.length - 1];
        }
        get hasAwait() {
          return (this.currentFlags() & 2) > 0;
        }
        get hasYield() {
          return (this.currentFlags() & 1) > 0;
        }
        get hasReturn() {
          return (this.currentFlags() & 4) > 0;
        }
        get hasIn() {
          return (this.currentFlags() & 8) > 0;
        }
      };
      function functionFlags(isAsync, isGenerator) {
        return (isAsync ? 2 : 0) | (isGenerator ? 1 : 0);
      }
      var UtilParser = class extends Tokenizer {
        addExtra(node, key, value, enumerable = true) {
          if (!node)
            return;
          const extra = node.extra = node.extra || {};
          if (enumerable) {
            extra[key] = value;
          } else {
            Object.defineProperty(extra, key, {
              enumerable,
              value
            });
          }
        }
        isContextual(token) {
          return this.state.type === token && !this.state.containsEsc;
        }
        isUnparsedContextual(nameStart, name) {
          const nameEnd = nameStart + name.length;
          if (this.input.slice(nameStart, nameEnd) === name) {
            const nextCh = this.input.charCodeAt(nameEnd);
            return !(isIdentifierChar2(nextCh) || (nextCh & 64512) === 55296);
          }
          return false;
        }
        isLookaheadContextual(name) {
          const next = this.nextTokenStart();
          return this.isUnparsedContextual(next, name);
        }
        eatContextual(token) {
          if (this.isContextual(token)) {
            this.next();
            return true;
          }
          return false;
        }
        expectContextual(token, toParseError) {
          if (!this.eatContextual(token)) {
            if (toParseError != null) {
              throw this.raise(toParseError, this.state.startLoc);
            }
            this.unexpected(null, token);
          }
        }
        canInsertSemicolon() {
          return this.match(139) || this.match(8) || this.hasPrecedingLineBreak();
        }
        hasPrecedingLineBreak() {
          return lineBreak.test(this.input.slice(this.state.lastTokEndLoc.index, this.state.start));
        }
        hasFollowingLineBreak() {
          skipWhiteSpaceToLineBreak.lastIndex = this.state.end;
          return skipWhiteSpaceToLineBreak.test(this.input);
        }
        isLineTerminator() {
          return this.eat(13) || this.canInsertSemicolon();
        }
        semicolon(allowAsi = true) {
          if (allowAsi ? this.isLineTerminator() : this.eat(13))
            return;
          this.raise(Errors.MissingSemicolon, this.state.lastTokEndLoc);
        }
        expect(type, loc) {
          this.eat(type) || this.unexpected(loc, type);
        }
        tryParse(fn, oldState = this.state.clone()) {
          const abortSignal = {
            node: null
          };
          try {
            const node = fn((node2 = null) => {
              abortSignal.node = node2;
              throw abortSignal;
            });
            if (this.state.errors.length > oldState.errors.length) {
              const failState = this.state;
              this.state = oldState;
              this.state.tokensLength = failState.tokensLength;
              return {
                node,
                error: failState.errors[oldState.errors.length],
                thrown: false,
                aborted: false,
                failState
              };
            }
            return {
              node,
              error: null,
              thrown: false,
              aborted: false,
              failState: null
            };
          } catch (error) {
            const failState = this.state;
            this.state = oldState;
            if (error instanceof SyntaxError) {
              return {
                node: null,
                error,
                thrown: true,
                aborted: false,
                failState
              };
            }
            if (error === abortSignal) {
              return {
                node: abortSignal.node,
                error: null,
                thrown: false,
                aborted: true,
                failState
              };
            }
            throw error;
          }
        }
        checkExpressionErrors(refExpressionErrors, andThrow) {
          if (!refExpressionErrors)
            return false;
          const {
            shorthandAssignLoc,
            doubleProtoLoc,
            privateKeyLoc,
            optionalParametersLoc
          } = refExpressionErrors;
          const hasErrors = !!shorthandAssignLoc || !!doubleProtoLoc || !!optionalParametersLoc || !!privateKeyLoc;
          if (!andThrow) {
            return hasErrors;
          }
          if (shorthandAssignLoc != null) {
            this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);
          }
          if (doubleProtoLoc != null) {
            this.raise(Errors.DuplicateProto, doubleProtoLoc);
          }
          if (privateKeyLoc != null) {
            this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);
          }
          if (optionalParametersLoc != null) {
            this.unexpected(optionalParametersLoc);
          }
        }
        isLiteralPropertyName() {
          return tokenIsLiteralPropertyName(this.state.type);
        }
        isPrivateName(node) {
          return node.type === "PrivateName";
        }
        getPrivateNameSV(node) {
          return node.id.name;
        }
        hasPropertyAsPrivateName(node) {
          return (node.type === "MemberExpression" || node.type === "OptionalMemberExpression") && this.isPrivateName(node.property);
        }
        isObjectProperty(node) {
          return node.type === "ObjectProperty";
        }
        isObjectMethod(node) {
          return node.type === "ObjectMethod";
        }
        initializeScopes(inModule = this.options.sourceType === "module") {
          const oldLabels = this.state.labels;
          this.state.labels = [];
          const oldExportedIdentifiers = this.exportedIdentifiers;
          this.exportedIdentifiers = /* @__PURE__ */ new Set();
          const oldInModule = this.inModule;
          this.inModule = inModule;
          const oldScope = this.scope;
          const ScopeHandler2 = this.getScopeHandler();
          this.scope = new ScopeHandler2(this, inModule);
          const oldProdParam = this.prodParam;
          this.prodParam = new ProductionParameterHandler();
          const oldClassScope = this.classScope;
          this.classScope = new ClassScopeHandler(this);
          const oldExpressionScope = this.expressionScope;
          this.expressionScope = new ExpressionScopeHandler(this);
          return () => {
            this.state.labels = oldLabels;
            this.exportedIdentifiers = oldExportedIdentifiers;
            this.inModule = oldInModule;
            this.scope = oldScope;
            this.prodParam = oldProdParam;
            this.classScope = oldClassScope;
            this.expressionScope = oldExpressionScope;
          };
        }
        enterInitialScopes() {
          let paramFlags = 0;
          if (this.inModule) {
            paramFlags |= 2;
          }
          this.scope.enter(1);
          this.prodParam.enter(paramFlags);
        }
        checkDestructuringPrivate(refExpressionErrors) {
          const {
            privateKeyLoc
          } = refExpressionErrors;
          if (privateKeyLoc !== null) {
            this.expectPlugin("destructuringPrivate", privateKeyLoc);
          }
        }
      };
      var ExpressionErrors = class {
        constructor() {
          this.shorthandAssignLoc = null;
          this.doubleProtoLoc = null;
          this.privateKeyLoc = null;
          this.optionalParametersLoc = null;
        }
      };
      var Node = class {
        constructor(parser2, pos, loc) {
          this.type = "";
          this.start = pos;
          this.end = 0;
          this.loc = new SourceLocation(loc);
          if (parser2 != null && parser2.options.ranges)
            this.range = [pos, 0];
          if (parser2 != null && parser2.filename)
            this.loc.filename = parser2.filename;
        }
      };
      var NodePrototype = Node.prototype;
      {
        NodePrototype.__clone = function() {
          const newNode = new Node(void 0, this.start, this.loc.start);
          const keys = Object.keys(this);
          for (let i = 0, length = keys.length; i < length; i++) {
            const key = keys[i];
            if (key !== "leadingComments" && key !== "trailingComments" && key !== "innerComments") {
              newNode[key] = this[key];
            }
          }
          return newNode;
        };
      }
      function clonePlaceholder(node) {
        return cloneIdentifier(node);
      }
      function cloneIdentifier(node) {
        const {
          type,
          start,
          end,
          loc,
          range,
          extra,
          name
        } = node;
        const cloned = Object.create(NodePrototype);
        cloned.type = type;
        cloned.start = start;
        cloned.end = end;
        cloned.loc = loc;
        cloned.range = range;
        cloned.extra = extra;
        cloned.name = name;
        if (type === "Placeholder") {
          cloned.expectedNode = node.expectedNode;
        }
        return cloned;
      }
      function cloneStringLiteral(node) {
        const {
          type,
          start,
          end,
          loc,
          range,
          extra
        } = node;
        if (type === "Placeholder") {
          return clonePlaceholder(node);
        }
        const cloned = Object.create(NodePrototype);
        cloned.type = type;
        cloned.start = start;
        cloned.end = end;
        cloned.loc = loc;
        cloned.range = range;
        if (node.raw !== void 0) {
          cloned.raw = node.raw;
        } else {
          cloned.extra = extra;
        }
        cloned.value = node.value;
        return cloned;
      }
      var NodeUtils = class extends UtilParser {
        startNode() {
          const loc = this.state.startLoc;
          return new Node(this, loc.index, loc);
        }
        startNodeAt(loc) {
          return new Node(this, loc.index, loc);
        }
        startNodeAtNode(type) {
          return this.startNodeAt(type.loc.start);
        }
        finishNode(node, type) {
          return this.finishNodeAt(node, type, this.state.lastTokEndLoc);
        }
        finishNodeAt(node, type, endLoc) {
          node.type = type;
          node.end = endLoc.index;
          node.loc.end = endLoc;
          if (this.options.ranges)
            node.range[1] = endLoc.index;
          if (this.options.attachComment)
            this.processComment(node);
          return node;
        }
        resetStartLocation(node, startLoc) {
          node.start = startLoc.index;
          node.loc.start = startLoc;
          if (this.options.ranges)
            node.range[0] = startLoc.index;
        }
        resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
          node.end = endLoc.index;
          node.loc.end = endLoc;
          if (this.options.ranges)
            node.range[1] = endLoc.index;
        }
        resetStartLocationFromNode(node, locationNode) {
          this.resetStartLocation(node, locationNode.loc.start);
        }
      };
      var reservedTypes = /* @__PURE__ */ new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "static", "string", "true", "typeof", "void"]);
      var FlowErrors = ParseErrorEnum`flow`({
        AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.",
        AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.",
        AssignReservedType: ({
          reservedType
        }) => `Cannot overwrite reserved type ${reservedType}.`,
        DeclareClassElement: "The `declare` modifier can only appear on class fields.",
        DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.",
        DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.",
        EnumBooleanMemberNotInitialized: ({
          memberName,
          enumName
        }) => `Boolean enum members need to be initialized. Use either \`${memberName} = true,\` or \`${memberName} = false,\` in enum \`${enumName}\`.`,
        EnumDuplicateMemberName: ({
          memberName,
          enumName
        }) => `Enum member names need to be unique, but the name \`${memberName}\` has already been used before in enum \`${enumName}\`.`,
        EnumInconsistentMemberValues: ({
          enumName
        }) => `Enum \`${enumName}\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,
        EnumInvalidExplicitType: ({
          invalidEnumType,
          enumName
        }) => `Enum type \`${invalidEnumType}\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`,
        EnumInvalidExplicitTypeUnknownSupplied: ({
          enumName
        }) => `Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`,
        EnumInvalidMemberInitializerPrimaryType: ({
          enumName,
          memberName,
          explicitType
        }) => `Enum \`${enumName}\` has type \`${explicitType}\`, so the initializer of \`${memberName}\` needs to be a ${explicitType} literal.`,
        EnumInvalidMemberInitializerSymbolType: ({
          enumName,
          memberName
        }) => `Symbol enum members cannot be initialized. Use \`${memberName},\` in enum \`${enumName}\`.`,
        EnumInvalidMemberInitializerUnknownType: ({
          enumName,
          memberName
        }) => `The enum member initializer for \`${memberName}\` needs to be a literal (either a boolean, number, or string) in enum \`${enumName}\`.`,
        EnumInvalidMemberName: ({
          enumName,
          memberName,
          suggestion
        }) => `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`${memberName}\`, consider using \`${suggestion}\`, in enum \`${enumName}\`.`,
        EnumNumberMemberNotInitialized: ({
          enumName,
          memberName
        }) => `Number enum members need to be initialized, e.g. \`${memberName} = 1\` in enum \`${enumName}\`.`,
        EnumStringMemberInconsistentlyInitialized: ({
          enumName
        }) => `String enum members need to consistently either all use initializers, or use no initializers, in enum \`${enumName}\`.`,
        GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.",
        ImportReflectionHasImportType: "An `import module` declaration can not use `type` or `typeof` keyword.",
        ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.",
        InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.",
        InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.",
        InexactVariance: "Explicit inexact syntax cannot have variance.",
        InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.",
        MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.",
        NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.",
        NestedFlowComment: "Cannot have a flow comment inside another flow comment.",
        PatternIsOptional: Object.assign({
          message: "A binding pattern parameter cannot be optional in an implementation signature."
        }, {
          reasonCode: "OptionalBindingPattern"
        }),
        SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.",
        SpreadVariance: "Spread properties cannot have variance.",
        ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.",
        ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.",
        ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.",
        ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.",
        ThisParamNoDefault: "The `this` parameter may not have a default value.",
        TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
        TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.",
        UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.",
        UnexpectedReservedType: ({
          reservedType
        }) => `Unexpected reserved type ${reservedType}.`,
        UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.",
        UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.",
        UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.",
        UnexpectedSubtractionOperand: 'Unexpected token, expected "number" or "bigint".',
        UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.",
        UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.",
        UnsupportedDeclareExportKind: ({
          unsupportedExportKind,
          suggestion
        }) => `\`declare export ${unsupportedExportKind}\` is not supported. Use \`${suggestion}\` instead.`,
        UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.",
        UnterminatedFlowComment: "Unterminated flow-comment."
      });
      function isEsModuleType(bodyElement) {
        return bodyElement.type === "DeclareExportAllDeclaration" || bodyElement.type === "DeclareExportDeclaration" && (!bodyElement.declaration || bodyElement.declaration.type !== "TypeAlias" && bodyElement.declaration.type !== "InterfaceDeclaration");
      }
      function hasTypeImportKind(node) {
        return node.importKind === "type" || node.importKind === "typeof";
      }
      var exportSuggestions = {
        const: "declare export var",
        let: "declare export var",
        type: "export type",
        interface: "export interface"
      };
      function partition(list, test) {
        const list1 = [];
        const list2 = [];
        for (let i = 0; i < list.length; i++) {
          (test(list[i], i, list) ? list1 : list2).push(list[i]);
        }
        return [list1, list2];
      }
      var FLOW_PRAGMA_REGEX = /\*?\s*@((?:no)?flow)\b/;
      var flow = (superClass) => class FlowParserMixin extends superClass {
        constructor(...args) {
          super(...args);
          this.flowPragma = void 0;
        }
        getScopeHandler() {
          return FlowScopeHandler;
        }
        shouldParseTypes() {
          return this.getPluginOption("flow", "all") || this.flowPragma === "flow";
        }
        shouldParseEnums() {
          return !!this.getPluginOption("flow", "enums");
        }
        finishToken(type, val) {
          if (type !== 133 && type !== 13 && type !== 28) {
            if (this.flowPragma === void 0) {
              this.flowPragma = null;
            }
          }
          super.finishToken(type, val);
        }
        addComment(comment) {
          if (this.flowPragma === void 0) {
            const matches = FLOW_PRAGMA_REGEX.exec(comment.value);
            if (!matches)
              ;
            else if (matches[1] === "flow") {
              this.flowPragma = "flow";
            } else if (matches[1] === "noflow") {
              this.flowPragma = "noflow";
            } else {
              throw new Error("Unexpected flow pragma");
            }
          }
          super.addComment(comment);
        }
        flowParseTypeInitialiser(tok) {
          const oldInType = this.state.inType;
          this.state.inType = true;
          this.expect(tok || 14);
          const type = this.flowParseType();
          this.state.inType = oldInType;
          return type;
        }
        flowParsePredicate() {
          const node = this.startNode();
          const moduloLoc = this.state.startLoc;
          this.next();
          this.expectContextual(110);
          if (this.state.lastTokStartLoc.index > moduloLoc.index + 1) {
            this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, moduloLoc);
          }
          if (this.eat(10)) {
            node.value = super.parseExpression();
            this.expect(11);
            return this.finishNode(node, "DeclaredPredicate");
          } else {
            return this.finishNode(node, "InferredPredicate");
          }
        }
        flowParseTypeAndPredicateInitialiser() {
          const oldInType = this.state.inType;
          this.state.inType = true;
          this.expect(14);
          let type = null;
          let predicate = null;
          if (this.match(54)) {
            this.state.inType = oldInType;
            predicate = this.flowParsePredicate();
          } else {
            type = this.flowParseType();
            this.state.inType = oldInType;
            if (this.match(54)) {
              predicate = this.flowParsePredicate();
            }
          }
          return [type, predicate];
        }
        flowParseDeclareClass(node) {
          this.next();
          this.flowParseInterfaceish(node, true);
          return this.finishNode(node, "DeclareClass");
        }
        flowParseDeclareFunction(node) {
          this.next();
          const id = node.id = this.parseIdentifier();
          const typeNode = this.startNode();
          const typeContainer = this.startNode();
          if (this.match(47)) {
            typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
          } else {
            typeNode.typeParameters = null;
          }
          this.expect(10);
          const tmp = this.flowParseFunctionTypeParams();
          typeNode.params = tmp.params;
          typeNode.rest = tmp.rest;
          typeNode.this = tmp._this;
          this.expect(11);
          [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
          typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
          id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");
          this.resetEndLocation(id);
          this.semicolon();
          this.scope.declareName(node.id.name, 2048, node.id.loc.start);
          return this.finishNode(node, "DeclareFunction");
        }
        flowParseDeclare(node, insideModule) {
          if (this.match(80)) {
            return this.flowParseDeclareClass(node);
          } else if (this.match(68)) {
            return this.flowParseDeclareFunction(node);
          } else if (this.match(74)) {
            return this.flowParseDeclareVariable(node);
          } else if (this.eatContextual(127)) {
            if (this.match(16)) {
              return this.flowParseDeclareModuleExports(node);
            } else {
              if (insideModule) {
                this.raise(FlowErrors.NestedDeclareModule, this.state.lastTokStartLoc);
              }
              return this.flowParseDeclareModule(node);
            }
          } else if (this.isContextual(130)) {
            return this.flowParseDeclareTypeAlias(node);
          } else if (this.isContextual(131)) {
            return this.flowParseDeclareOpaqueType(node);
          } else if (this.isContextual(129)) {
            return this.flowParseDeclareInterface(node);
          } else if (this.match(82)) {
            return this.flowParseDeclareExportDeclaration(node, insideModule);
          } else {
            this.unexpected();
          }
        }
        flowParseDeclareVariable(node) {
          this.next();
          node.id = this.flowParseTypeAnnotatableIdentifier(true);
          this.scope.declareName(node.id.name, 5, node.id.loc.start);
          this.semicolon();
          return this.finishNode(node, "DeclareVariable");
        }
        flowParseDeclareModule(node) {
          this.scope.enter(0);
          if (this.match(133)) {
            node.id = super.parseExprAtom();
          } else {
            node.id = this.parseIdentifier();
          }
          const bodyNode = node.body = this.startNode();
          const body = bodyNode.body = [];
          this.expect(5);
          while (!this.match(8)) {
            let bodyNode2 = this.startNode();
            if (this.match(83)) {
              this.next();
              if (!this.isContextual(130) && !this.match(87)) {
                this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, this.state.lastTokStartLoc);
              }
              super.parseImport(bodyNode2);
            } else {
              this.expectContextual(125, FlowErrors.UnsupportedStatementInDeclareModule);
              bodyNode2 = this.flowParseDeclare(bodyNode2, true);
            }
            body.push(bodyNode2);
          }
          this.scope.exit();
          this.expect(8);
          this.finishNode(bodyNode, "BlockStatement");
          let kind = null;
          let hasModuleExport = false;
          body.forEach((bodyElement) => {
            if (isEsModuleType(bodyElement)) {
              if (kind === "CommonJS") {
                this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);
              }
              kind = "ES";
            } else if (bodyElement.type === "DeclareModuleExports") {
              if (hasModuleExport) {
                this.raise(FlowErrors.DuplicateDeclareModuleExports, bodyElement);
              }
              if (kind === "ES") {
                this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);
              }
              kind = "CommonJS";
              hasModuleExport = true;
            }
          });
          node.kind = kind || "CommonJS";
          return this.finishNode(node, "DeclareModule");
        }
        flowParseDeclareExportDeclaration(node, insideModule) {
          this.expect(82);
          if (this.eat(65)) {
            if (this.match(68) || this.match(80)) {
              node.declaration = this.flowParseDeclare(this.startNode());
            } else {
              node.declaration = this.flowParseType();
              this.semicolon();
            }
            node.default = true;
            return this.finishNode(node, "DeclareExportDeclaration");
          } else {
            if (this.match(75) || this.isLet() || (this.isContextual(130) || this.isContextual(129)) && !insideModule) {
              const label = this.state.value;
              throw this.raise(FlowErrors.UnsupportedDeclareExportKind, this.state.startLoc, {
                unsupportedExportKind: label,
                suggestion: exportSuggestions[label]
              });
            }
            if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(131)) {
              node.declaration = this.flowParseDeclare(this.startNode());
              node.default = false;
              return this.finishNode(node, "DeclareExportDeclaration");
            } else if (this.match(55) || this.match(5) || this.isContextual(129) || this.isContextual(130) || this.isContextual(131)) {
              node = this.parseExport(node, null);
              if (node.type === "ExportNamedDeclaration") {
                node.type = "ExportDeclaration";
                node.default = false;
                delete node.exportKind;
              }
              node.type = "Declare" + node.type;
              return node;
            }
          }
          this.unexpected();
        }
        flowParseDeclareModuleExports(node) {
          this.next();
          this.expectContextual(111);
          node.typeAnnotation = this.flowParseTypeAnnotation();
          this.semicolon();
          return this.finishNode(node, "DeclareModuleExports");
        }
        flowParseDeclareTypeAlias(node) {
          this.next();
          const finished = this.flowParseTypeAlias(node);
          finished.type = "DeclareTypeAlias";
          return finished;
        }
        flowParseDeclareOpaqueType(node) {
          this.next();
          const finished = this.flowParseOpaqueType(node, true);
          finished.type = "DeclareOpaqueType";
          return finished;
        }
        flowParseDeclareInterface(node) {
          this.next();
          this.flowParseInterfaceish(node, false);
          return this.finishNode(node, "DeclareInterface");
        }
        flowParseInterfaceish(node, isClass) {
          node.id = this.flowParseRestrictedIdentifier(!isClass, true);
          this.scope.declareName(node.id.name, isClass ? 17 : 8201, node.id.loc.start);
          if (this.match(47)) {
            node.typeParameters = this.flowParseTypeParameterDeclaration();
          } else {
            node.typeParameters = null;
          }
          node.extends = [];
          if (this.eat(81)) {
            do {
              node.extends.push(this.flowParseInterfaceExtends());
            } while (!isClass && this.eat(12));
          }
          if (isClass) {
            node.implements = [];
            node.mixins = [];
            if (this.eatContextual(117)) {
              do {
                node.mixins.push(this.flowParseInterfaceExtends());
              } while (this.eat(12));
            }
            if (this.eatContextual(113)) {
              do {
                node.implements.push(this.flowParseInterfaceExtends());
              } while (this.eat(12));
            }
          }
          node.body = this.flowParseObjectType({
            allowStatic: isClass,
            allowExact: false,
            allowSpread: false,
            allowProto: isClass,
            allowInexact: false
          });
        }
        flowParseInterfaceExtends() {
          const node = this.startNode();
          node.id = this.flowParseQualifiedTypeIdentifier();
          if (this.match(47)) {
            node.typeParameters = this.flowParseTypeParameterInstantiation();
          } else {
            node.typeParameters = null;
          }
          return this.finishNode(node, "InterfaceExtends");
        }
        flowParseInterface(node) {
          this.flowParseInterfaceish(node, false);
          return this.finishNode(node, "InterfaceDeclaration");
        }
        checkNotUnderscore(word) {
          if (word === "_") {
            this.raise(FlowErrors.UnexpectedReservedUnderscore, this.state.startLoc);
          }
        }
        checkReservedType(word, startLoc, declaration) {
          if (!reservedTypes.has(word))
            return;
          this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, startLoc, {
            reservedType: word
          });
        }
        flowParseRestrictedIdentifier(liberal, declaration) {
          this.checkReservedType(this.state.value, this.state.startLoc, declaration);
          return this.parseIdentifier(liberal);
        }
        flowParseTypeAlias(node) {
          node.id = this.flowParseRestrictedIdentifier(false, true);
          this.scope.declareName(node.id.name, 8201, node.id.loc.start);
          if (this.match(47)) {
            node.typeParameters = this.flowParseTypeParameterDeclaration();
          } else {
            node.typeParameters = null;
          }
          node.right = this.flowParseTypeInitialiser(29);
          this.semicolon();
          return this.finishNode(node, "TypeAlias");
        }
        flowParseOpaqueType(node, declare) {
          this.expectContextual(130);
          node.id = this.flowParseRestrictedIdentifier(true, true);
          this.scope.declareName(node.id.name, 8201, node.id.loc.start);
          if (this.match(47)) {
            node.typeParameters = this.flowParseTypeParameterDeclaration();
          } else {
            node.typeParameters = null;
          }
          node.supertype = null;
          if (this.match(14)) {
            node.supertype = this.flowParseTypeInitialiser(14);
          }
          node.impltype = null;
          if (!declare) {
            node.impltype = this.flowParseTypeInitialiser(29);
          }
          this.semicolon();
          return this.finishNode(node, "OpaqueType");
        }
        flowParseTypeParameter(requireDefault = false) {
          const nodeStartLoc = this.state.startLoc;
          const node = this.startNode();
          const variance = this.flowParseVariance();
          const ident = this.flowParseTypeAnnotatableIdentifier();
          node.name = ident.name;
          node.variance = variance;
          node.bound = ident.typeAnnotation;
          if (this.match(29)) {
            this.eat(29);
            node.default = this.flowParseType();
          } else {
            if (requireDefault) {
              this.raise(FlowErrors.MissingTypeParamDefault, nodeStartLoc);
            }
          }
          return this.finishNode(node, "TypeParameter");
        }
        flowParseTypeParameterDeclaration() {
          const oldInType = this.state.inType;
          const node = this.startNode();
          node.params = [];
          this.state.inType = true;
          if (this.match(47) || this.match(142)) {
            this.next();
          } else {
            this.unexpected();
          }
          let defaultRequired = false;
          do {
            const typeParameter = this.flowParseTypeParameter(defaultRequired);
            node.params.push(typeParameter);
            if (typeParameter.default) {
              defaultRequired = true;
            }
            if (!this.match(48)) {
              this.expect(12);
            }
          } while (!this.match(48));
          this.expect(48);
          this.state.inType = oldInType;
          return this.finishNode(node, "TypeParameterDeclaration");
        }
        flowParseTypeParameterInstantiation() {
          const node = this.startNode();
          const oldInType = this.state.inType;
          node.params = [];
          this.state.inType = true;
          this.expect(47);
          const oldNoAnonFunctionType = this.state.noAnonFunctionType;
          this.state.noAnonFunctionType = false;
          while (!this.match(48)) {
            node.params.push(this.flowParseType());
            if (!this.match(48)) {
              this.expect(12);
            }
          }
          this.state.noAnonFunctionType = oldNoAnonFunctionType;
          this.expect(48);
          this.state.inType = oldInType;
          return this.finishNode(node, "TypeParameterInstantiation");
        }
        flowParseTypeParameterInstantiationCallOrNew() {
          const node = this.startNode();
          const oldInType = this.state.inType;
          node.params = [];
          this.state.inType = true;
          this.expect(47);
          while (!this.match(48)) {
            node.params.push(this.flowParseTypeOrImplicitInstantiation());
            if (!this.match(48)) {
              this.expect(12);
            }
          }
          this.expect(48);
          this.state.inType = oldInType;
          return this.finishNode(node, "TypeParameterInstantiation");
        }
        flowParseInterfaceType() {
          const node = this.startNode();
          this.expectContextual(129);
          node.extends = [];
          if (this.eat(81)) {
            do {
              node.extends.push(this.flowParseInterfaceExtends());
            } while (this.eat(12));
          }
          node.body = this.flowParseObjectType({
            allowStatic: false,
            allowExact: false,
            allowSpread: false,
            allowProto: false,
            allowInexact: false
          });
          return this.finishNode(node, "InterfaceTypeAnnotation");
        }
        flowParseObjectPropertyKey() {
          return this.match(134) || this.match(133) ? super.parseExprAtom() : this.parseIdentifier(true);
        }
        flowParseObjectTypeIndexer(node, isStatic, variance) {
          node.static = isStatic;
          if (this.lookahead().type === 14) {
            node.id = this.flowParseObjectPropertyKey();
            node.key = this.flowParseTypeInitialiser();
          } else {
            node.id = null;
            node.key = this.flowParseType();
          }
          this.expect(3);
          node.value = this.flowParseTypeInitialiser();
          node.variance = variance;
          return this.finishNode(node, "ObjectTypeIndexer");
        }
        flowParseObjectTypeInternalSlot(node, isStatic) {
          node.static = isStatic;
          node.id = this.flowParseObjectPropertyKey();
          this.expect(3);
          this.expect(3);
          if (this.match(47) || this.match(10)) {
            node.method = true;
            node.optional = false;
            node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));
          } else {
            node.method = false;
            if (this.eat(17)) {
              node.optional = true;
            }
            node.value = this.flowParseTypeInitialiser();
          }
          return this.finishNode(node, "ObjectTypeInternalSlot");
        }
        flowParseObjectTypeMethodish(node) {
          node.params = [];
          node.rest = null;
          node.typeParameters = null;
          node.this = null;
          if (this.match(47)) {
            node.typeParameters = this.flowParseTypeParameterDeclaration();
          }
          this.expect(10);
          if (this.match(78)) {
            node.this = this.flowParseFunctionTypeParam(true);
            node.this.name = null;
            if (!this.match(11)) {
              this.expect(12);
            }
          }
          while (!this.match(11) && !this.match(21)) {
            node.params.push(this.flowParseFunctionTypeParam(false));
            if (!this.match(11)) {
              this.expect(12);
            }
          }
          if (this.eat(21)) {
            node.rest = this.flowParseFunctionTypeParam(false);
          }
          this.expect(11);
          node.returnType = this.flowParseTypeInitialiser();
          return this.finishNode(node, "FunctionTypeAnnotation");
        }
        flowParseObjectTypeCallProperty(node, isStatic) {
          const valueNode = this.startNode();
          node.static = isStatic;
          node.value = this.flowParseObjectTypeMethodish(valueNode);
          return this.finishNode(node, "ObjectTypeCallProperty");
        }
        flowParseObjectType({
          allowStatic,
          allowExact,
          allowSpread,
          allowProto,
          allowInexact
        }) {
          const oldInType = this.state.inType;
          this.state.inType = true;
          const nodeStart = this.startNode();
          nodeStart.callProperties = [];
          nodeStart.properties = [];
          nodeStart.indexers = [];
          nodeStart.internalSlots = [];
          let endDelim;
          let exact;
          let inexact = false;
          if (allowExact && this.match(6)) {
            this.expect(6);
            endDelim = 9;
            exact = true;
          } else {
            this.expect(5);
            endDelim = 8;
            exact = false;
          }
          nodeStart.exact = exact;
          while (!this.match(endDelim)) {
            let isStatic = false;
            let protoStartLoc = null;
            let inexactStartLoc = null;
            const node = this.startNode();
            if (allowProto && this.isContextual(118)) {
              const lookahead = this.lookahead();
              if (lookahead.type !== 14 && lookahead.type !== 17) {
                this.next();
                protoStartLoc = this.state.startLoc;
                allowStatic = false;
              }
            }
            if (allowStatic && this.isContextual(106)) {
              const lookahead = this.lookahead();
              if (lookahead.type !== 14 && lookahead.type !== 17) {
                this.next();
                isStatic = true;
              }
            }
            const variance = this.flowParseVariance();
            if (this.eat(0)) {
              if (protoStartLoc != null) {
                this.unexpected(protoStartLoc);
              }
              if (this.eat(0)) {
                if (variance) {
                  this.unexpected(variance.loc.start);
                }
                nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));
              } else {
                nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));
              }
            } else if (this.match(10) || this.match(47)) {
              if (protoStartLoc != null) {
                this.unexpected(protoStartLoc);
              }
              if (variance) {
                this.unexpected(variance.loc.start);
              }
              nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));
            } else {
              let kind = "init";
              if (this.isContextual(99) || this.isContextual(104)) {
                const lookahead = this.lookahead();
                if (tokenIsLiteralPropertyName(lookahead.type)) {
                  kind = this.state.value;
                  this.next();
                }
              }
              const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);
              if (propOrInexact === null) {
                inexact = true;
                inexactStartLoc = this.state.lastTokStartLoc;
              } else {
                nodeStart.properties.push(propOrInexact);
              }
            }
            this.flowObjectTypeSemicolon();
            if (inexactStartLoc && !this.match(8) && !this.match(9)) {
              this.raise(FlowErrors.UnexpectedExplicitInexactInObject, inexactStartLoc);
            }
          }
          this.expect(endDelim);
          if (allowSpread) {
            nodeStart.inexact = inexact;
          }
          const out = this.finishNode(nodeStart, "ObjectTypeAnnotation");
          this.state.inType = oldInType;
          return out;
        }
        flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {
          if (this.eat(21)) {
            const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);
            if (isInexactToken) {
              if (!allowSpread) {
                this.raise(FlowErrors.InexactInsideNonObject, this.state.lastTokStartLoc);
              } else if (!allowInexact) {
                this.raise(FlowErrors.InexactInsideExact, this.state.lastTokStartLoc);
              }
              if (variance) {
                this.raise(FlowErrors.InexactVariance, variance);
              }
              return null;
            }
            if (!allowSpread) {
              this.raise(FlowErrors.UnexpectedSpreadType, this.state.lastTokStartLoc);
            }
            if (protoStartLoc != null) {
              this.unexpected(protoStartLoc);
            }
            if (variance) {
              this.raise(FlowErrors.SpreadVariance, variance);
            }
            node.argument = this.flowParseType();
            return this.finishNode(node, "ObjectTypeSpreadProperty");
          } else {
            node.key = this.flowParseObjectPropertyKey();
            node.static = isStatic;
            node.proto = protoStartLoc != null;
            node.kind = kind;
            let optional = false;
            if (this.match(47) || this.match(10)) {
              node.method = true;
              if (protoStartLoc != null) {
                this.unexpected(protoStartLoc);
              }
              if (variance) {
                this.unexpected(variance.loc.start);
              }
              node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));
              if (kind === "get" || kind === "set") {
                this.flowCheckGetterSetterParams(node);
              }
              if (!allowSpread && node.key.name === "constructor" && node.value.this) {
                this.raise(FlowErrors.ThisParamBannedInConstructor, node.value.this);
              }
            } else {
              if (kind !== "init")
                this.unexpected();
              node.method = false;
              if (this.eat(17)) {
                optional = true;
              }
              node.value = this.flowParseTypeInitialiser();
              node.variance = variance;
            }
            node.optional = optional;
            return this.finishNode(node, "ObjectTypeProperty");
          }
        }
        flowCheckGetterSetterParams(property) {
          const paramCount = property.kind === "get" ? 0 : 1;
          const length = property.value.params.length + (property.value.rest ? 1 : 0);
          if (property.value.this) {
            this.raise(property.kind === "get" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, property.value.this);
          }
          if (length !== paramCount) {
            this.raise(property.kind === "get" ? Errors.BadGetterArity : Errors.BadSetterArity, property);
          }
          if (property.kind === "set" && property.value.rest) {
            this.raise(Errors.BadSetterRestParameter, property);
          }
        }
        flowObjectTypeSemicolon() {
          if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {
            this.unexpected();
          }
        }
        flowParseQualifiedTypeIdentifier(startLoc, id) {
          var _startLoc;
          (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;
          let node = id || this.flowParseRestrictedIdentifier(true);
          while (this.eat(16)) {
            const node2 = this.startNodeAt(startLoc);
            node2.qualification = node;
            node2.id = this.flowParseRestrictedIdentifier(true);
            node = this.finishNode(node2, "QualifiedTypeIdentifier");
          }
          return node;
        }
        flowParseGenericType(startLoc, id) {
          const node = this.startNodeAt(startLoc);
          node.typeParameters = null;
          node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);
          if (this.match(47)) {
            node.typeParameters = this.flowParseTypeParameterInstantiation();
          }
          return this.finishNode(node, "GenericTypeAnnotation");
        }
        flowParseTypeofType() {
          const node = this.startNode();
          this.expect(87);
          node.argument = this.flowParsePrimaryType();
          return this.finishNode(node, "TypeofTypeAnnotation");
        }
        flowParseTupleType() {
          const node = this.startNode();
          node.types = [];
          this.expect(0);
          while (this.state.pos < this.length && !this.match(3)) {
            node.types.push(this.flowParseType());
            if (this.match(3))
              break;
            this.expect(12);
          }
          this.expect(3);
          return this.finishNode(node, "TupleTypeAnnotation");
        }
        flowParseFunctionTypeParam(first) {
          let name = null;
          let optional = false;
          let typeAnnotation = null;
          const node = this.startNode();
          const lh = this.lookahead();
          const isThis = this.state.type === 78;
          if (lh.type === 14 || lh.type === 17) {
            if (isThis && !first) {
              this.raise(FlowErrors.ThisParamMustBeFirst, node);
            }
            name = this.parseIdentifier(isThis);
            if (this.eat(17)) {
              optional = true;
              if (isThis) {
                this.raise(FlowErrors.ThisParamMayNotBeOptional, node);
              }
            }
            typeAnnotation = this.flowParseTypeInitialiser();
          } else {
            typeAnnotation = this.flowParseType();
          }
          node.name = name;
          node.optional = optional;
          node.typeAnnotation = typeAnnotation;
          return this.finishNode(node, "FunctionTypeParam");
        }
        reinterpretTypeAsFunctionTypeParam(type) {
          const node = this.startNodeAt(type.loc.start);
          node.name = null;
          node.optional = false;
          node.typeAnnotation = type;
          return this.finishNode(node, "FunctionTypeParam");
        }
        flowParseFunctionTypeParams(params = []) {
          let rest = null;
          let _this = null;
          if (this.match(78)) {
            _this = this.flowParseFunctionTypeParam(true);
            _this.name = null;
            if (!this.match(11)) {
              this.expect(12);
            }
          }
          while (!this.match(11) && !this.match(21)) {
            params.push(this.flowParseFunctionTypeParam(false));
            if (!this.match(11)) {
              this.expect(12);
            }
          }
          if (this.eat(21)) {
            rest = this.flowParseFunctionTypeParam(false);
          }
          return {
            params,
            rest,
            _this
          };
        }
        flowIdentToTypeAnnotation(startLoc, node, id) {
          switch (id.name) {
            case "any":
              return this.finishNode(node, "AnyTypeAnnotation");
            case "bool":
            case "boolean":
              return this.finishNode(node, "BooleanTypeAnnotation");
            case "mixed":
              return this.finishNode(node, "MixedTypeAnnotation");
            case "empty":
              return this.finishNode(node, "EmptyTypeAnnotation");
            case "number":
              return this.finishNode(node, "NumberTypeAnnotation");
            case "string":
              return this.finishNode(node, "StringTypeAnnotation");
            case "symbol":
              return this.finishNode(node, "SymbolTypeAnnotation");
            default:
              this.checkNotUnderscore(id.name);
              return this.flowParseGenericType(startLoc, id);
          }
        }
        flowParsePrimaryType() {
          const startLoc = this.state.startLoc;
          const node = this.startNode();
          let tmp;
          let type;
          let isGroupedType = false;
          const oldNoAnonFunctionType = this.state.noAnonFunctionType;
          switch (this.state.type) {
            case 5:
              return this.flowParseObjectType({
                allowStatic: false,
                allowExact: false,
                allowSpread: true,
                allowProto: false,
                allowInexact: true
              });
            case 6:
              return this.flowParseObjectType({
                allowStatic: false,
                allowExact: true,
                allowSpread: true,
                allowProto: false,
                allowInexact: false
              });
            case 0:
              this.state.noAnonFunctionType = false;
              type = this.flowParseTupleType();
              this.state.noAnonFunctionType = oldNoAnonFunctionType;
              return type;
            case 47:
              node.typeParameters = this.flowParseTypeParameterDeclaration();
              this.expect(10);
              tmp = this.flowParseFunctionTypeParams();
              node.params = tmp.params;
              node.rest = tmp.rest;
              node.this = tmp._this;
              this.expect(11);
              this.expect(19);
              node.returnType = this.flowParseType();
              return this.finishNode(node, "FunctionTypeAnnotation");
            case 10:
              this.next();
              if (!this.match(11) && !this.match(21)) {
                if (tokenIsIdentifier(this.state.type) || this.match(78)) {
                  const token = this.lookahead().type;
                  isGroupedType = token !== 17 && token !== 14;
                } else {
                  isGroupedType = true;
                }
              }
              if (isGroupedType) {
                this.state.noAnonFunctionType = false;
                type = this.flowParseType();
                this.state.noAnonFunctionType = oldNoAnonFunctionType;
                if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {
                  this.expect(11);
                  return type;
                } else {
                  this.eat(12);
                }
              }
              if (type) {
                tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);
              } else {
                tmp = this.flowParseFunctionTypeParams();
              }
              node.params = tmp.params;
              node.rest = tmp.rest;
              node.this = tmp._this;
              this.expect(11);
              this.expect(19);
              node.returnType = this.flowParseType();
              node.typeParameters = null;
              return this.finishNode(node, "FunctionTypeAnnotation");
            case 133:
              return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");
            case 85:
            case 86:
              node.value = this.match(85);
              this.next();
              return this.finishNode(node, "BooleanLiteralTypeAnnotation");
            case 53:
              if (this.state.value === "-") {
                this.next();
                if (this.match(134)) {
                  return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", node);
                }
                if (this.match(135)) {
                  return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", node);
                }
                throw this.raise(FlowErrors.UnexpectedSubtractionOperand, this.state.startLoc);
              }
              this.unexpected();
              return;
            case 134:
              return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");
            case 135:
              return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");
            case 88:
              this.next();
              return this.finishNode(node, "VoidTypeAnnotation");
            case 84:
              this.next();
              return this.finishNode(node, "NullLiteralTypeAnnotation");
            case 78:
              this.next();
              return this.finishNode(node, "ThisTypeAnnotation");
            case 55:
              this.next();
              return this.finishNode(node, "ExistsTypeAnnotation");
            case 87:
              return this.flowParseTypeofType();
            default:
              if (tokenIsKeyword(this.state.type)) {
                const label = tokenLabelName(this.state.type);
                this.next();
                return super.createIdentifier(node, label);
              } else if (tokenIsIdentifier(this.state.type)) {
                if (this.isContextual(129)) {
                  return this.flowParseInterfaceType();
                }
                return this.flowIdentToTypeAnnotation(startLoc, node, this.parseIdentifier());
              }
          }
          this.unexpected();
        }
        flowParsePostfixType() {
          const startLoc = this.state.startLoc;
          let type = this.flowParsePrimaryType();
          let seenOptionalIndexedAccess = false;
          while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {
            const node = this.startNodeAt(startLoc);
            const optional = this.eat(18);
            seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;
            this.expect(0);
            if (!optional && this.match(3)) {
              node.elementType = type;
              this.next();
              type = this.finishNode(node, "ArrayTypeAnnotation");
            } else {
              node.objectType = type;
              node.indexType = this.flowParseType();
              this.expect(3);
              if (seenOptionalIndexedAccess) {
                node.optional = optional;
                type = this.finishNode(node, "OptionalIndexedAccessType");
              } else {
                type = this.finishNode(node, "IndexedAccessType");
              }
            }
          }
          return type;
        }
        flowParsePrefixType() {
          const node = this.startNode();
          if (this.eat(17)) {
            node.typeAnnotation = this.flowParsePrefixType();
            return this.finishNode(node, "NullableTypeAnnotation");
          } else {
            return this.flowParsePostfixType();
          }
        }
        flowParseAnonFunctionWithoutParens() {
          const param = this.flowParsePrefixType();
          if (!this.state.noAnonFunctionType && this.eat(19)) {
            const node = this.startNodeAt(param.loc.start);
            node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];
            node.rest = null;
            node.this = null;
            node.returnType = this.flowParseType();
            node.typeParameters = null;
            return this.finishNode(node, "FunctionTypeAnnotation");
          }
          return param;
        }
        flowParseIntersectionType() {
          const node = this.startNode();
          this.eat(45);
          const type = this.flowParseAnonFunctionWithoutParens();
          node.types = [type];
          while (this.eat(45)) {
            node.types.push(this.flowParseAnonFunctionWithoutParens());
          }
          return node.types.length === 1 ? type : this.finishNode(node, "IntersectionTypeAnnotation");
        }
        flowParseUnionType() {
          const node = this.startNode();
          this.eat(43);
          const type = this.flowParseIntersectionType();
          node.types = [type];
          while (this.eat(43)) {
            node.types.push(this.flowParseIntersectionType());
          }
          return node.types.length === 1 ? type : this.finishNode(node, "UnionTypeAnnotation");
        }
        flowParseType() {
          const oldInType = this.state.inType;
          this.state.inType = true;
          const type = this.flowParseUnionType();
          this.state.inType = oldInType;
          return type;
        }
        flowParseTypeOrImplicitInstantiation() {
          if (this.state.type === 132 && this.state.value === "_") {
            const startLoc = this.state.startLoc;
            const node = this.parseIdentifier();
            return this.flowParseGenericType(startLoc, node);
          } else {
            return this.flowParseType();
          }
        }
        flowParseTypeAnnotation() {
          const node = this.startNode();
          node.typeAnnotation = this.flowParseTypeInitialiser();
          return this.finishNode(node, "TypeAnnotation");
        }
        flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {
          const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
          if (this.match(14)) {
            ident.typeAnnotation = this.flowParseTypeAnnotation();
            this.resetEndLocation(ident);
          }
          return ident;
        }
        typeCastToParameter(node) {
          node.expression.typeAnnotation = node.typeAnnotation;
          this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);
          return node.expression;
        }
        flowParseVariance() {
          let variance = null;
          if (this.match(53)) {
            variance = this.startNode();
            if (this.state.value === "+") {
              variance.kind = "plus";
            } else {
              variance.kind = "minus";
            }
            this.next();
            return this.finishNode(variance, "Variance");
          }
          return variance;
        }
        parseFunctionBody(node, allowExpressionBody, isMethod = false) {
          if (allowExpressionBody) {
            this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));
            return;
          }
          super.parseFunctionBody(node, false, isMethod);
        }
        parseFunctionBodyAndFinish(node, type, isMethod = false) {
          if (this.match(14)) {
            const typeNode = this.startNode();
            [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
            node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, "TypeAnnotation") : null;
          }
          return super.parseFunctionBodyAndFinish(node, type, isMethod);
        }
        parseStatementLike(flags) {
          if (this.state.strict && this.isContextual(129)) {
            const lookahead = this.lookahead();
            if (tokenIsKeywordOrIdentifier(lookahead.type)) {
              const node = this.startNode();
              this.next();
              return this.flowParseInterface(node);
            }
          } else if (this.shouldParseEnums() && this.isContextual(126)) {
            const node = this.startNode();
            this.next();
            return this.flowParseEnumDeclaration(node);
          }
          const stmt = super.parseStatementLike(flags);
          if (this.flowPragma === void 0 && !this.isValidDirective(stmt)) {
            this.flowPragma = null;
          }
          return stmt;
        }
        parseExpressionStatement(node, expr, decorators) {
          if (expr.type === "Identifier") {
            if (expr.name === "declare") {
              if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) {
                return this.flowParseDeclare(node);
              }
            } else if (tokenIsIdentifier(this.state.type)) {
              if (expr.name === "interface") {
                return this.flowParseInterface(node);
              } else if (expr.name === "type") {
                return this.flowParseTypeAlias(node);
              } else if (expr.name === "opaque") {
                return this.flowParseOpaqueType(node, false);
              }
            }
          }
          return super.parseExpressionStatement(node, expr, decorators);
        }
        shouldParseExportDeclaration() {
          const {
            type
          } = this.state;
          if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 126) {
            return !this.state.containsEsc;
          }
          return super.shouldParseExportDeclaration();
        }
        isExportDefaultSpecifier() {
          const {
            type
          } = this.state;
          if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 126) {
            return this.state.containsEsc;
          }
          return super.isExportDefaultSpecifier();
        }
        parseExportDefaultExpression() {
          if (this.shouldParseEnums() && this.isContextual(126)) {
            const node = this.startNode();
            this.next();
            return this.flowParseEnumDeclaration(node);
          }
          return super.parseExportDefaultExpression();
        }
        parseConditional(expr, startLoc, refExpressionErrors) {
          if (!this.match(17))
            return expr;
          if (this.state.maybeInArrowParameters) {
            const nextCh = this.lookaheadCharCode();
            if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {
              this.setOptionalParametersError(refExpressionErrors);
              return expr;
            }
          }
          this.expect(17);
          const state = this.state.clone();
          const originalNoArrowAt = this.state.noArrowAt;
          const node = this.startNodeAt(startLoc);
          let {
            consequent,
            failed
          } = this.tryParseConditionalConsequent();
          let [valid, invalid] = this.getArrowLikeExpressions(consequent);
          if (failed || invalid.length > 0) {
            const noArrowAt = [...originalNoArrowAt];
            if (invalid.length > 0) {
              this.state = state;
              this.state.noArrowAt = noArrowAt;
              for (let i = 0; i < invalid.length; i++) {
                noArrowAt.push(invalid[i].start);
              }
              ({
                consequent,
                failed
              } = this.tryParseConditionalConsequent());
              [valid, invalid] = this.getArrowLikeExpressions(consequent);
            }
            if (failed && valid.length > 1) {
              this.raise(FlowErrors.AmbiguousConditionalArrow, state.startLoc);
            }
            if (failed && valid.length === 1) {
              this.state = state;
              noArrowAt.push(valid[0].start);
              this.state.noArrowAt = noArrowAt;
              ({
                consequent,
                failed
              } = this.tryParseConditionalConsequent());
            }
          }
          this.getArrowLikeExpressions(consequent, true);
          this.state.noArrowAt = originalNoArrowAt;
          this.expect(14);
          node.test = expr;
          node.consequent = consequent;
          node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(void 0, void 0));
          return this.finishNode(node, "ConditionalExpression");
        }
        tryParseConditionalConsequent() {
          this.state.noArrowParamsConversionAt.push(this.state.start);
          const consequent = this.parseMaybeAssignAllowIn();
          const failed = !this.match(14);
          this.state.noArrowParamsConversionAt.pop();
          return {
            consequent,
            failed
          };
        }
        getArrowLikeExpressions(node, disallowInvalid) {
          const stack = [node];
          const arrows = [];
          while (stack.length !== 0) {
            const node2 = stack.pop();
            if (node2.type === "ArrowFunctionExpression") {
              if (node2.typeParameters || !node2.returnType) {
                this.finishArrowValidation(node2);
              } else {
                arrows.push(node2);
              }
              stack.push(node2.body);
            } else if (node2.type === "ConditionalExpression") {
              stack.push(node2.consequent);
              stack.push(node2.alternate);
            }
          }
          if (disallowInvalid) {
            arrows.forEach((node2) => this.finishArrowValidation(node2));
            return [arrows, []];
          }
          return partition(arrows, (node2) => node2.params.every((param) => this.isAssignable(param, true)));
        }
        finishArrowValidation(node) {
          var _node$extra;
          this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingCommaLoc, false);
          this.scope.enter(2 | 4);
          super.checkParams(node, false, true);
          this.scope.exit();
        }
        forwardNoArrowParamsConversionAt(node, parse3) {
          let result;
          if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
            this.state.noArrowParamsConversionAt.push(this.state.start);
            result = parse3();
            this.state.noArrowParamsConversionAt.pop();
          } else {
            result = parse3();
          }
          return result;
        }
        parseParenItem(node, startLoc) {
          node = super.parseParenItem(node, startLoc);
          if (this.eat(17)) {
            node.optional = true;
            this.resetEndLocation(node);
          }
          if (this.match(14)) {
            const typeCastNode = this.startNodeAt(startLoc);
            typeCastNode.expression = node;
            typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();
            return this.finishNode(typeCastNode, "TypeCastExpression");
          }
          return node;
        }
        assertModuleNodeAllowed(node) {
          if (node.type === "ImportDeclaration" && (node.importKind === "type" || node.importKind === "typeof") || node.type === "ExportNamedDeclaration" && node.exportKind === "type" || node.type === "ExportAllDeclaration" && node.exportKind === "type") {
            return;
          }
          super.assertModuleNodeAllowed(node);
        }
        parseExportDeclaration(node) {
          if (this.isContextual(130)) {
            node.exportKind = "type";
            const declarationNode = this.startNode();
            this.next();
            if (this.match(5)) {
              node.specifiers = this.parseExportSpecifiers(true);
              super.parseExportFrom(node);
              return null;
            } else {
              return this.flowParseTypeAlias(declarationNode);
            }
          } else if (this.isContextual(131)) {
            node.exportKind = "type";
            const declarationNode = this.startNode();
            this.next();
            return this.flowParseOpaqueType(declarationNode, false);
          } else if (this.isContextual(129)) {
            node.exportKind = "type";
            const declarationNode = this.startNode();
            this.next();
            return this.flowParseInterface(declarationNode);
          } else if (this.shouldParseEnums() && this.isContextual(126)) {
            node.exportKind = "value";
            const declarationNode = this.startNode();
            this.next();
            return this.flowParseEnumDeclaration(declarationNode);
          } else {
            return super.parseExportDeclaration(node);
          }
        }
        eatExportStar(node) {
          if (super.eatExportStar(node))
            return true;
          if (this.isContextual(130) && this.lookahead().type === 55) {
            node.exportKind = "type";
            this.next();
            this.next();
            return true;
          }
          return false;
        }
        maybeParseExportNamespaceSpecifier(node) {
          const {
            startLoc
          } = this.state;
          const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);
          if (hasNamespace && node.exportKind === "type") {
            this.unexpected(startLoc);
          }
          return hasNamespace;
        }
        parseClassId(node, isStatement, optionalId) {
          super.parseClassId(node, isStatement, optionalId);
          if (this.match(47)) {
            node.typeParameters = this.flowParseTypeParameterDeclaration();
          }
        }
        parseClassMember(classBody, member, state) {
          const {
            startLoc
          } = this.state;
          if (this.isContextual(125)) {
            if (super.parseClassMemberFromModifier(classBody, member)) {
              return;
            }
            member.declare = true;
          }
          super.parseClassMember(classBody, member, state);
          if (member.declare) {
            if (member.type !== "ClassProperty" && member.type !== "ClassPrivateProperty" && member.type !== "PropertyDefinition") {
              this.raise(FlowErrors.DeclareClassElement, startLoc);
            } else if (member.value) {
              this.raise(FlowErrors.DeclareClassFieldInitializer, member.value);
            }
          }
        }
        isIterator(word) {
          return word === "iterator" || word === "asyncIterator";
        }
        readIterator() {
          const word = super.readWord1();
          const fullWord = "@@" + word;
          if (!this.isIterator(word) || !this.state.inType) {
            this.raise(Errors.InvalidIdentifier, this.state.curPosition(), {
              identifierName: fullWord
            });
          }
          this.finishToken(132, fullWord);
        }
        getTokenFromCode(code2) {
          const next = this.input.charCodeAt(this.state.pos + 1);
          if (code2 === 123 && next === 124) {
            this.finishOp(6, 2);
          } else if (this.state.inType && (code2 === 62 || code2 === 60)) {
            this.finishOp(code2 === 62 ? 48 : 47, 1);
          } else if (this.state.inType && code2 === 63) {
            if (next === 46) {
              this.finishOp(18, 2);
            } else {
              this.finishOp(17, 1);
            }
          } else if (isIteratorStart(code2, next, this.input.charCodeAt(this.state.pos + 2))) {
            this.state.pos += 2;
            this.readIterator();
          } else {
            super.getTokenFromCode(code2);
          }
        }
        isAssignable(node, isBinding) {
          if (node.type === "TypeCastExpression") {
            return this.isAssignable(node.expression, isBinding);
          } else {
            return super.isAssignable(node, isBinding);
          }
        }
        toAssignable(node, isLHS = false) {
          if (!isLHS && node.type === "AssignmentExpression" && node.left.type === "TypeCastExpression") {
            node.left = this.typeCastToParameter(node.left);
          }
          super.toAssignable(node, isLHS);
        }
        toAssignableList(exprList, trailingCommaLoc, isLHS) {
          for (let i = 0; i < exprList.length; i++) {
            const expr = exprList[i];
            if ((expr == null ? void 0 : expr.type) === "TypeCastExpression") {
              exprList[i] = this.typeCastToParameter(expr);
            }
          }
          super.toAssignableList(exprList, trailingCommaLoc, isLHS);
        }
        toReferencedList(exprList, isParenthesizedExpr) {
          for (let i = 0; i < exprList.length; i++) {
            var _expr$extra;
            const expr = exprList[i];
            if (expr && expr.type === "TypeCastExpression" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {
              this.raise(FlowErrors.TypeCastInPattern, expr.typeAnnotation);
            }
          }
          return exprList;
        }
        parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
          const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
          if (canBePattern && !this.state.maybeInArrowParameters) {
            this.toReferencedList(node.elements);
          }
          return node;
        }
        isValidLVal(type, isParenthesized, binding) {
          return type === "TypeCastExpression" || super.isValidLVal(type, isParenthesized, binding);
        }
        parseClassProperty(node) {
          if (this.match(14)) {
            node.typeAnnotation = this.flowParseTypeAnnotation();
          }
          return super.parseClassProperty(node);
        }
        parseClassPrivateProperty(node) {
          if (this.match(14)) {
            node.typeAnnotation = this.flowParseTypeAnnotation();
          }
          return super.parseClassPrivateProperty(node);
        }
        isClassMethod() {
          return this.match(47) || super.isClassMethod();
        }
        isClassProperty() {
          return this.match(14) || super.isClassProperty();
        }
        isNonstaticConstructor(method) {
          return !this.match(14) && super.isNonstaticConstructor(method);
        }
        pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
          if (method.variance) {
            this.unexpected(method.variance.loc.start);
          }
          delete method.variance;
          if (this.match(47)) {
            method.typeParameters = this.flowParseTypeParameterDeclaration();
          }
          super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
          if (method.params && isConstructor) {
            const params = method.params;
            if (params.length > 0 && this.isThisParam(params[0])) {
              this.raise(FlowErrors.ThisParamBannedInConstructor, method);
            }
          } else if (method.type === "MethodDefinition" && isConstructor && method.value.params) {
            const params = method.value.params;
            if (params.length > 0 && this.isThisParam(params[0])) {
              this.raise(FlowErrors.ThisParamBannedInConstructor, method);
            }
          }
        }
        pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
          if (method.variance) {
            this.unexpected(method.variance.loc.start);
          }
          delete method.variance;
          if (this.match(47)) {
            method.typeParameters = this.flowParseTypeParameterDeclaration();
          }
          super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
        }
        parseClassSuper(node) {
          super.parseClassSuper(node);
          if (node.superClass && this.match(47)) {
            node.superTypeParameters = this.flowParseTypeParameterInstantiation();
          }
          if (this.isContextual(113)) {
            this.next();
            const implemented = node.implements = [];
            do {
              const node2 = this.startNode();
              node2.id = this.flowParseRestrictedIdentifier(true);
              if (this.match(47)) {
                node2.typeParameters = this.flowParseTypeParameterInstantiation();
              } else {
                node2.typeParameters = null;
              }
              implemented.push(this.finishNode(node2, "ClassImplements"));
            } while (this.eat(12));
          }
        }
        checkGetterSetterParams(method) {
          super.checkGetterSetterParams(method);
          const params = this.getObjectOrClassMethodParams(method);
          if (params.length > 0) {
            const param = params[0];
            if (this.isThisParam(param) && method.kind === "get") {
              this.raise(FlowErrors.GetterMayNotHaveThisParam, param);
            } else if (this.isThisParam(param)) {
              this.raise(FlowErrors.SetterMayNotHaveThisParam, param);
            }
          }
        }
        parsePropertyNamePrefixOperator(node) {
          node.variance = this.flowParseVariance();
        }
        parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
          if (prop.variance) {
            this.unexpected(prop.variance.loc.start);
          }
          delete prop.variance;
          let typeParameters;
          if (this.match(47) && !isAccessor) {
            typeParameters = this.flowParseTypeParameterDeclaration();
            if (!this.match(10))
              this.unexpected();
          }
          const result = super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
          if (typeParameters) {
            (result.value || result).typeParameters = typeParameters;
          }
          return result;
        }
        parseAssignableListItemTypes(param) {
          if (this.eat(17)) {
            if (param.type !== "Identifier") {
              this.raise(FlowErrors.PatternIsOptional, param);
            }
            if (this.isThisParam(param)) {
              this.raise(FlowErrors.ThisParamMayNotBeOptional, param);
            }
            param.optional = true;
          }
          if (this.match(14)) {
            param.typeAnnotation = this.flowParseTypeAnnotation();
          } else if (this.isThisParam(param)) {
            this.raise(FlowErrors.ThisParamAnnotationRequired, param);
          }
          if (this.match(29) && this.isThisParam(param)) {
            this.raise(FlowErrors.ThisParamNoDefault, param);
          }
          this.resetEndLocation(param);
          return param;
        }
        parseMaybeDefault(startLoc, left) {
          const node = super.parseMaybeDefault(startLoc, left);
          if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {
            this.raise(FlowErrors.TypeBeforeInitializer, node.typeAnnotation);
          }
          return node;
        }
        checkImportReflection(node) {
          super.checkImportReflection(node);
          if (node.module && node.importKind !== "value") {
            this.raise(FlowErrors.ImportReflectionHasImportType, node.specifiers[0].loc.start);
          }
        }
        parseImportSpecifierLocal(node, specifier, type) {
          specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();
          node.specifiers.push(this.finishImportSpecifier(specifier, type));
        }
        isPotentialImportPhase(isExport) {
          if (super.isPotentialImportPhase(isExport))
            return true;
          if (this.isContextual(130)) {
            if (!isExport)
              return true;
            const ch = this.lookaheadCharCode();
            return ch === 123 || ch === 42;
          }
          return !isExport && this.isContextual(87);
        }
        applyImportPhase(node, isExport, phase, loc) {
          super.applyImportPhase(node, isExport, phase, loc);
          if (isExport) {
            if (!phase && this.match(65)) {
              return;
            }
            node.exportKind = phase === "type" ? phase : "value";
          } else {
            if (phase === "type" && this.match(55))
              this.unexpected();
            node.importKind = phase === "type" || phase === "typeof" ? phase : "value";
          }
        }
        parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
          const firstIdent = specifier.imported;
          let specifierTypeKind = null;
          if (firstIdent.type === "Identifier") {
            if (firstIdent.name === "type") {
              specifierTypeKind = "type";
            } else if (firstIdent.name === "typeof") {
              specifierTypeKind = "typeof";
            }
          }
          let isBinding = false;
          if (this.isContextual(93) && !this.isLookaheadContextual("as")) {
            const as_ident = this.parseIdentifier(true);
            if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {
              specifier.imported = as_ident;
              specifier.importKind = specifierTypeKind;
              specifier.local = cloneIdentifier(as_ident);
            } else {
              specifier.imported = firstIdent;
              specifier.importKind = null;
              specifier.local = this.parseIdentifier();
            }
          } else {
            if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {
              specifier.imported = this.parseIdentifier(true);
              specifier.importKind = specifierTypeKind;
            } else {
              if (importedIsString) {
                throw this.raise(Errors.ImportBindingIsString, specifier, {
                  importName: firstIdent.value
                });
              }
              specifier.imported = firstIdent;
              specifier.importKind = null;
            }
            if (this.eatContextual(93)) {
              specifier.local = this.parseIdentifier();
            } else {
              isBinding = true;
              specifier.local = cloneIdentifier(specifier.imported);
            }
          }
          const specifierIsTypeImport = hasTypeImportKind(specifier);
          if (isInTypeOnlyImport && specifierIsTypeImport) {
            this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, specifier);
          }
          if (isInTypeOnlyImport || specifierIsTypeImport) {
            this.checkReservedType(specifier.local.name, specifier.local.loc.start, true);
          }
          if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {
            this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true);
          }
          return this.finishImportSpecifier(specifier, "ImportSpecifier");
        }
        parseBindingAtom() {
          switch (this.state.type) {
            case 78:
              return this.parseIdentifier(true);
            default:
              return super.parseBindingAtom();
          }
        }
        parseFunctionParams(node, isConstructor) {
          const kind = node.kind;
          if (kind !== "get" && kind !== "set" && this.match(47)) {
            node.typeParameters = this.flowParseTypeParameterDeclaration();
          }
          super.parseFunctionParams(node, isConstructor);
        }
        parseVarId(decl, kind) {
          super.parseVarId(decl, kind);
          if (this.match(14)) {
            decl.id.typeAnnotation = this.flowParseTypeAnnotation();
            this.resetEndLocation(decl.id);
          }
        }
        parseAsyncArrowFromCallExpression(node, call) {
          if (this.match(14)) {
            const oldNoAnonFunctionType = this.state.noAnonFunctionType;
            this.state.noAnonFunctionType = true;
            node.returnType = this.flowParseTypeAnnotation();
            this.state.noAnonFunctionType = oldNoAnonFunctionType;
          }
          return super.parseAsyncArrowFromCallExpression(node, call);
        }
        shouldParseAsyncArrow() {
          return this.match(14) || super.shouldParseAsyncArrow();
        }
        parseMaybeAssign(refExpressionErrors, afterLeftParse) {
          var _jsx;
          let state = null;
          let jsx5;
          if (this.hasPlugin("jsx") && (this.match(142) || this.match(47))) {
            state = this.state.clone();
            jsx5 = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
            if (!jsx5.error)
              return jsx5.node;
            const {
              context
            } = this.state;
            const currentContext = context[context.length - 1];
            if (currentContext === types.j_oTag || currentContext === types.j_expr) {
              context.pop();
            }
          }
          if ((_jsx = jsx5) != null && _jsx.error || this.match(47)) {
            var _jsx2, _jsx3;
            state = state || this.state.clone();
            let typeParameters;
            const arrow = this.tryParse((abort) => {
              var _arrowExpression$extr;
              typeParameters = this.flowParseTypeParameterDeclaration();
              const arrowExpression2 = this.forwardNoArrowParamsConversionAt(typeParameters, () => {
                const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
                this.resetStartLocationFromNode(result, typeParameters);
                return result;
              });
              if ((_arrowExpression$extr = arrowExpression2.extra) != null && _arrowExpression$extr.parenthesized)
                abort();
              const expr = this.maybeUnwrapTypeCastExpression(arrowExpression2);
              if (expr.type !== "ArrowFunctionExpression")
                abort();
              expr.typeParameters = typeParameters;
              this.resetStartLocationFromNode(expr, typeParameters);
              return arrowExpression2;
            }, state);
            let arrowExpression = null;
            if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === "ArrowFunctionExpression") {
              if (!arrow.error && !arrow.aborted) {
                if (arrow.node.async) {
                  this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, typeParameters);
                }
                return arrow.node;
              }
              arrowExpression = arrow.node;
            }
            if ((_jsx2 = jsx5) != null && _jsx2.node) {
              this.state = jsx5.failState;
              return jsx5.node;
            }
            if (arrowExpression) {
              this.state = arrow.failState;
              return arrowExpression;
            }
            if ((_jsx3 = jsx5) != null && _jsx3.thrown)
              throw jsx5.error;
            if (arrow.thrown)
              throw arrow.error;
            throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, typeParameters);
          }
          return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
        }
        parseArrow(node) {
          if (this.match(14)) {
            const result = this.tryParse(() => {
              const oldNoAnonFunctionType = this.state.noAnonFunctionType;
              this.state.noAnonFunctionType = true;
              const typeNode = this.startNode();
              [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
              this.state.noAnonFunctionType = oldNoAnonFunctionType;
              if (this.canInsertSemicolon())
                this.unexpected();
              if (!this.match(19))
                this.unexpected();
              return typeNode;
            });
            if (result.thrown)
              return null;
            if (result.error)
              this.state = result.failState;
            node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, "TypeAnnotation") : null;
          }
          return super.parseArrow(node);
        }
        shouldParseArrow(params) {
          return this.match(14) || super.shouldParseArrow(params);
        }
        setArrowFunctionParameters(node, params) {
          if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
            node.params = params;
          } else {
            super.setArrowFunctionParameters(node, params);
          }
        }
        checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
          if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
            return;
          }
          for (let i = 0; i < node.params.length; i++) {
            if (this.isThisParam(node.params[i]) && i > 0) {
              this.raise(FlowErrors.ThisParamMustBeFirst, node.params[i]);
            }
          }
          super.checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged);
        }
        parseParenAndDistinguishExpression(canBeArrow) {
          return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);
        }
        parseSubscripts(base, startLoc, noCalls) {
          if (base.type === "Identifier" && base.name === "async" && this.state.noArrowAt.indexOf(startLoc.index) !== -1) {
            this.next();
            const node = this.startNodeAt(startLoc);
            node.callee = base;
            node.arguments = super.parseCallExpressionArguments(11, false);
            base = this.finishNode(node, "CallExpression");
          } else if (base.type === "Identifier" && base.name === "async" && this.match(47)) {
            const state = this.state.clone();
            const arrow = this.tryParse((abort) => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(), state);
            if (!arrow.error && !arrow.aborted)
              return arrow.node;
            const result = this.tryParse(() => super.parseSubscripts(base, startLoc, noCalls), state);
            if (result.node && !result.error)
              return result.node;
            if (arrow.node) {
              this.state = arrow.failState;
              return arrow.node;
            }
            if (result.node) {
              this.state = result.failState;
              return result.node;
            }
            throw arrow.error || result.error;
          }
          return super.parseSubscripts(base, startLoc, noCalls);
        }
        parseSubscript(base, startLoc, noCalls, subscriptState) {
          if (this.match(18) && this.isLookaheadToken_lt()) {
            subscriptState.optionalChainMember = true;
            if (noCalls) {
              subscriptState.stop = true;
              return base;
            }
            this.next();
            const node = this.startNodeAt(startLoc);
            node.callee = base;
            node.typeArguments = this.flowParseTypeParameterInstantiation();
            this.expect(10);
            node.arguments = this.parseCallExpressionArguments(11, false);
            node.optional = true;
            return this.finishCallExpression(node, true);
          } else if (!noCalls && this.shouldParseTypes() && this.match(47)) {
            const node = this.startNodeAt(startLoc);
            node.callee = base;
            const result = this.tryParse(() => {
              node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();
              this.expect(10);
              node.arguments = super.parseCallExpressionArguments(11, false);
              if (subscriptState.optionalChainMember) {
                node.optional = false;
              }
              return this.finishCallExpression(node, subscriptState.optionalChainMember);
            });
            if (result.node) {
              if (result.error)
                this.state = result.failState;
              return result.node;
            }
          }
          return super.parseSubscript(base, startLoc, noCalls, subscriptState);
        }
        parseNewCallee(node) {
          super.parseNewCallee(node);
          let targs = null;
          if (this.shouldParseTypes() && this.match(47)) {
            targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;
          }
          node.typeArguments = targs;
        }
        parseAsyncArrowWithTypeParameters(startLoc) {
          const node = this.startNodeAt(startLoc);
          this.parseFunctionParams(node, false);
          if (!this.parseArrow(node))
            return;
          return super.parseArrowExpression(node, void 0, true);
        }
        readToken_mult_modulo(code2) {
          const next = this.input.charCodeAt(this.state.pos + 1);
          if (code2 === 42 && next === 47 && this.state.hasFlowComment) {
            this.state.hasFlowComment = false;
            this.state.pos += 2;
            this.nextToken();
            return;
          }
          super.readToken_mult_modulo(code2);
        }
        readToken_pipe_amp(code2) {
          const next = this.input.charCodeAt(this.state.pos + 1);
          if (code2 === 124 && next === 125) {
            this.finishOp(9, 2);
            return;
          }
          super.readToken_pipe_amp(code2);
        }
        parseTopLevel(file, program) {
          const fileNode = super.parseTopLevel(file, program);
          if (this.state.hasFlowComment) {
            this.raise(FlowErrors.UnterminatedFlowComment, this.state.curPosition());
          }
          return fileNode;
        }
        skipBlockComment() {
          if (this.hasPlugin("flowComments") && this.skipFlowComment()) {
            if (this.state.hasFlowComment) {
              throw this.raise(FlowErrors.NestedFlowComment, this.state.startLoc);
            }
            this.hasFlowCommentCompletion();
            const commentSkip = this.skipFlowComment();
            if (commentSkip) {
              this.state.pos += commentSkip;
              this.state.hasFlowComment = true;
            }
            return;
          }
          return super.skipBlockComment(this.state.hasFlowComment ? "*-/" : "*/");
        }
        skipFlowComment() {
          const {
            pos
          } = this.state;
          let shiftToFirstNonWhiteSpace = 2;
          while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {
            shiftToFirstNonWhiteSpace++;
          }
          const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);
          const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);
          if (ch2 === 58 && ch3 === 58) {
            return shiftToFirstNonWhiteSpace + 2;
          }
          if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === "flow-include") {
            return shiftToFirstNonWhiteSpace + 12;
          }
          if (ch2 === 58 && ch3 !== 58) {
            return shiftToFirstNonWhiteSpace;
          }
          return false;
        }
        hasFlowCommentCompletion() {
          const end = this.input.indexOf("*/", this.state.pos);
          if (end === -1) {
            throw this.raise(Errors.UnterminatedComment, this.state.curPosition());
          }
        }
        flowEnumErrorBooleanMemberNotInitialized(loc, {
          enumName,
          memberName
        }) {
          this.raise(FlowErrors.EnumBooleanMemberNotInitialized, loc, {
            memberName,
            enumName
          });
        }
        flowEnumErrorInvalidMemberInitializer(loc, enumContext) {
          return this.raise(!enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerUnknownType : enumContext.explicitType === "symbol" ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType, loc, enumContext);
        }
        flowEnumErrorNumberMemberNotInitialized(loc, details) {
          this.raise(FlowErrors.EnumNumberMemberNotInitialized, loc, details);
        }
        flowEnumErrorStringMemberInconsistentlyInitialized(node, details) {
          this.raise(FlowErrors.EnumStringMemberInconsistentlyInitialized, node, details);
        }
        flowEnumMemberInit() {
          const startLoc = this.state.startLoc;
          const endOfInit = () => this.match(12) || this.match(8);
          switch (this.state.type) {
            case 134: {
              const literal = this.parseNumericLiteral(this.state.value);
              if (endOfInit()) {
                return {
                  type: "number",
                  loc: literal.loc.start,
                  value: literal
                };
              }
              return {
                type: "invalid",
                loc: startLoc
              };
            }
            case 133: {
              const literal = this.parseStringLiteral(this.state.value);
              if (endOfInit()) {
                return {
                  type: "string",
                  loc: literal.loc.start,
                  value: literal
                };
              }
              return {
                type: "invalid",
                loc: startLoc
              };
            }
            case 85:
            case 86: {
              const literal = this.parseBooleanLiteral(this.match(85));
              if (endOfInit()) {
                return {
                  type: "boolean",
                  loc: literal.loc.start,
                  value: literal
                };
              }
              return {
                type: "invalid",
                loc: startLoc
              };
            }
            default:
              return {
                type: "invalid",
                loc: startLoc
              };
          }
        }
        flowEnumMemberRaw() {
          const loc = this.state.startLoc;
          const id = this.parseIdentifier(true);
          const init = this.eat(29) ? this.flowEnumMemberInit() : {
            type: "none",
            loc
          };
          return {
            id,
            init
          };
        }
        flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {
          const {
            explicitType
          } = context;
          if (explicitType === null) {
            return;
          }
          if (explicitType !== expectedType) {
            this.flowEnumErrorInvalidMemberInitializer(loc, context);
          }
        }
        flowEnumMembers({
          enumName,
          explicitType
        }) {
          const seenNames = /* @__PURE__ */ new Set();
          const members = {
            booleanMembers: [],
            numberMembers: [],
            stringMembers: [],
            defaultedMembers: []
          };
          let hasUnknownMembers = false;
          while (!this.match(8)) {
            if (this.eat(21)) {
              hasUnknownMembers = true;
              break;
            }
            const memberNode = this.startNode();
            const {
              id,
              init
            } = this.flowEnumMemberRaw();
            const memberName = id.name;
            if (memberName === "") {
              continue;
            }
            if (/^[a-z]/.test(memberName)) {
              this.raise(FlowErrors.EnumInvalidMemberName, id, {
                memberName,
                suggestion: memberName[0].toUpperCase() + memberName.slice(1),
                enumName
              });
            }
            if (seenNames.has(memberName)) {
              this.raise(FlowErrors.EnumDuplicateMemberName, id, {
                memberName,
                enumName
              });
            }
            seenNames.add(memberName);
            const context = {
              enumName,
              explicitType,
              memberName
            };
            memberNode.id = id;
            switch (init.type) {
              case "boolean": {
                this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "boolean");
                memberNode.init = init.value;
                members.booleanMembers.push(this.finishNode(memberNode, "EnumBooleanMember"));
                break;
              }
              case "number": {
                this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "number");
                memberNode.init = init.value;
                members.numberMembers.push(this.finishNode(memberNode, "EnumNumberMember"));
                break;
              }
              case "string": {
                this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "string");
                memberNode.init = init.value;
                members.stringMembers.push(this.finishNode(memberNode, "EnumStringMember"));
                break;
              }
              case "invalid": {
                throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);
              }
              case "none": {
                switch (explicitType) {
                  case "boolean":
                    this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);
                    break;
                  case "number":
                    this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);
                    break;
                  default:
                    members.defaultedMembers.push(this.finishNode(memberNode, "EnumDefaultedMember"));
                }
              }
            }
            if (!this.match(8)) {
              this.expect(12);
            }
          }
          return {
            members,
            hasUnknownMembers
          };
        }
        flowEnumStringMembers(initializedMembers, defaultedMembers, {
          enumName
        }) {
          if (initializedMembers.length === 0) {
            return defaultedMembers;
          } else if (defaultedMembers.length === 0) {
            return initializedMembers;
          } else if (defaultedMembers.length > initializedMembers.length) {
            for (const member of initializedMembers) {
              this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {
                enumName
              });
            }
            return defaultedMembers;
          } else {
            for (const member of defaultedMembers) {
              this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {
                enumName
              });
            }
            return initializedMembers;
          }
        }
        flowEnumParseExplicitType({
          enumName
        }) {
          if (!this.eatContextual(102))
            return null;
          if (!tokenIsIdentifier(this.state.type)) {
            throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, this.state.startLoc, {
              enumName
            });
          }
          const {
            value
          } = this.state;
          this.next();
          if (value !== "boolean" && value !== "number" && value !== "string" && value !== "symbol") {
            this.raise(FlowErrors.EnumInvalidExplicitType, this.state.startLoc, {
              enumName,
              invalidEnumType: value
            });
          }
          return value;
        }
        flowEnumBody(node, id) {
          const enumName = id.name;
          const nameLoc = id.loc.start;
          const explicitType = this.flowEnumParseExplicitType({
            enumName
          });
          this.expect(5);
          const {
            members,
            hasUnknownMembers
          } = this.flowEnumMembers({
            enumName,
            explicitType
          });
          node.hasUnknownMembers = hasUnknownMembers;
          switch (explicitType) {
            case "boolean":
              node.explicitType = true;
              node.members = members.booleanMembers;
              this.expect(8);
              return this.finishNode(node, "EnumBooleanBody");
            case "number":
              node.explicitType = true;
              node.members = members.numberMembers;
              this.expect(8);
              return this.finishNode(node, "EnumNumberBody");
            case "string":
              node.explicitType = true;
              node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
                enumName
              });
              this.expect(8);
              return this.finishNode(node, "EnumStringBody");
            case "symbol":
              node.members = members.defaultedMembers;
              this.expect(8);
              return this.finishNode(node, "EnumSymbolBody");
            default: {
              const empty = () => {
                node.members = [];
                this.expect(8);
                return this.finishNode(node, "EnumStringBody");
              };
              node.explicitType = false;
              const boolsLen = members.booleanMembers.length;
              const numsLen = members.numberMembers.length;
              const strsLen = members.stringMembers.length;
              const defaultedLen = members.defaultedMembers.length;
              if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {
                return empty();
              } else if (!boolsLen && !numsLen) {
                node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
                  enumName
                });
                this.expect(8);
                return this.finishNode(node, "EnumStringBody");
              } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {
                for (const member of members.defaultedMembers) {
                  this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {
                    enumName,
                    memberName: member.id.name
                  });
                }
                node.members = members.booleanMembers;
                this.expect(8);
                return this.finishNode(node, "EnumBooleanBody");
              } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {
                for (const member of members.defaultedMembers) {
                  this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {
                    enumName,
                    memberName: member.id.name
                  });
                }
                node.members = members.numberMembers;
                this.expect(8);
                return this.finishNode(node, "EnumNumberBody");
              } else {
                this.raise(FlowErrors.EnumInconsistentMemberValues, nameLoc, {
                  enumName
                });
                return empty();
              }
            }
          }
        }
        flowParseEnumDeclaration(node) {
          const id = this.parseIdentifier();
          node.id = id;
          node.body = this.flowEnumBody(this.startNode(), id);
          return this.finishNode(node, "EnumDeclaration");
        }
        isLookaheadToken_lt() {
          const next = this.nextTokenStart();
          if (this.input.charCodeAt(next) === 60) {
            const afterNext = this.input.charCodeAt(next + 1);
            return afterNext !== 60 && afterNext !== 61;
          }
          return false;
        }
        maybeUnwrapTypeCastExpression(node) {
          return node.type === "TypeCastExpression" ? node.expression : node;
        }
      };
      var entities = {
        __proto__: null,
        quot: '"',
        amp: "&",
        apos: "'",
        lt: "<",
        gt: ">",
        nbsp: "\xA0",
        iexcl: "\xA1",
        cent: "\xA2",
        pound: "\xA3",
        curren: "\xA4",
        yen: "\xA5",
        brvbar: "\xA6",
        sect: "\xA7",
        uml: "\xA8",
        copy: "\xA9",
        ordf: "\xAA",
        laquo: "\xAB",
        not: "\xAC",
        shy: "\xAD",
        reg: "\xAE",
        macr: "\xAF",
        deg: "\xB0",
        plusmn: "\xB1",
        sup2: "\xB2",
        sup3: "\xB3",
        acute: "\xB4",
        micro: "\xB5",
        para: "\xB6",
        middot: "\xB7",
        cedil: "\xB8",
        sup1: "\xB9",
        ordm: "\xBA",
        raquo: "\xBB",
        frac14: "\xBC",
        frac12: "\xBD",
        frac34: "\xBE",
        iquest: "\xBF",
        Agrave: "\xC0",
        Aacute: "\xC1",
        Acirc: "\xC2",
        Atilde: "\xC3",
        Auml: "\xC4",
        Aring: "\xC5",
        AElig: "\xC6",
        Ccedil: "\xC7",
        Egrave: "\xC8",
        Eacute: "\xC9",
        Ecirc: "\xCA",
        Euml: "\xCB",
        Igrave: "\xCC",
        Iacute: "\xCD",
        Icirc: "\xCE",
        Iuml: "\xCF",
        ETH: "\xD0",
        Ntilde: "\xD1",
        Ograve: "\xD2",
        Oacute: "\xD3",
        Ocirc: "\xD4",
        Otilde: "\xD5",
        Ouml: "\xD6",
        times: "\xD7",
        Oslash: "\xD8",
        Ugrave: "\xD9",
        Uacute: "\xDA",
        Ucirc: "\xDB",
        Uuml: "\xDC",
        Yacute: "\xDD",
        THORN: "\xDE",
        szlig: "\xDF",
        agrave: "\xE0",
        aacute: "\xE1",
        acirc: "\xE2",
        atilde: "\xE3",
        auml: "\xE4",
        aring: "\xE5",
        aelig: "\xE6",
        ccedil: "\xE7",
        egrave: "\xE8",
        eacute: "\xE9",
        ecirc: "\xEA",
        euml: "\xEB",
        igrave: "\xEC",
        iacute: "\xED",
        icirc: "\xEE",
        iuml: "\xEF",
        eth: "\xF0",
        ntilde: "\xF1",
        ograve: "\xF2",
        oacute: "\xF3",
        ocirc: "\xF4",
        otilde: "\xF5",
        ouml: "\xF6",
        divide: "\xF7",
        oslash: "\xF8",
        ugrave: "\xF9",
        uacute: "\xFA",
        ucirc: "\xFB",
        uuml: "\xFC",
        yacute: "\xFD",
        thorn: "\xFE",
        yuml: "\xFF",
        OElig: "\u0152",
        oelig: "\u0153",
        Scaron: "\u0160",
        scaron: "\u0161",
        Yuml: "\u0178",
        fnof: "\u0192",
        circ: "\u02C6",
        tilde: "\u02DC",
        Alpha: "\u0391",
        Beta: "\u0392",
        Gamma: "\u0393",
        Delta: "\u0394",
        Epsilon: "\u0395",
        Zeta: "\u0396",
        Eta: "\u0397",
        Theta: "\u0398",
        Iota: "\u0399",
        Kappa: "\u039A",
        Lambda: "\u039B",
        Mu: "\u039C",
        Nu: "\u039D",
        Xi: "\u039E",
        Omicron: "\u039F",
        Pi: "\u03A0",
        Rho: "\u03A1",
        Sigma: "\u03A3",
        Tau: "\u03A4",
        Upsilon: "\u03A5",
        Phi: "\u03A6",
        Chi: "\u03A7",
        Psi: "\u03A8",
        Omega: "\u03A9",
        alpha: "\u03B1",
        beta: "\u03B2",
        gamma: "\u03B3",
        delta: "\u03B4",
        epsilon: "\u03B5",
        zeta: "\u03B6",
        eta: "\u03B7",
        theta: "\u03B8",
        iota: "\u03B9",
        kappa: "\u03BA",
        lambda: "\u03BB",
        mu: "\u03BC",
        nu: "\u03BD",
        xi: "\u03BE",
        omicron: "\u03BF",
        pi: "\u03C0",
        rho: "\u03C1",
        sigmaf: "\u03C2",
        sigma: "\u03C3",
        tau: "\u03C4",
        upsilon: "\u03C5",
        phi: "\u03C6",
        chi: "\u03C7",
        psi: "\u03C8",
        omega: "\u03C9",
        thetasym: "\u03D1",
        upsih: "\u03D2",
        piv: "\u03D6",
        ensp: "\u2002",
        emsp: "\u2003",
        thinsp: "\u2009",
        zwnj: "\u200C",
        zwj: "\u200D",
        lrm: "\u200E",
        rlm: "\u200F",
        ndash: "\u2013",
        mdash: "\u2014",
        lsquo: "\u2018",
        rsquo: "\u2019",
        sbquo: "\u201A",
        ldquo: "\u201C",
        rdquo: "\u201D",
        bdquo: "\u201E",
        dagger: "\u2020",
        Dagger: "\u2021",
        bull: "\u2022",
        hellip: "\u2026",
        permil: "\u2030",
        prime: "\u2032",
        Prime: "\u2033",
        lsaquo: "\u2039",
        rsaquo: "\u203A",
        oline: "\u203E",
        frasl: "\u2044",
        euro: "\u20AC",
        image: "\u2111",
        weierp: "\u2118",
        real: "\u211C",
        trade: "\u2122",
        alefsym: "\u2135",
        larr: "\u2190",
        uarr: "\u2191",
        rarr: "\u2192",
        darr: "\u2193",
        harr: "\u2194",
        crarr: "\u21B5",
        lArr: "\u21D0",
        uArr: "\u21D1",
        rArr: "\u21D2",
        dArr: "\u21D3",
        hArr: "\u21D4",
        forall: "\u2200",
        part: "\u2202",
        exist: "\u2203",
        empty: "\u2205",
        nabla: "\u2207",
        isin: "\u2208",
        notin: "\u2209",
        ni: "\u220B",
        prod: "\u220F",
        sum: "\u2211",
        minus: "\u2212",
        lowast: "\u2217",
        radic: "\u221A",
        prop: "\u221D",
        infin: "\u221E",
        ang: "\u2220",
        and: "\u2227",
        or: "\u2228",
        cap: "\u2229",
        cup: "\u222A",
        int: "\u222B",
        there4: "\u2234",
        sim: "\u223C",
        cong: "\u2245",
        asymp: "\u2248",
        ne: "\u2260",
        equiv: "\u2261",
        le: "\u2264",
        ge: "\u2265",
        sub: "\u2282",
        sup: "\u2283",
        nsub: "\u2284",
        sube: "\u2286",
        supe: "\u2287",
        oplus: "\u2295",
        otimes: "\u2297",
        perp: "\u22A5",
        sdot: "\u22C5",
        lceil: "\u2308",
        rceil: "\u2309",
        lfloor: "\u230A",
        rfloor: "\u230B",
        lang: "\u2329",
        rang: "\u232A",
        loz: "\u25CA",
        spades: "\u2660",
        clubs: "\u2663",
        hearts: "\u2665",
        diams: "\u2666"
      };
      var JsxErrors = ParseErrorEnum`jsx`({
        AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.",
        MissingClosingTagElement: ({
          openingTagName
        }) => `Expected corresponding JSX closing tag for <${openingTagName}>.`,
        MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.",
        UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?",
        UnexpectedToken: ({
          unexpected,
          HTMLEntity
        }) => `Unexpected token \`${unexpected}\`. Did you mean \`${HTMLEntity}\` or \`{'${unexpected}'}\`?`,
        UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.",
        UnterminatedJsxContent: "Unterminated JSX contents.",
        UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?"
      });
      function isFragment(object) {
        return object ? object.type === "JSXOpeningFragment" || object.type === "JSXClosingFragment" : false;
      }
      function getQualifiedJSXName(object) {
        if (object.type === "JSXIdentifier") {
          return object.name;
        }
        if (object.type === "JSXNamespacedName") {
          return object.namespace.name + ":" + object.name.name;
        }
        if (object.type === "JSXMemberExpression") {
          return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
        }
        throw new Error("Node had unexpected type: " + object.type);
      }
      var jsx4 = (superClass) => class JSXParserMixin extends superClass {
        jsxReadToken() {
          let out = "";
          let chunkStart = this.state.pos;
          for (; ; ) {
            if (this.state.pos >= this.length) {
              throw this.raise(JsxErrors.UnterminatedJsxContent, this.state.startLoc);
            }
            const ch = this.input.charCodeAt(this.state.pos);
            switch (ch) {
              case 60:
              case 123:
                if (this.state.pos === this.state.start) {
                  if (ch === 60 && this.state.canStartJSXElement) {
                    ++this.state.pos;
                    this.finishToken(142);
                  } else {
                    super.getTokenFromCode(ch);
                  }
                  return;
                }
                out += this.input.slice(chunkStart, this.state.pos);
                this.finishToken(141, out);
                return;
              case 38:
                out += this.input.slice(chunkStart, this.state.pos);
                out += this.jsxReadEntity();
                chunkStart = this.state.pos;
                break;
              case 62:
              case 125:
              default:
                if (isNewLine(ch)) {
                  out += this.input.slice(chunkStart, this.state.pos);
                  out += this.jsxReadNewLine(true);
                  chunkStart = this.state.pos;
                } else {
                  ++this.state.pos;
                }
            }
          }
        }
        jsxReadNewLine(normalizeCRLF) {
          const ch = this.input.charCodeAt(this.state.pos);
          let out;
          ++this.state.pos;
          if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
            ++this.state.pos;
            out = normalizeCRLF ? "\n" : "\r\n";
          } else {
            out = String.fromCharCode(ch);
          }
          ++this.state.curLine;
          this.state.lineStart = this.state.pos;
          return out;
        }
        jsxReadString(quote) {
          let out = "";
          let chunkStart = ++this.state.pos;
          for (; ; ) {
            if (this.state.pos >= this.length) {
              throw this.raise(Errors.UnterminatedString, this.state.startLoc);
            }
            const ch = this.input.charCodeAt(this.state.pos);
            if (ch === quote)
              break;
            if (ch === 38) {
              out += this.input.slice(chunkStart, this.state.pos);
              out += this.jsxReadEntity();
              chunkStart = this.state.pos;
            } else if (isNewLine(ch)) {
              out += this.input.slice(chunkStart, this.state.pos);
              out += this.jsxReadNewLine(false);
              chunkStart = this.state.pos;
            } else {
              ++this.state.pos;
            }
          }
          out += this.input.slice(chunkStart, this.state.pos++);
          this.finishToken(133, out);
        }
        jsxReadEntity() {
          const startPos = ++this.state.pos;
          if (this.codePointAtPos(this.state.pos) === 35) {
            ++this.state.pos;
            let radix = 10;
            if (this.codePointAtPos(this.state.pos) === 120) {
              radix = 16;
              ++this.state.pos;
            }
            const codePoint = this.readInt(radix, void 0, false, "bail");
            if (codePoint !== null && this.codePointAtPos(this.state.pos) === 59) {
              ++this.state.pos;
              return String.fromCodePoint(codePoint);
            }
          } else {
            let count = 0;
            let semi = false;
            while (count++ < 10 && this.state.pos < this.length && !(semi = this.codePointAtPos(this.state.pos) == 59)) {
              ++this.state.pos;
            }
            if (semi) {
              const desc = this.input.slice(startPos, this.state.pos);
              const entity = entities[desc];
              ++this.state.pos;
              if (entity) {
                return entity;
              }
            }
          }
          this.state.pos = startPos;
          return "&";
        }
        jsxReadWord() {
          let ch;
          const start = this.state.pos;
          do {
            ch = this.input.charCodeAt(++this.state.pos);
          } while (isIdentifierChar2(ch) || ch === 45);
          this.finishToken(140, this.input.slice(start, this.state.pos));
        }
        jsxParseIdentifier() {
          const node = this.startNode();
          if (this.match(140)) {
            node.name = this.state.value;
          } else if (tokenIsKeyword(this.state.type)) {
            node.name = tokenLabelName(this.state.type);
          } else {
            this.unexpected();
          }
          this.next();
          return this.finishNode(node, "JSXIdentifier");
        }
        jsxParseNamespacedName() {
          const startLoc = this.state.startLoc;
          const name = this.jsxParseIdentifier();
          if (!this.eat(14))
            return name;
          const node = this.startNodeAt(startLoc);
          node.namespace = name;
          node.name = this.jsxParseIdentifier();
          return this.finishNode(node, "JSXNamespacedName");
        }
        jsxParseElementName() {
          const startLoc = this.state.startLoc;
          let node = this.jsxParseNamespacedName();
          if (node.type === "JSXNamespacedName") {
            return node;
          }
          while (this.eat(16)) {
            const newNode = this.startNodeAt(startLoc);
            newNode.object = node;
            newNode.property = this.jsxParseIdentifier();
            node = this.finishNode(newNode, "JSXMemberExpression");
          }
          return node;
        }
        jsxParseAttributeValue() {
          let node;
          switch (this.state.type) {
            case 5:
              node = this.startNode();
              this.setContext(types.brace);
              this.next();
              node = this.jsxParseExpressionContainer(node, types.j_oTag);
              if (node.expression.type === "JSXEmptyExpression") {
                this.raise(JsxErrors.AttributeIsEmpty, node);
              }
              return node;
            case 142:
            case 133:
              return this.parseExprAtom();
            default:
              throw this.raise(JsxErrors.UnsupportedJsxValue, this.state.startLoc);
          }
        }
        jsxParseEmptyExpression() {
          const node = this.startNodeAt(this.state.lastTokEndLoc);
          return this.finishNodeAt(node, "JSXEmptyExpression", this.state.startLoc);
        }
        jsxParseSpreadChild(node) {
          this.next();
          node.expression = this.parseExpression();
          this.setContext(types.j_expr);
          this.state.canStartJSXElement = true;
          this.expect(8);
          return this.finishNode(node, "JSXSpreadChild");
        }
        jsxParseExpressionContainer(node, previousContext) {
          if (this.match(8)) {
            node.expression = this.jsxParseEmptyExpression();
          } else {
            const expression = this.parseExpression();
            node.expression = expression;
          }
          this.setContext(previousContext);
          this.state.canStartJSXElement = true;
          this.expect(8);
          return this.finishNode(node, "JSXExpressionContainer");
        }
        jsxParseAttribute() {
          const node = this.startNode();
          if (this.match(5)) {
            this.setContext(types.brace);
            this.next();
            this.expect(21);
            node.argument = this.parseMaybeAssignAllowIn();
            this.setContext(types.j_oTag);
            this.state.canStartJSXElement = true;
            this.expect(8);
            return this.finishNode(node, "JSXSpreadAttribute");
          }
          node.name = this.jsxParseNamespacedName();
          node.value = this.eat(29) ? this.jsxParseAttributeValue() : null;
          return this.finishNode(node, "JSXAttribute");
        }
        jsxParseOpeningElementAt(startLoc) {
          const node = this.startNodeAt(startLoc);
          if (this.eat(143)) {
            return this.finishNode(node, "JSXOpeningFragment");
          }
          node.name = this.jsxParseElementName();
          return this.jsxParseOpeningElementAfterName(node);
        }
        jsxParseOpeningElementAfterName(node) {
          const attributes = [];
          while (!this.match(56) && !this.match(143)) {
            attributes.push(this.jsxParseAttribute());
          }
          node.attributes = attributes;
          node.selfClosing = this.eat(56);
          this.expect(143);
          return this.finishNode(node, "JSXOpeningElement");
        }
        jsxParseClosingElementAt(startLoc) {
          const node = this.startNodeAt(startLoc);
          if (this.eat(143)) {
            return this.finishNode(node, "JSXClosingFragment");
          }
          node.name = this.jsxParseElementName();
          this.expect(143);
          return this.finishNode(node, "JSXClosingElement");
        }
        jsxParseElementAt(startLoc) {
          const node = this.startNodeAt(startLoc);
          const children = [];
          const openingElement = this.jsxParseOpeningElementAt(startLoc);
          let closingElement = null;
          if (!openingElement.selfClosing) {
            contents:
              for (; ; ) {
                switch (this.state.type) {
                  case 142:
                    startLoc = this.state.startLoc;
                    this.next();
                    if (this.eat(56)) {
                      closingElement = this.jsxParseClosingElementAt(startLoc);
                      break contents;
                    }
                    children.push(this.jsxParseElementAt(startLoc));
                    break;
                  case 141:
                    children.push(this.parseExprAtom());
                    break;
                  case 5: {
                    const node2 = this.startNode();
                    this.setContext(types.brace);
                    this.next();
                    if (this.match(21)) {
                      children.push(this.jsxParseSpreadChild(node2));
                    } else {
                      children.push(this.jsxParseExpressionContainer(node2, types.j_expr));
                    }
                    break;
                  }
                  default:
                    this.unexpected();
                }
              }
            if (isFragment(openingElement) && !isFragment(closingElement) && closingElement !== null) {
              this.raise(JsxErrors.MissingClosingTagFragment, closingElement);
            } else if (!isFragment(openingElement) && isFragment(closingElement)) {
              this.raise(JsxErrors.MissingClosingTagElement, closingElement, {
                openingTagName: getQualifiedJSXName(openingElement.name)
              });
            } else if (!isFragment(openingElement) && !isFragment(closingElement)) {
              if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
                this.raise(JsxErrors.MissingClosingTagElement, closingElement, {
                  openingTagName: getQualifiedJSXName(openingElement.name)
                });
              }
            }
          }
          if (isFragment(openingElement)) {
            node.openingFragment = openingElement;
            node.closingFragment = closingElement;
          } else {
            node.openingElement = openingElement;
            node.closingElement = closingElement;
          }
          node.children = children;
          if (this.match(47)) {
            throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, this.state.startLoc);
          }
          return isFragment(openingElement) ? this.finishNode(node, "JSXFragment") : this.finishNode(node, "JSXElement");
        }
        jsxParseElement() {
          const startLoc = this.state.startLoc;
          this.next();
          return this.jsxParseElementAt(startLoc);
        }
        setContext(newContext) {
          const {
            context
          } = this.state;
          context[context.length - 1] = newContext;
        }
        parseExprAtom(refExpressionErrors) {
          if (this.match(141)) {
            return this.parseLiteral(this.state.value, "JSXText");
          } else if (this.match(142)) {
            return this.jsxParseElement();
          } else if (this.match(47) && this.input.charCodeAt(this.state.pos) !== 33) {
            this.replaceToken(142);
            return this.jsxParseElement();
          } else {
            return super.parseExprAtom(refExpressionErrors);
          }
        }
        skipSpace() {
          const curContext = this.curContext();
          if (!curContext.preserveSpace)
            super.skipSpace();
        }
        getTokenFromCode(code2) {
          const context = this.curContext();
          if (context === types.j_expr) {
            this.jsxReadToken();
            return;
          }
          if (context === types.j_oTag || context === types.j_cTag) {
            if (isIdentifierStart(code2)) {
              this.jsxReadWord();
              return;
            }
            if (code2 === 62) {
              ++this.state.pos;
              this.finishToken(143);
              return;
            }
            if ((code2 === 34 || code2 === 39) && context === types.j_oTag) {
              this.jsxReadString(code2);
              return;
            }
          }
          if (code2 === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {
            ++this.state.pos;
            this.finishToken(142);
            return;
          }
          super.getTokenFromCode(code2);
        }
        updateContext(prevType) {
          const {
            context,
            type
          } = this.state;
          if (type === 56 && prevType === 142) {
            context.splice(-2, 2, types.j_cTag);
            this.state.canStartJSXElement = false;
          } else if (type === 142) {
            context.push(types.j_oTag);
          } else if (type === 143) {
            const out = context[context.length - 1];
            if (out === types.j_oTag && prevType === 56 || out === types.j_cTag) {
              context.pop();
              this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;
            } else {
              this.setContext(types.j_expr);
              this.state.canStartJSXElement = true;
            }
          } else {
            this.state.canStartJSXElement = tokenComesBeforeExpression(type);
          }
        }
      };
      var TypeScriptScope = class extends Scope {
        constructor(...args) {
          super(...args);
          this.tsNames = /* @__PURE__ */ new Map();
        }
      };
      var TypeScriptScopeHandler = class extends ScopeHandler {
        constructor(...args) {
          super(...args);
          this.importsStack = [];
        }
        createScope(flags) {
          this.importsStack.push(/* @__PURE__ */ new Set());
          return new TypeScriptScope(flags);
        }
        enter(flags) {
          if (flags == 256) {
            this.importsStack.push(/* @__PURE__ */ new Set());
          }
          super.enter(flags);
        }
        exit() {
          const flags = super.exit();
          if (flags == 256) {
            this.importsStack.pop();
          }
          return flags;
        }
        hasImport(name, allowShadow) {
          const len = this.importsStack.length;
          if (this.importsStack[len - 1].has(name)) {
            return true;
          }
          if (!allowShadow && len > 1) {
            for (let i = 0; i < len - 1; i++) {
              if (this.importsStack[i].has(name))
                return true;
            }
          }
          return false;
        }
        declareName(name, bindingType, loc) {
          if (bindingType & 4096) {
            if (this.hasImport(name, true)) {
              this.parser.raise(Errors.VarRedeclaration, loc, {
                identifierName: name
              });
            }
            this.importsStack[this.importsStack.length - 1].add(name);
            return;
          }
          const scope = this.currentScope();
          let type = scope.tsNames.get(name) || 0;
          if (bindingType & 1024) {
            this.maybeExportDefined(scope, name);
            scope.tsNames.set(name, type | 16);
            return;
          }
          super.declareName(name, bindingType, loc);
          if (bindingType & 2) {
            if (!(bindingType & 1)) {
              this.checkRedeclarationInScope(scope, name, bindingType, loc);
              this.maybeExportDefined(scope, name);
            }
            type = type | 1;
          }
          if (bindingType & 256) {
            type = type | 2;
          }
          if (bindingType & 512) {
            type = type | 4;
          }
          if (bindingType & 128) {
            type = type | 8;
          }
          if (type)
            scope.tsNames.set(name, type);
        }
        isRedeclaredInScope(scope, name, bindingType) {
          const type = scope.tsNames.get(name);
          if ((type & 2) > 0) {
            if (bindingType & 256) {
              const isConst = !!(bindingType & 512);
              const wasConst = (type & 4) > 0;
              return isConst !== wasConst;
            }
            return true;
          }
          if (bindingType & 128 && (type & 8) > 0) {
            if (scope.names.get(name) & 2) {
              return !!(bindingType & 1);
            } else {
              return false;
            }
          }
          if (bindingType & 2 && (type & 1) > 0) {
            return true;
          }
          return super.isRedeclaredInScope(scope, name, bindingType);
        }
        checkLocalExport(id) {
          const {
            name
          } = id;
          if (this.hasImport(name))
            return;
          const len = this.scopeStack.length;
          for (let i = len - 1; i >= 0; i--) {
            const scope = this.scopeStack[i];
            const type = scope.tsNames.get(name);
            if ((type & 1) > 0 || (type & 16) > 0) {
              return;
            }
          }
          super.checkLocalExport(id);
        }
      };
      var getOwn$1 = (object, key) => Object.hasOwnProperty.call(object, key) && object[key];
      var unwrapParenthesizedExpression = (node) => {
        return node.type === "ParenthesizedExpression" ? unwrapParenthesizedExpression(node.expression) : node;
      };
      var LValParser = class extends NodeUtils {
        toAssignable(node, isLHS = false) {
          var _node$extra, _node$extra3;
          let parenthesized = void 0;
          if (node.type === "ParenthesizedExpression" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {
            parenthesized = unwrapParenthesizedExpression(node);
            if (isLHS) {
              if (parenthesized.type === "Identifier") {
                this.expressionScope.recordArrowParameterBindingError(Errors.InvalidParenthesizedAssignment, node);
              } else if (parenthesized.type !== "MemberExpression" && !this.isOptionalMemberExpression(parenthesized)) {
                this.raise(Errors.InvalidParenthesizedAssignment, node);
              }
            } else {
              this.raise(Errors.InvalidParenthesizedAssignment, node);
            }
          }
          switch (node.type) {
            case "Identifier":
            case "ObjectPattern":
            case "ArrayPattern":
            case "AssignmentPattern":
            case "RestElement":
              break;
            case "ObjectExpression":
              node.type = "ObjectPattern";
              for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {
                var _node$extra2;
                const prop = node.properties[i];
                const isLast = i === last;
                this.toAssignableObjectExpressionProp(prop, isLast, isLHS);
                if (isLast && prop.type === "RestElement" && (_node$extra2 = node.extra) != null && _node$extra2.trailingCommaLoc) {
                  this.raise(Errors.RestTrailingComma, node.extra.trailingCommaLoc);
                }
              }
              break;
            case "ObjectProperty": {
              const {
                key,
                value
              } = node;
              if (this.isPrivateName(key)) {
                this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);
              }
              this.toAssignable(value, isLHS);
              break;
            }
            case "SpreadElement": {
              throw new Error("Internal @babel/parser error (this is a bug, please report it). SpreadElement should be converted by .toAssignable's caller.");
            }
            case "ArrayExpression":
              node.type = "ArrayPattern";
              this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingCommaLoc, isLHS);
              break;
            case "AssignmentExpression":
              if (node.operator !== "=") {
                this.raise(Errors.MissingEqInAssignment, node.left.loc.end);
              }
              node.type = "AssignmentPattern";
              delete node.operator;
              this.toAssignable(node.left, isLHS);
              break;
            case "ParenthesizedExpression":
              this.toAssignable(parenthesized, isLHS);
              break;
          }
        }
        toAssignableObjectExpressionProp(prop, isLast, isLHS) {
          if (prop.type === "ObjectMethod") {
            this.raise(prop.kind === "get" || prop.kind === "set" ? Errors.PatternHasAccessor : Errors.PatternHasMethod, prop.key);
          } else if (prop.type === "SpreadElement") {
            prop.type = "RestElement";
            const arg = prop.argument;
            this.checkToRestConversion(arg, false);
            this.toAssignable(arg, isLHS);
            if (!isLast) {
              this.raise(Errors.RestTrailingComma, prop);
            }
          } else {
            this.toAssignable(prop, isLHS);
          }
        }
        toAssignableList(exprList, trailingCommaLoc, isLHS) {
          const end = exprList.length - 1;
          for (let i = 0; i <= end; i++) {
            const elt = exprList[i];
            if (!elt)
              continue;
            if (elt.type === "SpreadElement") {
              elt.type = "RestElement";
              const arg = elt.argument;
              this.checkToRestConversion(arg, true);
              this.toAssignable(arg, isLHS);
            } else {
              this.toAssignable(elt, isLHS);
            }
            if (elt.type === "RestElement") {
              if (i < end) {
                this.raise(Errors.RestTrailingComma, elt);
              } else if (trailingCommaLoc) {
                this.raise(Errors.RestTrailingComma, trailingCommaLoc);
              }
            }
          }
        }
        isAssignable(node, isBinding) {
          switch (node.type) {
            case "Identifier":
            case "ObjectPattern":
            case "ArrayPattern":
            case "AssignmentPattern":
            case "RestElement":
              return true;
            case "ObjectExpression": {
              const last = node.properties.length - 1;
              return node.properties.every((prop, i) => {
                return prop.type !== "ObjectMethod" && (i === last || prop.type !== "SpreadElement") && this.isAssignable(prop);
              });
            }
            case "ObjectProperty":
              return this.isAssignable(node.value);
            case "SpreadElement":
              return this.isAssignable(node.argument);
            case "ArrayExpression":
              return node.elements.every((element) => element === null || this.isAssignable(element));
            case "AssignmentExpression":
              return node.operator === "=";
            case "ParenthesizedExpression":
              return this.isAssignable(node.expression);
            case "MemberExpression":
            case "OptionalMemberExpression":
              return !isBinding;
            default:
              return false;
          }
        }
        toReferencedList(exprList, isParenthesizedExpr) {
          return exprList;
        }
        toReferencedListDeep(exprList, isParenthesizedExpr) {
          this.toReferencedList(exprList, isParenthesizedExpr);
          for (const expr of exprList) {
            if ((expr == null ? void 0 : expr.type) === "ArrayExpression") {
              this.toReferencedListDeep(expr.elements);
            }
          }
        }
        parseSpread(refExpressionErrors) {
          const node = this.startNode();
          this.next();
          node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, void 0);
          return this.finishNode(node, "SpreadElement");
        }
        parseRestBinding() {
          const node = this.startNode();
          this.next();
          node.argument = this.parseBindingAtom();
          return this.finishNode(node, "RestElement");
        }
        parseBindingAtom() {
          switch (this.state.type) {
            case 0: {
              const node = this.startNode();
              this.next();
              node.elements = this.parseBindingList(3, 93, 1);
              return this.finishNode(node, "ArrayPattern");
            }
            case 5:
              return this.parseObjectLike(8, true);
          }
          return this.parseIdentifier();
        }
        parseBindingList(close, closeCharCode, flags) {
          const allowEmpty = flags & 1;
          const elts = [];
          let first = true;
          while (!this.eat(close)) {
            if (first) {
              first = false;
            } else {
              this.expect(12);
            }
            if (allowEmpty && this.match(12)) {
              elts.push(null);
            } else if (this.eat(close)) {
              break;
            } else if (this.match(21)) {
              elts.push(this.parseAssignableListItemTypes(this.parseRestBinding(), flags));
              if (!this.checkCommaAfterRest(closeCharCode)) {
                this.expect(close);
                break;
              }
            } else {
              const decorators = [];
              if (this.match(26) && this.hasPlugin("decorators")) {
                this.raise(Errors.UnsupportedParameterDecorator, this.state.startLoc);
              }
              while (this.match(26)) {
                decorators.push(this.parseDecorator());
              }
              elts.push(this.parseAssignableListItem(flags, decorators));
            }
          }
          return elts;
        }
        parseBindingRestProperty(prop) {
          this.next();
          prop.argument = this.parseIdentifier();
          this.checkCommaAfterRest(125);
          return this.finishNode(prop, "RestElement");
        }
        parseBindingProperty() {
          const prop = this.startNode();
          const {
            type,
            startLoc
          } = this.state;
          if (type === 21) {
            return this.parseBindingRestProperty(prop);
          } else if (type === 138) {
            this.expectPlugin("destructuringPrivate", startLoc);
            this.classScope.usePrivateName(this.state.value, startLoc);
            prop.key = this.parsePrivateName();
          } else {
            this.parsePropertyName(prop);
          }
          prop.method = false;
          return this.parseObjPropValue(prop, startLoc, false, false, true, false);
        }
        parseAssignableListItem(flags, decorators) {
          const left = this.parseMaybeDefault();
          this.parseAssignableListItemTypes(left, flags);
          const elt = this.parseMaybeDefault(left.loc.start, left);
          if (decorators.length) {
            left.decorators = decorators;
          }
          return elt;
        }
        parseAssignableListItemTypes(param, flags) {
          return param;
        }
        parseMaybeDefault(startLoc, left) {
          var _startLoc, _left;
          (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;
          left = (_left = left) != null ? _left : this.parseBindingAtom();
          if (!this.eat(29))
            return left;
          const node = this.startNodeAt(startLoc);
          node.left = left;
          node.right = this.parseMaybeAssignAllowIn();
          return this.finishNode(node, "AssignmentPattern");
        }
        isValidLVal(type, isUnparenthesizedInAssign, binding) {
          return getOwn$1({
            AssignmentPattern: "left",
            RestElement: "argument",
            ObjectProperty: "value",
            ParenthesizedExpression: "expression",
            ArrayPattern: "elements",
            ObjectPattern: "properties"
          }, type);
        }
        isOptionalMemberExpression(expression) {
          return expression.type === "OptionalMemberExpression";
        }
        checkLVal(expression, {
          in: ancestor,
          binding = 64,
          checkClashes = false,
          strictModeChanged = false,
          hasParenthesizedAncestor = false
        }) {
          var _expression$extra;
          const type = expression.type;
          if (this.isObjectMethod(expression))
            return;
          const isOptionalMemberExpression = this.isOptionalMemberExpression(expression);
          if (isOptionalMemberExpression || type === "MemberExpression") {
            if (isOptionalMemberExpression) {
              this.expectPlugin("optionalChainingAssign", expression.loc.start);
              if (ancestor.type !== "AssignmentExpression") {
                this.raise(Errors.InvalidLhsOptionalChaining, expression, {
                  ancestor
                });
              }
            }
            if (binding !== 64) {
              this.raise(Errors.InvalidPropertyBindingPattern, expression);
            }
            return;
          }
          if (type === "Identifier") {
            this.checkIdentifier(expression, binding, strictModeChanged);
            const {
              name
            } = expression;
            if (checkClashes) {
              if (checkClashes.has(name)) {
                this.raise(Errors.ParamDupe, expression);
              } else {
                checkClashes.add(name);
              }
            }
            return;
          }
          const validity = this.isValidLVal(type, !(hasParenthesizedAncestor || (_expression$extra = expression.extra) != null && _expression$extra.parenthesized) && ancestor.type === "AssignmentExpression", binding);
          if (validity === true)
            return;
          if (validity === false) {
            const ParseErrorClass = binding === 64 ? Errors.InvalidLhs : Errors.InvalidLhsBinding;
            this.raise(ParseErrorClass, expression, {
              ancestor
            });
            return;
          }
          const [key, isParenthesizedExpression2] = Array.isArray(validity) ? validity : [validity, type === "ParenthesizedExpression"];
          const nextAncestor = type === "ArrayPattern" || type === "ObjectPattern" ? {
            type
          } : ancestor;
          for (const child of [].concat(expression[key])) {
            if (child) {
              this.checkLVal(child, {
                in: nextAncestor,
                binding,
                checkClashes,
                strictModeChanged,
                hasParenthesizedAncestor: isParenthesizedExpression2
              });
            }
          }
        }
        checkIdentifier(at, bindingType, strictModeChanged = false) {
          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at.name, this.inModule) : isStrictBindOnlyReservedWord(at.name))) {
            if (bindingType === 64) {
              this.raise(Errors.StrictEvalArguments, at, {
                referenceName: at.name
              });
            } else {
              this.raise(Errors.StrictEvalArgumentsBinding, at, {
                bindingName: at.name
              });
            }
          }
          if (bindingType & 8192 && at.name === "let") {
            this.raise(Errors.LetInLexicalBinding, at);
          }
          if (!(bindingType & 64)) {
            this.declareNameFromIdentifier(at, bindingType);
          }
        }
        declareNameFromIdentifier(identifier, binding) {
          this.scope.declareName(identifier.name, binding, identifier.loc.start);
        }
        checkToRestConversion(node, allowPattern) {
          switch (node.type) {
            case "ParenthesizedExpression":
              this.checkToRestConversion(node.expression, allowPattern);
              break;
            case "Identifier":
            case "MemberExpression":
              break;
            case "ArrayExpression":
            case "ObjectExpression":
              if (allowPattern)
                break;
            default:
              this.raise(Errors.InvalidRestAssignmentPattern, node);
          }
        }
        checkCommaAfterRest(close) {
          if (!this.match(12)) {
            return false;
          }
          this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, this.state.startLoc);
          return true;
        }
      };
      var getOwn = (object, key) => Object.hasOwnProperty.call(object, key) && object[key];
      function nonNull(x) {
        if (x == null) {
          throw new Error(`Unexpected ${x} value.`);
        }
        return x;
      }
      function assert(x) {
        if (!x) {
          throw new Error("Assert fail");
        }
      }
      var TSErrors = ParseErrorEnum`typescript`({
        AbstractMethodHasImplementation: ({
          methodName
        }) => `Method '${methodName}' cannot have an implementation because it is marked abstract.`,
        AbstractPropertyHasInitializer: ({
          propertyName
        }) => `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,
        AccesorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.",
        AccesorCannotHaveTypeParameters: "An accessor cannot have type parameters.",
        AccessorCannotBeOptional: "An 'accessor' property cannot be declared optional.",
        ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.",
        ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.",
        ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: "A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.",
        ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.",
        DeclareAccessor: ({
          kind
        }) => `'declare' is not allowed in ${kind}ters.`,
        DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.",
        DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.",
        DuplicateAccessibilityModifier: ({
          modifier
        }) => `Accessibility modifier already seen.`,
        DuplicateModifier: ({
          modifier
        }) => `Duplicate modifier: '${modifier}'.`,
        EmptyHeritageClauseType: ({
          token
        }) => `'${token}' list cannot be empty.`,
        EmptyTypeArguments: "Type argument list cannot be empty.",
        EmptyTypeParameters: "Type parameter list cannot be empty.",
        ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.",
        ImportAliasHasImportType: "An import alias can not use 'import type'.",
        ImportReflectionHasImportType: "An `import module` declaration can not use `type` modifier",
        IncompatibleModifiers: ({
          modifiers
        }) => `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,
        IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.",
        IndexSignatureHasAccessibility: ({
          modifier
        }) => `Index signatures cannot have an accessibility modifier ('${modifier}').`,
        IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.",
        IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.",
        IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.",
        InitializerNotAllowedInAmbientContext: "Initializers are not allowed in ambient contexts.",
        InvalidModifierOnTypeMember: ({
          modifier
        }) => `'${modifier}' modifier cannot appear on a type member.`,
        InvalidModifierOnTypeParameter: ({
          modifier
        }) => `'${modifier}' modifier cannot appear on a type parameter.`,
        InvalidModifierOnTypeParameterPositions: ({
          modifier
        }) => `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,
        InvalidModifiersOrder: ({
          orderedModifiers
        }) => `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,
        InvalidPropertyAccessAfterInstantiationExpression: "Invalid property access after an instantiation expression. You can either wrap the instantiation expression in parentheses, or delete the type arguments.",
        InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.",
        MissingInterfaceName: "'interface' declarations must be followed by an identifier.",
        NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.",
        NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.",
        OptionalTypeBeforeRequired: "A required element cannot follow an optional element.",
        OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.",
        PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.",
        PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.",
        PrivateElementHasAccessibility: ({
          modifier
        }) => `Private elements cannot have an accessibility modifier ('${modifier}').`,
        ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.",
        ReservedArrowTypeParam: "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.",
        ReservedTypeAssertion: "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.",
        SetAccesorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.",
        SetAccesorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.",
        SetAccesorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.",
        SingleTypeParameterWithoutTrailingComma: ({
          typeParameterName
        }) => `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,
        StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.",
        TupleOptionalAfterType: "A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).",
        TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
        TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.",
        TypeModifierIsUsedInTypeExports: "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.",
        TypeModifierIsUsedInTypeImports: "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.",
        UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.",
        UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.",
        UnexpectedTypeAnnotation: "Did not expect a type annotation here.",
        UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.",
        UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.",
        UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.",
        UnsupportedSignatureParameterKind: ({
          type
        }) => `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`
      });
      function keywordTypeFromName(value) {
        switch (value) {
          case "any":
            return "TSAnyKeyword";
          case "boolean":
            return "TSBooleanKeyword";
          case "bigint":
            return "TSBigIntKeyword";
          case "never":
            return "TSNeverKeyword";
          case "number":
            return "TSNumberKeyword";
          case "object":
            return "TSObjectKeyword";
          case "string":
            return "TSStringKeyword";
          case "symbol":
            return "TSSymbolKeyword";
          case "undefined":
            return "TSUndefinedKeyword";
          case "unknown":
            return "TSUnknownKeyword";
          default:
            return void 0;
        }
      }
      function tsIsAccessModifier(modifier) {
        return modifier === "private" || modifier === "public" || modifier === "protected";
      }
      function tsIsVarianceAnnotations(modifier) {
        return modifier === "in" || modifier === "out";
      }
      var typescript = (superClass) => class TypeScriptParserMixin extends superClass {
        constructor(...args) {
          super(...args);
          this.tsParseInOutModifiers = this.tsParseModifiers.bind(this, {
            allowedModifiers: ["in", "out"],
            disallowedModifiers: ["const", "public", "private", "protected", "readonly", "declare", "abstract", "override"],
            errorTemplate: TSErrors.InvalidModifierOnTypeParameter
          });
          this.tsParseConstModifier = this.tsParseModifiers.bind(this, {
            allowedModifiers: ["const"],
            disallowedModifiers: ["in", "out"],
            errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions
          });
          this.tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {
            allowedModifiers: ["in", "out", "const"],
            disallowedModifiers: ["public", "private", "protected", "readonly", "declare", "abstract", "override"],
            errorTemplate: TSErrors.InvalidModifierOnTypeParameter
          });
        }
        getScopeHandler() {
          return TypeScriptScopeHandler;
        }
        tsIsIdentifier() {
          return tokenIsIdentifier(this.state.type);
        }
        tsTokenCanFollowModifier() {
          return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(138) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();
        }
        tsNextTokenCanFollowModifier() {
          this.next();
          return this.tsTokenCanFollowModifier();
        }
        tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {
          if (!tokenIsIdentifier(this.state.type) && this.state.type !== 58 && this.state.type !== 75) {
            return void 0;
          }
          const modifier = this.state.value;
          if (allowedModifiers.indexOf(modifier) !== -1) {
            if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {
              return void 0;
            }
            if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {
              return modifier;
            }
          }
          return void 0;
        }
        tsParseModifiers({
          allowedModifiers,
          disallowedModifiers,
          stopOnStartOfClassStaticBlock,
          errorTemplate = TSErrors.InvalidModifierOnTypeMember
        }, modified) {
          const enforceOrder = (loc, modifier, before, after) => {
            if (modifier === before && modified[after]) {
              this.raise(TSErrors.InvalidModifiersOrder, loc, {
                orderedModifiers: [before, after]
              });
            }
          };
          const incompatible = (loc, modifier, mod1, mod2) => {
            if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {
              this.raise(TSErrors.IncompatibleModifiers, loc, {
                modifiers: [mod1, mod2]
              });
            }
          };
          for (; ; ) {
            const {
              startLoc
            } = this.state;
            const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);
            if (!modifier)
              break;
            if (tsIsAccessModifier(modifier)) {
              if (modified.accessibility) {
                this.raise(TSErrors.DuplicateAccessibilityModifier, startLoc, {
                  modifier
                });
              } else {
                enforceOrder(startLoc, modifier, modifier, "override");
                enforceOrder(startLoc, modifier, modifier, "static");
                enforceOrder(startLoc, modifier, modifier, "readonly");
                modified.accessibility = modifier;
              }
            } else if (tsIsVarianceAnnotations(modifier)) {
              if (modified[modifier]) {
                this.raise(TSErrors.DuplicateModifier, startLoc, {
                  modifier
                });
              }
              modified[modifier] = true;
              enforceOrder(startLoc, modifier, "in", "out");
            } else {
              if (Object.hasOwnProperty.call(modified, modifier)) {
                this.raise(TSErrors.DuplicateModifier, startLoc, {
                  modifier
                });
              } else {
                enforceOrder(startLoc, modifier, "static", "readonly");
                enforceOrder(startLoc, modifier, "static", "override");
                enforceOrder(startLoc, modifier, "override", "readonly");
                enforceOrder(startLoc, modifier, "abstract", "override");
                incompatible(startLoc, modifier, "declare", "override");
                incompatible(startLoc, modifier, "static", "abstract");
              }
              modified[modifier] = true;
            }
            if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {
              this.raise(errorTemplate, startLoc, {
                modifier
              });
            }
          }
        }
        tsIsListTerminator(kind) {
          switch (kind) {
            case "EnumMembers":
            case "TypeMembers":
              return this.match(8);
            case "HeritageClauseElement":
              return this.match(5);
            case "TupleElementTypes":
              return this.match(3);
            case "TypeParametersOrArguments":
              return this.match(48);
          }
        }
        tsParseList(kind, parseElement) {
          const result = [];
          while (!this.tsIsListTerminator(kind)) {
            result.push(parseElement());
          }
          return result;
        }
        tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {
          return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));
        }
        tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {
          const result = [];
          let trailingCommaPos = -1;
          for (; ; ) {
            if (this.tsIsListTerminator(kind)) {
              break;
            }
            trailingCommaPos = -1;
            const element = parseElement();
            if (element == null) {
              return void 0;
            }
            result.push(element);
            if (this.eat(12)) {
              trailingCommaPos = this.state.lastTokStartLoc.index;
              continue;
            }
            if (this.tsIsListTerminator(kind)) {
              break;
            }
            if (expectSuccess) {
              this.expect(12);
            }
            return void 0;
          }
          if (refTrailingCommaPos) {
            refTrailingCommaPos.value = trailingCommaPos;
          }
          return result;
        }
        tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {
          if (!skipFirstToken) {
            if (bracket) {
              this.expect(0);
            } else {
              this.expect(47);
            }
          }
          const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);
          if (bracket) {
            this.expect(3);
          } else {
            this.expect(48);
          }
          return result;
        }
        tsParseImportType() {
          const node = this.startNode();
          this.expect(83);
          this.expect(10);
          if (!this.match(133)) {
            this.raise(TSErrors.UnsupportedImportTypeArgument, this.state.startLoc);
          }
          node.argument = super.parseExprAtom();
          this.expect(11);
          if (this.eat(16)) {
            node.qualifier = this.tsParseEntityName();
          }
          if (this.match(47)) {
            node.typeParameters = this.tsParseTypeArguments();
          }
          return this.finishNode(node, "TSImportType");
        }
        tsParseEntityName(allowReservedWords = true) {
          let entity = this.parseIdentifier(allowReservedWords);
          while (this.eat(16)) {
            const node = this.startNodeAtNode(entity);
            node.left = entity;
            node.right = this.parseIdentifier(allowReservedWords);
            entity = this.finishNode(node, "TSQualifiedName");
          }
          return entity;
        }
        tsParseTypeReference() {
          const node = this.startNode();
          node.typeName = this.tsParseEntityName();
          if (!this.hasPrecedingLineBreak() && this.match(47)) {
            node.typeParameters = this.tsParseTypeArguments();
          }
          return this.finishNode(node, "TSTypeReference");
        }
        tsParseThisTypePredicate(lhs) {
          this.next();
          const node = this.startNodeAtNode(lhs);
          node.parameterName = lhs;
          node.typeAnnotation = this.tsParseTypeAnnotation(false);
          node.asserts = false;
          return this.finishNode(node, "TSTypePredicate");
        }
        tsParseThisTypeNode() {
          const node = this.startNode();
          this.next();
          return this.finishNode(node, "TSThisType");
        }
        tsParseTypeQuery() {
          const node = this.startNode();
          this.expect(87);
          if (this.match(83)) {
            node.exprName = this.tsParseImportType();
          } else {
            node.exprName = this.tsParseEntityName();
          }
          if (!this.hasPrecedingLineBreak() && this.match(47)) {
            node.typeParameters = this.tsParseTypeArguments();
          }
          return this.finishNode(node, "TSTypeQuery");
        }
        tsParseTypeParameter(parseModifiers) {
          const node = this.startNode();
          parseModifiers(node);
          node.name = this.tsParseTypeParameterName();
          node.constraint = this.tsEatThenParseType(81);
          node.default = this.tsEatThenParseType(29);
          return this.finishNode(node, "TSTypeParameter");
        }
        tsTryParseTypeParameters(parseModifiers) {
          if (this.match(47)) {
            return this.tsParseTypeParameters(parseModifiers);
          }
        }
        tsParseTypeParameters(parseModifiers) {
          const node = this.startNode();
          if (this.match(47) || this.match(142)) {
            this.next();
          } else {
            this.unexpected();
          }
          const refTrailingCommaPos = {
            value: -1
          };
          node.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this, parseModifiers), false, true, refTrailingCommaPos);
          if (node.params.length === 0) {
            this.raise(TSErrors.EmptyTypeParameters, node);
          }
          if (refTrailingCommaPos.value !== -1) {
            this.addExtra(node, "trailingComma", refTrailingCommaPos.value);
          }
          return this.finishNode(node, "TSTypeParameterDeclaration");
        }
        tsFillSignature(returnToken, signature) {
          const returnTokenRequired = returnToken === 19;
          const paramsKey = "parameters";
          const returnTypeKey = "typeAnnotation";
          signature.typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
          this.expect(10);
          signature[paramsKey] = this.tsParseBindingListForSignature();
          if (returnTokenRequired) {
            signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
          } else if (this.match(returnToken)) {
            signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
          }
        }
        tsParseBindingListForSignature() {
          const list = super.parseBindingList(11, 41, 2);
          for (const pattern of list) {
            const {
              type
            } = pattern;
            if (type === "AssignmentPattern" || type === "TSParameterProperty") {
              this.raise(TSErrors.UnsupportedSignatureParameterKind, pattern, {
                type
              });
            }
          }
          return list;
        }
        tsParseTypeMemberSemicolon() {
          if (!this.eat(12) && !this.isLineTerminator()) {
            this.expect(13);
          }
        }
        tsParseSignatureMember(kind, node) {
          this.tsFillSignature(14, node);
          this.tsParseTypeMemberSemicolon();
          return this.finishNode(node, kind);
        }
        tsIsUnambiguouslyIndexSignature() {
          this.next();
          if (tokenIsIdentifier(this.state.type)) {
            this.next();
            return this.match(14);
          }
          return false;
        }
        tsTryParseIndexSignature(node) {
          if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {
            return;
          }
          this.expect(0);
          const id = this.parseIdentifier();
          id.typeAnnotation = this.tsParseTypeAnnotation();
          this.resetEndLocation(id);
          this.expect(3);
          node.parameters = [id];
          const type = this.tsTryParseTypeAnnotation();
          if (type)
            node.typeAnnotation = type;
          this.tsParseTypeMemberSemicolon();
          return this.finishNode(node, "TSIndexSignature");
        }
        tsParsePropertyOrMethodSignature(node, readonly) {
          if (this.eat(17))
            node.optional = true;
          const nodeAny = node;
          if (this.match(10) || this.match(47)) {
            if (readonly) {
              this.raise(TSErrors.ReadonlyForMethodSignature, node);
            }
            const method = nodeAny;
            if (method.kind && this.match(47)) {
              this.raise(TSErrors.AccesorCannotHaveTypeParameters, this.state.curPosition());
            }
            this.tsFillSignature(14, method);
            this.tsParseTypeMemberSemicolon();
            const paramsKey = "parameters";
            const returnTypeKey = "typeAnnotation";
            if (method.kind === "get") {
              if (method[paramsKey].length > 0) {
                this.raise(Errors.BadGetterArity, this.state.curPosition());
                if (this.isThisParam(method[paramsKey][0])) {
                  this.raise(TSErrors.AccesorCannotDeclareThisParameter, this.state.curPosition());
                }
              }
            } else if (method.kind === "set") {
              if (method[paramsKey].length !== 1) {
                this.raise(Errors.BadSetterArity, this.state.curPosition());
              } else {
                const firstParameter = method[paramsKey][0];
                if (this.isThisParam(firstParameter)) {
                  this.raise(TSErrors.AccesorCannotDeclareThisParameter, this.state.curPosition());
                }
                if (firstParameter.type === "Identifier" && firstParameter.optional) {
                  this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, this.state.curPosition());
                }
                if (firstParameter.type === "RestElement") {
                  this.raise(TSErrors.SetAccesorCannotHaveRestParameter, this.state.curPosition());
                }
              }
              if (method[returnTypeKey]) {
                this.raise(TSErrors.SetAccesorCannotHaveReturnType, method[returnTypeKey]);
              }
            } else {
              method.kind = "method";
            }
            return this.finishNode(method, "TSMethodSignature");
          } else {
            const property = nodeAny;
            if (readonly)
              property.readonly = true;
            const type = this.tsTryParseTypeAnnotation();
            if (type)
              property.typeAnnotation = type;
            this.tsParseTypeMemberSemicolon();
            return this.finishNode(property, "TSPropertySignature");
          }
        }
        tsParseTypeMember() {
          const node = this.startNode();
          if (this.match(10) || this.match(47)) {
            return this.tsParseSignatureMember("TSCallSignatureDeclaration", node);
          }
          if (this.match(77)) {
            const id = this.startNode();
            this.next();
            if (this.match(10) || this.match(47)) {
              return this.tsParseSignatureMember("TSConstructSignatureDeclaration", node);
            } else {
              node.key = this.createIdentifier(id, "new");
              return this.tsParsePropertyOrMethodSignature(node, false);
            }
          }
          this.tsParseModifiers({
            allowedModifiers: ["readonly"],
            disallowedModifiers: ["declare", "abstract", "private", "protected", "public", "static", "override"]
          }, node);
          const idx = this.tsTryParseIndexSignature(node);
          if (idx) {
            return idx;
          }
          super.parsePropertyName(node);
          if (!node.computed && node.key.type === "Identifier" && (node.key.name === "get" || node.key.name === "set") && this.tsTokenCanFollowModifier()) {
            node.kind = node.key.name;
            super.parsePropertyName(node);
          }
          return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);
        }
        tsParseTypeLiteral() {
          const node = this.startNode();
          node.members = this.tsParseObjectTypeMembers();
          return this.finishNode(node, "TSTypeLiteral");
        }
        tsParseObjectTypeMembers() {
          this.expect(5);
          const members = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
          this.expect(8);
          return members;
        }
        tsIsStartOfMappedType() {
          this.next();
          if (this.eat(53)) {
            return this.isContextual(122);
          }
          if (this.isContextual(122)) {
            this.next();
          }
          if (!this.match(0)) {
            return false;
          }
          this.next();
          if (!this.tsIsIdentifier()) {
            return false;
          }
          this.next();
          return this.match(58);
        }
        tsParseMappedTypeParameter() {
          const node = this.startNode();
          node.name = this.tsParseTypeParameterName();
          node.constraint = this.tsExpectThenParseType(58);
          return this.finishNode(node, "TSTypeParameter");
        }
        tsParseMappedType() {
          const node = this.startNode();
          this.expect(5);
          if (this.match(53)) {
            node.readonly = this.state.value;
            this.next();
            this.expectContextual(122);
          } else if (this.eatContextual(122)) {
            node.readonly = true;
          }
          this.expect(0);
          node.typeParameter = this.tsParseMappedTypeParameter();
          node.nameType = this.eatContextual(93) ? this.tsParseType() : null;
          this.expect(3);
          if (this.match(53)) {
            node.optional = this.state.value;
            this.next();
            this.expect(17);
          } else if (this.eat(17)) {
            node.optional = true;
          }
          node.typeAnnotation = this.tsTryParseType();
          this.semicolon();
          this.expect(8);
          return this.finishNode(node, "TSMappedType");
        }
        tsParseTupleType() {
          const node = this.startNode();
          node.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);
          let seenOptionalElement = false;
          node.elementTypes.forEach((elementNode) => {
            const {
              type
            } = elementNode;
            if (seenOptionalElement && type !== "TSRestType" && type !== "TSOptionalType" && !(type === "TSNamedTupleMember" && elementNode.optional)) {
              this.raise(TSErrors.OptionalTypeBeforeRequired, elementNode);
            }
            seenOptionalElement || (seenOptionalElement = type === "TSNamedTupleMember" && elementNode.optional || type === "TSOptionalType");
          });
          return this.finishNode(node, "TSTupleType");
        }
        tsParseTupleElementType() {
          const {
            startLoc
          } = this.state;
          const rest = this.eat(21);
          let labeled;
          let label;
          let optional;
          let type;
          const isWord = tokenIsKeywordOrIdentifier(this.state.type);
          const chAfterWord = isWord ? this.lookaheadCharCode() : null;
          if (chAfterWord === 58) {
            labeled = true;
            optional = false;
            label = this.parseIdentifier(true);
            this.expect(14);
            type = this.tsParseType();
          } else if (chAfterWord === 63) {
            optional = true;
            const startLoc2 = this.state.startLoc;
            const wordName = this.state.value;
            const typeOrLabel = this.tsParseNonArrayType();
            if (this.lookaheadCharCode() === 58) {
              labeled = true;
              label = this.createIdentifier(this.startNodeAt(startLoc2), wordName);
              this.expect(17);
              this.expect(14);
              type = this.tsParseType();
            } else {
              labeled = false;
              type = typeOrLabel;
              this.expect(17);
            }
          } else {
            type = this.tsParseType();
            optional = this.eat(17);
            labeled = this.eat(14);
          }
          if (labeled) {
            let labeledNode;
            if (label) {
              labeledNode = this.startNodeAtNode(label);
              labeledNode.optional = optional;
              labeledNode.label = label;
              labeledNode.elementType = type;
              if (this.eat(17)) {
                labeledNode.optional = true;
                this.raise(TSErrors.TupleOptionalAfterType, this.state.lastTokStartLoc);
              }
            } else {
              labeledNode = this.startNodeAtNode(type);
              labeledNode.optional = optional;
              this.raise(TSErrors.InvalidTupleMemberLabel, type);
              labeledNode.label = type;
              labeledNode.elementType = this.tsParseType();
            }
            type = this.finishNode(labeledNode, "TSNamedTupleMember");
          } else if (optional) {
            const optionalTypeNode = this.startNodeAtNode(type);
            optionalTypeNode.typeAnnotation = type;
            type = this.finishNode(optionalTypeNode, "TSOptionalType");
          }
          if (rest) {
            const restNode = this.startNodeAt(startLoc);
            restNode.typeAnnotation = type;
            type = this.finishNode(restNode, "TSRestType");
          }
          return type;
        }
        tsParseParenthesizedType() {
          const node = this.startNode();
          this.expect(10);
          node.typeAnnotation = this.tsParseType();
          this.expect(11);
          return this.finishNode(node, "TSParenthesizedType");
        }
        tsParseFunctionOrConstructorType(type, abstract) {
          const node = this.startNode();
          if (type === "TSConstructorType") {
            node.abstract = !!abstract;
            if (abstract)
              this.next();
            this.next();
          }
          this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, node));
          return this.finishNode(node, type);
        }
        tsParseLiteralTypeNode() {
          const node = this.startNode();
          switch (this.state.type) {
            case 134:
            case 135:
            case 133:
            case 85:
            case 86:
              node.literal = super.parseExprAtom();
              break;
            default:
              this.unexpected();
          }
          return this.finishNode(node, "TSLiteralType");
        }
        tsParseTemplateLiteralType() {
          const node = this.startNode();
          node.literal = super.parseTemplate(false);
          return this.finishNode(node, "TSLiteralType");
        }
        parseTemplateSubstitution() {
          if (this.state.inType)
            return this.tsParseType();
          return super.parseTemplateSubstitution();
        }
        tsParseThisTypeOrThisTypePredicate() {
          const thisKeyword = this.tsParseThisTypeNode();
          if (this.isContextual(116) && !this.hasPrecedingLineBreak()) {
            return this.tsParseThisTypePredicate(thisKeyword);
          } else {
            return thisKeyword;
          }
        }
        tsParseNonArrayType() {
          switch (this.state.type) {
            case 133:
            case 134:
            case 135:
            case 85:
            case 86:
              return this.tsParseLiteralTypeNode();
            case 53:
              if (this.state.value === "-") {
                const node = this.startNode();
                const nextToken = this.lookahead();
                if (nextToken.type !== 134 && nextToken.type !== 135) {
                  this.unexpected();
                }
                node.literal = this.parseMaybeUnary();
                return this.finishNode(node, "TSLiteralType");
              }
              break;
            case 78:
              return this.tsParseThisTypeOrThisTypePredicate();
            case 87:
              return this.tsParseTypeQuery();
            case 83:
              return this.tsParseImportType();
            case 5:
              return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();
            case 0:
              return this.tsParseTupleType();
            case 10:
              return this.tsParseParenthesizedType();
            case 25:
            case 24:
              return this.tsParseTemplateLiteralType();
            default: {
              const {
                type
              } = this.state;
              if (tokenIsIdentifier(type) || type === 88 || type === 84) {
                const nodeType = type === 88 ? "TSVoidKeyword" : type === 84 ? "TSNullKeyword" : keywordTypeFromName(this.state.value);
                if (nodeType !== void 0 && this.lookaheadCharCode() !== 46) {
                  const node = this.startNode();
                  this.next();
                  return this.finishNode(node, nodeType);
                }
                return this.tsParseTypeReference();
              }
            }
          }
          this.unexpected();
        }
        tsParseArrayTypeOrHigher() {
          let type = this.tsParseNonArrayType();
          while (!this.hasPrecedingLineBreak() && this.eat(0)) {
            if (this.match(3)) {
              const node = this.startNodeAtNode(type);
              node.elementType = type;
              this.expect(3);
              type = this.finishNode(node, "TSArrayType");
            } else {
              const node = this.startNodeAtNode(type);
              node.objectType = type;
              node.indexType = this.tsParseType();
              this.expect(3);
              type = this.finishNode(node, "TSIndexedAccessType");
            }
          }
          return type;
        }
        tsParseTypeOperator() {
          const node = this.startNode();
          const operator = this.state.value;
          this.next();
          node.operator = operator;
          node.typeAnnotation = this.tsParseTypeOperatorOrHigher();
          if (operator === "readonly") {
            this.tsCheckTypeAnnotationForReadOnly(node);
          }
          return this.finishNode(node, "TSTypeOperator");
        }
        tsCheckTypeAnnotationForReadOnly(node) {
          switch (node.typeAnnotation.type) {
            case "TSTupleType":
            case "TSArrayType":
              return;
            default:
              this.raise(TSErrors.UnexpectedReadonly, node);
          }
        }
        tsParseInferType() {
          const node = this.startNode();
          this.expectContextual(115);
          const typeParameter = this.startNode();
          typeParameter.name = this.tsParseTypeParameterName();
          typeParameter.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType());
          node.typeParameter = this.finishNode(typeParameter, "TSTypeParameter");
          return this.finishNode(node, "TSInferType");
        }
        tsParseConstraintForInferType() {
          if (this.eat(81)) {
            const constraint = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());
            if (this.state.inDisallowConditionalTypesContext || !this.match(17)) {
              return constraint;
            }
          }
        }
        tsParseTypeOperatorOrHigher() {
          const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;
          return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(115) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());
        }
        tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {
          const node = this.startNode();
          const hasLeadingOperator = this.eat(operator);
          const types2 = [];
          do {
            types2.push(parseConstituentType());
          } while (this.eat(operator));
          if (types2.length === 1 && !hasLeadingOperator) {
            return types2[0];
          }
          node.types = types2;
          return this.finishNode(node, kind);
        }
        tsParseIntersectionTypeOrHigher() {
          return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 45);
        }
        tsParseUnionTypeOrHigher() {
          return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 43);
        }
        tsIsStartOfFunctionType() {
          if (this.match(47)) {
            return true;
          }
          return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
        }
        tsSkipParameterStart() {
          if (tokenIsIdentifier(this.state.type) || this.match(78)) {
            this.next();
            return true;
          }
          if (this.match(5)) {
            const {
              errors
            } = this.state;
            const previousErrorCount = errors.length;
            try {
              this.parseObjectLike(8, true);
              return errors.length === previousErrorCount;
            } catch (_unused) {
              return false;
            }
          }
          if (this.match(0)) {
            this.next();
            const {
              errors
            } = this.state;
            const previousErrorCount = errors.length;
            try {
              super.parseBindingList(3, 93, 1);
              return errors.length === previousErrorCount;
            } catch (_unused2) {
              return false;
            }
          }
          return false;
        }
        tsIsUnambiguouslyStartOfFunctionType() {
          this.next();
          if (this.match(11) || this.match(21)) {
            return true;
          }
          if (this.tsSkipParameterStart()) {
            if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {
              return true;
            }
            if (this.match(11)) {
              this.next();
              if (this.match(19)) {
                return true;
              }
            }
          }
          return false;
        }
        tsParseTypeOrTypePredicateAnnotation(returnToken) {
          return this.tsInType(() => {
            const t2 = this.startNode();
            this.expect(returnToken);
            const node = this.startNode();
            const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));
            if (asserts && this.match(78)) {
              let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();
              if (thisTypePredicate.type === "TSThisType") {
                node.parameterName = thisTypePredicate;
                node.asserts = true;
                node.typeAnnotation = null;
                thisTypePredicate = this.finishNode(node, "TSTypePredicate");
              } else {
                this.resetStartLocationFromNode(thisTypePredicate, node);
                thisTypePredicate.asserts = true;
              }
              t2.typeAnnotation = thisTypePredicate;
              return this.finishNode(t2, "TSTypeAnnotation");
            }
            const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));
            if (!typePredicateVariable) {
              if (!asserts) {
                return this.tsParseTypeAnnotation(false, t2);
              }
              node.parameterName = this.parseIdentifier();
              node.asserts = asserts;
              node.typeAnnotation = null;
              t2.typeAnnotation = this.finishNode(node, "TSTypePredicate");
              return this.finishNode(t2, "TSTypeAnnotation");
            }
            const type = this.tsParseTypeAnnotation(false);
            node.parameterName = typePredicateVariable;
            node.typeAnnotation = type;
            node.asserts = asserts;
            t2.typeAnnotation = this.finishNode(node, "TSTypePredicate");
            return this.finishNode(t2, "TSTypeAnnotation");
          });
        }
        tsTryParseTypeOrTypePredicateAnnotation() {
          if (this.match(14)) {
            return this.tsParseTypeOrTypePredicateAnnotation(14);
          }
        }
        tsTryParseTypeAnnotation() {
          if (this.match(14)) {
            return this.tsParseTypeAnnotation();
          }
        }
        tsTryParseType() {
          return this.tsEatThenParseType(14);
        }
        tsParseTypePredicatePrefix() {
          const id = this.parseIdentifier();
          if (this.isContextual(116) && !this.hasPrecedingLineBreak()) {
            this.next();
            return id;
          }
        }
        tsParseTypePredicateAsserts() {
          if (this.state.type !== 109) {
            return false;
          }
          const containsEsc = this.state.containsEsc;
          this.next();
          if (!tokenIsIdentifier(this.state.type) && !this.match(78)) {
            return false;
          }
          if (containsEsc) {
            this.raise(Errors.InvalidEscapedReservedWord, this.state.lastTokStartLoc, {
              reservedWord: "asserts"
            });
          }
          return true;
        }
        tsParseTypeAnnotation(eatColon = true, t2 = this.startNode()) {
          this.tsInType(() => {
            if (eatColon)
              this.expect(14);
            t2.typeAnnotation = this.tsParseType();
          });
          return this.finishNode(t2, "TSTypeAnnotation");
        }
        tsParseType() {
          assert(this.state.inType);
          const type = this.tsParseNonConditionalType();
          if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81)) {
            return type;
          }
          const node = this.startNodeAtNode(type);
          node.checkType = type;
          node.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType());
          this.expect(17);
          node.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());
          this.expect(14);
          node.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());
          return this.finishNode(node, "TSConditionalType");
        }
        isAbstractConstructorSignature() {
          return this.isContextual(124) && this.lookahead().type === 77;
        }
        tsParseNonConditionalType() {
          if (this.tsIsStartOfFunctionType()) {
            return this.tsParseFunctionOrConstructorType("TSFunctionType");
          }
          if (this.match(77)) {
            return this.tsParseFunctionOrConstructorType("TSConstructorType");
          } else if (this.isAbstractConstructorSignature()) {
            return this.tsParseFunctionOrConstructorType("TSConstructorType", true);
          }
          return this.tsParseUnionTypeOrHigher();
        }
        tsParseTypeAssertion() {
          if (this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) {
            this.raise(TSErrors.ReservedTypeAssertion, this.state.startLoc);
          }
          const node = this.startNode();
          node.typeAnnotation = this.tsInType(() => {
            this.next();
            return this.match(75) ? this.tsParseTypeReference() : this.tsParseType();
          });
          this.expect(48);
          node.expression = this.parseMaybeUnary();
          return this.finishNode(node, "TSTypeAssertion");
        }
        tsParseHeritageClause(token) {
          const originalStartLoc = this.state.startLoc;
          const delimitedList = this.tsParseDelimitedList("HeritageClauseElement", () => {
            const node = this.startNode();
            node.expression = this.tsParseEntityName();
            if (this.match(47)) {
              node.typeParameters = this.tsParseTypeArguments();
            }
            return this.finishNode(node, "TSExpressionWithTypeArguments");
          });
          if (!delimitedList.length) {
            this.raise(TSErrors.EmptyHeritageClauseType, originalStartLoc, {
              token
            });
          }
          return delimitedList;
        }
        tsParseInterfaceDeclaration(node, properties = {}) {
          if (this.hasFollowingLineBreak())
            return null;
          this.expectContextual(129);
          if (properties.declare)
            node.declare = true;
          if (tokenIsIdentifier(this.state.type)) {
            node.id = this.parseIdentifier();
            this.checkIdentifier(node.id, 130);
          } else {
            node.id = null;
            this.raise(TSErrors.MissingInterfaceName, this.state.startLoc);
          }
          node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
          if (this.eat(81)) {
            node.extends = this.tsParseHeritageClause("extends");
          }
          const body = this.startNode();
          body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));
          node.body = this.finishNode(body, "TSInterfaceBody");
          return this.finishNode(node, "TSInterfaceDeclaration");
        }
        tsParseTypeAliasDeclaration(node) {
          node.id = this.parseIdentifier();
          this.checkIdentifier(node.id, 2);
          node.typeAnnotation = this.tsInType(() => {
            node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers);
            this.expect(29);
            if (this.isContextual(114) && this.lookahead().type !== 16) {
              const node2 = this.startNode();
              this.next();
              return this.finishNode(node2, "TSIntrinsicKeyword");
            }
            return this.tsParseType();
          });
          this.semicolon();
          return this.finishNode(node, "TSTypeAliasDeclaration");
        }
        tsInNoContext(cb) {
          const oldContext = this.state.context;
          this.state.context = [oldContext[0]];
          try {
            return cb();
          } finally {
            this.state.context = oldContext;
          }
        }
        tsInType(cb) {
          const oldInType = this.state.inType;
          this.state.inType = true;
          try {
            return cb();
          } finally {
            this.state.inType = oldInType;
          }
        }
        tsInDisallowConditionalTypesContext(cb) {
          const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
          this.state.inDisallowConditionalTypesContext = true;
          try {
            return cb();
          } finally {
            this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
          }
        }
        tsInAllowConditionalTypesContext(cb) {
          const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
          this.state.inDisallowConditionalTypesContext = false;
          try {
            return cb();
          } finally {
            this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
          }
        }
        tsEatThenParseType(token) {
          if (this.match(token)) {
            return this.tsNextThenParseType();
          }
        }
        tsExpectThenParseType(token) {
          return this.tsInType(() => {
            this.expect(token);
            return this.tsParseType();
          });
        }
        tsNextThenParseType() {
          return this.tsInType(() => {
            this.next();
            return this.tsParseType();
          });
        }
        tsParseEnumMember() {
          const node = this.startNode();
          node.id = this.match(133) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(true);
          if (this.eat(29)) {
            node.initializer = super.parseMaybeAssignAllowIn();
          }
          return this.finishNode(node, "TSEnumMember");
        }
        tsParseEnumDeclaration(node, properties = {}) {
          if (properties.const)
            node.const = true;
          if (properties.declare)
            node.declare = true;
          this.expectContextual(126);
          node.id = this.parseIdentifier();
          this.checkIdentifier(node.id, node.const ? 8971 : 8459);
          this.expect(5);
          node.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this));
          this.expect(8);
          return this.finishNode(node, "TSEnumDeclaration");
        }
        tsParseModuleBlock() {
          const node = this.startNode();
          this.scope.enter(0);
          this.expect(5);
          super.parseBlockOrModuleBlockBody(node.body = [], void 0, true, 8);
          this.scope.exit();
          return this.finishNode(node, "TSModuleBlock");
        }
        tsParseModuleOrNamespaceDeclaration(node, nested = false) {
          node.id = this.parseIdentifier();
          if (!nested) {
            this.checkIdentifier(node.id, 1024);
          }
          if (this.eat(16)) {
            const inner = this.startNode();
            this.tsParseModuleOrNamespaceDeclaration(inner, true);
            node.body = inner;
          } else {
            this.scope.enter(256);
            this.prodParam.enter(0);
            node.body = this.tsParseModuleBlock();
            this.prodParam.exit();
            this.scope.exit();
          }
          return this.finishNode(node, "TSModuleDeclaration");
        }
        tsParseAmbientExternalModuleDeclaration(node) {
          if (this.isContextual(112)) {
            node.global = true;
            node.id = this.parseIdentifier();
          } else if (this.match(133)) {
            node.id = super.parseStringLiteral(this.state.value);
          } else {
            this.unexpected();
          }
          if (this.match(5)) {
            this.scope.enter(256);
            this.prodParam.enter(0);
            node.body = this.tsParseModuleBlock();
            this.prodParam.exit();
            this.scope.exit();
          } else {
            this.semicolon();
          }
          return this.finishNode(node, "TSModuleDeclaration");
        }
        tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier, isExport) {
          node.isExport = isExport || false;
          node.id = maybeDefaultIdentifier || this.parseIdentifier();
          this.checkIdentifier(node.id, 4096);
          this.expect(29);
          const moduleReference = this.tsParseModuleReference();
          if (node.importKind === "type" && moduleReference.type !== "TSExternalModuleReference") {
            this.raise(TSErrors.ImportAliasHasImportType, moduleReference);
          }
          node.moduleReference = moduleReference;
          this.semicolon();
          return this.finishNode(node, "TSImportEqualsDeclaration");
        }
        tsIsExternalModuleReference() {
          return this.isContextual(119) && this.lookaheadCharCode() === 40;
        }
        tsParseModuleReference() {
          return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);
        }
        tsParseExternalModuleReference() {
          const node = this.startNode();
          this.expectContextual(119);
          this.expect(10);
          if (!this.match(133)) {
            this.unexpected();
          }
          node.expression = super.parseExprAtom();
          this.expect(11);
          this.sawUnambiguousESM = true;
          return this.finishNode(node, "TSExternalModuleReference");
        }
        tsLookAhead(f) {
          const state = this.state.clone();
          const res = f();
          this.state = state;
          return res;
        }
        tsTryParseAndCatch(f) {
          const result = this.tryParse((abort) => f() || abort());
          if (result.aborted || !result.node)
            return;
          if (result.error)
            this.state = result.failState;
          return result.node;
        }
        tsTryParse(f) {
          const state = this.state.clone();
          const result = f();
          if (result !== void 0 && result !== false) {
            return result;
          }
          this.state = state;
        }
        tsTryParseDeclare(nany) {
          if (this.isLineTerminator()) {
            return;
          }
          let startType = this.state.type;
          let kind;
          if (this.isContextual(100)) {
            startType = 74;
            kind = "let";
          }
          return this.tsInAmbientContext(() => {
            switch (startType) {
              case 68:
                nany.declare = true;
                return super.parseFunctionStatement(nany, false, false);
              case 80:
                nany.declare = true;
                return this.parseClass(nany, true, false);
              case 126:
                return this.tsParseEnumDeclaration(nany, {
                  declare: true
                });
              case 112:
                return this.tsParseAmbientExternalModuleDeclaration(nany);
              case 75:
              case 74:
                if (!this.match(75) || !this.isLookaheadContextual("enum")) {
                  nany.declare = true;
                  return this.parseVarStatement(nany, kind || this.state.value, true);
                }
                this.expect(75);
                return this.tsParseEnumDeclaration(nany, {
                  const: true,
                  declare: true
                });
              case 129: {
                const result = this.tsParseInterfaceDeclaration(nany, {
                  declare: true
                });
                if (result)
                  return result;
              }
              default:
                if (tokenIsIdentifier(startType)) {
                  return this.tsParseDeclaration(nany, this.state.value, true, null);
                }
            }
          });
        }
        tsTryParseExportDeclaration() {
          return this.tsParseDeclaration(this.startNode(), this.state.value, true, null);
        }
        tsParseExpressionStatement(node, expr, decorators) {
          switch (expr.name) {
            case "declare": {
              const declaration = this.tsTryParseDeclare(node);
              if (declaration) {
                declaration.declare = true;
              }
              return declaration;
            }
            case "global":
              if (this.match(5)) {
                this.scope.enter(256);
                this.prodParam.enter(0);
                const mod = node;
                mod.global = true;
                mod.id = expr;
                mod.body = this.tsParseModuleBlock();
                this.scope.exit();
                this.prodParam.exit();
                return this.finishNode(mod, "TSModuleDeclaration");
              }
              break;
            default:
              return this.tsParseDeclaration(node, expr.name, false, decorators);
          }
        }
        tsParseDeclaration(node, value, next, decorators) {
          switch (value) {
            case "abstract":
              if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) {
                return this.tsParseAbstractDeclaration(node, decorators);
              }
              break;
            case "module":
              if (this.tsCheckLineTerminator(next)) {
                if (this.match(133)) {
                  return this.tsParseAmbientExternalModuleDeclaration(node);
                } else if (tokenIsIdentifier(this.state.type)) {
                  return this.tsParseModuleOrNamespaceDeclaration(node);
                }
              }
              break;
            case "namespace":
              if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {
                return this.tsParseModuleOrNamespaceDeclaration(node);
              }
              break;
            case "type":
              if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {
                return this.tsParseTypeAliasDeclaration(node);
              }
              break;
          }
        }
        tsCheckLineTerminator(next) {
          if (next) {
            if (this.hasFollowingLineBreak())
              return false;
            this.next();
            return true;
          }
          return !this.isLineTerminator();
        }
        tsTryParseGenericAsyncArrowFunction(startLoc) {
          if (!this.match(47))
            return;
          const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
          this.state.maybeInArrowParameters = true;
          const res = this.tsTryParseAndCatch(() => {
            const node = this.startNodeAt(startLoc);
            node.typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);
            super.parseFunctionParams(node);
            node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();
            this.expect(19);
            return node;
          });
          this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
          if (!res)
            return;
          return super.parseArrowExpression(res, null, true);
        }
        tsParseTypeArgumentsInExpression() {
          if (this.reScan_lt() !== 47)
            return;
          return this.tsParseTypeArguments();
        }
        tsParseTypeArguments() {
          const node = this.startNode();
          node.params = this.tsInType(() => this.tsInNoContext(() => {
            this.expect(47);
            return this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this));
          }));
          if (node.params.length === 0) {
            this.raise(TSErrors.EmptyTypeArguments, node);
          } else if (!this.state.inType && this.curContext() === types.brace) {
            this.reScan_lt_gt();
          }
          this.expect(48);
          return this.finishNode(node, "TSTypeParameterInstantiation");
        }
        tsIsDeclarationStart() {
          return tokenIsTSDeclarationStart(this.state.type);
        }
        isExportDefaultSpecifier() {
          if (this.tsIsDeclarationStart())
            return false;
          return super.isExportDefaultSpecifier();
        }
        parseAssignableListItem(flags, decorators) {
          const startLoc = this.state.startLoc;
          const modified = {};
          this.tsParseModifiers({
            allowedModifiers: ["public", "private", "protected", "override", "readonly"]
          }, modified);
          const accessibility = modified.accessibility;
          const override = modified.override;
          const readonly = modified.readonly;
          if (!(flags & 4) && (accessibility || readonly || override)) {
            this.raise(TSErrors.UnexpectedParameterModifier, startLoc);
          }
          const left = this.parseMaybeDefault();
          this.parseAssignableListItemTypes(left, flags);
          const elt = this.parseMaybeDefault(left.loc.start, left);
          if (accessibility || readonly || override) {
            const pp = this.startNodeAt(startLoc);
            if (decorators.length) {
              pp.decorators = decorators;
            }
            if (accessibility)
              pp.accessibility = accessibility;
            if (readonly)
              pp.readonly = readonly;
            if (override)
              pp.override = override;
            if (elt.type !== "Identifier" && elt.type !== "AssignmentPattern") {
              this.raise(TSErrors.UnsupportedParameterPropertyKind, pp);
            }
            pp.parameter = elt;
            return this.finishNode(pp, "TSParameterProperty");
          }
          if (decorators.length) {
            left.decorators = decorators;
          }
          return elt;
        }
        isSimpleParameter(node) {
          return node.type === "TSParameterProperty" && super.isSimpleParameter(node.parameter) || super.isSimpleParameter(node);
        }
        tsDisallowOptionalPattern(node) {
          for (const param of node.params) {
            if (param.type !== "Identifier" && param.optional && !this.state.isAmbientContext) {
              this.raise(TSErrors.PatternIsOptional, param);
            }
          }
        }
        setArrowFunctionParameters(node, params, trailingCommaLoc) {
          super.setArrowFunctionParameters(node, params, trailingCommaLoc);
          this.tsDisallowOptionalPattern(node);
        }
        parseFunctionBodyAndFinish(node, type, isMethod = false) {
          if (this.match(14)) {
            node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
          }
          const bodilessType = type === "FunctionDeclaration" ? "TSDeclareFunction" : type === "ClassMethod" || type === "ClassPrivateMethod" ? "TSDeclareMethod" : void 0;
          if (bodilessType && !this.match(5) && this.isLineTerminator()) {
            return this.finishNode(node, bodilessType);
          }
          if (bodilessType === "TSDeclareFunction" && this.state.isAmbientContext) {
            this.raise(TSErrors.DeclareFunctionHasImplementation, node);
            if (node.declare) {
              return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);
            }
          }
          this.tsDisallowOptionalPattern(node);
          return super.parseFunctionBodyAndFinish(node, type, isMethod);
        }
        registerFunctionStatementId(node) {
          if (!node.body && node.id) {
            this.checkIdentifier(node.id, 1024);
          } else {
            super.registerFunctionStatementId(node);
          }
        }
        tsCheckForInvalidTypeCasts(items) {
          items.forEach((node) => {
            if ((node == null ? void 0 : node.type) === "TSTypeCastExpression") {
              this.raise(TSErrors.UnexpectedTypeAnnotation, node.typeAnnotation);
            }
          });
        }
        toReferencedList(exprList, isInParens) {
          this.tsCheckForInvalidTypeCasts(exprList);
          return exprList;
        }
        parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
          const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
          if (node.type === "ArrayExpression") {
            this.tsCheckForInvalidTypeCasts(node.elements);
          }
          return node;
        }
        parseSubscript(base, startLoc, noCalls, state) {
          if (!this.hasPrecedingLineBreak() && this.match(35)) {
            this.state.canStartJSXElement = false;
            this.next();
            const nonNullExpression = this.startNodeAt(startLoc);
            nonNullExpression.expression = base;
            return this.finishNode(nonNullExpression, "TSNonNullExpression");
          }
          let isOptionalCall = false;
          if (this.match(18) && this.lookaheadCharCode() === 60) {
            if (noCalls) {
              state.stop = true;
              return base;
            }
            state.optionalChainMember = isOptionalCall = true;
            this.next();
          }
          if (this.match(47) || this.match(51)) {
            let missingParenErrorLoc;
            const result = this.tsTryParseAndCatch(() => {
              if (!noCalls && this.atPossibleAsyncArrow(base)) {
                const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startLoc);
                if (asyncArrowFn) {
                  return asyncArrowFn;
                }
              }
              const typeArguments = this.tsParseTypeArgumentsInExpression();
              if (!typeArguments)
                return;
              if (isOptionalCall && !this.match(10)) {
                missingParenErrorLoc = this.state.curPosition();
                return;
              }
              if (tokenIsTemplate(this.state.type)) {
                const result2 = super.parseTaggedTemplateExpression(base, startLoc, state);
                result2.typeParameters = typeArguments;
                return result2;
              }
              if (!noCalls && this.eat(10)) {
                const node2 = this.startNodeAt(startLoc);
                node2.callee = base;
                node2.arguments = this.parseCallExpressionArguments(11, false);
                this.tsCheckForInvalidTypeCasts(node2.arguments);
                node2.typeParameters = typeArguments;
                if (state.optionalChainMember) {
                  node2.optional = isOptionalCall;
                }
                return this.finishCallExpression(node2, state.optionalChainMember);
              }
              const tokenType = this.state.type;
              if (tokenType === 48 || tokenType === 52 || tokenType !== 10 && tokenCanStartExpression(tokenType) && !this.hasPrecedingLineBreak()) {
                return;
              }
              const node = this.startNodeAt(startLoc);
              node.expression = base;
              node.typeParameters = typeArguments;
              return this.finishNode(node, "TSInstantiationExpression");
            });
            if (missingParenErrorLoc) {
              this.unexpected(missingParenErrorLoc, 10);
            }
            if (result) {
              if (result.type === "TSInstantiationExpression" && (this.match(16) || this.match(18) && this.lookaheadCharCode() !== 40)) {
                this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression, this.state.startLoc);
              }
              return result;
            }
          }
          return super.parseSubscript(base, startLoc, noCalls, state);
        }
        parseNewCallee(node) {
          var _callee$extra;
          super.parseNewCallee(node);
          const {
            callee
          } = node;
          if (callee.type === "TSInstantiationExpression" && !((_callee$extra = callee.extra) != null && _callee$extra.parenthesized)) {
            node.typeParameters = callee.typeParameters;
            node.callee = callee.expression;
          }
        }
        parseExprOp(left, leftStartLoc, minPrec) {
          let isSatisfies;
          if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (isSatisfies = this.isContextual(120)))) {
            const node = this.startNodeAt(leftStartLoc);
            node.expression = left;
            node.typeAnnotation = this.tsInType(() => {
              this.next();
              if (this.match(75)) {
                if (isSatisfies) {
                  this.raise(Errors.UnexpectedKeyword, this.state.startLoc, {
                    keyword: "const"
                  });
                }
                return this.tsParseTypeReference();
              }
              return this.tsParseType();
            });
            this.finishNode(node, isSatisfies ? "TSSatisfiesExpression" : "TSAsExpression");
            this.reScan_lt_gt();
            return this.parseExprOp(node, leftStartLoc, minPrec);
          }
          return super.parseExprOp(left, leftStartLoc, minPrec);
        }
        checkReservedWord(word, startLoc, checkKeywords, isBinding) {
          if (!this.state.isAmbientContext) {
            super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
          }
        }
        checkImportReflection(node) {
          super.checkImportReflection(node);
          if (node.module && node.importKind !== "value") {
            this.raise(TSErrors.ImportReflectionHasImportType, node.specifiers[0].loc.start);
          }
        }
        checkDuplicateExports() {
        }
        isPotentialImportPhase(isExport) {
          if (super.isPotentialImportPhase(isExport))
            return true;
          if (this.isContextual(130)) {
            const ch = this.lookaheadCharCode();
            return isExport ? ch === 123 || ch === 42 : ch !== 61;
          }
          return !isExport && this.isContextual(87);
        }
        applyImportPhase(node, isExport, phase, loc) {
          super.applyImportPhase(node, isExport, phase, loc);
          if (isExport) {
            node.exportKind = phase === "type" ? "type" : "value";
          } else {
            node.importKind = phase === "type" || phase === "typeof" ? phase : "value";
          }
        }
        parseImport(node) {
          if (this.match(133)) {
            node.importKind = "value";
            return super.parseImport(node);
          }
          let importNode;
          if (tokenIsIdentifier(this.state.type) && this.lookaheadCharCode() === 61) {
            node.importKind = "value";
            return this.tsParseImportEqualsDeclaration(node);
          } else if (this.isContextual(130)) {
            const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, false);
            if (this.lookaheadCharCode() === 61) {
              return this.tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier);
            } else {
              importNode = super.parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier);
            }
          } else {
            importNode = super.parseImport(node);
          }
          if (importNode.importKind === "type" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === "ImportDefaultSpecifier") {
            this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, importNode);
          }
          return importNode;
        }
        parseExport(node, decorators) {
          if (this.match(83)) {
            this.next();
            let maybeDefaultIdentifier = null;
            if (this.isContextual(130) && this.isPotentialImportPhase(false)) {
              maybeDefaultIdentifier = this.parseMaybeImportPhase(node, false);
            } else {
              node.importKind = "value";
            }
            return this.tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier, true);
          } else if (this.eat(29)) {
            const assign = node;
            assign.expression = super.parseExpression();
            this.semicolon();
            this.sawUnambiguousESM = true;
            return this.finishNode(assign, "TSExportAssignment");
          } else if (this.eatContextual(93)) {
            const decl = node;
            this.expectContextual(128);
            decl.id = this.parseIdentifier();
            this.semicolon();
            return this.finishNode(decl, "TSNamespaceExportDeclaration");
          } else {
            return super.parseExport(node, decorators);
          }
        }
        isAbstractClass() {
          return this.isContextual(124) && this.lookahead().type === 80;
        }
        parseExportDefaultExpression() {
          if (this.isAbstractClass()) {
            const cls = this.startNode();
            this.next();
            cls.abstract = true;
            return this.parseClass(cls, true, true);
          }
          if (this.match(129)) {
            const result = this.tsParseInterfaceDeclaration(this.startNode());
            if (result)
              return result;
          }
          return super.parseExportDefaultExpression();
        }
        parseVarStatement(node, kind, allowMissingInitializer = false) {
          const {
            isAmbientContext
          } = this.state;
          const declaration = super.parseVarStatement(node, kind, allowMissingInitializer || isAmbientContext);
          if (!isAmbientContext)
            return declaration;
          for (const {
            id,
            init
          } of declaration.declarations) {
            if (!init)
              continue;
            if (kind !== "const" || !!id.typeAnnotation) {
              this.raise(TSErrors.InitializerNotAllowedInAmbientContext, init);
            } else if (!isValidAmbientConstInitializer(init, this.hasPlugin("estree"))) {
              this.raise(TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference, init);
            }
          }
          return declaration;
        }
        parseStatementContent(flags, decorators) {
          if (this.match(75) && this.isLookaheadContextual("enum")) {
            const node = this.startNode();
            this.expect(75);
            return this.tsParseEnumDeclaration(node, {
              const: true
            });
          }
          if (this.isContextual(126)) {
            return this.tsParseEnumDeclaration(this.startNode());
          }
          if (this.isContextual(129)) {
            const result = this.tsParseInterfaceDeclaration(this.startNode());
            if (result)
              return result;
          }
          return super.parseStatementContent(flags, decorators);
        }
        parseAccessModifier() {
          return this.tsParseModifier(["public", "protected", "private"]);
        }
        tsHasSomeModifiers(member, modifiers) {
          return modifiers.some((modifier) => {
            if (tsIsAccessModifier(modifier)) {
              return member.accessibility === modifier;
            }
            return !!member[modifier];
          });
        }
        tsIsStartOfStaticBlocks() {
          return this.isContextual(106) && this.lookaheadCharCode() === 123;
        }
        parseClassMember(classBody, member, state) {
          const modifiers = ["declare", "private", "public", "protected", "override", "abstract", "readonly", "static"];
          this.tsParseModifiers({
            allowedModifiers: modifiers,
            disallowedModifiers: ["in", "out"],
            stopOnStartOfClassStaticBlock: true,
            errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions
          }, member);
          const callParseClassMemberWithIsStatic = () => {
            if (this.tsIsStartOfStaticBlocks()) {
              this.next();
              this.next();
              if (this.tsHasSomeModifiers(member, modifiers)) {
                this.raise(TSErrors.StaticBlockCannotHaveModifier, this.state.curPosition());
              }
              super.parseClassStaticBlock(classBody, member);
            } else {
              this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);
            }
          };
          if (member.declare) {
            this.tsInAmbientContext(callParseClassMemberWithIsStatic);
          } else {
            callParseClassMemberWithIsStatic();
          }
        }
        parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
          const idx = this.tsTryParseIndexSignature(member);
          if (idx) {
            classBody.body.push(idx);
            if (member.abstract) {
              this.raise(TSErrors.IndexSignatureHasAbstract, member);
            }
            if (member.accessibility) {
              this.raise(TSErrors.IndexSignatureHasAccessibility, member, {
                modifier: member.accessibility
              });
            }
            if (member.declare) {
              this.raise(TSErrors.IndexSignatureHasDeclare, member);
            }
            if (member.override) {
              this.raise(TSErrors.IndexSignatureHasOverride, member);
            }
            return;
          }
          if (!this.state.inAbstractClass && member.abstract) {
            this.raise(TSErrors.NonAbstractClassHasAbstractMethod, member);
          }
          if (member.override) {
            if (!state.hadSuperClass) {
              this.raise(TSErrors.OverrideNotInSubClass, member);
            }
          }
          super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
        }
        parsePostMemberNameModifiers(methodOrProp) {
          const optional = this.eat(17);
          if (optional)
            methodOrProp.optional = true;
          if (methodOrProp.readonly && this.match(10)) {
            this.raise(TSErrors.ClassMethodHasReadonly, methodOrProp);
          }
          if (methodOrProp.declare && this.match(10)) {
            this.raise(TSErrors.ClassMethodHasDeclare, methodOrProp);
          }
        }
        parseExpressionStatement(node, expr, decorators) {
          const decl = expr.type === "Identifier" ? this.tsParseExpressionStatement(node, expr, decorators) : void 0;
          return decl || super.parseExpressionStatement(node, expr, decorators);
        }
        shouldParseExportDeclaration() {
          if (this.tsIsDeclarationStart())
            return true;
          return super.shouldParseExportDeclaration();
        }
        parseConditional(expr, startLoc, refExpressionErrors) {
          if (!this.state.maybeInArrowParameters || !this.match(17)) {
            return super.parseConditional(expr, startLoc, refExpressionErrors);
          }
          const result = this.tryParse(() => super.parseConditional(expr, startLoc));
          if (!result.node) {
            if (result.error) {
              super.setOptionalParametersError(refExpressionErrors, result.error);
            }
            return expr;
          }
          if (result.error)
            this.state = result.failState;
          return result.node;
        }
        parseParenItem(node, startLoc) {
          node = super.parseParenItem(node, startLoc);
          if (this.eat(17)) {
            node.optional = true;
            this.resetEndLocation(node);
          }
          if (this.match(14)) {
            const typeCastNode = this.startNodeAt(startLoc);
            typeCastNode.expression = node;
            typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();
            return this.finishNode(typeCastNode, "TSTypeCastExpression");
          }
          return node;
        }
        parseExportDeclaration(node) {
          if (!this.state.isAmbientContext && this.isContextual(125)) {
            return this.tsInAmbientContext(() => this.parseExportDeclaration(node));
          }
          const startLoc = this.state.startLoc;
          const isDeclare = this.eatContextual(125);
          if (isDeclare && (this.isContextual(125) || !this.shouldParseExportDeclaration())) {
            throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, this.state.startLoc);
          }
          const isIdentifier = tokenIsIdentifier(this.state.type);
          const declaration = isIdentifier && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node);
          if (!declaration)
            return null;
          if (declaration.type === "TSInterfaceDeclaration" || declaration.type === "TSTypeAliasDeclaration" || isDeclare) {
            node.exportKind = "type";
          }
          if (isDeclare) {
            this.resetStartLocation(declaration, startLoc);
            declaration.declare = true;
          }
          return declaration;
        }
        parseClassId(node, isStatement, optionalId, bindingType) {
          if ((!isStatement || optionalId) && this.isContextual(113)) {
            return;
          }
          super.parseClassId(node, isStatement, optionalId, node.declare ? 1024 : 8331);
          const typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
          if (typeParameters)
            node.typeParameters = typeParameters;
        }
        parseClassPropertyAnnotation(node) {
          if (!node.optional) {
            if (this.eat(35)) {
              node.definite = true;
            } else if (this.eat(17)) {
              node.optional = true;
            }
          }
          const type = this.tsTryParseTypeAnnotation();
          if (type)
            node.typeAnnotation = type;
        }
        parseClassProperty(node) {
          this.parseClassPropertyAnnotation(node);
          if (this.state.isAmbientContext && !(node.readonly && !node.typeAnnotation) && this.match(29)) {
            this.raise(TSErrors.DeclareClassFieldHasInitializer, this.state.startLoc);
          }
          if (node.abstract && this.match(29)) {
            const {
              key
            } = node;
            this.raise(TSErrors.AbstractPropertyHasInitializer, this.state.startLoc, {
              propertyName: key.type === "Identifier" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`
            });
          }
          return super.parseClassProperty(node);
        }
        parseClassPrivateProperty(node) {
          if (node.abstract) {
            this.raise(TSErrors.PrivateElementHasAbstract, node);
          }
          if (node.accessibility) {
            this.raise(TSErrors.PrivateElementHasAccessibility, node, {
              modifier: node.accessibility
            });
          }
          this.parseClassPropertyAnnotation(node);
          return super.parseClassPrivateProperty(node);
        }
        parseClassAccessorProperty(node) {
          this.parseClassPropertyAnnotation(node);
          if (node.optional) {
            this.raise(TSErrors.AccessorCannotBeOptional, node);
          }
          return super.parseClassAccessorProperty(node);
        }
        pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
          const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
          if (typeParameters && isConstructor) {
            this.raise(TSErrors.ConstructorHasTypeParameters, typeParameters);
          }
          const {
            declare = false,
            kind
          } = method;
          if (declare && (kind === "get" || kind === "set")) {
            this.raise(TSErrors.DeclareAccessor, method, {
              kind
            });
          }
          if (typeParameters)
            method.typeParameters = typeParameters;
          super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
        }
        pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
          const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
          if (typeParameters)
            method.typeParameters = typeParameters;
          super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
        }
        declareClassPrivateMethodInScope(node, kind) {
          if (node.type === "TSDeclareMethod")
            return;
          if (node.type === "MethodDefinition" && !node.value.body)
            return;
          super.declareClassPrivateMethodInScope(node, kind);
        }
        parseClassSuper(node) {
          super.parseClassSuper(node);
          if (node.superClass && (this.match(47) || this.match(51))) {
            node.superTypeParameters = this.tsParseTypeArgumentsInExpression();
          }
          if (this.eatContextual(113)) {
            node.implements = this.tsParseHeritageClause("implements");
          }
        }
        parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
          const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
          if (typeParameters)
            prop.typeParameters = typeParameters;
          return super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
        }
        parseFunctionParams(node, isConstructor) {
          const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
          if (typeParameters)
            node.typeParameters = typeParameters;
          super.parseFunctionParams(node, isConstructor);
        }
        parseVarId(decl, kind) {
          super.parseVarId(decl, kind);
          if (decl.id.type === "Identifier" && !this.hasPrecedingLineBreak() && this.eat(35)) {
            decl.definite = true;
          }
          const type = this.tsTryParseTypeAnnotation();
          if (type) {
            decl.id.typeAnnotation = type;
            this.resetEndLocation(decl.id);
          }
        }
        parseAsyncArrowFromCallExpression(node, call) {
          if (this.match(14)) {
            node.returnType = this.tsParseTypeAnnotation();
          }
          return super.parseAsyncArrowFromCallExpression(node, call);
        }
        parseMaybeAssign(refExpressionErrors, afterLeftParse) {
          var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2;
          let state;
          let jsx5;
          let typeCast;
          if (this.hasPlugin("jsx") && (this.match(142) || this.match(47))) {
            state = this.state.clone();
            jsx5 = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
            if (!jsx5.error)
              return jsx5.node;
            const {
              context
            } = this.state;
            const currentContext = context[context.length - 1];
            if (currentContext === types.j_oTag || currentContext === types.j_expr) {
              context.pop();
            }
          }
          if (!((_jsx = jsx5) != null && _jsx.error) && !this.match(47)) {
            return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
          }
          if (!state || state === this.state)
            state = this.state.clone();
          let typeParameters;
          const arrow = this.tryParse((abort) => {
            var _expr$extra, _typeParameters;
            typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);
            const expr = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
            if (expr.type !== "ArrowFunctionExpression" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {
              abort();
            }
            if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {
              this.resetStartLocationFromNode(expr, typeParameters);
            }
            expr.typeParameters = typeParameters;
            return expr;
          }, state);
          if (!arrow.error && !arrow.aborted) {
            if (typeParameters)
              this.reportReservedArrowTypeParam(typeParameters);
            return arrow.node;
          }
          if (!jsx5) {
            assert(!this.hasPlugin("jsx"));
            typeCast = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
            if (!typeCast.error)
              return typeCast.node;
          }
          if ((_jsx2 = jsx5) != null && _jsx2.node) {
            this.state = jsx5.failState;
            return jsx5.node;
          }
          if (arrow.node) {
            this.state = arrow.failState;
            if (typeParameters)
              this.reportReservedArrowTypeParam(typeParameters);
            return arrow.node;
          }
          if ((_typeCast = typeCast) != null && _typeCast.node) {
            this.state = typeCast.failState;
            return typeCast.node;
          }
          throw ((_jsx3 = jsx5) == null ? void 0 : _jsx3.error) || arrow.error || ((_typeCast2 = typeCast) == null ? void 0 : _typeCast2.error);
        }
        reportReservedArrowTypeParam(node) {
          var _node$extra;
          if (node.params.length === 1 && !node.params[0].constraint && !((_node$extra = node.extra) != null && _node$extra.trailingComma) && this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) {
            this.raise(TSErrors.ReservedArrowTypeParam, node);
          }
        }
        parseMaybeUnary(refExpressionErrors, sawUnary) {
          if (!this.hasPlugin("jsx") && this.match(47)) {
            return this.tsParseTypeAssertion();
          }
          return super.parseMaybeUnary(refExpressionErrors, sawUnary);
        }
        parseArrow(node) {
          if (this.match(14)) {
            const result = this.tryParse((abort) => {
              const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
              if (this.canInsertSemicolon() || !this.match(19))
                abort();
              return returnType;
            });
            if (result.aborted)
              return;
            if (!result.thrown) {
              if (result.error)
                this.state = result.failState;
              node.returnType = result.node;
            }
          }
          return super.parseArrow(node);
        }
        parseAssignableListItemTypes(param, flags) {
          if (!(flags & 2))
            return param;
          if (this.eat(17)) {
            param.optional = true;
          }
          const type = this.tsTryParseTypeAnnotation();
          if (type)
            param.typeAnnotation = type;
          this.resetEndLocation(param);
          return param;
        }
        isAssignable(node, isBinding) {
          switch (node.type) {
            case "TSTypeCastExpression":
              return this.isAssignable(node.expression, isBinding);
            case "TSParameterProperty":
              return true;
            default:
              return super.isAssignable(node, isBinding);
          }
        }
        toAssignable(node, isLHS = false) {
          switch (node.type) {
            case "ParenthesizedExpression":
              this.toAssignableParenthesizedExpression(node, isLHS);
              break;
            case "TSAsExpression":
            case "TSSatisfiesExpression":
            case "TSNonNullExpression":
            case "TSTypeAssertion":
              if (isLHS) {
                this.expressionScope.recordArrowParameterBindingError(TSErrors.UnexpectedTypeCastInParameter, node);
              } else {
                this.raise(TSErrors.UnexpectedTypeCastInParameter, node);
              }
              this.toAssignable(node.expression, isLHS);
              break;
            case "AssignmentExpression":
              if (!isLHS && node.left.type === "TSTypeCastExpression") {
                node.left = this.typeCastToParameter(node.left);
              }
            default:
              super.toAssignable(node, isLHS);
          }
        }
        toAssignableParenthesizedExpression(node, isLHS) {
          switch (node.expression.type) {
            case "TSAsExpression":
            case "TSSatisfiesExpression":
            case "TSNonNullExpression":
            case "TSTypeAssertion":
            case "ParenthesizedExpression":
              this.toAssignable(node.expression, isLHS);
              break;
            default:
              super.toAssignable(node, isLHS);
          }
        }
        checkToRestConversion(node, allowPattern) {
          switch (node.type) {
            case "TSAsExpression":
            case "TSSatisfiesExpression":
            case "TSTypeAssertion":
            case "TSNonNullExpression":
              this.checkToRestConversion(node.expression, false);
              break;
            default:
              super.checkToRestConversion(node, allowPattern);
          }
        }
        isValidLVal(type, isUnparenthesizedInAssign, binding) {
          return getOwn({
            TSTypeCastExpression: true,
            TSParameterProperty: "parameter",
            TSNonNullExpression: "expression",
            TSAsExpression: (binding !== 64 || !isUnparenthesizedInAssign) && ["expression", true],
            TSSatisfiesExpression: (binding !== 64 || !isUnparenthesizedInAssign) && ["expression", true],
            TSTypeAssertion: (binding !== 64 || !isUnparenthesizedInAssign) && ["expression", true]
          }, type) || super.isValidLVal(type, isUnparenthesizedInAssign, binding);
        }
        parseBindingAtom() {
          if (this.state.type === 78) {
            return this.parseIdentifier(true);
          }
          return super.parseBindingAtom();
        }
        parseMaybeDecoratorArguments(expr) {
          if (this.match(47) || this.match(51)) {
            const typeArguments = this.tsParseTypeArgumentsInExpression();
            if (this.match(10)) {
              const call = super.parseMaybeDecoratorArguments(expr);
              call.typeParameters = typeArguments;
              return call;
            }
            this.unexpected(null, 10);
          }
          return super.parseMaybeDecoratorArguments(expr);
        }
        checkCommaAfterRest(close) {
          if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {
            this.next();
            return false;
          }
          return super.checkCommaAfterRest(close);
        }
        isClassMethod() {
          return this.match(47) || super.isClassMethod();
        }
        isClassProperty() {
          return this.match(35) || this.match(14) || super.isClassProperty();
        }
        parseMaybeDefault(startLoc, left) {
          const node = super.parseMaybeDefault(startLoc, left);
          if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {
            this.raise(TSErrors.TypeAnnotationAfterAssign, node.typeAnnotation);
          }
          return node;
        }
        getTokenFromCode(code2) {
          if (this.state.inType) {
            if (code2 === 62) {
              this.finishOp(48, 1);
              return;
            }
            if (code2 === 60) {
              this.finishOp(47, 1);
              return;
            }
          }
          super.getTokenFromCode(code2);
        }
        reScan_lt_gt() {
          const {
            type
          } = this.state;
          if (type === 47) {
            this.state.pos -= 1;
            this.readToken_lt();
          } else if (type === 48) {
            this.state.pos -= 1;
            this.readToken_gt();
          }
        }
        reScan_lt() {
          const {
            type
          } = this.state;
          if (type === 51) {
            this.state.pos -= 2;
            this.finishOp(47, 1);
            return 47;
          }
          return type;
        }
        toAssignableList(exprList, trailingCommaLoc, isLHS) {
          for (let i = 0; i < exprList.length; i++) {
            const expr = exprList[i];
            if ((expr == null ? void 0 : expr.type) === "TSTypeCastExpression") {
              exprList[i] = this.typeCastToParameter(expr);
            }
          }
          super.toAssignableList(exprList, trailingCommaLoc, isLHS);
        }
        typeCastToParameter(node) {
          node.expression.typeAnnotation = node.typeAnnotation;
          this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);
          return node.expression;
        }
        shouldParseArrow(params) {
          if (this.match(14)) {
            return params.every((expr) => this.isAssignable(expr, true));
          }
          return super.shouldParseArrow(params);
        }
        shouldParseAsyncArrow() {
          return this.match(14) || super.shouldParseAsyncArrow();
        }
        canHaveLeadingDecorator() {
          return super.canHaveLeadingDecorator() || this.isAbstractClass();
        }
        jsxParseOpeningElementAfterName(node) {
          if (this.match(47) || this.match(51)) {
            const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());
            if (typeArguments)
              node.typeParameters = typeArguments;
          }
          return super.jsxParseOpeningElementAfterName(node);
        }
        getGetterSetterExpectedParamCount(method) {
          const baseCount = super.getGetterSetterExpectedParamCount(method);
          const params = this.getObjectOrClassMethodParams(method);
          const firstParam = params[0];
          const hasContextParam = firstParam && this.isThisParam(firstParam);
          return hasContextParam ? baseCount + 1 : baseCount;
        }
        parseCatchClauseParam() {
          const param = super.parseCatchClauseParam();
          const type = this.tsTryParseTypeAnnotation();
          if (type) {
            param.typeAnnotation = type;
            this.resetEndLocation(param);
          }
          return param;
        }
        tsInAmbientContext(cb) {
          const oldIsAmbientContext = this.state.isAmbientContext;
          this.state.isAmbientContext = true;
          try {
            return cb();
          } finally {
            this.state.isAmbientContext = oldIsAmbientContext;
          }
        }
        parseClass(node, isStatement, optionalId) {
          const oldInAbstractClass = this.state.inAbstractClass;
          this.state.inAbstractClass = !!node.abstract;
          try {
            return super.parseClass(node, isStatement, optionalId);
          } finally {
            this.state.inAbstractClass = oldInAbstractClass;
          }
        }
        tsParseAbstractDeclaration(node, decorators) {
          if (this.match(80)) {
            node.abstract = true;
            return this.maybeTakeDecorators(decorators, this.parseClass(node, true, false));
          } else if (this.isContextual(129)) {
            if (!this.hasFollowingLineBreak()) {
              node.abstract = true;
              this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, node);
              return this.tsParseInterfaceDeclaration(node);
            }
          } else {
            this.unexpected(null, 80);
          }
        }
        parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope) {
          const method = super.parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
          if (method.abstract) {
            const hasBody = this.hasPlugin("estree") ? !!method.value.body : !!method.body;
            if (hasBody) {
              const {
                key
              } = method;
              this.raise(TSErrors.AbstractMethodHasImplementation, method, {
                methodName: key.type === "Identifier" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`
              });
            }
          }
          return method;
        }
        tsParseTypeParameterName() {
          const typeName = this.parseIdentifier();
          return typeName.name;
        }
        shouldParseAsAmbientContext() {
          return !!this.getPluginOption("typescript", "dts");
        }
        parse() {
          if (this.shouldParseAsAmbientContext()) {
            this.state.isAmbientContext = true;
          }
          return super.parse();
        }
        getExpression() {
          if (this.shouldParseAsAmbientContext()) {
            this.state.isAmbientContext = true;
          }
          return super.getExpression();
        }
        parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
          if (!isString && isMaybeTypeOnly) {
            this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);
            return this.finishNode(node, "ExportSpecifier");
          }
          node.exportKind = "value";
          return super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly);
        }
        parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
          if (!importedIsString && isMaybeTypeOnly) {
            this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);
            return this.finishNode(specifier, "ImportSpecifier");
          }
          specifier.importKind = "value";
          return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, isInTypeOnlyImport ? 4098 : 4096);
        }
        parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {
          const leftOfAsKey = isImport ? "imported" : "local";
          const rightOfAsKey = isImport ? "local" : "exported";
          let leftOfAs = node[leftOfAsKey];
          let rightOfAs;
          let hasTypeSpecifier = false;
          let canParseAsKeyword = true;
          const loc = leftOfAs.loc.start;
          if (this.isContextual(93)) {
            const firstAs = this.parseIdentifier();
            if (this.isContextual(93)) {
              const secondAs = this.parseIdentifier();
              if (tokenIsKeywordOrIdentifier(this.state.type)) {
                hasTypeSpecifier = true;
                leftOfAs = firstAs;
                rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();
                canParseAsKeyword = false;
              } else {
                rightOfAs = secondAs;
                canParseAsKeyword = false;
              }
            } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
              canParseAsKeyword = false;
              rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();
            } else {
              hasTypeSpecifier = true;
              leftOfAs = firstAs;
            }
          } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
            hasTypeSpecifier = true;
            if (isImport) {
              leftOfAs = this.parseIdentifier(true);
              if (!this.isContextual(93)) {
                this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, true, true);
              }
            } else {
              leftOfAs = this.parseModuleExportName();
            }
          }
          if (hasTypeSpecifier && isInTypeOnlyImportExport) {
            this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, loc);
          }
          node[leftOfAsKey] = leftOfAs;
          node[rightOfAsKey] = rightOfAs;
          const kindKey = isImport ? "importKind" : "exportKind";
          node[kindKey] = hasTypeSpecifier ? "type" : "value";
          if (canParseAsKeyword && this.eatContextual(93)) {
            node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();
          }
          if (!node[rightOfAsKey]) {
            node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);
          }
          if (isImport) {
            this.checkIdentifier(node[rightOfAsKey], hasTypeSpecifier ? 4098 : 4096);
          }
        }
      };
      function isPossiblyLiteralEnum(expression) {
        if (expression.type !== "MemberExpression")
          return false;
        const {
          computed,
          property
        } = expression;
        if (computed && property.type !== "StringLiteral" && (property.type !== "TemplateLiteral" || property.expressions.length > 0)) {
          return false;
        }
        return isUncomputedMemberExpressionChain(expression.object);
      }
      function isValidAmbientConstInitializer(expression, estree2) {
        var _expression$extra;
        const {
          type
        } = expression;
        if ((_expression$extra = expression.extra) != null && _expression$extra.parenthesized) {
          return false;
        }
        if (estree2) {
          if (type === "Literal") {
            const {
              value
            } = expression;
            if (typeof value === "string" || typeof value === "boolean") {
              return true;
            }
          }
        } else {
          if (type === "StringLiteral" || type === "BooleanLiteral") {
            return true;
          }
        }
        if (isNumber(expression, estree2) || isNegativeNumber(expression, estree2)) {
          return true;
        }
        if (type === "TemplateLiteral" && expression.expressions.length === 0) {
          return true;
        }
        if (isPossiblyLiteralEnum(expression)) {
          return true;
        }
        return false;
      }
      function isNumber(expression, estree2) {
        if (estree2) {
          return expression.type === "Literal" && (typeof expression.value === "number" || "bigint" in expression);
        }
        return expression.type === "NumericLiteral" || expression.type === "BigIntLiteral";
      }
      function isNegativeNumber(expression, estree2) {
        if (expression.type === "UnaryExpression") {
          const {
            operator,
            argument
          } = expression;
          if (operator === "-" && isNumber(argument, estree2)) {
            return true;
          }
        }
        return false;
      }
      function isUncomputedMemberExpressionChain(expression) {
        if (expression.type === "Identifier")
          return true;
        if (expression.type !== "MemberExpression" || expression.computed) {
          return false;
        }
        return isUncomputedMemberExpressionChain(expression.object);
      }
      var PlaceholderErrors = ParseErrorEnum`placeholders`({
        ClassNameIsRequired: "A class name is required.",
        UnexpectedSpace: "Unexpected space in placeholder."
      });
      var placeholders = (superClass) => class PlaceholdersParserMixin extends superClass {
        parsePlaceholder(expectedNode) {
          if (this.match(144)) {
            const node = this.startNode();
            this.next();
            this.assertNoSpace();
            node.name = super.parseIdentifier(true);
            this.assertNoSpace();
            this.expect(144);
            return this.finishPlaceholder(node, expectedNode);
          }
        }
        finishPlaceholder(node, expectedNode) {
          const isFinished = !!(node.expectedNode && node.type === "Placeholder");
          node.expectedNode = expectedNode;
          return isFinished ? node : this.finishNode(node, "Placeholder");
        }
        getTokenFromCode(code2) {
          if (code2 === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {
            this.finishOp(144, 2);
          } else {
            super.getTokenFromCode(code2);
          }
        }
        parseExprAtom(refExpressionErrors) {
          return this.parsePlaceholder("Expression") || super.parseExprAtom(refExpressionErrors);
        }
        parseIdentifier(liberal) {
          return this.parsePlaceholder("Identifier") || super.parseIdentifier(liberal);
        }
        checkReservedWord(word, startLoc, checkKeywords, isBinding) {
          if (word !== void 0) {
            super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
          }
        }
        parseBindingAtom() {
          return this.parsePlaceholder("Pattern") || super.parseBindingAtom();
        }
        isValidLVal(type, isParenthesized, binding) {
          return type === "Placeholder" || super.isValidLVal(type, isParenthesized, binding);
        }
        toAssignable(node, isLHS) {
          if (node && node.type === "Placeholder" && node.expectedNode === "Expression") {
            node.expectedNode = "Pattern";
          } else {
            super.toAssignable(node, isLHS);
          }
        }
        chStartsBindingIdentifier(ch, pos) {
          if (super.chStartsBindingIdentifier(ch, pos)) {
            return true;
          }
          const nextToken = this.lookahead();
          if (nextToken.type === 144) {
            return true;
          }
          return false;
        }
        verifyBreakContinue(node, isBreak) {
          if (node.label && node.label.type === "Placeholder")
            return;
          super.verifyBreakContinue(node, isBreak);
        }
        parseExpressionStatement(node, expr) {
          var _expr$extra;
          if (expr.type !== "Placeholder" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {
            return super.parseExpressionStatement(node, expr);
          }
          if (this.match(14)) {
            const stmt = node;
            stmt.label = this.finishPlaceholder(expr, "Identifier");
            this.next();
            stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();
            return this.finishNode(stmt, "LabeledStatement");
          }
          this.semicolon();
          node.name = expr.name;
          return this.finishPlaceholder(node, "Statement");
        }
        parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse) {
          return this.parsePlaceholder("BlockStatement") || super.parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse);
        }
        parseFunctionId(requireId) {
          return this.parsePlaceholder("Identifier") || super.parseFunctionId(requireId);
        }
        parseClass(node, isStatement, optionalId) {
          const type = isStatement ? "ClassDeclaration" : "ClassExpression";
          this.next();
          const oldStrict = this.state.strict;
          const placeholder = this.parsePlaceholder("Identifier");
          if (placeholder) {
            if (this.match(81) || this.match(144) || this.match(5)) {
              node.id = placeholder;
            } else if (optionalId || !isStatement) {
              node.id = null;
              node.body = this.finishPlaceholder(placeholder, "ClassBody");
              return this.finishNode(node, type);
            } else {
              throw this.raise(PlaceholderErrors.ClassNameIsRequired, this.state.startLoc);
            }
          } else {
            this.parseClassId(node, isStatement, optionalId);
          }
          super.parseClassSuper(node);
          node.body = this.parsePlaceholder("ClassBody") || super.parseClassBody(!!node.superClass, oldStrict);
          return this.finishNode(node, type);
        }
        parseExport(node, decorators) {
          const placeholder = this.parsePlaceholder("Identifier");
          if (!placeholder)
            return super.parseExport(node, decorators);
          if (!this.isContextual(98) && !this.match(12)) {
            node.specifiers = [];
            node.source = null;
            node.declaration = this.finishPlaceholder(placeholder, "Declaration");
            return this.finishNode(node, "ExportNamedDeclaration");
          }
          this.expectPlugin("exportDefaultFrom");
          const specifier = this.startNode();
          specifier.exported = placeholder;
          node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
          return super.parseExport(node, decorators);
        }
        isExportDefaultSpecifier() {
          if (this.match(65)) {
            const next = this.nextTokenStart();
            if (this.isUnparsedContextual(next, "from")) {
              if (this.input.startsWith(tokenLabelName(144), this.nextTokenStartSince(next + 4))) {
                return true;
              }
            }
          }
          return super.isExportDefaultSpecifier();
        }
        maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {
          var _specifiers;
          if ((_specifiers = node.specifiers) != null && _specifiers.length) {
            return true;
          }
          return super.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);
        }
        checkExport(node) {
          const {
            specifiers
          } = node;
          if (specifiers != null && specifiers.length) {
            node.specifiers = specifiers.filter((node2) => node2.exported.type === "Placeholder");
          }
          super.checkExport(node);
          node.specifiers = specifiers;
        }
        parseImport(node) {
          const placeholder = this.parsePlaceholder("Identifier");
          if (!placeholder)
            return super.parseImport(node);
          node.specifiers = [];
          if (!this.isContextual(98) && !this.match(12)) {
            node.source = this.finishPlaceholder(placeholder, "StringLiteral");
            this.semicolon();
            return this.finishNode(node, "ImportDeclaration");
          }
          const specifier = this.startNodeAtNode(placeholder);
          specifier.local = placeholder;
          node.specifiers.push(this.finishNode(specifier, "ImportDefaultSpecifier"));
          if (this.eat(12)) {
            const hasStarImport = this.maybeParseStarImportSpecifier(node);
            if (!hasStarImport)
              this.parseNamedImportSpecifiers(node);
          }
          this.expectContextual(98);
          node.source = this.parseImportSource();
          this.semicolon();
          return this.finishNode(node, "ImportDeclaration");
        }
        parseImportSource() {
          return this.parsePlaceholder("StringLiteral") || super.parseImportSource();
        }
        assertNoSpace() {
          if (this.state.start > this.state.lastTokEndLoc.index) {
            this.raise(PlaceholderErrors.UnexpectedSpace, this.state.lastTokEndLoc);
          }
        }
      };
      var v8intrinsic = (superClass) => class V8IntrinsicMixin extends superClass {
        parseV8Intrinsic() {
          if (this.match(54)) {
            const v8IntrinsicStartLoc = this.state.startLoc;
            const node = this.startNode();
            this.next();
            if (tokenIsIdentifier(this.state.type)) {
              const name = this.parseIdentifierName();
              const identifier = this.createIdentifier(node, name);
              identifier.type = "V8IntrinsicIdentifier";
              if (this.match(10)) {
                return identifier;
              }
            }
            this.unexpected(v8IntrinsicStartLoc);
          }
        }
        parseExprAtom(refExpressionErrors) {
          return this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors);
        }
      };
      function hasPlugin(plugins, expectedConfig) {
        const [expectedName, expectedOptions] = typeof expectedConfig === "string" ? [expectedConfig, {}] : expectedConfig;
        const expectedKeys = Object.keys(expectedOptions);
        const expectedOptionsIsEmpty = expectedKeys.length === 0;
        return plugins.some((p) => {
          if (typeof p === "string") {
            return expectedOptionsIsEmpty && p === expectedName;
          } else {
            const [pluginName, pluginOptions] = p;
            if (pluginName !== expectedName) {
              return false;
            }
            for (const key of expectedKeys) {
              if (pluginOptions[key] !== expectedOptions[key]) {
                return false;
              }
            }
            return true;
          }
        });
      }
      function getPluginOption(plugins, name, option) {
        const plugin = plugins.find((plugin2) => {
          if (Array.isArray(plugin2)) {
            return plugin2[0] === name;
          } else {
            return plugin2 === name;
          }
        });
        if (plugin && Array.isArray(plugin) && plugin.length > 1) {
          return plugin[1][option];
        }
        return null;
      }
      var PIPELINE_PROPOSALS = ["minimal", "fsharp", "hack", "smart"];
      var TOPIC_TOKENS = ["^^", "@@", "^", "%", "#"];
      var RECORD_AND_TUPLE_SYNTAX_TYPES = ["hash", "bar"];
      function validatePlugins(plugins) {
        if (hasPlugin(plugins, "decorators")) {
          if (hasPlugin(plugins, "decorators-legacy")) {
            throw new Error("Cannot use the decorators and decorators-legacy plugin together");
          }
          const decoratorsBeforeExport = getPluginOption(plugins, "decorators", "decoratorsBeforeExport");
          if (decoratorsBeforeExport != null && typeof decoratorsBeforeExport !== "boolean") {
            throw new Error("'decoratorsBeforeExport' must be a boolean, if specified.");
          }
          const allowCallParenthesized = getPluginOption(plugins, "decorators", "allowCallParenthesized");
          if (allowCallParenthesized != null && typeof allowCallParenthesized !== "boolean") {
            throw new Error("'allowCallParenthesized' must be a boolean.");
          }
        }
        if (hasPlugin(plugins, "flow") && hasPlugin(plugins, "typescript")) {
          throw new Error("Cannot combine flow and typescript plugins.");
        }
        if (hasPlugin(plugins, "placeholders") && hasPlugin(plugins, "v8intrinsic")) {
          throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
        }
        if (hasPlugin(plugins, "pipelineOperator")) {
          const proposal = getPluginOption(plugins, "pipelineOperator", "proposal");
          if (!PIPELINE_PROPOSALS.includes(proposal)) {
            const proposalList = PIPELINE_PROPOSALS.map((p) => `"${p}"`).join(", ");
            throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${proposalList}.`);
          }
          const tupleSyntaxIsHash = hasPlugin(plugins, ["recordAndTuple", {
            syntaxType: "hash"
          }]);
          if (proposal === "hack") {
            if (hasPlugin(plugins, "placeholders")) {
              throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
            }
            if (hasPlugin(plugins, "v8intrinsic")) {
              throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");
            }
            const topicToken = getPluginOption(plugins, "pipelineOperator", "topicToken");
            if (!TOPIC_TOKENS.includes(topicToken)) {
              const tokenList = TOPIC_TOKENS.map((t2) => `"${t2}"`).join(", ");
              throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${tokenList}.`);
            }
            if (topicToken === "#" && tupleSyntaxIsHash) {
              throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "hack", topicToken: "#" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
            }
          } else if (proposal === "smart" && tupleSyntaxIsHash) {
            throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "smart" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
          }
        }
        if (hasPlugin(plugins, "moduleAttributes")) {
          {
            if (hasPlugin(plugins, "importAssertions") || hasPlugin(plugins, "importAttributes")) {
              throw new Error("Cannot combine importAssertions, importAttributes and moduleAttributes plugins.");
            }
            const moduleAttributesVersionPluginOption = getPluginOption(plugins, "moduleAttributes", "version");
            if (moduleAttributesVersionPluginOption !== "may-2020") {
              throw new Error("The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is 'may-2020'.");
            }
          }
        }
        if (hasPlugin(plugins, "importAssertions") && hasPlugin(plugins, "importAttributes")) {
          throw new Error("Cannot combine importAssertions and importAttributes plugins.");
        }
        if (hasPlugin(plugins, "recordAndTuple") && getPluginOption(plugins, "recordAndTuple", "syntaxType") != null && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, "recordAndTuple", "syntaxType"))) {
          throw new Error("The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: " + RECORD_AND_TUPLE_SYNTAX_TYPES.map((p) => `'${p}'`).join(", "));
        }
        if (hasPlugin(plugins, "asyncDoExpressions") && !hasPlugin(plugins, "doExpressions")) {
          const error = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
          error.missingPlugins = "doExpressions";
          throw error;
        }
        if (hasPlugin(plugins, "optionalChainingAssign") && getPluginOption(plugins, "optionalChainingAssign", "version") !== "2023-07") {
          throw new Error("The 'optionalChainingAssign' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is '2023-07'.");
        }
      }
      var mixinPlugins = {
        estree,
        jsx: jsx4,
        flow,
        typescript,
        v8intrinsic,
        placeholders
      };
      var mixinPluginNames = Object.keys(mixinPlugins);
      var defaultOptions = {
        sourceType: "script",
        sourceFilename: void 0,
        startColumn: 0,
        startLine: 1,
        allowAwaitOutsideFunction: false,
        allowReturnOutsideFunction: false,
        allowNewTargetOutsideFunction: false,
        allowImportExportEverywhere: false,
        allowSuperOutsideMethod: false,
        allowUndeclaredExports: false,
        plugins: [],
        strictMode: null,
        ranges: false,
        tokens: false,
        createImportExpressions: false,
        createParenthesizedExpressions: false,
        errorRecovery: false,
        attachComment: true,
        annexB: true
      };
      function getOptions(opts) {
        if (opts == null) {
          return Object.assign({}, defaultOptions);
        }
        if (opts.annexB != null && opts.annexB !== false) {
          throw new Error("The `annexB` option can only be set to `false`.");
        }
        const options = {};
        for (const key of Object.keys(defaultOptions)) {
          var _opts$key;
          options[key] = (_opts$key = opts[key]) != null ? _opts$key : defaultOptions[key];
        }
        return options;
      }
      var ExpressionParser = class extends LValParser {
        checkProto(prop, isRecord, protoRef, refExpressionErrors) {
          if (prop.type === "SpreadElement" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {
            return;
          }
          const key = prop.key;
          const name = key.type === "Identifier" ? key.name : key.value;
          if (name === "__proto__") {
            if (isRecord) {
              this.raise(Errors.RecordNoProto, key);
              return;
            }
            if (protoRef.used) {
              if (refExpressionErrors) {
                if (refExpressionErrors.doubleProtoLoc === null) {
                  refExpressionErrors.doubleProtoLoc = key.loc.start;
                }
              } else {
                this.raise(Errors.DuplicateProto, key);
              }
            }
            protoRef.used = true;
          }
        }
        shouldExitDescending(expr, potentialArrowAt) {
          return expr.type === "ArrowFunctionExpression" && expr.start === potentialArrowAt;
        }
        getExpression() {
          this.enterInitialScopes();
          this.nextToken();
          const expr = this.parseExpression();
          if (!this.match(139)) {
            this.unexpected();
          }
          this.finalizeRemainingComments();
          expr.comments = this.comments;
          expr.errors = this.state.errors;
          if (this.options.tokens) {
            expr.tokens = this.tokens;
          }
          return expr;
        }
        parseExpression(disallowIn, refExpressionErrors) {
          if (disallowIn) {
            return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));
          }
          return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));
        }
        parseExpressionBase(refExpressionErrors) {
          const startLoc = this.state.startLoc;
          const expr = this.parseMaybeAssign(refExpressionErrors);
          if (this.match(12)) {
            const node = this.startNodeAt(startLoc);
            node.expressions = [expr];
            while (this.eat(12)) {
              node.expressions.push(this.parseMaybeAssign(refExpressionErrors));
            }
            this.toReferencedList(node.expressions);
            return this.finishNode(node, "SequenceExpression");
          }
          return expr;
        }
        parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {
          return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
        }
        parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {
          return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
        }
        setOptionalParametersError(refExpressionErrors, resultError) {
          var _resultError$loc;
          refExpressionErrors.optionalParametersLoc = (_resultError$loc = resultError == null ? void 0 : resultError.loc) != null ? _resultError$loc : this.state.startLoc;
        }
        parseMaybeAssign(refExpressionErrors, afterLeftParse) {
          const startLoc = this.state.startLoc;
          if (this.isContextual(108)) {
            if (this.prodParam.hasYield) {
              let left2 = this.parseYield();
              if (afterLeftParse) {
                left2 = afterLeftParse.call(this, left2, startLoc);
              }
              return left2;
            }
          }
          let ownExpressionErrors;
          if (refExpressionErrors) {
            ownExpressionErrors = false;
          } else {
            refExpressionErrors = new ExpressionErrors();
            ownExpressionErrors = true;
          }
          const {
            type
          } = this.state;
          if (type === 10 || tokenIsIdentifier(type)) {
            this.state.potentialArrowAt = this.state.start;
          }
          let left = this.parseMaybeConditional(refExpressionErrors);
          if (afterLeftParse) {
            left = afterLeftParse.call(this, left, startLoc);
          }
          if (tokenIsAssignment(this.state.type)) {
            const node = this.startNodeAt(startLoc);
            const operator = this.state.value;
            node.operator = operator;
            if (this.match(29)) {
              this.toAssignable(left, true);
              node.left = left;
              const startIndex = startLoc.index;
              if (refExpressionErrors.doubleProtoLoc != null && refExpressionErrors.doubleProtoLoc.index >= startIndex) {
                refExpressionErrors.doubleProtoLoc = null;
              }
              if (refExpressionErrors.shorthandAssignLoc != null && refExpressionErrors.shorthandAssignLoc.index >= startIndex) {
                refExpressionErrors.shorthandAssignLoc = null;
              }
              if (refExpressionErrors.privateKeyLoc != null && refExpressionErrors.privateKeyLoc.index >= startIndex) {
                this.checkDestructuringPrivate(refExpressionErrors);
                refExpressionErrors.privateKeyLoc = null;
              }
            } else {
              node.left = left;
            }
            this.next();
            node.right = this.parseMaybeAssign();
            this.checkLVal(left, {
              in: this.finishNode(node, "AssignmentExpression")
            });
            return node;
          } else if (ownExpressionErrors) {
            this.checkExpressionErrors(refExpressionErrors, true);
          }
          return left;
        }
        parseMaybeConditional(refExpressionErrors) {
          const startLoc = this.state.startLoc;
          const potentialArrowAt = this.state.potentialArrowAt;
          const expr = this.parseExprOps(refExpressionErrors);
          if (this.shouldExitDescending(expr, potentialArrowAt)) {
            return expr;
          }
          return this.parseConditional(expr, startLoc, refExpressionErrors);
        }
        parseConditional(expr, startLoc, refExpressionErrors) {
          if (this.eat(17)) {
            const node = this.startNodeAt(startLoc);
            node.test = expr;
            node.consequent = this.parseMaybeAssignAllowIn();
            this.expect(14);
            node.alternate = this.parseMaybeAssign();
            return this.finishNode(node, "ConditionalExpression");
          }
          return expr;
        }
        parseMaybeUnaryOrPrivate(refExpressionErrors) {
          return this.match(138) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);
        }
        parseExprOps(refExpressionErrors) {
          const startLoc = this.state.startLoc;
          const potentialArrowAt = this.state.potentialArrowAt;
          const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);
          if (this.shouldExitDescending(expr, potentialArrowAt)) {
            return expr;
          }
          return this.parseExprOp(expr, startLoc, -1);
        }
        parseExprOp(left, leftStartLoc, minPrec) {
          if (this.isPrivateName(left)) {
            const value = this.getPrivateNameSV(left);
            if (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) {
              this.raise(Errors.PrivateInExpectedIn, left, {
                identifierName: value
              });
            }
            this.classScope.usePrivateName(value, left.loc.start);
          }
          const op = this.state.type;
          if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(58))) {
            let prec = tokenOperatorPrecedence(op);
            if (prec > minPrec) {
              if (op === 39) {
                this.expectPlugin("pipelineOperator");
                if (this.state.inFSharpPipelineDirectBody) {
                  return left;
                }
                this.checkPipelineAtInfixOperator(left, leftStartLoc);
              }
              const node = this.startNodeAt(leftStartLoc);
              node.left = left;
              node.operator = this.state.value;
              const logical = op === 41 || op === 42;
              const coalesce = op === 40;
              if (coalesce) {
                prec = tokenOperatorPrecedence(42);
              }
              this.next();
              if (op === 39 && this.hasPlugin(["pipelineOperator", {
                proposal: "minimal"
              }])) {
                if (this.state.type === 96 && this.prodParam.hasAwait) {
                  throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, this.state.startLoc);
                }
              }
              node.right = this.parseExprOpRightExpr(op, prec);
              const finishedNode = this.finishNode(node, logical || coalesce ? "LogicalExpression" : "BinaryExpression");
              const nextOp = this.state.type;
              if (coalesce && (nextOp === 41 || nextOp === 42) || logical && nextOp === 40) {
                throw this.raise(Errors.MixingCoalesceWithLogical, this.state.startLoc);
              }
              return this.parseExprOp(finishedNode, leftStartLoc, minPrec);
            }
          }
          return left;
        }
        parseExprOpRightExpr(op, prec) {
          const startLoc = this.state.startLoc;
          switch (op) {
            case 39:
              switch (this.getPluginOption("pipelineOperator", "proposal")) {
                case "hack":
                  return this.withTopicBindingContext(() => {
                    return this.parseHackPipeBody();
                  });
                case "smart":
                  return this.withTopicBindingContext(() => {
                    if (this.prodParam.hasYield && this.isContextual(108)) {
                      throw this.raise(Errors.PipeBodyIsTighter, this.state.startLoc);
                    }
                    return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startLoc);
                  });
                case "fsharp":
                  return this.withSoloAwaitPermittingContext(() => {
                    return this.parseFSharpPipelineBody(prec);
                  });
              }
            default:
              return this.parseExprOpBaseRightExpr(op, prec);
          }
        }
        parseExprOpBaseRightExpr(op, prec) {
          const startLoc = this.state.startLoc;
          return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);
        }
        parseHackPipeBody() {
          var _body$extra;
          const {
            startLoc
          } = this.state;
          const body = this.parseMaybeAssign();
          const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(body.type);
          if (requiredParentheses && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {
            this.raise(Errors.PipeUnparenthesizedBody, startLoc, {
              type: body.type
            });
          }
          if (!this.topicReferenceWasUsedInCurrentContext()) {
            this.raise(Errors.PipeTopicUnused, startLoc);
          }
          return body;
        }
        checkExponentialAfterUnary(node) {
          if (this.match(57)) {
            this.raise(Errors.UnexpectedTokenUnaryExponentiation, node.argument);
          }
        }
        parseMaybeUnary(refExpressionErrors, sawUnary) {
          const startLoc = this.state.startLoc;
          const isAwait = this.isContextual(96);
          if (isAwait && this.isAwaitAllowed()) {
            this.next();
            const expr2 = this.parseAwait(startLoc);
            if (!sawUnary)
              this.checkExponentialAfterUnary(expr2);
            return expr2;
          }
          const update = this.match(34);
          const node = this.startNode();
          if (tokenIsPrefix(this.state.type)) {
            node.operator = this.state.value;
            node.prefix = true;
            if (this.match(72)) {
              this.expectPlugin("throwExpressions");
            }
            const isDelete = this.match(89);
            this.next();
            node.argument = this.parseMaybeUnary(null, true);
            this.checkExpressionErrors(refExpressionErrors, true);
            if (this.state.strict && isDelete) {
              const arg = node.argument;
              if (arg.type === "Identifier") {
                this.raise(Errors.StrictDelete, node);
              } else if (this.hasPropertyAsPrivateName(arg)) {
                this.raise(Errors.DeletePrivateField, node);
              }
            }
            if (!update) {
              if (!sawUnary) {
                this.checkExponentialAfterUnary(node);
              }
              return this.finishNode(node, "UnaryExpression");
            }
          }
          const expr = this.parseUpdate(node, update, refExpressionErrors);
          if (isAwait) {
            const {
              type
            } = this.state;
            const startsExpr2 = this.hasPlugin("v8intrinsic") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54);
            if (startsExpr2 && !this.isAmbiguousAwait()) {
              this.raiseOverwrite(Errors.AwaitNotInAsyncContext, startLoc);
              return this.parseAwait(startLoc);
            }
          }
          return expr;
        }
        parseUpdate(node, update, refExpressionErrors) {
          if (update) {
            const updateExpressionNode = node;
            this.checkLVal(updateExpressionNode.argument, {
              in: this.finishNode(updateExpressionNode, "UpdateExpression")
            });
            return node;
          }
          const startLoc = this.state.startLoc;
          let expr = this.parseExprSubscripts(refExpressionErrors);
          if (this.checkExpressionErrors(refExpressionErrors, false))
            return expr;
          while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {
            const node2 = this.startNodeAt(startLoc);
            node2.operator = this.state.value;
            node2.prefix = false;
            node2.argument = expr;
            this.next();
            this.checkLVal(expr, {
              in: expr = this.finishNode(node2, "UpdateExpression")
            });
          }
          return expr;
        }
        parseExprSubscripts(refExpressionErrors) {
          const startLoc = this.state.startLoc;
          const potentialArrowAt = this.state.potentialArrowAt;
          const expr = this.parseExprAtom(refExpressionErrors);
          if (this.shouldExitDescending(expr, potentialArrowAt)) {
            return expr;
          }
          return this.parseSubscripts(expr, startLoc);
        }
        parseSubscripts(base, startLoc, noCalls) {
          const state = {
            optionalChainMember: false,
            maybeAsyncArrow: this.atPossibleAsyncArrow(base),
            stop: false
          };
          do {
            base = this.parseSubscript(base, startLoc, noCalls, state);
            state.maybeAsyncArrow = false;
          } while (!state.stop);
          return base;
        }
        parseSubscript(base, startLoc, noCalls, state) {
          const {
            type
          } = this.state;
          if (!noCalls && type === 15) {
            return this.parseBind(base, startLoc, noCalls, state);
          } else if (tokenIsTemplate(type)) {
            return this.parseTaggedTemplateExpression(base, startLoc, state);
          }
          let optional = false;
          if (type === 18) {
            if (noCalls) {
              this.raise(Errors.OptionalChainingNoNew, this.state.startLoc);
              if (this.lookaheadCharCode() === 40) {
                state.stop = true;
                return base;
              }
            }
            state.optionalChainMember = optional = true;
            this.next();
          }
          if (!noCalls && this.match(10)) {
            return this.parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional);
          } else {
            const computed = this.eat(0);
            if (computed || optional || this.eat(16)) {
              return this.parseMember(base, startLoc, state, computed, optional);
            } else {
              state.stop = true;
              return base;
            }
          }
        }
        parseMember(base, startLoc, state, computed, optional) {
          const node = this.startNodeAt(startLoc);
          node.object = base;
          node.computed = computed;
          if (computed) {
            node.property = this.parseExpression();
            this.expect(3);
          } else if (this.match(138)) {
            if (base.type === "Super") {
              this.raise(Errors.SuperPrivateField, startLoc);
            }
            this.classScope.usePrivateName(this.state.value, this.state.startLoc);
            node.property = this.parsePrivateName();
          } else {
            node.property = this.parseIdentifier(true);
          }
          if (state.optionalChainMember) {
            node.optional = optional;
            return this.finishNode(node, "OptionalMemberExpression");
          } else {
            return this.finishNode(node, "MemberExpression");
          }
        }
        parseBind(base, startLoc, noCalls, state) {
          const node = this.startNodeAt(startLoc);
          node.object = base;
          this.next();
          node.callee = this.parseNoCallExpr();
          state.stop = true;
          return this.parseSubscripts(this.finishNode(node, "BindExpression"), startLoc, noCalls);
        }
        parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional) {
          const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
          let refExpressionErrors = null;
          this.state.maybeInArrowParameters = true;
          this.next();
          const node = this.startNodeAt(startLoc);
          node.callee = base;
          const {
            maybeAsyncArrow,
            optionalChainMember
          } = state;
          if (maybeAsyncArrow) {
            this.expressionScope.enter(newAsyncArrowScope());
            refExpressionErrors = new ExpressionErrors();
          }
          if (optionalChainMember) {
            node.optional = optional;
          }
          if (optional) {
            node.arguments = this.parseCallExpressionArguments(11);
          } else {
            node.arguments = this.parseCallExpressionArguments(11, base.type === "Import", base.type !== "Super", node, refExpressionErrors);
          }
          let finishedNode = this.finishCallExpression(node, optionalChainMember);
          if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {
            state.stop = true;
            this.checkDestructuringPrivate(refExpressionErrors);
            this.expressionScope.validateAsPattern();
            this.expressionScope.exit();
            finishedNode = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startLoc), finishedNode);
          } else {
            if (maybeAsyncArrow) {
              this.checkExpressionErrors(refExpressionErrors, true);
              this.expressionScope.exit();
            }
            this.toReferencedArguments(finishedNode);
          }
          this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
          return finishedNode;
        }
        toReferencedArguments(node, isParenthesizedExpr) {
          this.toReferencedListDeep(node.arguments, isParenthesizedExpr);
        }
        parseTaggedTemplateExpression(base, startLoc, state) {
          const node = this.startNodeAt(startLoc);
          node.tag = base;
          node.quasi = this.parseTemplate(true);
          if (state.optionalChainMember) {
            this.raise(Errors.OptionalChainingNoTemplate, startLoc);
          }
          return this.finishNode(node, "TaggedTemplateExpression");
        }
        atPossibleAsyncArrow(base) {
          return base.type === "Identifier" && base.name === "async" && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;
        }
        expectImportAttributesPlugin() {
          if (!this.hasPlugin("importAssertions")) {
            this.expectPlugin("importAttributes");
          }
        }
        finishCallExpression(node, optional) {
          if (node.callee.type === "Import") {
            if (node.arguments.length === 2) {
              {
                if (!this.hasPlugin("moduleAttributes")) {
                  this.expectImportAttributesPlugin();
                }
              }
            }
            if (node.arguments.length === 0 || node.arguments.length > 2) {
              this.raise(Errors.ImportCallArity, node, {
                maxArgumentCount: this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") ? 2 : 1
              });
            } else {
              for (const arg of node.arguments) {
                if (arg.type === "SpreadElement") {
                  this.raise(Errors.ImportCallSpreadArgument, arg);
                }
              }
            }
          }
          return this.finishNode(node, optional ? "OptionalCallExpression" : "CallExpression");
        }
        parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {
          const elts = [];
          let first = true;
          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
          this.state.inFSharpPipelineDirectBody = false;
          while (!this.eat(close)) {
            if (first) {
              first = false;
            } else {
              this.expect(12);
              if (this.match(close)) {
                if (dynamicImport && !this.hasPlugin("importAttributes") && !this.hasPlugin("importAssertions") && !this.hasPlugin("moduleAttributes")) {
                  this.raise(Errors.ImportCallArgumentTrailingComma, this.state.lastTokStartLoc);
                }
                if (nodeForExtra) {
                  this.addTrailingCommaExtraToNode(nodeForExtra);
                }
                this.next();
                break;
              }
            }
            elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));
          }
          this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
          return elts;
        }
        shouldParseAsyncArrow() {
          return this.match(19) && !this.canInsertSemicolon();
        }
        parseAsyncArrowFromCallExpression(node, call) {
          var _call$extra;
          this.resetPreviousNodeTrailingComments(call);
          this.expect(19);
          this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingCommaLoc);
          if (call.innerComments) {
            setInnerComments(node, call.innerComments);
          }
          if (call.callee.trailingComments) {
            setInnerComments(node, call.callee.trailingComments);
          }
          return node;
        }
        parseNoCallExpr() {
          const startLoc = this.state.startLoc;
          return this.parseSubscripts(this.parseExprAtom(), startLoc, true);
        }
        parseExprAtom(refExpressionErrors) {
          let node;
          let decorators = null;
          const {
            type
          } = this.state;
          switch (type) {
            case 79:
              return this.parseSuper();
            case 83:
              node = this.startNode();
              this.next();
              if (this.match(16)) {
                return this.parseImportMetaProperty(node);
              }
              if (this.match(10)) {
                if (this.options.createImportExpressions) {
                  return this.parseImportCall(node);
                } else {
                  return this.finishNode(node, "Import");
                }
              } else {
                this.raise(Errors.UnsupportedImport, this.state.lastTokStartLoc);
                return this.finishNode(node, "Import");
              }
            case 78:
              node = this.startNode();
              this.next();
              return this.finishNode(node, "ThisExpression");
            case 90: {
              return this.parseDo(this.startNode(), false);
            }
            case 56:
            case 31: {
              this.readRegexp();
              return this.parseRegExpLiteral(this.state.value);
            }
            case 134:
              return this.parseNumericLiteral(this.state.value);
            case 135:
              return this.parseBigIntLiteral(this.state.value);
            case 136:
              return this.parseDecimalLiteral(this.state.value);
            case 133:
              return this.parseStringLiteral(this.state.value);
            case 84:
              return this.parseNullLiteral();
            case 85:
              return this.parseBooleanLiteral(true);
            case 86:
              return this.parseBooleanLiteral(false);
            case 10: {
              const canBeArrow = this.state.potentialArrowAt === this.state.start;
              return this.parseParenAndDistinguishExpression(canBeArrow);
            }
            case 2:
            case 1: {
              return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);
            }
            case 0: {
              return this.parseArrayLike(3, true, false, refExpressionErrors);
            }
            case 6:
            case 7: {
              return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);
            }
            case 5: {
              return this.parseObjectLike(8, false, false, refExpressionErrors);
            }
            case 68:
              return this.parseFunctionOrFunctionSent();
            case 26:
              decorators = this.parseDecorators();
            case 80:
              return this.parseClass(this.maybeTakeDecorators(decorators, this.startNode()), false);
            case 77:
              return this.parseNewOrNewTarget();
            case 25:
            case 24:
              return this.parseTemplate(false);
            case 15: {
              node = this.startNode();
              this.next();
              node.object = null;
              const callee = node.callee = this.parseNoCallExpr();
              if (callee.type === "MemberExpression") {
                return this.finishNode(node, "BindExpression");
              } else {
                throw this.raise(Errors.UnsupportedBind, callee);
              }
            }
            case 138: {
              this.raise(Errors.PrivateInExpectedIn, this.state.startLoc, {
                identifierName: this.state.value
              });
              return this.parsePrivateName();
            }
            case 33: {
              return this.parseTopicReferenceThenEqualsSign(54, "%");
            }
            case 32: {
              return this.parseTopicReferenceThenEqualsSign(44, "^");
            }
            case 37:
            case 38: {
              return this.parseTopicReference("hack");
            }
            case 44:
            case 54:
            case 27: {
              const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
              if (pipeProposal) {
                return this.parseTopicReference(pipeProposal);
              }
              this.unexpected();
              break;
            }
            case 47: {
              const lookaheadCh = this.input.codePointAt(this.nextTokenStart());
              if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {
                this.expectOnePlugin(["jsx", "flow", "typescript"]);
              } else {
                this.unexpected();
              }
              break;
            }
            default:
              if (tokenIsIdentifier(type)) {
                if (this.isContextual(127) && this.lookaheadInLineCharCode() === 123) {
                  return this.parseModuleExpression();
                }
                const canBeArrow = this.state.potentialArrowAt === this.state.start;
                const containsEsc = this.state.containsEsc;
                const id = this.parseIdentifier();
                if (!containsEsc && id.name === "async" && !this.canInsertSemicolon()) {
                  const {
                    type: type2
                  } = this.state;
                  if (type2 === 68) {
                    this.resetPreviousNodeTrailingComments(id);
                    this.next();
                    return this.parseAsyncFunctionExpression(this.startNodeAtNode(id));
                  } else if (tokenIsIdentifier(type2)) {
                    if (this.lookaheadCharCode() === 61) {
                      return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));
                    } else {
                      return id;
                    }
                  } else if (type2 === 90) {
                    this.resetPreviousNodeTrailingComments(id);
                    return this.parseDo(this.startNodeAtNode(id), true);
                  }
                }
                if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {
                  this.next();
                  return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);
                }
                return id;
              } else {
                this.unexpected();
              }
          }
        }
        parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {
          const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
          if (pipeProposal) {
            this.state.type = topicTokenType;
            this.state.value = topicTokenValue;
            this.state.pos--;
            this.state.end--;
            this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);
            return this.parseTopicReference(pipeProposal);
          } else {
            this.unexpected();
          }
        }
        parseTopicReference(pipeProposal) {
          const node = this.startNode();
          const startLoc = this.state.startLoc;
          const tokenType = this.state.type;
          this.next();
          return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);
        }
        finishTopicReference(node, startLoc, pipeProposal, tokenType) {
          if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {
            const nodeType = pipeProposal === "smart" ? "PipelinePrimaryTopicReference" : "TopicReference";
            if (!this.topicReferenceIsAllowedInCurrentContext()) {
              this.raise(pipeProposal === "smart" ? Errors.PrimaryTopicNotAllowed : Errors.PipeTopicUnbound, startLoc);
            }
            this.registerTopicReference();
            return this.finishNode(node, nodeType);
          } else {
            throw this.raise(Errors.PipeTopicUnconfiguredToken, startLoc, {
              token: tokenLabelName(tokenType)
            });
          }
        }
        testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {
          switch (pipeProposal) {
            case "hack": {
              return this.hasPlugin(["pipelineOperator", {
                topicToken: tokenLabelName(tokenType)
              }]);
            }
            case "smart":
              return tokenType === 27;
            default:
              throw this.raise(Errors.PipeTopicRequiresHackPipes, startLoc);
          }
        }
        parseAsyncArrowUnaryFunction(node) {
          this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));
          const params = [this.parseIdentifier()];
          this.prodParam.exit();
          if (this.hasPrecedingLineBreak()) {
            this.raise(Errors.LineTerminatorBeforeArrow, this.state.curPosition());
          }
          this.expect(19);
          return this.parseArrowExpression(node, params, true);
        }
        parseDo(node, isAsync) {
          this.expectPlugin("doExpressions");
          if (isAsync) {
            this.expectPlugin("asyncDoExpressions");
          }
          node.async = isAsync;
          this.next();
          const oldLabels = this.state.labels;
          this.state.labels = [];
          if (isAsync) {
            this.prodParam.enter(2);
            node.body = this.parseBlock();
            this.prodParam.exit();
          } else {
            node.body = this.parseBlock();
          }
          this.state.labels = oldLabels;
          return this.finishNode(node, "DoExpression");
        }
        parseSuper() {
          const node = this.startNode();
          this.next();
          if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {
            this.raise(Errors.SuperNotAllowed, node);
          } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {
            this.raise(Errors.UnexpectedSuper, node);
          }
          if (!this.match(10) && !this.match(0) && !this.match(16)) {
            this.raise(Errors.UnsupportedSuper, node);
          }
          return this.finishNode(node, "Super");
        }
        parsePrivateName() {
          const node = this.startNode();
          const id = this.startNodeAt(createPositionWithColumnOffset(this.state.startLoc, 1));
          const name = this.state.value;
          this.next();
          node.id = this.createIdentifier(id, name);
          return this.finishNode(node, "PrivateName");
        }
        parseFunctionOrFunctionSent() {
          const node = this.startNode();
          this.next();
          if (this.prodParam.hasYield && this.match(16)) {
            const meta = this.createIdentifier(this.startNodeAtNode(node), "function");
            this.next();
            if (this.match(103)) {
              this.expectPlugin("functionSent");
            } else if (!this.hasPlugin("functionSent")) {
              this.unexpected();
            }
            return this.parseMetaProperty(node, meta, "sent");
          }
          return this.parseFunction(node);
        }
        parseMetaProperty(node, meta, propertyName) {
          node.meta = meta;
          const containsEsc = this.state.containsEsc;
          node.property = this.parseIdentifier(true);
          if (node.property.name !== propertyName || containsEsc) {
            this.raise(Errors.UnsupportedMetaProperty, node.property, {
              target: meta.name,
              onlyValidPropertyName: propertyName
            });
          }
          return this.finishNode(node, "MetaProperty");
        }
        parseImportMetaProperty(node) {
          const id = this.createIdentifier(this.startNodeAtNode(node), "import");
          this.next();
          if (this.isContextual(101)) {
            if (!this.inModule) {
              this.raise(Errors.ImportMetaOutsideModule, id);
            }
            this.sawUnambiguousESM = true;
          } else if (this.isContextual(105) || this.isContextual(97)) {
            const isSource = this.isContextual(105);
            if (!isSource)
              this.unexpected();
            this.expectPlugin(isSource ? "sourcePhaseImports" : "deferredImportEvaluation");
            if (!this.options.createImportExpressions) {
              throw this.raise(Errors.DynamicImportPhaseRequiresImportExpressions, this.state.startLoc, {
                phase: this.state.value
              });
            }
            this.next();
            node.phase = isSource ? "source" : "defer";
            return this.parseImportCall(node);
          }
          return this.parseMetaProperty(node, id, "meta");
        }
        parseLiteralAtNode(value, type, node) {
          this.addExtra(node, "rawValue", value);
          this.addExtra(node, "raw", this.input.slice(node.start, this.state.end));
          node.value = value;
          this.next();
          return this.finishNode(node, type);
        }
        parseLiteral(value, type) {
          const node = this.startNode();
          return this.parseLiteralAtNode(value, type, node);
        }
        parseStringLiteral(value) {
          return this.parseLiteral(value, "StringLiteral");
        }
        parseNumericLiteral(value) {
          return this.parseLiteral(value, "NumericLiteral");
        }
        parseBigIntLiteral(value) {
          return this.parseLiteral(value, "BigIntLiteral");
        }
        parseDecimalLiteral(value) {
          return this.parseLiteral(value, "DecimalLiteral");
        }
        parseRegExpLiteral(value) {
          const node = this.parseLiteral(value.value, "RegExpLiteral");
          node.pattern = value.pattern;
          node.flags = value.flags;
          return node;
        }
        parseBooleanLiteral(value) {
          const node = this.startNode();
          node.value = value;
          this.next();
          return this.finishNode(node, "BooleanLiteral");
        }
        parseNullLiteral() {
          const node = this.startNode();
          this.next();
          return this.finishNode(node, "NullLiteral");
        }
        parseParenAndDistinguishExpression(canBeArrow) {
          const startLoc = this.state.startLoc;
          let val;
          this.next();
          this.expressionScope.enter(newArrowHeadScope());
          const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
          this.state.maybeInArrowParameters = true;
          this.state.inFSharpPipelineDirectBody = false;
          const innerStartLoc = this.state.startLoc;
          const exprList = [];
          const refExpressionErrors = new ExpressionErrors();
          let first = true;
          let spreadStartLoc;
          let optionalCommaStartLoc;
          while (!this.match(11)) {
            if (first) {
              first = false;
            } else {
              this.expect(12, refExpressionErrors.optionalParametersLoc === null ? null : refExpressionErrors.optionalParametersLoc);
              if (this.match(11)) {
                optionalCommaStartLoc = this.state.startLoc;
                break;
              }
            }
            if (this.match(21)) {
              const spreadNodeStartLoc = this.state.startLoc;
              spreadStartLoc = this.state.startLoc;
              exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc));
              if (!this.checkCommaAfterRest(41)) {
                break;
              }
            } else {
              exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));
            }
          }
          const innerEndLoc = this.state.lastTokEndLoc;
          this.expect(11);
          this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
          this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
          let arrowNode = this.startNodeAt(startLoc);
          if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {
            this.checkDestructuringPrivate(refExpressionErrors);
            this.expressionScope.validateAsPattern();
            this.expressionScope.exit();
            this.parseArrowExpression(arrowNode, exprList, false);
            return arrowNode;
          }
          this.expressionScope.exit();
          if (!exprList.length) {
            this.unexpected(this.state.lastTokStartLoc);
          }
          if (optionalCommaStartLoc)
            this.unexpected(optionalCommaStartLoc);
          if (spreadStartLoc)
            this.unexpected(spreadStartLoc);
          this.checkExpressionErrors(refExpressionErrors, true);
          this.toReferencedListDeep(exprList, true);
          if (exprList.length > 1) {
            val = this.startNodeAt(innerStartLoc);
            val.expressions = exprList;
            this.finishNode(val, "SequenceExpression");
            this.resetEndLocation(val, innerEndLoc);
          } else {
            val = exprList[0];
          }
          return this.wrapParenthesis(startLoc, val);
        }
        wrapParenthesis(startLoc, expression) {
          if (!this.options.createParenthesizedExpressions) {
            this.addExtra(expression, "parenthesized", true);
            this.addExtra(expression, "parenStart", startLoc.index);
            this.takeSurroundingComments(expression, startLoc.index, this.state.lastTokEndLoc.index);
            return expression;
          }
          const parenExpression = this.startNodeAt(startLoc);
          parenExpression.expression = expression;
          return this.finishNode(parenExpression, "ParenthesizedExpression");
        }
        shouldParseArrow(params) {
          return !this.canInsertSemicolon();
        }
        parseArrow(node) {
          if (this.eat(19)) {
            return node;
          }
        }
        parseParenItem(node, startLoc) {
          return node;
        }
        parseNewOrNewTarget() {
          const node = this.startNode();
          this.next();
          if (this.match(16)) {
            const meta = this.createIdentifier(this.startNodeAtNode(node), "new");
            this.next();
            const metaProp = this.parseMetaProperty(node, meta, "target");
            if (!this.scope.inNonArrowFunction && !this.scope.inClass && !this.options.allowNewTargetOutsideFunction) {
              this.raise(Errors.UnexpectedNewTarget, metaProp);
            }
            return metaProp;
          }
          return this.parseNew(node);
        }
        parseNew(node) {
          this.parseNewCallee(node);
          if (this.eat(10)) {
            const args = this.parseExprList(11);
            this.toReferencedList(args);
            node.arguments = args;
          } else {
            node.arguments = [];
          }
          return this.finishNode(node, "NewExpression");
        }
        parseNewCallee(node) {
          const isImport = this.match(83);
          const callee = this.parseNoCallExpr();
          node.callee = callee;
          if (isImport && (callee.type === "Import" || callee.type === "ImportExpression")) {
            this.raise(Errors.ImportCallNotNewExpression, callee);
          }
        }
        parseTemplateElement(isTagged) {
          const {
            start,
            startLoc,
            end,
            value
          } = this.state;
          const elemStart = start + 1;
          const elem = this.startNodeAt(createPositionWithColumnOffset(startLoc, 1));
          if (value === null) {
            if (!isTagged) {
              this.raise(Errors.InvalidEscapeSequenceTemplate, createPositionWithColumnOffset(this.state.firstInvalidTemplateEscapePos, 1));
            }
          }
          const isTail = this.match(24);
          const endOffset = isTail ? -1 : -2;
          const elemEnd = end + endOffset;
          elem.value = {
            raw: this.input.slice(elemStart, elemEnd).replace(/\r\n?/g, "\n"),
            cooked: value === null ? null : value.slice(1, endOffset)
          };
          elem.tail = isTail;
          this.next();
          const finishedNode = this.finishNode(elem, "TemplateElement");
          this.resetEndLocation(finishedNode, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));
          return finishedNode;
        }
        parseTemplate(isTagged) {
          const node = this.startNode();
          node.expressions = [];
          let curElt = this.parseTemplateElement(isTagged);
          node.quasis = [curElt];
          while (!curElt.tail) {
            node.expressions.push(this.parseTemplateSubstitution());
            this.readTemplateContinuation();
            node.quasis.push(curElt = this.parseTemplateElement(isTagged));
          }
          return this.finishNode(node, "TemplateLiteral");
        }
        parseTemplateSubstitution() {
          return this.parseExpression();
        }
        parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {
          if (isRecord) {
            this.expectPlugin("recordAndTuple");
          }
          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
          this.state.inFSharpPipelineDirectBody = false;
          const propHash = /* @__PURE__ */ Object.create(null);
          let first = true;
          const node = this.startNode();
          node.properties = [];
          this.next();
          while (!this.match(close)) {
            if (first) {
              first = false;
            } else {
              this.expect(12);
              if (this.match(close)) {
                this.addTrailingCommaExtraToNode(node);
                break;
              }
            }
            let prop;
            if (isPattern) {
              prop = this.parseBindingProperty();
            } else {
              prop = this.parsePropertyDefinition(refExpressionErrors);
              this.checkProto(prop, isRecord, propHash, refExpressionErrors);
            }
            if (isRecord && !this.isObjectProperty(prop) && prop.type !== "SpreadElement") {
              this.raise(Errors.InvalidRecordProperty, prop);
            }
            if (prop.shorthand) {
              this.addExtra(prop, "shorthand", true);
            }
            node.properties.push(prop);
          }
          this.next();
          this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
          let type = "ObjectExpression";
          if (isPattern) {
            type = "ObjectPattern";
          } else if (isRecord) {
            type = "RecordExpression";
          }
          return this.finishNode(node, type);
        }
        addTrailingCommaExtraToNode(node) {
          this.addExtra(node, "trailingComma", this.state.lastTokStartLoc.index);
          this.addExtra(node, "trailingCommaLoc", this.state.lastTokStartLoc, false);
        }
        maybeAsyncOrAccessorProp(prop) {
          return !prop.computed && prop.key.type === "Identifier" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));
        }
        parsePropertyDefinition(refExpressionErrors) {
          let decorators = [];
          if (this.match(26)) {
            if (this.hasPlugin("decorators")) {
              this.raise(Errors.UnsupportedPropertyDecorator, this.state.startLoc);
            }
            while (this.match(26)) {
              decorators.push(this.parseDecorator());
            }
          }
          const prop = this.startNode();
          let isAsync = false;
          let isAccessor = false;
          let startLoc;
          if (this.match(21)) {
            if (decorators.length)
              this.unexpected();
            return this.parseSpread();
          }
          if (decorators.length) {
            prop.decorators = decorators;
            decorators = [];
          }
          prop.method = false;
          if (refExpressionErrors) {
            startLoc = this.state.startLoc;
          }
          let isGenerator = this.eat(55);
          this.parsePropertyNamePrefixOperator(prop);
          const containsEsc = this.state.containsEsc;
          const key = this.parsePropertyName(prop, refExpressionErrors);
          if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {
            const keyName = key.name;
            if (keyName === "async" && !this.hasPrecedingLineBreak()) {
              isAsync = true;
              this.resetPreviousNodeTrailingComments(key);
              isGenerator = this.eat(55);
              this.parsePropertyName(prop);
            }
            if (keyName === "get" || keyName === "set") {
              isAccessor = true;
              this.resetPreviousNodeTrailingComments(key);
              prop.kind = keyName;
              if (this.match(55)) {
                isGenerator = true;
                this.raise(Errors.AccessorIsGenerator, this.state.curPosition(), {
                  kind: keyName
                });
                this.next();
              }
              this.parsePropertyName(prop);
            }
          }
          return this.parseObjPropValue(prop, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);
        }
        getGetterSetterExpectedParamCount(method) {
          return method.kind === "get" ? 0 : 1;
        }
        getObjectOrClassMethodParams(method) {
          return method.params;
        }
        checkGetterSetterParams(method) {
          var _params;
          const paramCount = this.getGetterSetterExpectedParamCount(method);
          const params = this.getObjectOrClassMethodParams(method);
          if (params.length !== paramCount) {
            this.raise(method.kind === "get" ? Errors.BadGetterArity : Errors.BadSetterArity, method);
          }
          if (method.kind === "set" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === "RestElement") {
            this.raise(Errors.BadSetterRestParameter, method);
          }
        }
        parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
          if (isAccessor) {
            const finishedProp = this.parseMethod(prop, isGenerator, false, false, false, "ObjectMethod");
            this.checkGetterSetterParams(finishedProp);
            return finishedProp;
          }
          if (isAsync || isGenerator || this.match(10)) {
            if (isPattern)
              this.unexpected();
            prop.kind = "method";
            prop.method = true;
            return this.parseMethod(prop, isGenerator, isAsync, false, false, "ObjectMethod");
          }
        }
        parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
          prop.shorthand = false;
          if (this.eat(14)) {
            prop.value = isPattern ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);
            return this.finishNode(prop, "ObjectProperty");
          }
          if (!prop.computed && prop.key.type === "Identifier") {
            this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);
            if (isPattern) {
              prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
            } else if (this.match(29)) {
              const shorthandAssignLoc = this.state.startLoc;
              if (refExpressionErrors != null) {
                if (refExpressionErrors.shorthandAssignLoc === null) {
                  refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;
                }
              } else {
                this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);
              }
              prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
            } else {
              prop.value = cloneIdentifier(prop.key);
            }
            prop.shorthand = true;
            return this.finishNode(prop, "ObjectProperty");
          }
        }
        parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
          const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
          if (!node)
            this.unexpected();
          return node;
        }
        parsePropertyName(prop, refExpressionErrors) {
          if (this.eat(0)) {
            prop.computed = true;
            prop.key = this.parseMaybeAssignAllowIn();
            this.expect(3);
          } else {
            const {
              type,
              value
            } = this.state;
            let key;
            if (tokenIsKeywordOrIdentifier(type)) {
              key = this.parseIdentifier(true);
            } else {
              switch (type) {
                case 134:
                  key = this.parseNumericLiteral(value);
                  break;
                case 133:
                  key = this.parseStringLiteral(value);
                  break;
                case 135:
                  key = this.parseBigIntLiteral(value);
                  break;
                case 136:
                  key = this.parseDecimalLiteral(value);
                  break;
                case 138: {
                  const privateKeyLoc = this.state.startLoc;
                  if (refExpressionErrors != null) {
                    if (refExpressionErrors.privateKeyLoc === null) {
                      refExpressionErrors.privateKeyLoc = privateKeyLoc;
                    }
                  } else {
                    this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);
                  }
                  key = this.parsePrivateName();
                  break;
                }
                default:
                  this.unexpected();
              }
            }
            prop.key = key;
            if (type !== 138) {
              prop.computed = false;
            }
          }
          return prop.key;
        }
        initFunction(node, isAsync) {
          node.id = null;
          node.generator = false;
          node.async = isAsync;
        }
        parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
          this.initFunction(node, isAsync);
          node.generator = isGenerator;
          this.scope.enter(2 | 16 | (inClassScope ? 64 : 0) | (allowDirectSuper ? 32 : 0));
          this.prodParam.enter(functionFlags(isAsync, node.generator));
          this.parseFunctionParams(node, isConstructor);
          const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);
          this.prodParam.exit();
          this.scope.exit();
          return finishedNode;
        }
        parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
          if (isTuple) {
            this.expectPlugin("recordAndTuple");
          }
          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
          this.state.inFSharpPipelineDirectBody = false;
          const node = this.startNode();
          this.next();
          node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);
          this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
          return this.finishNode(node, isTuple ? "TupleExpression" : "ArrayExpression");
        }
        parseArrowExpression(node, params, isAsync, trailingCommaLoc) {
          this.scope.enter(2 | 4);
          let flags = functionFlags(isAsync, false);
          if (!this.match(5) && this.prodParam.hasIn) {
            flags |= 8;
          }
          this.prodParam.enter(flags);
          this.initFunction(node, isAsync);
          const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
          if (params) {
            this.state.maybeInArrowParameters = true;
            this.setArrowFunctionParameters(node, params, trailingCommaLoc);
          }
          this.state.maybeInArrowParameters = false;
          this.parseFunctionBody(node, true);
          this.prodParam.exit();
          this.scope.exit();
          this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
          return this.finishNode(node, "ArrowFunctionExpression");
        }
        setArrowFunctionParameters(node, params, trailingCommaLoc) {
          this.toAssignableList(params, trailingCommaLoc, false);
          node.params = params;
        }
        parseFunctionBodyAndFinish(node, type, isMethod = false) {
          this.parseFunctionBody(node, false, isMethod);
          return this.finishNode(node, type);
        }
        parseFunctionBody(node, allowExpression, isMethod = false) {
          const isExpression = allowExpression && !this.match(5);
          this.expressionScope.enter(newExpressionScope());
          if (isExpression) {
            node.body = this.parseMaybeAssign();
            this.checkParams(node, false, allowExpression, false);
          } else {
            const oldStrict = this.state.strict;
            const oldLabels = this.state.labels;
            this.state.labels = [];
            this.prodParam.enter(this.prodParam.currentFlags() | 4);
            node.body = this.parseBlock(true, false, (hasStrictModeDirective) => {
              const nonSimple = !this.isSimpleParamList(node.params);
              if (hasStrictModeDirective && nonSimple) {
                this.raise(Errors.IllegalLanguageModeDirective, (node.kind === "method" || node.kind === "constructor") && !!node.key ? node.key.loc.end : node);
              }
              const strictModeChanged = !oldStrict && this.state.strict;
              this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);
              if (this.state.strict && node.id) {
                this.checkIdentifier(node.id, 65, strictModeChanged);
              }
            });
            this.prodParam.exit();
            this.state.labels = oldLabels;
          }
          this.expressionScope.exit();
        }
        isSimpleParameter(node) {
          return node.type === "Identifier";
        }
        isSimpleParamList(params) {
          for (let i = 0, len = params.length; i < len; i++) {
            if (!this.isSimpleParameter(params[i]))
              return false;
          }
          return true;
        }
        checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
          const checkClashes = !allowDuplicates && /* @__PURE__ */ new Set();
          const formalParameters = {
            type: "FormalParameters"
          };
          for (const param of node.params) {
            this.checkLVal(param, {
              in: formalParameters,
              binding: 5,
              checkClashes,
              strictModeChanged
            });
          }
        }
        parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {
          const elts = [];
          let first = true;
          while (!this.eat(close)) {
            if (first) {
              first = false;
            } else {
              this.expect(12);
              if (this.match(close)) {
                if (nodeForExtra) {
                  this.addTrailingCommaExtraToNode(nodeForExtra);
                }
                this.next();
                break;
              }
            }
            elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));
          }
          return elts;
        }
        parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {
          let elt;
          if (this.match(12)) {
            if (!allowEmpty) {
              this.raise(Errors.UnexpectedToken, this.state.curPosition(), {
                unexpected: ","
              });
            }
            elt = null;
          } else if (this.match(21)) {
            const spreadNodeStartLoc = this.state.startLoc;
            elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartLoc);
          } else if (this.match(17)) {
            this.expectPlugin("partialApplication");
            if (!allowPlaceholder) {
              this.raise(Errors.UnexpectedArgumentPlaceholder, this.state.startLoc);
            }
            const node = this.startNode();
            this.next();
            elt = this.finishNode(node, "ArgumentPlaceholder");
          } else {
            elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);
          }
          return elt;
        }
        parseIdentifier(liberal) {
          const node = this.startNode();
          const name = this.parseIdentifierName(liberal);
          return this.createIdentifier(node, name);
        }
        createIdentifier(node, name) {
          node.name = name;
          node.loc.identifierName = name;
          return this.finishNode(node, "Identifier");
        }
        parseIdentifierName(liberal) {
          let name;
          const {
            startLoc,
            type
          } = this.state;
          if (tokenIsKeywordOrIdentifier(type)) {
            name = this.state.value;
          } else {
            this.unexpected();
          }
          const tokenIsKeyword2 = tokenKeywordOrIdentifierIsKeyword(type);
          if (liberal) {
            if (tokenIsKeyword2) {
              this.replaceToken(132);
            }
          } else {
            this.checkReservedWord(name, startLoc, tokenIsKeyword2, false);
          }
          this.next();
          return name;
        }
        checkReservedWord(word, startLoc, checkKeywords, isBinding) {
          if (word.length > 10) {
            return;
          }
          if (!canBeReservedWord(word)) {
            return;
          }
          if (checkKeywords && isKeyword(word)) {
            this.raise(Errors.UnexpectedKeyword, startLoc, {
              keyword: word
            });
            return;
          }
          const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;
          if (reservedTest(word, this.inModule)) {
            this.raise(Errors.UnexpectedReservedWord, startLoc, {
              reservedWord: word
            });
            return;
          } else if (word === "yield") {
            if (this.prodParam.hasYield) {
              this.raise(Errors.YieldBindingIdentifier, startLoc);
              return;
            }
          } else if (word === "await") {
            if (this.prodParam.hasAwait) {
              this.raise(Errors.AwaitBindingIdentifier, startLoc);
              return;
            }
            if (this.scope.inStaticBlock) {
              this.raise(Errors.AwaitBindingIdentifierInStaticBlock, startLoc);
              return;
            }
            this.expressionScope.recordAsyncArrowParametersError(startLoc);
          } else if (word === "arguments") {
            if (this.scope.inClassAndNotInNonArrowFunction) {
              this.raise(Errors.ArgumentsInClass, startLoc);
              return;
            }
          }
        }
        isAwaitAllowed() {
          if (this.prodParam.hasAwait)
            return true;
          if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {
            return true;
          }
          return false;
        }
        parseAwait(startLoc) {
          const node = this.startNodeAt(startLoc);
          this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, node);
          if (this.eat(55)) {
            this.raise(Errors.ObsoleteAwaitStar, node);
          }
          if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {
            if (this.isAmbiguousAwait()) {
              this.ambiguousScriptDifferentAst = true;
            } else {
              this.sawUnambiguousESM = true;
            }
          }
          if (!this.state.soloAwait) {
            node.argument = this.parseMaybeUnary(null, true);
          }
          return this.finishNode(node, "AwaitExpression");
        }
        isAmbiguousAwait() {
          if (this.hasPrecedingLineBreak())
            return true;
          const {
            type
          } = this.state;
          return type === 53 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 102 && !this.state.containsEsc || type === 137 || type === 56 || this.hasPlugin("v8intrinsic") && type === 54;
        }
        parseYield() {
          const node = this.startNode();
          this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, node);
          this.next();
          let delegating = false;
          let argument = null;
          if (!this.hasPrecedingLineBreak()) {
            delegating = this.eat(55);
            switch (this.state.type) {
              case 13:
              case 139:
              case 8:
              case 11:
              case 3:
              case 9:
              case 14:
              case 12:
                if (!delegating)
                  break;
              default:
                argument = this.parseMaybeAssign();
            }
          }
          node.delegate = delegating;
          node.argument = argument;
          return this.finishNode(node, "YieldExpression");
        }
        parseImportCall(node) {
          this.next();
          node.source = this.parseMaybeAssignAllowIn();
          if (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) {
            node.options = null;
          }
          if (this.eat(12)) {
            this.expectImportAttributesPlugin();
            if (!this.match(11)) {
              node.options = this.parseMaybeAssignAllowIn();
              this.eat(12);
            }
          }
          this.expect(11);
          return this.finishNode(node, "ImportExpression");
        }
        checkPipelineAtInfixOperator(left, leftStartLoc) {
          if (this.hasPlugin(["pipelineOperator", {
            proposal: "smart"
          }])) {
            if (left.type === "SequenceExpression") {
              this.raise(Errors.PipelineHeadSequenceExpression, leftStartLoc);
            }
          }
        }
        parseSmartPipelineBodyInStyle(childExpr, startLoc) {
          if (this.isSimpleReference(childExpr)) {
            const bodyNode = this.startNodeAt(startLoc);
            bodyNode.callee = childExpr;
            return this.finishNode(bodyNode, "PipelineBareFunction");
          } else {
            const bodyNode = this.startNodeAt(startLoc);
            this.checkSmartPipeTopicBodyEarlyErrors(startLoc);
            bodyNode.expression = childExpr;
            return this.finishNode(bodyNode, "PipelineTopicExpression");
          }
        }
        isSimpleReference(expression) {
          switch (expression.type) {
            case "MemberExpression":
              return !expression.computed && this.isSimpleReference(expression.object);
            case "Identifier":
              return true;
            default:
              return false;
          }
        }
        checkSmartPipeTopicBodyEarlyErrors(startLoc) {
          if (this.match(19)) {
            throw this.raise(Errors.PipelineBodyNoArrow, this.state.startLoc);
          }
          if (!this.topicReferenceWasUsedInCurrentContext()) {
            this.raise(Errors.PipelineTopicUnused, startLoc);
          }
        }
        withTopicBindingContext(callback) {
          const outerContextTopicState = this.state.topicContext;
          this.state.topicContext = {
            maxNumOfResolvableTopics: 1,
            maxTopicIndex: null
          };
          try {
            return callback();
          } finally {
            this.state.topicContext = outerContextTopicState;
          }
        }
        withSmartMixTopicForbiddingContext(callback) {
          if (this.hasPlugin(["pipelineOperator", {
            proposal: "smart"
          }])) {
            const outerContextTopicState = this.state.topicContext;
            this.state.topicContext = {
              maxNumOfResolvableTopics: 0,
              maxTopicIndex: null
            };
            try {
              return callback();
            } finally {
              this.state.topicContext = outerContextTopicState;
            }
          } else {
            return callback();
          }
        }
        withSoloAwaitPermittingContext(callback) {
          const outerContextSoloAwaitState = this.state.soloAwait;
          this.state.soloAwait = true;
          try {
            return callback();
          } finally {
            this.state.soloAwait = outerContextSoloAwaitState;
          }
        }
        allowInAnd(callback) {
          const flags = this.prodParam.currentFlags();
          const prodParamToSet = 8 & ~flags;
          if (prodParamToSet) {
            this.prodParam.enter(flags | 8);
            try {
              return callback();
            } finally {
              this.prodParam.exit();
            }
          }
          return callback();
        }
        disallowInAnd(callback) {
          const flags = this.prodParam.currentFlags();
          const prodParamToClear = 8 & flags;
          if (prodParamToClear) {
            this.prodParam.enter(flags & ~8);
            try {
              return callback();
            } finally {
              this.prodParam.exit();
            }
          }
          return callback();
        }
        registerTopicReference() {
          this.state.topicContext.maxTopicIndex = 0;
        }
        topicReferenceIsAllowedInCurrentContext() {
          return this.state.topicContext.maxNumOfResolvableTopics >= 1;
        }
        topicReferenceWasUsedInCurrentContext() {
          return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;
        }
        parseFSharpPipelineBody(prec) {
          const startLoc = this.state.startLoc;
          this.state.potentialArrowAt = this.state.start;
          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
          this.state.inFSharpPipelineDirectBody = true;
          const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, prec);
          this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
          return ret;
        }
        parseModuleExpression() {
          this.expectPlugin("moduleBlocks");
          const node = this.startNode();
          this.next();
          if (!this.match(5)) {
            this.unexpected(null, 5);
          }
          const program = this.startNodeAt(this.state.endLoc);
          this.next();
          const revertScopes = this.initializeScopes(true);
          this.enterInitialScopes();
          try {
            node.body = this.parseProgram(program, 8, "module");
          } finally {
            revertScopes();
          }
          return this.finishNode(node, "ModuleExpression");
        }
        parsePropertyNamePrefixOperator(prop) {
        }
      };
      var loopLabel = {
        kind: 1
      };
      var switchLabel = {
        kind: 2
      };
      var loneSurrogate = /[\uD800-\uDFFF]/u;
      var keywordRelationalOperator = /in(?:stanceof)?/y;
      function babel7CompatTokens(tokens, input) {
        for (let i = 0; i < tokens.length; i++) {
          const token = tokens[i];
          const {
            type
          } = token;
          if (typeof type === "number") {
            {
              if (type === 138) {
                const {
                  loc,
                  start,
                  value,
                  end
                } = token;
                const hashEndPos = start + 1;
                const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);
                tokens.splice(i, 1, new Token({
                  type: getExportedToken(27),
                  value: "#",
                  start,
                  end: hashEndPos,
                  startLoc: loc.start,
                  endLoc: hashEndLoc
                }), new Token({
                  type: getExportedToken(132),
                  value,
                  start: hashEndPos,
                  end,
                  startLoc: hashEndLoc,
                  endLoc: loc.end
                }));
                i++;
                continue;
              }
              if (tokenIsTemplate(type)) {
                const {
                  loc,
                  start,
                  value,
                  end
                } = token;
                const backquoteEnd = start + 1;
                const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);
                let startToken;
                if (input.charCodeAt(start) === 96) {
                  startToken = new Token({
                    type: getExportedToken(22),
                    value: "`",
                    start,
                    end: backquoteEnd,
                    startLoc: loc.start,
                    endLoc: backquoteEndLoc
                  });
                } else {
                  startToken = new Token({
                    type: getExportedToken(8),
                    value: "}",
                    start,
                    end: backquoteEnd,
                    startLoc: loc.start,
                    endLoc: backquoteEndLoc
                  });
                }
                let templateValue, templateElementEnd, templateElementEndLoc, endToken;
                if (type === 24) {
                  templateElementEnd = end - 1;
                  templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);
                  templateValue = value === null ? null : value.slice(1, -1);
                  endToken = new Token({
                    type: getExportedToken(22),
                    value: "`",
                    start: templateElementEnd,
                    end,
                    startLoc: templateElementEndLoc,
                    endLoc: loc.end
                  });
                } else {
                  templateElementEnd = end - 2;
                  templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);
                  templateValue = value === null ? null : value.slice(1, -2);
                  endToken = new Token({
                    type: getExportedToken(23),
                    value: "${",
                    start: templateElementEnd,
                    end,
                    startLoc: templateElementEndLoc,
                    endLoc: loc.end
                  });
                }
                tokens.splice(i, 1, startToken, new Token({
                  type: getExportedToken(20),
                  value: templateValue,
                  start: backquoteEnd,
                  end: templateElementEnd,
                  startLoc: backquoteEndLoc,
                  endLoc: templateElementEndLoc
                }), endToken);
                i += 2;
                continue;
              }
            }
            token.type = getExportedToken(type);
          }
        }
        return tokens;
      }
      var StatementParser = class extends ExpressionParser {
        parseTopLevel(file, program) {
          file.program = this.parseProgram(program);
          file.comments = this.comments;
          if (this.options.tokens) {
            file.tokens = babel7CompatTokens(this.tokens, this.input);
          }
          return this.finishNode(file, "File");
        }
        parseProgram(program, end = 139, sourceType = this.options.sourceType) {
          program.sourceType = sourceType;
          program.interpreter = this.parseInterpreterDirective();
          this.parseBlockBody(program, true, true, end);
          if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {
            for (const [localName, at] of Array.from(this.scope.undefinedExports)) {
              this.raise(Errors.ModuleExportUndefined, at, {
                localName
              });
            }
          }
          let finishedProgram;
          if (end === 139) {
            finishedProgram = this.finishNode(program, "Program");
          } else {
            finishedProgram = this.finishNodeAt(program, "Program", createPositionWithColumnOffset(this.state.startLoc, -1));
          }
          return finishedProgram;
        }
        stmtToDirective(stmt) {
          const directive = stmt;
          directive.type = "Directive";
          directive.value = directive.expression;
          delete directive.expression;
          const directiveLiteral = directive.value;
          const expressionValue = directiveLiteral.value;
          const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);
          const val = directiveLiteral.value = raw.slice(1, -1);
          this.addExtra(directiveLiteral, "raw", raw);
          this.addExtra(directiveLiteral, "rawValue", val);
          this.addExtra(directiveLiteral, "expressionValue", expressionValue);
          directiveLiteral.type = "DirectiveLiteral";
          return directive;
        }
        parseInterpreterDirective() {
          if (!this.match(28)) {
            return null;
          }
          const node = this.startNode();
          node.value = this.state.value;
          this.next();
          return this.finishNode(node, "InterpreterDirective");
        }
        isLet() {
          if (!this.isContextual(100)) {
            return false;
          }
          return this.hasFollowingBindingAtom();
        }
        chStartsBindingIdentifier(ch, pos) {
          if (isIdentifierStart(ch)) {
            keywordRelationalOperator.lastIndex = pos;
            if (keywordRelationalOperator.test(this.input)) {
              const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);
              if (!isIdentifierChar2(endCh) && endCh !== 92) {
                return false;
              }
            }
            return true;
          } else if (ch === 92) {
            return true;
          } else {
            return false;
          }
        }
        chStartsBindingPattern(ch) {
          return ch === 91 || ch === 123;
        }
        hasFollowingBindingAtom() {
          const next = this.nextTokenStart();
          const nextCh = this.codePointAtPos(next);
          return this.chStartsBindingPattern(nextCh) || this.chStartsBindingIdentifier(nextCh, next);
        }
        hasInLineFollowingBindingIdentifier() {
          const next = this.nextTokenInLineStart();
          const nextCh = this.codePointAtPos(next);
          return this.chStartsBindingIdentifier(nextCh, next);
        }
        startsUsingForOf() {
          const {
            type,
            containsEsc
          } = this.lookahead();
          if (type === 102 && !containsEsc) {
            return false;
          } else if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {
            this.expectPlugin("explicitResourceManagement");
            return true;
          }
        }
        startsAwaitUsing() {
          let next = this.nextTokenInLineStart();
          if (this.isUnparsedContextual(next, "using")) {
            next = this.nextTokenInLineStartSince(next + 5);
            const nextCh = this.codePointAtPos(next);
            if (this.chStartsBindingIdentifier(nextCh, next)) {
              this.expectPlugin("explicitResourceManagement");
              return true;
            }
          }
          return false;
        }
        parseModuleItem() {
          return this.parseStatementLike(1 | 2 | 4 | 8);
        }
        parseStatementListItem() {
          return this.parseStatementLike(2 | 4 | (!this.options.annexB || this.state.strict ? 0 : 8));
        }
        parseStatementOrSloppyAnnexBFunctionDeclaration(allowLabeledFunction = false) {
          let flags = 0;
          if (this.options.annexB && !this.state.strict) {
            flags |= 4;
            if (allowLabeledFunction) {
              flags |= 8;
            }
          }
          return this.parseStatementLike(flags);
        }
        parseStatement() {
          return this.parseStatementLike(0);
        }
        parseStatementLike(flags) {
          let decorators = null;
          if (this.match(26)) {
            decorators = this.parseDecorators(true);
          }
          return this.parseStatementContent(flags, decorators);
        }
        parseStatementContent(flags, decorators) {
          const starttype = this.state.type;
          const node = this.startNode();
          const allowDeclaration = !!(flags & 2);
          const allowFunctionDeclaration = !!(flags & 4);
          const topLevel = flags & 1;
          switch (starttype) {
            case 60:
              return this.parseBreakContinueStatement(node, true);
            case 63:
              return this.parseBreakContinueStatement(node, false);
            case 64:
              return this.parseDebuggerStatement(node);
            case 90:
              return this.parseDoWhileStatement(node);
            case 91:
              return this.parseForStatement(node);
            case 68:
              if (this.lookaheadCharCode() === 46)
                break;
              if (!allowFunctionDeclaration) {
                this.raise(this.state.strict ? Errors.StrictFunction : this.options.annexB ? Errors.SloppyFunctionAnnexB : Errors.SloppyFunction, this.state.startLoc);
              }
              return this.parseFunctionStatement(node, false, !allowDeclaration && allowFunctionDeclaration);
            case 80:
              if (!allowDeclaration)
                this.unexpected();
              return this.parseClass(this.maybeTakeDecorators(decorators, node), true);
            case 69:
              return this.parseIfStatement(node);
            case 70:
              return this.parseReturnStatement(node);
            case 71:
              return this.parseSwitchStatement(node);
            case 72:
              return this.parseThrowStatement(node);
            case 73:
              return this.parseTryStatement(node);
            case 96:
              if (!this.state.containsEsc && this.startsAwaitUsing()) {
                if (!this.isAwaitAllowed()) {
                  this.raise(Errors.AwaitUsingNotInAsyncContext, node);
                } else if (!allowDeclaration) {
                  this.raise(Errors.UnexpectedLexicalDeclaration, node);
                }
                this.next();
                return this.parseVarStatement(node, "await using");
              }
              break;
            case 107:
              if (this.state.containsEsc || !this.hasInLineFollowingBindingIdentifier()) {
                break;
              }
              this.expectPlugin("explicitResourceManagement");
              if (!this.scope.inModule && this.scope.inTopLevel) {
                this.raise(Errors.UnexpectedUsingDeclaration, this.state.startLoc);
              } else if (!allowDeclaration) {
                this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);
              }
              return this.parseVarStatement(node, "using");
            case 100: {
              if (this.state.containsEsc) {
                break;
              }
              const next = this.nextTokenStart();
              const nextCh = this.codePointAtPos(next);
              if (nextCh !== 91) {
                if (!allowDeclaration && this.hasFollowingLineBreak())
                  break;
                if (!this.chStartsBindingIdentifier(nextCh, next) && nextCh !== 123) {
                  break;
                }
              }
            }
            case 75: {
              if (!allowDeclaration) {
                this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);
              }
            }
            case 74: {
              const kind = this.state.value;
              return this.parseVarStatement(node, kind);
            }
            case 92:
              return this.parseWhileStatement(node);
            case 76:
              return this.parseWithStatement(node);
            case 5:
              return this.parseBlock();
            case 13:
              return this.parseEmptyStatement(node);
            case 83: {
              const nextTokenCharCode = this.lookaheadCharCode();
              if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {
                break;
              }
            }
            case 82: {
              if (!this.options.allowImportExportEverywhere && !topLevel) {
                this.raise(Errors.UnexpectedImportExport, this.state.startLoc);
              }
              this.next();
              let result;
              if (starttype === 83) {
                result = this.parseImport(node);
                if (result.type === "ImportDeclaration" && (!result.importKind || result.importKind === "value")) {
                  this.sawUnambiguousESM = true;
                }
              } else {
                result = this.parseExport(node, decorators);
                if (result.type === "ExportNamedDeclaration" && (!result.exportKind || result.exportKind === "value") || result.type === "ExportAllDeclaration" && (!result.exportKind || result.exportKind === "value") || result.type === "ExportDefaultDeclaration") {
                  this.sawUnambiguousESM = true;
                }
              }
              this.assertModuleNodeAllowed(result);
              return result;
            }
            default: {
              if (this.isAsyncFunction()) {
                if (!allowDeclaration) {
                  this.raise(Errors.AsyncFunctionInSingleStatementContext, this.state.startLoc);
                }
                this.next();
                return this.parseFunctionStatement(node, true, !allowDeclaration && allowFunctionDeclaration);
              }
            }
          }
          const maybeName = this.state.value;
          const expr = this.parseExpression();
          if (tokenIsIdentifier(starttype) && expr.type === "Identifier" && this.eat(14)) {
            return this.parseLabeledStatement(node, maybeName, expr, flags);
          } else {
            return this.parseExpressionStatement(node, expr, decorators);
          }
        }
        assertModuleNodeAllowed(node) {
          if (!this.options.allowImportExportEverywhere && !this.inModule) {
            this.raise(Errors.ImportOutsideModule, node);
          }
        }
        decoratorsEnabledBeforeExport() {
          if (this.hasPlugin("decorators-legacy"))
            return true;
          return this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") !== false;
        }
        maybeTakeDecorators(maybeDecorators, classNode, exportNode) {
          if (maybeDecorators) {
            if (classNode.decorators && classNode.decorators.length > 0) {
              if (typeof this.getPluginOption("decorators", "decoratorsBeforeExport") !== "boolean") {
                this.raise(Errors.DecoratorsBeforeAfterExport, classNode.decorators[0]);
              }
              classNode.decorators.unshift(...maybeDecorators);
            } else {
              classNode.decorators = maybeDecorators;
            }
            this.resetStartLocationFromNode(classNode, maybeDecorators[0]);
            if (exportNode)
              this.resetStartLocationFromNode(exportNode, classNode);
          }
          return classNode;
        }
        canHaveLeadingDecorator() {
          return this.match(80);
        }
        parseDecorators(allowExport) {
          const decorators = [];
          do {
            decorators.push(this.parseDecorator());
          } while (this.match(26));
          if (this.match(82)) {
            if (!allowExport) {
              this.unexpected();
            }
            if (!this.decoratorsEnabledBeforeExport()) {
              this.raise(Errors.DecoratorExportClass, this.state.startLoc);
            }
          } else if (!this.canHaveLeadingDecorator()) {
            throw this.raise(Errors.UnexpectedLeadingDecorator, this.state.startLoc);
          }
          return decorators;
        }
        parseDecorator() {
          this.expectOnePlugin(["decorators", "decorators-legacy"]);
          const node = this.startNode();
          this.next();
          if (this.hasPlugin("decorators")) {
            const startLoc = this.state.startLoc;
            let expr;
            if (this.match(10)) {
              const startLoc2 = this.state.startLoc;
              this.next();
              expr = this.parseExpression();
              this.expect(11);
              expr = this.wrapParenthesis(startLoc2, expr);
              const paramsStartLoc = this.state.startLoc;
              node.expression = this.parseMaybeDecoratorArguments(expr);
              if (this.getPluginOption("decorators", "allowCallParenthesized") === false && node.expression !== expr) {
                this.raise(Errors.DecoratorArgumentsOutsideParentheses, paramsStartLoc);
              }
            } else {
              expr = this.parseIdentifier(false);
              while (this.eat(16)) {
                const node2 = this.startNodeAt(startLoc);
                node2.object = expr;
                if (this.match(138)) {
                  this.classScope.usePrivateName(this.state.value, this.state.startLoc);
                  node2.property = this.parsePrivateName();
                } else {
                  node2.property = this.parseIdentifier(true);
                }
                node2.computed = false;
                expr = this.finishNode(node2, "MemberExpression");
              }
              node.expression = this.parseMaybeDecoratorArguments(expr);
            }
          } else {
            node.expression = this.parseExprSubscripts();
          }
          return this.finishNode(node, "Decorator");
        }
        parseMaybeDecoratorArguments(expr) {
          if (this.eat(10)) {
            const node = this.startNodeAtNode(expr);
            node.callee = expr;
            node.arguments = this.parseCallExpressionArguments(11, false);
            this.toReferencedList(node.arguments);
            return this.finishNode(node, "CallExpression");
          }
          return expr;
        }
        parseBreakContinueStatement(node, isBreak) {
          this.next();
          if (this.isLineTerminator()) {
            node.label = null;
          } else {
            node.label = this.parseIdentifier();
            this.semicolon();
          }
          this.verifyBreakContinue(node, isBreak);
          return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
        }
        verifyBreakContinue(node, isBreak) {
          let i;
          for (i = 0; i < this.state.labels.length; ++i) {
            const lab = this.state.labels[i];
            if (node.label == null || lab.name === node.label.name) {
              if (lab.kind != null && (isBreak || lab.kind === 1)) {
                break;
              }
              if (node.label && isBreak)
                break;
            }
          }
          if (i === this.state.labels.length) {
            const type = isBreak ? "BreakStatement" : "ContinueStatement";
            this.raise(Errors.IllegalBreakContinue, node, {
              type
            });
          }
        }
        parseDebuggerStatement(node) {
          this.next();
          this.semicolon();
          return this.finishNode(node, "DebuggerStatement");
        }
        parseHeaderExpression() {
          this.expect(10);
          const val = this.parseExpression();
          this.expect(11);
          return val;
        }
        parseDoWhileStatement(node) {
          this.next();
          this.state.labels.push(loopLabel);
          node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
          this.state.labels.pop();
          this.expect(92);
          node.test = this.parseHeaderExpression();
          this.eat(13);
          return this.finishNode(node, "DoWhileStatement");
        }
        parseForStatement(node) {
          this.next();
          this.state.labels.push(loopLabel);
          let awaitAt = null;
          if (this.isAwaitAllowed() && this.eatContextual(96)) {
            awaitAt = this.state.lastTokStartLoc;
          }
          this.scope.enter(0);
          this.expect(10);
          if (this.match(13)) {
            if (awaitAt !== null) {
              this.unexpected(awaitAt);
            }
            return this.parseFor(node, null);
          }
          const startsWithLet = this.isContextual(100);
          {
            const startsWithAwaitUsing = this.isContextual(96) && this.startsAwaitUsing();
            const starsWithUsingDeclaration = startsWithAwaitUsing || this.isContextual(107) && this.startsUsingForOf();
            const isLetOrUsing = startsWithLet && this.hasFollowingBindingAtom() || starsWithUsingDeclaration;
            if (this.match(74) || this.match(75) || isLetOrUsing) {
              const initNode = this.startNode();
              let kind;
              if (startsWithAwaitUsing) {
                kind = "await using";
                if (!this.isAwaitAllowed()) {
                  this.raise(Errors.AwaitUsingNotInAsyncContext, this.state.startLoc);
                }
                this.next();
              } else {
                kind = this.state.value;
              }
              this.next();
              this.parseVar(initNode, true, kind);
              const init2 = this.finishNode(initNode, "VariableDeclaration");
              const isForIn = this.match(58);
              if (isForIn && starsWithUsingDeclaration) {
                this.raise(Errors.ForInUsing, init2);
              }
              if ((isForIn || this.isContextual(102)) && init2.declarations.length === 1) {
                return this.parseForIn(node, init2, awaitAt);
              }
              if (awaitAt !== null) {
                this.unexpected(awaitAt);
              }
              return this.parseFor(node, init2);
            }
          }
          const startsWithAsync = this.isContextual(95);
          const refExpressionErrors = new ExpressionErrors();
          const init = this.parseExpression(true, refExpressionErrors);
          const isForOf = this.isContextual(102);
          if (isForOf) {
            if (startsWithLet) {
              this.raise(Errors.ForOfLet, init);
            }
            if (awaitAt === null && startsWithAsync && init.type === "Identifier") {
              this.raise(Errors.ForOfAsync, init);
            }
          }
          if (isForOf || this.match(58)) {
            this.checkDestructuringPrivate(refExpressionErrors);
            this.toAssignable(init, true);
            const type = isForOf ? "ForOfStatement" : "ForInStatement";
            this.checkLVal(init, {
              in: {
                type
              }
            });
            return this.parseForIn(node, init, awaitAt);
          } else {
            this.checkExpressionErrors(refExpressionErrors, true);
          }
          if (awaitAt !== null) {
            this.unexpected(awaitAt);
          }
          return this.parseFor(node, init);
        }
        parseFunctionStatement(node, isAsync, isHangingDeclaration) {
          this.next();
          return this.parseFunction(node, 1 | (isHangingDeclaration ? 2 : 0) | (isAsync ? 8 : 0));
        }
        parseIfStatement(node) {
          this.next();
          node.test = this.parseHeaderExpression();
          node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();
          node.alternate = this.eat(66) ? this.parseStatementOrSloppyAnnexBFunctionDeclaration() : null;
          return this.finishNode(node, "IfStatement");
        }
        parseReturnStatement(node) {
          if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {
            this.raise(Errors.IllegalReturn, this.state.startLoc);
          }
          this.next();
          if (this.isLineTerminator()) {
            node.argument = null;
          } else {
            node.argument = this.parseExpression();
            this.semicolon();
          }
          return this.finishNode(node, "ReturnStatement");
        }
        parseSwitchStatement(node) {
          this.next();
          node.discriminant = this.parseHeaderExpression();
          const cases = node.cases = [];
          this.expect(5);
          this.state.labels.push(switchLabel);
          this.scope.enter(0);
          let cur;
          for (let sawDefault; !this.match(8); ) {
            if (this.match(61) || this.match(65)) {
              const isCase = this.match(61);
              if (cur)
                this.finishNode(cur, "SwitchCase");
              cases.push(cur = this.startNode());
              cur.consequent = [];
              this.next();
              if (isCase) {
                cur.test = this.parseExpression();
              } else {
                if (sawDefault) {
                  this.raise(Errors.MultipleDefaultsInSwitch, this.state.lastTokStartLoc);
                }
                sawDefault = true;
                cur.test = null;
              }
              this.expect(14);
            } else {
              if (cur) {
                cur.consequent.push(this.parseStatementListItem());
              } else {
                this.unexpected();
              }
            }
          }
          this.scope.exit();
          if (cur)
            this.finishNode(cur, "SwitchCase");
          this.next();
          this.state.labels.pop();
          return this.finishNode(node, "SwitchStatement");
        }
        parseThrowStatement(node) {
          this.next();
          if (this.hasPrecedingLineBreak()) {
            this.raise(Errors.NewlineAfterThrow, this.state.lastTokEndLoc);
          }
          node.argument = this.parseExpression();
          this.semicolon();
          return this.finishNode(node, "ThrowStatement");
        }
        parseCatchClauseParam() {
          const param = this.parseBindingAtom();
          this.scope.enter(this.options.annexB && param.type === "Identifier" ? 8 : 0);
          this.checkLVal(param, {
            in: {
              type: "CatchClause"
            },
            binding: 9
          });
          return param;
        }
        parseTryStatement(node) {
          this.next();
          node.block = this.parseBlock();
          node.handler = null;
          if (this.match(62)) {
            const clause = this.startNode();
            this.next();
            if (this.match(10)) {
              this.expect(10);
              clause.param = this.parseCatchClauseParam();
              this.expect(11);
            } else {
              clause.param = null;
              this.scope.enter(0);
            }
            clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));
            this.scope.exit();
            node.handler = this.finishNode(clause, "CatchClause");
          }
          node.finalizer = this.eat(67) ? this.parseBlock() : null;
          if (!node.handler && !node.finalizer) {
            this.raise(Errors.NoCatchOrFinally, node);
          }
          return this.finishNode(node, "TryStatement");
        }
        parseVarStatement(node, kind, allowMissingInitializer = false) {
          this.next();
          this.parseVar(node, false, kind, allowMissingInitializer);
          this.semicolon();
          return this.finishNode(node, "VariableDeclaration");
        }
        parseWhileStatement(node) {
          this.next();
          node.test = this.parseHeaderExpression();
          this.state.labels.push(loopLabel);
          node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
          this.state.labels.pop();
          return this.finishNode(node, "WhileStatement");
        }
        parseWithStatement(node) {
          if (this.state.strict) {
            this.raise(Errors.StrictWith, this.state.startLoc);
          }
          this.next();
          node.object = this.parseHeaderExpression();
          node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
          return this.finishNode(node, "WithStatement");
        }
        parseEmptyStatement(node) {
          this.next();
          return this.finishNode(node, "EmptyStatement");
        }
        parseLabeledStatement(node, maybeName, expr, flags) {
          for (const label of this.state.labels) {
            if (label.name === maybeName) {
              this.raise(Errors.LabelRedeclaration, expr, {
                labelName: maybeName
              });
            }
          }
          const kind = tokenIsLoop(this.state.type) ? 1 : this.match(71) ? 2 : null;
          for (let i = this.state.labels.length - 1; i >= 0; i--) {
            const label = this.state.labels[i];
            if (label.statementStart === node.start) {
              label.statementStart = this.state.start;
              label.kind = kind;
            } else {
              break;
            }
          }
          this.state.labels.push({
            name: maybeName,
            kind,
            statementStart: this.state.start
          });
          node.body = flags & 8 ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true) : this.parseStatement();
          this.state.labels.pop();
          node.label = expr;
          return this.finishNode(node, "LabeledStatement");
        }
        parseExpressionStatement(node, expr, decorators) {
          node.expression = expr;
          this.semicolon();
          return this.finishNode(node, "ExpressionStatement");
        }
        parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {
          const node = this.startNode();
          if (allowDirectives) {
            this.state.strictErrors.clear();
          }
          this.expect(5);
          if (createNewLexicalScope) {
            this.scope.enter(0);
          }
          this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);
          if (createNewLexicalScope) {
            this.scope.exit();
          }
          return this.finishNode(node, "BlockStatement");
        }
        isValidDirective(stmt) {
          return stmt.type === "ExpressionStatement" && stmt.expression.type === "StringLiteral" && !stmt.expression.extra.parenthesized;
        }
        parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
          const body = node.body = [];
          const directives = node.directives = [];
          this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : void 0, topLevel, end, afterBlockParse);
        }
        parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {
          const oldStrict = this.state.strict;
          let hasStrictModeDirective = false;
          let parsedNonDirective = false;
          while (!this.match(end)) {
            const stmt = topLevel ? this.parseModuleItem() : this.parseStatementListItem();
            if (directives && !parsedNonDirective) {
              if (this.isValidDirective(stmt)) {
                const directive = this.stmtToDirective(stmt);
                directives.push(directive);
                if (!hasStrictModeDirective && directive.value.value === "use strict") {
                  hasStrictModeDirective = true;
                  this.setStrict(true);
                }
                continue;
              }
              parsedNonDirective = true;
              this.state.strictErrors.clear();
            }
            body.push(stmt);
          }
          afterBlockParse == null || afterBlockParse.call(this, hasStrictModeDirective);
          if (!oldStrict) {
            this.setStrict(false);
          }
          this.next();
        }
        parseFor(node, init) {
          node.init = init;
          this.semicolon(false);
          node.test = this.match(13) ? null : this.parseExpression();
          this.semicolon(false);
          node.update = this.match(11) ? null : this.parseExpression();
          this.expect(11);
          node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
          this.scope.exit();
          this.state.labels.pop();
          return this.finishNode(node, "ForStatement");
        }
        parseForIn(node, init, awaitAt) {
          const isForIn = this.match(58);
          this.next();
          if (isForIn) {
            if (awaitAt !== null)
              this.unexpected(awaitAt);
          } else {
            node.await = awaitAt !== null;
          }
          if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || !this.options.annexB || this.state.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {
            this.raise(Errors.ForInOfLoopInitializer, init, {
              type: isForIn ? "ForInStatement" : "ForOfStatement"
            });
          }
          if (init.type === "AssignmentPattern") {
            this.raise(Errors.InvalidLhs, init, {
              ancestor: {
                type: "ForStatement"
              }
            });
          }
          node.left = init;
          node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();
          this.expect(11);
          node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
          this.scope.exit();
          this.state.labels.pop();
          return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
        }
        parseVar(node, isFor, kind, allowMissingInitializer = false) {
          const declarations = node.declarations = [];
          node.kind = kind;
          for (; ; ) {
            const decl = this.startNode();
            this.parseVarId(decl, kind);
            decl.init = !this.eat(29) ? null : isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();
            if (decl.init === null && !allowMissingInitializer) {
              if (decl.id.type !== "Identifier" && !(isFor && (this.match(58) || this.isContextual(102)))) {
                this.raise(Errors.DeclarationMissingInitializer, this.state.lastTokEndLoc, {
                  kind: "destructuring"
                });
              } else if (kind === "const" && !(this.match(58) || this.isContextual(102))) {
                this.raise(Errors.DeclarationMissingInitializer, this.state.lastTokEndLoc, {
                  kind: "const"
                });
              }
            }
            declarations.push(this.finishNode(decl, "VariableDeclarator"));
            if (!this.eat(12))
              break;
          }
          return node;
        }
        parseVarId(decl, kind) {
          const id = this.parseBindingAtom();
          this.checkLVal(id, {
            in: {
              type: "VariableDeclarator"
            },
            binding: kind === "var" ? 5 : 8201
          });
          decl.id = id;
        }
        parseAsyncFunctionExpression(node) {
          return this.parseFunction(node, 8);
        }
        parseFunction(node, flags = 0) {
          const hangingDeclaration = flags & 2;
          const isDeclaration = !!(flags & 1);
          const requireId = isDeclaration && !(flags & 4);
          const isAsync = !!(flags & 8);
          this.initFunction(node, isAsync);
          if (this.match(55)) {
            if (hangingDeclaration) {
              this.raise(Errors.GeneratorInSingleStatementContext, this.state.startLoc);
            }
            this.next();
            node.generator = true;
          }
          if (isDeclaration) {
            node.id = this.parseFunctionId(requireId);
          }
          const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
          this.state.maybeInArrowParameters = false;
          this.scope.enter(2);
          this.prodParam.enter(functionFlags(isAsync, node.generator));
          if (!isDeclaration) {
            node.id = this.parseFunctionId();
          }
          this.parseFunctionParams(node, false);
          this.withSmartMixTopicForbiddingContext(() => {
            this.parseFunctionBodyAndFinish(node, isDeclaration ? "FunctionDeclaration" : "FunctionExpression");
          });
          this.prodParam.exit();
          this.scope.exit();
          if (isDeclaration && !hangingDeclaration) {
            this.registerFunctionStatementId(node);
          }
          this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
          return node;
        }
        parseFunctionId(requireId) {
          return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;
        }
        parseFunctionParams(node, isConstructor) {
          this.expect(10);
          this.expressionScope.enter(newParameterDeclarationScope());
          node.params = this.parseBindingList(11, 41, 2 | (isConstructor ? 4 : 0));
          this.expressionScope.exit();
        }
        registerFunctionStatementId(node) {
          if (!node.id)
            return;
          this.scope.declareName(node.id.name, !this.options.annexB || this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? 5 : 8201 : 17, node.id.loc.start);
        }
        parseClass(node, isStatement, optionalId) {
          this.next();
          const oldStrict = this.state.strict;
          this.state.strict = true;
          this.parseClassId(node, isStatement, optionalId);
          this.parseClassSuper(node);
          node.body = this.parseClassBody(!!node.superClass, oldStrict);
          return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
        }
        isClassProperty() {
          return this.match(29) || this.match(13) || this.match(8);
        }
        isClassMethod() {
          return this.match(10);
        }
        isNonstaticConstructor(method) {
          return !method.computed && !method.static && (method.key.name === "constructor" || method.key.value === "constructor");
        }
        parseClassBody(hadSuperClass, oldStrict) {
          this.classScope.enter();
          const state = {
            hadConstructor: false,
            hadSuperClass
          };
          let decorators = [];
          const classBody = this.startNode();
          classBody.body = [];
          this.expect(5);
          this.withSmartMixTopicForbiddingContext(() => {
            while (!this.match(8)) {
              if (this.eat(13)) {
                if (decorators.length > 0) {
                  throw this.raise(Errors.DecoratorSemicolon, this.state.lastTokEndLoc);
                }
                continue;
              }
              if (this.match(26)) {
                decorators.push(this.parseDecorator());
                continue;
              }
              const member = this.startNode();
              if (decorators.length) {
                member.decorators = decorators;
                this.resetStartLocationFromNode(member, decorators[0]);
                decorators = [];
              }
              this.parseClassMember(classBody, member, state);
              if (member.kind === "constructor" && member.decorators && member.decorators.length > 0) {
                this.raise(Errors.DecoratorConstructor, member);
              }
            }
          });
          this.state.strict = oldStrict;
          this.next();
          if (decorators.length) {
            throw this.raise(Errors.TrailingDecorator, this.state.startLoc);
          }
          this.classScope.exit();
          return this.finishNode(classBody, "ClassBody");
        }
        parseClassMemberFromModifier(classBody, member) {
          const key = this.parseIdentifier(true);
          if (this.isClassMethod()) {
            const method = member;
            method.kind = "method";
            method.computed = false;
            method.key = key;
            method.static = false;
            this.pushClassMethod(classBody, method, false, false, false, false);
            return true;
          } else if (this.isClassProperty()) {
            const prop = member;
            prop.computed = false;
            prop.key = key;
            prop.static = false;
            classBody.body.push(this.parseClassProperty(prop));
            return true;
          }
          this.resetPreviousNodeTrailingComments(key);
          return false;
        }
        parseClassMember(classBody, member, state) {
          const isStatic = this.isContextual(106);
          if (isStatic) {
            if (this.parseClassMemberFromModifier(classBody, member)) {
              return;
            }
            if (this.eat(5)) {
              this.parseClassStaticBlock(classBody, member);
              return;
            }
          }
          this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
        }
        parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
          const publicMethod = member;
          const privateMethod = member;
          const publicProp = member;
          const privateProp = member;
          const accessorProp = member;
          const method = publicMethod;
          const publicMember = publicMethod;
          member.static = isStatic;
          this.parsePropertyNamePrefixOperator(member);
          if (this.eat(55)) {
            method.kind = "method";
            const isPrivateName = this.match(138);
            this.parseClassElementName(method);
            if (isPrivateName) {
              this.pushClassPrivateMethod(classBody, privateMethod, true, false);
              return;
            }
            if (this.isNonstaticConstructor(publicMethod)) {
              this.raise(Errors.ConstructorIsGenerator, publicMethod.key);
            }
            this.pushClassMethod(classBody, publicMethod, true, false, false, false);
            return;
          }
          const isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc;
          const isPrivate = this.match(138);
          const key = this.parseClassElementName(member);
          const maybeQuestionTokenStartLoc = this.state.startLoc;
          this.parsePostMemberNameModifiers(publicMember);
          if (this.isClassMethod()) {
            method.kind = "method";
            if (isPrivate) {
              this.pushClassPrivateMethod(classBody, privateMethod, false, false);
              return;
            }
            const isConstructor = this.isNonstaticConstructor(publicMethod);
            let allowsDirectSuper = false;
            if (isConstructor) {
              publicMethod.kind = "constructor";
              if (state.hadConstructor && !this.hasPlugin("typescript")) {
                this.raise(Errors.DuplicateConstructor, key);
              }
              if (isConstructor && this.hasPlugin("typescript") && member.override) {
                this.raise(Errors.OverrideOnConstructor, key);
              }
              state.hadConstructor = true;
              allowsDirectSuper = state.hadSuperClass;
            }
            this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);
          } else if (this.isClassProperty()) {
            if (isPrivate) {
              this.pushClassPrivateProperty(classBody, privateProp);
            } else {
              this.pushClassProperty(classBody, publicProp);
            }
          } else if (isContextual && key.name === "async" && !this.isLineTerminator()) {
            this.resetPreviousNodeTrailingComments(key);
            const isGenerator = this.eat(55);
            if (publicMember.optional) {
              this.unexpected(maybeQuestionTokenStartLoc);
            }
            method.kind = "method";
            const isPrivate2 = this.match(138);
            this.parseClassElementName(method);
            this.parsePostMemberNameModifiers(publicMember);
            if (isPrivate2) {
              this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);
            } else {
              if (this.isNonstaticConstructor(publicMethod)) {
                this.raise(Errors.ConstructorIsAsync, publicMethod.key);
              }
              this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);
            }
          } else if (isContextual && (key.name === "get" || key.name === "set") && !(this.match(55) && this.isLineTerminator())) {
            this.resetPreviousNodeTrailingComments(key);
            method.kind = key.name;
            const isPrivate2 = this.match(138);
            this.parseClassElementName(publicMethod);
            if (isPrivate2) {
              this.pushClassPrivateMethod(classBody, privateMethod, false, false);
            } else {
              if (this.isNonstaticConstructor(publicMethod)) {
                this.raise(Errors.ConstructorIsAccessor, publicMethod.key);
              }
              this.pushClassMethod(classBody, publicMethod, false, false, false, false);
            }
            this.checkGetterSetterParams(publicMethod);
          } else if (isContextual && key.name === "accessor" && !this.isLineTerminator()) {
            this.expectPlugin("decoratorAutoAccessors");
            this.resetPreviousNodeTrailingComments(key);
            const isPrivate2 = this.match(138);
            this.parseClassElementName(publicProp);
            this.pushClassAccessorProperty(classBody, accessorProp, isPrivate2);
          } else if (this.isLineTerminator()) {
            if (isPrivate) {
              this.pushClassPrivateProperty(classBody, privateProp);
            } else {
              this.pushClassProperty(classBody, publicProp);
            }
          } else {
            this.unexpected();
          }
        }
        parseClassElementName(member) {
          const {
            type,
            value
          } = this.state;
          if ((type === 132 || type === 133) && member.static && value === "prototype") {
            this.raise(Errors.StaticPrototype, this.state.startLoc);
          }
          if (type === 138) {
            if (value === "constructor") {
              this.raise(Errors.ConstructorClassPrivateField, this.state.startLoc);
            }
            const key = this.parsePrivateName();
            member.key = key;
            return key;
          }
          return this.parsePropertyName(member);
        }
        parseClassStaticBlock(classBody, member) {
          var _member$decorators;
          this.scope.enter(64 | 128 | 16);
          const oldLabels = this.state.labels;
          this.state.labels = [];
          this.prodParam.enter(0);
          const body = member.body = [];
          this.parseBlockOrModuleBlockBody(body, void 0, false, 8);
          this.prodParam.exit();
          this.scope.exit();
          this.state.labels = oldLabels;
          classBody.body.push(this.finishNode(member, "StaticBlock"));
          if ((_member$decorators = member.decorators) != null && _member$decorators.length) {
            this.raise(Errors.DecoratorStaticBlock, member);
          }
        }
        pushClassProperty(classBody, prop) {
          if (!prop.computed && (prop.key.name === "constructor" || prop.key.value === "constructor")) {
            this.raise(Errors.ConstructorClassField, prop.key);
          }
          classBody.body.push(this.parseClassProperty(prop));
        }
        pushClassPrivateProperty(classBody, prop) {
          const node = this.parseClassPrivateProperty(prop);
          classBody.body.push(node);
          this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
        }
        pushClassAccessorProperty(classBody, prop, isPrivate) {
          if (!isPrivate && !prop.computed) {
            const key = prop.key;
            if (key.name === "constructor" || key.value === "constructor") {
              this.raise(Errors.ConstructorClassField, key);
            }
          }
          const node = this.parseClassAccessorProperty(prop);
          classBody.body.push(node);
          if (isPrivate) {
            this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
          }
        }
        pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
          classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true));
        }
        pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
          const node = this.parseMethod(method, isGenerator, isAsync, false, false, "ClassPrivateMethod", true);
          classBody.body.push(node);
          const kind = node.kind === "get" ? node.static ? 6 : 2 : node.kind === "set" ? node.static ? 5 : 1 : 0;
          this.declareClassPrivateMethodInScope(node, kind);
        }
        declareClassPrivateMethodInScope(node, kind) {
          this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);
        }
        parsePostMemberNameModifiers(methodOrProp) {
        }
        parseClassPrivateProperty(node) {
          this.parseInitializer(node);
          this.semicolon();
          return this.finishNode(node, "ClassPrivateProperty");
        }
        parseClassProperty(node) {
          this.parseInitializer(node);
          this.semicolon();
          return this.finishNode(node, "ClassProperty");
        }
        parseClassAccessorProperty(node) {
          this.parseInitializer(node);
          this.semicolon();
          return this.finishNode(node, "ClassAccessorProperty");
        }
        parseInitializer(node) {
          this.scope.enter(64 | 16);
          this.expressionScope.enter(newExpressionScope());
          this.prodParam.enter(0);
          node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;
          this.expressionScope.exit();
          this.prodParam.exit();
          this.scope.exit();
        }
        parseClassId(node, isStatement, optionalId, bindingType = 8331) {
          if (tokenIsIdentifier(this.state.type)) {
            node.id = this.parseIdentifier();
            if (isStatement) {
              this.declareNameFromIdentifier(node.id, bindingType);
            }
          } else {
            if (optionalId || !isStatement) {
              node.id = null;
            } else {
              throw this.raise(Errors.MissingClassName, this.state.startLoc);
            }
          }
        }
        parseClassSuper(node) {
          node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;
        }
        parseExport(node, decorators) {
          const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, true);
          const hasDefault = this.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);
          const parseAfterDefault = !hasDefault || this.eat(12);
          const hasStar = parseAfterDefault && this.eatExportStar(node);
          const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);
          const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));
          const isFromRequired = hasDefault || hasStar;
          if (hasStar && !hasNamespace) {
            if (hasDefault)
              this.unexpected();
            if (decorators) {
              throw this.raise(Errors.UnsupportedDecoratorExport, node);
            }
            this.parseExportFrom(node, true);
            return this.finishNode(node, "ExportAllDeclaration");
          }
          const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);
          if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {
            this.unexpected(null, 5);
          }
          if (hasNamespace && parseAfterNamespace) {
            this.unexpected(null, 98);
          }
          let hasDeclaration;
          if (isFromRequired || hasSpecifiers) {
            hasDeclaration = false;
            if (decorators) {
              throw this.raise(Errors.UnsupportedDecoratorExport, node);
            }
            this.parseExportFrom(node, isFromRequired);
          } else {
            hasDeclaration = this.maybeParseExportDeclaration(node);
          }
          if (isFromRequired || hasSpecifiers || hasDeclaration) {
            var _node2$declaration;
            const node2 = node;
            this.checkExport(node2, true, false, !!node2.source);
            if (((_node2$declaration = node2.declaration) == null ? void 0 : _node2$declaration.type) === "ClassDeclaration") {
              this.maybeTakeDecorators(decorators, node2.declaration, node2);
            } else if (decorators) {
              throw this.raise(Errors.UnsupportedDecoratorExport, node);
            }
            return this.finishNode(node2, "ExportNamedDeclaration");
          }
          if (this.eat(65)) {
            const node2 = node;
            const decl = this.parseExportDefaultExpression();
            node2.declaration = decl;
            if (decl.type === "ClassDeclaration") {
              this.maybeTakeDecorators(decorators, decl, node2);
            } else if (decorators) {
              throw this.raise(Errors.UnsupportedDecoratorExport, node);
            }
            this.checkExport(node2, true, true);
            return this.finishNode(node2, "ExportDefaultDeclaration");
          }
          this.unexpected(null, 5);
        }
        eatExportStar(node) {
          return this.eat(55);
        }
        maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {
          if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {
            this.expectPlugin("exportDefaultFrom", maybeDefaultIdentifier == null ? void 0 : maybeDefaultIdentifier.loc.start);
            const id = maybeDefaultIdentifier || this.parseIdentifier(true);
            const specifier = this.startNodeAtNode(id);
            specifier.exported = id;
            node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
            return true;
          }
          return false;
        }
        maybeParseExportNamespaceSpecifier(node) {
          if (this.isContextual(93)) {
            if (!node.specifiers)
              node.specifiers = [];
            const specifier = this.startNodeAt(this.state.lastTokStartLoc);
            this.next();
            specifier.exported = this.parseModuleExportName();
            node.specifiers.push(this.finishNode(specifier, "ExportNamespaceSpecifier"));
            return true;
          }
          return false;
        }
        maybeParseExportNamedSpecifiers(node) {
          if (this.match(5)) {
            if (!node.specifiers)
              node.specifiers = [];
            const isTypeExport = node.exportKind === "type";
            node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));
            node.source = null;
            node.declaration = null;
            if (this.hasPlugin("importAssertions")) {
              node.assertions = [];
            }
            return true;
          }
          return false;
        }
        maybeParseExportDeclaration(node) {
          if (this.shouldParseExportDeclaration()) {
            node.specifiers = [];
            node.source = null;
            if (this.hasPlugin("importAssertions")) {
              node.assertions = [];
            }
            node.declaration = this.parseExportDeclaration(node);
            return true;
          }
          return false;
        }
        isAsyncFunction() {
          if (!this.isContextual(95))
            return false;
          const next = this.nextTokenInLineStart();
          return this.isUnparsedContextual(next, "function");
        }
        parseExportDefaultExpression() {
          const expr = this.startNode();
          if (this.match(68)) {
            this.next();
            return this.parseFunction(expr, 1 | 4);
          } else if (this.isAsyncFunction()) {
            this.next();
            this.next();
            return this.parseFunction(expr, 1 | 4 | 8);
          }
          if (this.match(80)) {
            return this.parseClass(expr, true, true);
          }
          if (this.match(26)) {
            if (this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") === true) {
              this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);
            }
            return this.parseClass(this.maybeTakeDecorators(this.parseDecorators(false), this.startNode()), true, true);
          }
          if (this.match(75) || this.match(74) || this.isLet()) {
            throw this.raise(Errors.UnsupportedDefaultExport, this.state.startLoc);
          }
          const res = this.parseMaybeAssignAllowIn();
          this.semicolon();
          return res;
        }
        parseExportDeclaration(node) {
          if (this.match(80)) {
            const node2 = this.parseClass(this.startNode(), true, false);
            return node2;
          }
          return this.parseStatementListItem();
        }
        isExportDefaultSpecifier() {
          const {
            type
          } = this.state;
          if (tokenIsIdentifier(type)) {
            if (type === 95 && !this.state.containsEsc || type === 100) {
              return false;
            }
            if ((type === 130 || type === 129) && !this.state.containsEsc) {
              const {
                type: nextType
              } = this.lookahead();
              if (tokenIsIdentifier(nextType) && nextType !== 98 || nextType === 5) {
                this.expectOnePlugin(["flow", "typescript"]);
                return false;
              }
            }
          } else if (!this.match(65)) {
            return false;
          }
          const next = this.nextTokenStart();
          const hasFrom = this.isUnparsedContextual(next, "from");
          if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {
            return true;
          }
          if (this.match(65) && hasFrom) {
            const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));
            return nextAfterFrom === 34 || nextAfterFrom === 39;
          }
          return false;
        }
        parseExportFrom(node, expect) {
          if (this.eatContextual(98)) {
            node.source = this.parseImportSource();
            this.checkExport(node);
            this.maybeParseImportAttributes(node);
            this.checkJSONModuleImport(node);
          } else if (expect) {
            this.unexpected();
          }
          this.semicolon();
        }
        shouldParseExportDeclaration() {
          const {
            type
          } = this.state;
          if (type === 26) {
            this.expectOnePlugin(["decorators", "decorators-legacy"]);
            if (this.hasPlugin("decorators")) {
              if (this.getPluginOption("decorators", "decoratorsBeforeExport") === true) {
                this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);
              }
              return true;
            }
          }
          return type === 74 || type === 75 || type === 68 || type === 80 || this.isLet() || this.isAsyncFunction();
        }
        checkExport(node, checkNames, isDefault, isFrom) {
          if (checkNames) {
            var _node$specifiers;
            if (isDefault) {
              this.checkDuplicateExports(node, "default");
              if (this.hasPlugin("exportDefaultFrom")) {
                var _declaration$extra;
                const declaration = node.declaration;
                if (declaration.type === "Identifier" && declaration.name === "from" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {
                  this.raise(Errors.ExportDefaultFromAsIdentifier, declaration);
                }
              }
            } else if ((_node$specifiers = node.specifiers) != null && _node$specifiers.length) {
              for (const specifier of node.specifiers) {
                const {
                  exported
                } = specifier;
                const exportName = exported.type === "Identifier" ? exported.name : exported.value;
                this.checkDuplicateExports(specifier, exportName);
                if (!isFrom && specifier.local) {
                  const {
                    local
                  } = specifier;
                  if (local.type !== "Identifier") {
                    this.raise(Errors.ExportBindingIsString, specifier, {
                      localName: local.value,
                      exportName
                    });
                  } else {
                    this.checkReservedWord(local.name, local.loc.start, true, false);
                    this.scope.checkLocalExport(local);
                  }
                }
              }
            } else if (node.declaration) {
              if (node.declaration.type === "FunctionDeclaration" || node.declaration.type === "ClassDeclaration") {
                const id = node.declaration.id;
                if (!id)
                  throw new Error("Assertion failure");
                this.checkDuplicateExports(node, id.name);
              } else if (node.declaration.type === "VariableDeclaration") {
                for (const declaration of node.declaration.declarations) {
                  this.checkDeclaration(declaration.id);
                }
              }
            }
          }
        }
        checkDeclaration(node) {
          if (node.type === "Identifier") {
            this.checkDuplicateExports(node, node.name);
          } else if (node.type === "ObjectPattern") {
            for (const prop of node.properties) {
              this.checkDeclaration(prop);
            }
          } else if (node.type === "ArrayPattern") {
            for (const elem of node.elements) {
              if (elem) {
                this.checkDeclaration(elem);
              }
            }
          } else if (node.type === "ObjectProperty") {
            this.checkDeclaration(node.value);
          } else if (node.type === "RestElement") {
            this.checkDeclaration(node.argument);
          } else if (node.type === "AssignmentPattern") {
            this.checkDeclaration(node.left);
          }
        }
        checkDuplicateExports(node, exportName) {
          if (this.exportedIdentifiers.has(exportName)) {
            if (exportName === "default") {
              this.raise(Errors.DuplicateDefaultExport, node);
            } else {
              this.raise(Errors.DuplicateExport, node, {
                exportName
              });
            }
          }
          this.exportedIdentifiers.add(exportName);
        }
        parseExportSpecifiers(isInTypeExport) {
          const nodes = [];
          let first = true;
          this.expect(5);
          while (!this.eat(8)) {
            if (first) {
              first = false;
            } else {
              this.expect(12);
              if (this.eat(8))
                break;
            }
            const isMaybeTypeOnly = this.isContextual(130);
            const isString = this.match(133);
            const node = this.startNode();
            node.local = this.parseModuleExportName();
            nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));
          }
          return nodes;
        }
        parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
          if (this.eatContextual(93)) {
            node.exported = this.parseModuleExportName();
          } else if (isString) {
            node.exported = cloneStringLiteral(node.local);
          } else if (!node.exported) {
            node.exported = cloneIdentifier(node.local);
          }
          return this.finishNode(node, "ExportSpecifier");
        }
        parseModuleExportName() {
          if (this.match(133)) {
            const result = this.parseStringLiteral(this.state.value);
            const surrogate = result.value.match(loneSurrogate);
            if (surrogate) {
              this.raise(Errors.ModuleExportNameHasLoneSurrogate, result, {
                surrogateCharCode: surrogate[0].charCodeAt(0)
              });
            }
            return result;
          }
          return this.parseIdentifier(true);
        }
        isJSONModuleImport(node) {
          if (node.assertions != null) {
            return node.assertions.some(({
              key,
              value
            }) => {
              return value.value === "json" && (key.type === "Identifier" ? key.name === "type" : key.value === "type");
            });
          }
          return false;
        }
        checkImportReflection(node) {
          const {
            specifiers
          } = node;
          const singleBindingType = specifiers.length === 1 ? specifiers[0].type : null;
          if (node.phase === "source") {
            if (singleBindingType !== "ImportDefaultSpecifier") {
              this.raise(Errors.SourcePhaseImportRequiresDefault, specifiers[0].loc.start);
            }
          } else if (node.phase === "defer") {
            if (singleBindingType !== "ImportNamespaceSpecifier") {
              this.raise(Errors.DeferImportRequiresNamespace, specifiers[0].loc.start);
            }
          } else if (node.module) {
            var _node$assertions;
            if (singleBindingType !== "ImportDefaultSpecifier") {
              this.raise(Errors.ImportReflectionNotBinding, specifiers[0].loc.start);
            }
            if (((_node$assertions = node.assertions) == null ? void 0 : _node$assertions.length) > 0) {
              this.raise(Errors.ImportReflectionHasAssertion, specifiers[0].loc.start);
            }
          }
        }
        checkJSONModuleImport(node) {
          if (this.isJSONModuleImport(node) && node.type !== "ExportAllDeclaration") {
            const {
              specifiers
            } = node;
            if (specifiers != null) {
              const nonDefaultNamedSpecifier = specifiers.find((specifier) => {
                let imported;
                if (specifier.type === "ExportSpecifier") {
                  imported = specifier.local;
                } else if (specifier.type === "ImportSpecifier") {
                  imported = specifier.imported;
                }
                if (imported !== void 0) {
                  return imported.type === "Identifier" ? imported.name !== "default" : imported.value !== "default";
                }
              });
              if (nonDefaultNamedSpecifier !== void 0) {
                this.raise(Errors.ImportJSONBindingNotDefault, nonDefaultNamedSpecifier.loc.start);
              }
            }
          }
        }
        isPotentialImportPhase(isExport) {
          if (isExport)
            return false;
          return this.isContextual(105) || this.isContextual(97) || this.isContextual(127);
        }
        applyImportPhase(node, isExport, phase, loc) {
          if (isExport) {
            return;
          }
          if (phase === "module") {
            this.expectPlugin("importReflection", loc);
            node.module = true;
          } else if (this.hasPlugin("importReflection")) {
            node.module = false;
          }
          if (phase === "source") {
            this.expectPlugin("sourcePhaseImports", loc);
            node.phase = "source";
          } else if (phase === "defer") {
            this.expectPlugin("deferredImportEvaluation", loc);
            node.phase = "defer";
          } else if (this.hasPlugin("sourcePhaseImports")) {
            node.phase = null;
          }
        }
        parseMaybeImportPhase(node, isExport) {
          if (!this.isPotentialImportPhase(isExport)) {
            this.applyImportPhase(node, isExport, null);
            return null;
          }
          const phaseIdentifier = this.parseIdentifier(true);
          const {
            type
          } = this.state;
          const isImportPhase = tokenIsKeywordOrIdentifier(type) ? type !== 98 || this.lookaheadCharCode() === 102 : type !== 12;
          if (isImportPhase) {
            this.resetPreviousIdentifierLeadingComments(phaseIdentifier);
            this.applyImportPhase(node, isExport, phaseIdentifier.name, phaseIdentifier.loc.start);
            return null;
          } else {
            this.applyImportPhase(node, isExport, null);
            return phaseIdentifier;
          }
        }
        isPrecedingIdImportPhase(phase) {
          const {
            type
          } = this.state;
          return tokenIsIdentifier(type) ? type !== 98 || this.lookaheadCharCode() === 102 : type !== 12;
        }
        parseImport(node) {
          if (this.match(133)) {
            return this.parseImportSourceAndAttributes(node);
          }
          return this.parseImportSpecifiersAndAfter(node, this.parseMaybeImportPhase(node, false));
        }
        parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier) {
          node.specifiers = [];
          const hasDefault = this.maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier);
          const parseNext = !hasDefault || this.eat(12);
          const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);
          if (parseNext && !hasStar)
            this.parseNamedImportSpecifiers(node);
          this.expectContextual(98);
          return this.parseImportSourceAndAttributes(node);
        }
        parseImportSourceAndAttributes(node) {
          var _node$specifiers2;
          (_node$specifiers2 = node.specifiers) != null ? _node$specifiers2 : node.specifiers = [];
          node.source = this.parseImportSource();
          this.maybeParseImportAttributes(node);
          this.checkImportReflection(node);
          this.checkJSONModuleImport(node);
          this.semicolon();
          return this.finishNode(node, "ImportDeclaration");
        }
        parseImportSource() {
          if (!this.match(133))
            this.unexpected();
          return this.parseExprAtom();
        }
        parseImportSpecifierLocal(node, specifier, type) {
          specifier.local = this.parseIdentifier();
          node.specifiers.push(this.finishImportSpecifier(specifier, type));
        }
        finishImportSpecifier(specifier, type, bindingType = 8201) {
          this.checkLVal(specifier.local, {
            in: {
              type
            },
            binding: bindingType
          });
          return this.finishNode(specifier, type);
        }
        parseImportAttributes() {
          this.expect(5);
          const attrs = [];
          const attrNames = /* @__PURE__ */ new Set();
          do {
            if (this.match(8)) {
              break;
            }
            const node = this.startNode();
            const keyName = this.state.value;
            if (attrNames.has(keyName)) {
              this.raise(Errors.ModuleAttributesWithDuplicateKeys, this.state.startLoc, {
                key: keyName
              });
            }
            attrNames.add(keyName);
            if (this.match(133)) {
              node.key = this.parseStringLiteral(keyName);
            } else {
              node.key = this.parseIdentifier(true);
            }
            this.expect(14);
            if (!this.match(133)) {
              throw this.raise(Errors.ModuleAttributeInvalidValue, this.state.startLoc);
            }
            node.value = this.parseStringLiteral(this.state.value);
            attrs.push(this.finishNode(node, "ImportAttribute"));
          } while (this.eat(12));
          this.expect(8);
          return attrs;
        }
        parseModuleAttributes() {
          const attrs = [];
          const attributes = /* @__PURE__ */ new Set();
          do {
            const node = this.startNode();
            node.key = this.parseIdentifier(true);
            if (node.key.name !== "type") {
              this.raise(Errors.ModuleAttributeDifferentFromType, node.key);
            }
            if (attributes.has(node.key.name)) {
              this.raise(Errors.ModuleAttributesWithDuplicateKeys, node.key, {
                key: node.key.name
              });
            }
            attributes.add(node.key.name);
            this.expect(14);
            if (!this.match(133)) {
              throw this.raise(Errors.ModuleAttributeInvalidValue, this.state.startLoc);
            }
            node.value = this.parseStringLiteral(this.state.value);
            attrs.push(this.finishNode(node, "ImportAttribute"));
          } while (this.eat(12));
          return attrs;
        }
        maybeParseImportAttributes(node) {
          let attributes;
          let useWith = false;
          if (this.match(76)) {
            if (this.hasPrecedingLineBreak() && this.lookaheadCharCode() === 40) {
              return;
            }
            this.next();
            {
              if (this.hasPlugin("moduleAttributes")) {
                attributes = this.parseModuleAttributes();
              } else {
                this.expectImportAttributesPlugin();
                attributes = this.parseImportAttributes();
              }
            }
            useWith = true;
          } else if (this.isContextual(94) && !this.hasPrecedingLineBreak()) {
            if (this.hasPlugin("importAttributes")) {
              if (this.getPluginOption("importAttributes", "deprecatedAssertSyntax") !== true) {
                this.raise(Errors.ImportAttributesUseAssert, this.state.startLoc);
              }
              this.addExtra(node, "deprecatedAssertSyntax", true);
            } else {
              this.expectOnePlugin(["importAttributes", "importAssertions"]);
            }
            this.next();
            attributes = this.parseImportAttributes();
          } else if (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) {
            attributes = [];
          } else {
            if (this.hasPlugin("moduleAttributes")) {
              attributes = [];
            } else
              return;
          }
          if (!useWith && this.hasPlugin("importAssertions")) {
            node.assertions = attributes;
          } else {
            node.attributes = attributes;
          }
        }
        maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier) {
          if (maybeDefaultIdentifier) {
            const specifier = this.startNodeAtNode(maybeDefaultIdentifier);
            specifier.local = maybeDefaultIdentifier;
            node.specifiers.push(this.finishImportSpecifier(specifier, "ImportDefaultSpecifier"));
            return true;
          } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
            this.parseImportSpecifierLocal(node, this.startNode(), "ImportDefaultSpecifier");
            return true;
          }
          return false;
        }
        maybeParseStarImportSpecifier(node) {
          if (this.match(55)) {
            const specifier = this.startNode();
            this.next();
            this.expectContextual(93);
            this.parseImportSpecifierLocal(node, specifier, "ImportNamespaceSpecifier");
            return true;
          }
          return false;
        }
        parseNamedImportSpecifiers(node) {
          let first = true;
          this.expect(5);
          while (!this.eat(8)) {
            if (first) {
              first = false;
            } else {
              if (this.eat(14)) {
                throw this.raise(Errors.DestructureNamedImport, this.state.startLoc);
              }
              this.expect(12);
              if (this.eat(8))
                break;
            }
            const specifier = this.startNode();
            const importedIsString = this.match(133);
            const isMaybeTypeOnly = this.isContextual(130);
            specifier.imported = this.parseModuleExportName();
            const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === "type" || node.importKind === "typeof", isMaybeTypeOnly, void 0);
            node.specifiers.push(importSpecifier);
          }
        }
        parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
          if (this.eatContextual(93)) {
            specifier.local = this.parseIdentifier();
          } else {
            const {
              imported
            } = specifier;
            if (importedIsString) {
              throw this.raise(Errors.ImportBindingIsString, specifier, {
                importName: imported.value
              });
            }
            this.checkReservedWord(imported.name, specifier.loc.start, true, true);
            if (!specifier.local) {
              specifier.local = cloneIdentifier(imported);
            }
          }
          return this.finishImportSpecifier(specifier, "ImportSpecifier", bindingType);
        }
        isThisParam(param) {
          return param.type === "Identifier" && param.name === "this";
        }
      };
      var Parser = class extends StatementParser {
        constructor(options, input) {
          options = getOptions(options);
          super(options, input);
          this.options = options;
          this.initializeScopes();
          this.plugins = pluginsMap(this.options.plugins);
          this.filename = options.sourceFilename;
        }
        getScopeHandler() {
          return ScopeHandler;
        }
        parse() {
          this.enterInitialScopes();
          const file = this.startNode();
          const program = this.startNode();
          this.nextToken();
          file.errors = null;
          this.parseTopLevel(file, program);
          file.errors = this.state.errors;
          file.comments.length = this.state.commentsLen;
          return file;
        }
      };
      function pluginsMap(plugins) {
        const pluginMap = /* @__PURE__ */ new Map();
        for (const plugin of plugins) {
          const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];
          if (!pluginMap.has(name))
            pluginMap.set(name, options || {});
        }
        return pluginMap;
      }
      function parse2(input, options) {
        var _options;
        if (((_options = options) == null ? void 0 : _options.sourceType) === "unambiguous") {
          options = Object.assign({}, options);
          try {
            options.sourceType = "module";
            const parser2 = getParser(options, input);
            const ast = parser2.parse();
            if (parser2.sawUnambiguousESM) {
              return ast;
            }
            if (parser2.ambiguousScriptDifferentAst) {
              try {
                options.sourceType = "script";
                return getParser(options, input).parse();
              } catch (_unused) {
              }
            } else {
              ast.program.sourceType = "script";
            }
            return ast;
          } catch (moduleError) {
            try {
              options.sourceType = "script";
              return getParser(options, input).parse();
            } catch (_unused2) {
            }
            throw moduleError;
          }
        } else {
          return getParser(options, input).parse();
        }
      }
      function parseExpression(input, options) {
        const parser2 = getParser(options, input);
        if (parser2.options.strictMode) {
          parser2.state.strict = true;
        }
        return parser2.getExpression();
      }
      function generateExportedTokenTypes(internalTokenTypes) {
        const tokenTypes2 = {};
        for (const typeName of Object.keys(internalTokenTypes)) {
          tokenTypes2[typeName] = getExportedToken(internalTokenTypes[typeName]);
        }
        return tokenTypes2;
      }
      var tokTypes = generateExportedTokenTypes(tt);
      function getParser(options, input) {
        let cls = Parser;
        if (options != null && options.plugins) {
          validatePlugins(options.plugins);
          cls = getParserClass(options.plugins);
        }
        return new cls(options, input);
      }
      var parserClassCache = {};
      function getParserClass(pluginsFromOptions) {
        const pluginList = mixinPluginNames.filter((name) => hasPlugin(pluginsFromOptions, name));
        const key = pluginList.join("/");
        let cls = parserClassCache[key];
        if (!cls) {
          cls = Parser;
          for (const plugin of pluginList) {
            cls = mixinPlugins[plugin](cls);
          }
          parserClassCache[key] = cls;
        }
        return cls;
      }
      exports.parse = parse2;
      exports.parseExpression = parseExpression;
      exports.tokTypes = tokTypes;
    }
  });

  // node_modules/@babel/traverse/lib/path/lib/virtual-types.js
  var require_virtual_types = __commonJS({
    "node_modules/@babel/traverse/lib/path/lib/virtual-types.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Var = exports.User = exports.Statement = exports.SpreadProperty = exports.Scope = exports.RestProperty = exports.ReferencedMemberExpression = exports.ReferencedIdentifier = exports.Referenced = exports.Pure = exports.NumericLiteralTypeAnnotation = exports.Generated = exports.ForAwaitStatement = exports.Flow = exports.Expression = exports.ExistentialTypeParam = exports.BlockScoped = exports.BindingIdentifier = void 0;
      var ReferencedIdentifier = exports.ReferencedIdentifier = ["Identifier", "JSXIdentifier"];
      var ReferencedMemberExpression = exports.ReferencedMemberExpression = ["MemberExpression"];
      var BindingIdentifier = exports.BindingIdentifier = ["Identifier"];
      var Statement = exports.Statement = ["Statement"];
      var Expression = exports.Expression = ["Expression"];
      var Scope = exports.Scope = ["Scopable", "Pattern"];
      var Referenced = exports.Referenced = null;
      var BlockScoped = exports.BlockScoped = null;
      var Var = exports.Var = ["VariableDeclaration"];
      var User = exports.User = null;
      var Generated = exports.Generated = null;
      var Pure = exports.Pure = null;
      var Flow = exports.Flow = ["Flow", "ImportDeclaration", "ExportDeclaration", "ImportSpecifier"];
      var RestProperty = exports.RestProperty = ["RestElement"];
      var SpreadProperty = exports.SpreadProperty = ["RestElement"];
      var ExistentialTypeParam = exports.ExistentialTypeParam = ["ExistsTypeAnnotation"];
      var NumericLiteralTypeAnnotation = exports.NumericLiteralTypeAnnotation = ["NumberLiteralTypeAnnotation"];
      var ForAwaitStatement = exports.ForAwaitStatement = ["ForOfStatement"];
    }
  });

  // node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js
  var require_virtual_types_validator = __commonJS({
    "node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isBindingIdentifier = isBindingIdentifier;
      exports.isBlockScoped = isBlockScoped;
      exports.isExpression = isExpression;
      exports.isFlow = isFlow;
      exports.isForAwaitStatement = isForAwaitStatement;
      exports.isGenerated = isGenerated;
      exports.isPure = isPure;
      exports.isReferenced = isReferenced;
      exports.isReferencedIdentifier = isReferencedIdentifier;
      exports.isReferencedMemberExpression = isReferencedMemberExpression;
      exports.isRestProperty = isRestProperty;
      exports.isScope = isScope;
      exports.isSpreadProperty = isSpreadProperty;
      exports.isStatement = isStatement;
      exports.isUser = isUser;
      exports.isVar = isVar;
      var _t = require_lib3();
      var {
        isBinding,
        isBlockScoped: nodeIsBlockScoped,
        isExportDeclaration,
        isExpression: nodeIsExpression,
        isFlow: nodeIsFlow,
        isForStatement,
        isForXStatement,
        isIdentifier,
        isImportDeclaration,
        isImportSpecifier,
        isJSXIdentifier,
        isJSXMemberExpression,
        isMemberExpression,
        isRestElement: nodeIsRestElement,
        isReferenced: nodeIsReferenced,
        isScope: nodeIsScope,
        isStatement: nodeIsStatement,
        isVar: nodeIsVar,
        isVariableDeclaration,
        react,
        isForOfStatement
      } = _t;
      var {
        isCompatTag
      } = react;
      function isReferencedIdentifier(opts) {
        const {
          node,
          parent
        } = this;
        if (!isIdentifier(node, opts) && !isJSXMemberExpression(parent, opts)) {
          if (isJSXIdentifier(node, opts)) {
            if (isCompatTag(node.name))
              return false;
          } else {
            return false;
          }
        }
        return nodeIsReferenced(node, parent, this.parentPath.parent);
      }
      function isReferencedMemberExpression() {
        const {
          node,
          parent
        } = this;
        return isMemberExpression(node) && nodeIsReferenced(node, parent);
      }
      function isBindingIdentifier() {
        const {
          node,
          parent
        } = this;
        const grandparent = this.parentPath.parent;
        return isIdentifier(node) && isBinding(node, parent, grandparent);
      }
      function isStatement() {
        const {
          node,
          parent
        } = this;
        if (nodeIsStatement(node)) {
          if (isVariableDeclaration(node)) {
            if (isForXStatement(parent, {
              left: node
            }))
              return false;
            if (isForStatement(parent, {
              init: node
            }))
              return false;
          }
          return true;
        } else {
          return false;
        }
      }
      function isExpression() {
        if (this.isIdentifier()) {
          return this.isReferencedIdentifier();
        } else {
          return nodeIsExpression(this.node);
        }
      }
      function isScope() {
        return nodeIsScope(this.node, this.parent);
      }
      function isReferenced() {
        return nodeIsReferenced(this.node, this.parent);
      }
      function isBlockScoped() {
        return nodeIsBlockScoped(this.node);
      }
      function isVar() {
        return nodeIsVar(this.node);
      }
      function isUser() {
        return this.node && !!this.node.loc;
      }
      function isGenerated() {
        return !this.isUser();
      }
      function isPure(constantsOnly) {
        return this.scope.isPure(this.node, constantsOnly);
      }
      function isFlow() {
        const {
          node
        } = this;
        if (nodeIsFlow(node)) {
          return true;
        } else if (isImportDeclaration(node)) {
          return node.importKind === "type" || node.importKind === "typeof";
        } else if (isExportDeclaration(node)) {
          return node.exportKind === "type";
        } else if (isImportSpecifier(node)) {
          return node.importKind === "type" || node.importKind === "typeof";
        } else {
          return false;
        }
      }
      function isRestProperty() {
        return nodeIsRestElement(this.node) && this.parentPath && this.parentPath.isObjectPattern();
      }
      function isSpreadProperty() {
        return nodeIsRestElement(this.node) && this.parentPath && this.parentPath.isObjectExpression();
      }
      function isForAwaitStatement() {
        return isForOfStatement(this.node, {
          await: true
        });
      }
      {
        exports.isExistentialTypeParam = function isExistentialTypeParam() {
          throw new Error("`path.isExistentialTypeParam` has been renamed to `path.isExistsTypeAnnotation()` in Babel 7.");
        };
        exports.isNumericLiteralTypeAnnotation = function isNumericLiteralTypeAnnotation() {
          throw new Error("`path.isNumericLiteralTypeAnnotation()` has been renamed to `path.isNumberLiteralTypeAnnotation()` in Babel 7.");
        };
      }
    }
  });

  // node_modules/@babel/traverse/lib/visitors.js
  var require_visitors = __commonJS({
    "node_modules/@babel/traverse/lib/visitors.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.explode = explode;
      exports.isExplodedVisitor = isExplodedVisitor;
      exports.merge = merge;
      exports.verify = verify;
      var virtualTypes = require_virtual_types();
      var virtualTypesValidators = require_virtual_types_validator();
      var _t = require_lib3();
      var {
        DEPRECATED_KEYS,
        DEPRECATED_ALIASES,
        FLIPPED_ALIAS_KEYS,
        TYPES,
        __internal__deprecationWarning: deprecationWarning
      } = _t;
      function isVirtualType(type) {
        return type in virtualTypes;
      }
      function isExplodedVisitor(visitor) {
        return visitor == null ? void 0 : visitor._exploded;
      }
      function explode(visitor) {
        if (isExplodedVisitor(visitor))
          return visitor;
        visitor._exploded = true;
        for (const nodeType of Object.keys(visitor)) {
          if (shouldIgnoreKey(nodeType))
            continue;
          const parts = nodeType.split("|");
          if (parts.length === 1)
            continue;
          const fns = visitor[nodeType];
          delete visitor[nodeType];
          for (const part of parts) {
            visitor[part] = fns;
          }
        }
        verify(visitor);
        delete visitor.__esModule;
        ensureEntranceObjects(visitor);
        ensureCallbackArrays(visitor);
        for (const nodeType of Object.keys(visitor)) {
          if (shouldIgnoreKey(nodeType))
            continue;
          if (!isVirtualType(nodeType))
            continue;
          const fns = visitor[nodeType];
          for (const type of Object.keys(fns)) {
            fns[type] = wrapCheck(nodeType, fns[type]);
          }
          delete visitor[nodeType];
          const types = virtualTypes[nodeType];
          if (types !== null) {
            for (const type of types) {
              if (visitor[type]) {
                mergePair(visitor[type], fns);
              } else {
                visitor[type] = fns;
              }
            }
          } else {
            mergePair(visitor, fns);
          }
        }
        for (const nodeType of Object.keys(visitor)) {
          if (shouldIgnoreKey(nodeType))
            continue;
          let aliases = FLIPPED_ALIAS_KEYS[nodeType];
          if (nodeType in DEPRECATED_KEYS) {
            const deprecatedKey = DEPRECATED_KEYS[nodeType];
            deprecationWarning(nodeType, deprecatedKey, "Visitor ");
            aliases = [deprecatedKey];
          } else if (nodeType in DEPRECATED_ALIASES) {
            const deprecatedAlias = DEPRECATED_ALIASES[nodeType];
            deprecationWarning(nodeType, deprecatedAlias, "Visitor ");
            aliases = FLIPPED_ALIAS_KEYS[deprecatedAlias];
          }
          if (!aliases)
            continue;
          const fns = visitor[nodeType];
          delete visitor[nodeType];
          for (const alias of aliases) {
            const existing = visitor[alias];
            if (existing) {
              mergePair(existing, fns);
            } else {
              visitor[alias] = Object.assign({}, fns);
            }
          }
        }
        for (const nodeType of Object.keys(visitor)) {
          if (shouldIgnoreKey(nodeType))
            continue;
          ensureCallbackArrays(visitor[nodeType]);
        }
        return visitor;
      }
      function verify(visitor) {
        if (visitor._verified)
          return;
        if (typeof visitor === "function") {
          throw new Error("You passed `traverse()` a function when it expected a visitor object, are you sure you didn't mean `{ enter: Function }`?");
        }
        for (const nodeType of Object.keys(visitor)) {
          if (nodeType === "enter" || nodeType === "exit") {
            validateVisitorMethods(nodeType, visitor[nodeType]);
          }
          if (shouldIgnoreKey(nodeType))
            continue;
          if (TYPES.indexOf(nodeType) < 0) {
            throw new Error(`You gave us a visitor for the node type ${nodeType} but it's not a valid type`);
          }
          const visitors = visitor[nodeType];
          if (typeof visitors === "object") {
            for (const visitorKey of Object.keys(visitors)) {
              if (visitorKey === "enter" || visitorKey === "exit") {
                validateVisitorMethods(`${nodeType}.${visitorKey}`, visitors[visitorKey]);
              } else {
                throw new Error(`You passed \`traverse()\` a visitor object with the property ${nodeType} that has the invalid property ${visitorKey}`);
              }
            }
          }
        }
        visitor._verified = true;
      }
      function validateVisitorMethods(path, val) {
        const fns = [].concat(val);
        for (const fn of fns) {
          if (typeof fn !== "function") {
            throw new TypeError(`Non-function found defined in ${path} with type ${typeof fn}`);
          }
        }
      }
      function merge(visitors, states = [], wrapper) {
        const mergedVisitor = {};
        for (let i = 0; i < visitors.length; i++) {
          const visitor = explode(visitors[i]);
          const state = states[i];
          let topVisitor = visitor;
          if (state || wrapper) {
            topVisitor = wrapWithStateOrWrapper(topVisitor, state, wrapper);
          }
          mergePair(mergedVisitor, topVisitor);
          for (const key of Object.keys(visitor)) {
            if (shouldIgnoreKey(key))
              continue;
            let typeVisitor = visitor[key];
            if (state || wrapper) {
              typeVisitor = wrapWithStateOrWrapper(typeVisitor, state, wrapper);
            }
            const nodeVisitor = mergedVisitor[key] || (mergedVisitor[key] = {});
            mergePair(nodeVisitor, typeVisitor);
          }
        }
        ;
        return mergedVisitor;
      }
      function wrapWithStateOrWrapper(oldVisitor, state, wrapper) {
        const newVisitor = {};
        for (const phase of ["enter", "exit"]) {
          let fns = oldVisitor[phase];
          if (!Array.isArray(fns))
            continue;
          fns = fns.map(function(fn) {
            let newFn = fn;
            if (state) {
              newFn = function(path) {
                fn.call(state, path, state);
              };
            }
            if (wrapper) {
              newFn = wrapper(state == null ? void 0 : state.key, phase, newFn);
            }
            if (newFn !== fn) {
              newFn.toString = () => fn.toString();
            }
            return newFn;
          });
          newVisitor[phase] = fns;
        }
        return newVisitor;
      }
      function ensureEntranceObjects(obj) {
        for (const key of Object.keys(obj)) {
          if (shouldIgnoreKey(key))
            continue;
          const fns = obj[key];
          if (typeof fns === "function") {
            obj[key] = {
              enter: fns
            };
          }
        }
      }
      function ensureCallbackArrays(obj) {
        if (obj.enter && !Array.isArray(obj.enter))
          obj.enter = [obj.enter];
        if (obj.exit && !Array.isArray(obj.exit))
          obj.exit = [obj.exit];
      }
      function wrapCheck(nodeType, fn) {
        const fnKey = `is${nodeType}`;
        const validator = virtualTypesValidators[fnKey];
        const newFn = function(path) {
          if (validator.call(path)) {
            return fn.apply(this, arguments);
          }
        };
        newFn.toString = () => fn.toString();
        return newFn;
      }
      function shouldIgnoreKey(key) {
        if (key[0] === "_")
          return true;
        if (key === "enter" || key === "exit" || key === "shouldSkip")
          return true;
        if (key === "denylist" || key === "noScope" || key === "skipKeys") {
          return true;
        }
        {
          if (key === "blacklist") {
            return true;
          }
        }
        return false;
      }
      function mergePair(dest, src) {
        for (const phase of ["enter", "exit"]) {
          if (!src[phase])
            continue;
          dest[phase] = [].concat(dest[phase] || [], src[phase]);
        }
      }
    }
  });

  // node_modules/@babel/traverse/lib/cache.js
  var require_cache = __commonJS({
    "node_modules/@babel/traverse/lib/cache.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.clear = clear;
      exports.clearPath = clearPath;
      exports.clearScope = clearScope;
      exports.getCachedPaths = getCachedPaths;
      exports.getOrCreateCachedPaths = getOrCreateCachedPaths;
      exports.scope = exports.path = void 0;
      var pathsCache = exports.path = /* @__PURE__ */ new WeakMap();
      var scope = exports.scope = /* @__PURE__ */ new WeakMap();
      function clear() {
        clearPath();
        clearScope();
      }
      function clearPath() {
        exports.path = pathsCache = /* @__PURE__ */ new WeakMap();
      }
      function clearScope() {
        exports.scope = scope = /* @__PURE__ */ new WeakMap();
      }
      var nullHub = Object.freeze({});
      function getCachedPaths(hub, parent) {
        var _pathsCache$get, _hub;
        {
          hub = null;
        }
        return (_pathsCache$get = pathsCache.get((_hub = hub) != null ? _hub : nullHub)) == null ? void 0 : _pathsCache$get.get(parent);
      }
      function getOrCreateCachedPaths(hub, parent) {
        var _hub2, _hub3;
        {
          hub = null;
        }
        let parents = pathsCache.get((_hub2 = hub) != null ? _hub2 : nullHub);
        if (!parents)
          pathsCache.set((_hub3 = hub) != null ? _hub3 : nullHub, parents = /* @__PURE__ */ new WeakMap());
        let paths = parents.get(parent);
        if (!paths)
          parents.set(parent, paths = /* @__PURE__ */ new Map());
        return paths;
      }
    }
  });

  // node_modules/@babel/traverse/node_modules/ms/index.js
  var require_ms = __commonJS({
    "node_modules/@babel/traverse/node_modules/ms/index.js"(exports, module) {
      init_esbuild_inject();
      var s = 1e3;
      var m = s * 60;
      var h2 = m * 60;
      var d2 = h2 * 24;
      var w2 = d2 * 7;
      var y = d2 * 365.25;
      module.exports = function(val, options) {
        options = options || {};
        var type = typeof val;
        if (type === "string" && val.length > 0) {
          return parse2(val);
        } else if (type === "number" && isFinite(val)) {
          return options.long ? fmtLong(val) : fmtShort(val);
        }
        throw new Error(
          "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
        );
      };
      function parse2(str) {
        str = String(str);
        if (str.length > 100) {
          return;
        }
        var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
          str
        );
        if (!match) {
          return;
        }
        var n = parseFloat(match[1]);
        var type = (match[2] || "ms").toLowerCase();
        switch (type) {
          case "years":
          case "year":
          case "yrs":
          case "yr":
          case "y":
            return n * y;
          case "weeks":
          case "week":
          case "w":
            return n * w2;
          case "days":
          case "day":
          case "d":
            return n * d2;
          case "hours":
          case "hour":
          case "hrs":
          case "hr":
          case "h":
            return n * h2;
          case "minutes":
          case "minute":
          case "mins":
          case "min":
          case "m":
            return n * m;
          case "seconds":
          case "second":
          case "secs":
          case "sec":
          case "s":
            return n * s;
          case "milliseconds":
          case "millisecond":
          case "msecs":
          case "msec":
          case "ms":
            return n;
          default:
            return void 0;
        }
      }
      function fmtShort(ms) {
        var msAbs = Math.abs(ms);
        if (msAbs >= d2) {
          return Math.round(ms / d2) + "d";
        }
        if (msAbs >= h2) {
          return Math.round(ms / h2) + "h";
        }
        if (msAbs >= m) {
          return Math.round(ms / m) + "m";
        }
        if (msAbs >= s) {
          return Math.round(ms / s) + "s";
        }
        return ms + "ms";
      }
      function fmtLong(ms) {
        var msAbs = Math.abs(ms);
        if (msAbs >= d2) {
          return plural(ms, msAbs, d2, "day");
        }
        if (msAbs >= h2) {
          return plural(ms, msAbs, h2, "hour");
        }
        if (msAbs >= m) {
          return plural(ms, msAbs, m, "minute");
        }
        if (msAbs >= s) {
          return plural(ms, msAbs, s, "second");
        }
        return ms + " ms";
      }
      function plural(ms, msAbs, n, name) {
        var isPlural = msAbs >= n * 1.5;
        return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
      }
    }
  });

  // node_modules/@babel/traverse/node_modules/debug/src/common.js
  var require_common = __commonJS({
    "node_modules/@babel/traverse/node_modules/debug/src/common.js"(exports, module) {
      init_esbuild_inject();
      function setup(env) {
        createDebug.debug = createDebug;
        createDebug.default = createDebug;
        createDebug.coerce = coerce;
        createDebug.disable = disable;
        createDebug.enable = enable;
        createDebug.enabled = enabled;
        createDebug.humanize = require_ms();
        createDebug.destroy = destroy;
        Object.keys(env).forEach((key) => {
          createDebug[key] = env[key];
        });
        createDebug.names = [];
        createDebug.skips = [];
        createDebug.formatters = {};
        function selectColor(namespace) {
          let hash = 0;
          for (let i = 0; i < namespace.length; i++) {
            hash = (hash << 5) - hash + namespace.charCodeAt(i);
            hash |= 0;
          }
          return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
        }
        createDebug.selectColor = selectColor;
        function createDebug(namespace) {
          let prevTime;
          let enableOverride = null;
          let namespacesCache;
          let enabledCache;
          function debug(...args) {
            if (!debug.enabled) {
              return;
            }
            const self2 = debug;
            const curr = Number(/* @__PURE__ */ new Date());
            const ms = curr - (prevTime || curr);
            self2.diff = ms;
            self2.prev = prevTime;
            self2.curr = curr;
            prevTime = curr;
            args[0] = createDebug.coerce(args[0]);
            if (typeof args[0] !== "string") {
              args.unshift("%O");
            }
            let index = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
              if (match === "%%") {
                return "%";
              }
              index++;
              const formatter = createDebug.formatters[format];
              if (typeof formatter === "function") {
                const val = args[index];
                match = formatter.call(self2, val);
                args.splice(index, 1);
                index--;
              }
              return match;
            });
            createDebug.formatArgs.call(self2, args);
            const logFn = self2.log || createDebug.log;
            logFn.apply(self2, args);
          }
          debug.namespace = namespace;
          debug.useColors = createDebug.useColors();
          debug.color = createDebug.selectColor(namespace);
          debug.extend = extend;
          debug.destroy = createDebug.destroy;
          Object.defineProperty(debug, "enabled", {
            enumerable: true,
            configurable: false,
            get: () => {
              if (enableOverride !== null) {
                return enableOverride;
              }
              if (namespacesCache !== createDebug.namespaces) {
                namespacesCache = createDebug.namespaces;
                enabledCache = createDebug.enabled(namespace);
              }
              return enabledCache;
            },
            set: (v) => {
              enableOverride = v;
            }
          });
          if (typeof createDebug.init === "function") {
            createDebug.init(debug);
          }
          return debug;
        }
        function extend(namespace, delimiter) {
          const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
          newDebug.log = this.log;
          return newDebug;
        }
        function enable(namespaces) {
          createDebug.save(namespaces);
          createDebug.namespaces = namespaces;
          createDebug.names = [];
          createDebug.skips = [];
          let i;
          const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
          const len = split.length;
          for (i = 0; i < len; i++) {
            if (!split[i]) {
              continue;
            }
            namespaces = split[i].replace(/\*/g, ".*?");
            if (namespaces[0] === "-") {
              createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
            } else {
              createDebug.names.push(new RegExp("^" + namespaces + "$"));
            }
          }
        }
        function disable() {
          const namespaces = [
            ...createDebug.names.map(toNamespace),
            ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
          ].join(",");
          createDebug.enable("");
          return namespaces;
        }
        function enabled(name) {
          if (name[name.length - 1] === "*") {
            return true;
          }
          let i;
          let len;
          for (i = 0, len = createDebug.skips.length; i < len; i++) {
            if (createDebug.skips[i].test(name)) {
              return false;
            }
          }
          for (i = 0, len = createDebug.names.length; i < len; i++) {
            if (createDebug.names[i].test(name)) {
              return true;
            }
          }
          return false;
        }
        function toNamespace(regexp) {
          return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
        }
        function coerce(val) {
          if (val instanceof Error) {
            return val.stack || val.message;
          }
          return val;
        }
        function destroy() {
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
        createDebug.enable(createDebug.load());
        return createDebug;
      }
      module.exports = setup;
    }
  });

  // node_modules/@babel/traverse/node_modules/debug/src/browser.js
  var require_browser = __commonJS({
    "node_modules/@babel/traverse/node_modules/debug/src/browser.js"(exports, module) {
      init_esbuild_inject();
      exports.formatArgs = formatArgs;
      exports.save = save;
      exports.load = load;
      exports.useColors = useColors;
      exports.storage = localstorage();
      exports.destroy = /* @__PURE__ */ (() => {
        let warned = false;
        return () => {
          if (!warned) {
            warned = true;
            console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
          }
        };
      })();
      exports.colors = [
        "#0000CC",
        "#0000FF",
        "#0033CC",
        "#0033FF",
        "#0066CC",
        "#0066FF",
        "#0099CC",
        "#0099FF",
        "#00CC00",
        "#00CC33",
        "#00CC66",
        "#00CC99",
        "#00CCCC",
        "#00CCFF",
        "#3300CC",
        "#3300FF",
        "#3333CC",
        "#3333FF",
        "#3366CC",
        "#3366FF",
        "#3399CC",
        "#3399FF",
        "#33CC00",
        "#33CC33",
        "#33CC66",
        "#33CC99",
        "#33CCCC",
        "#33CCFF",
        "#6600CC",
        "#6600FF",
        "#6633CC",
        "#6633FF",
        "#66CC00",
        "#66CC33",
        "#9900CC",
        "#9900FF",
        "#9933CC",
        "#9933FF",
        "#99CC00",
        "#99CC33",
        "#CC0000",
        "#CC0033",
        "#CC0066",
        "#CC0099",
        "#CC00CC",
        "#CC00FF",
        "#CC3300",
        "#CC3333",
        "#CC3366",
        "#CC3399",
        "#CC33CC",
        "#CC33FF",
        "#CC6600",
        "#CC6633",
        "#CC9900",
        "#CC9933",
        "#CCCC00",
        "#CCCC33",
        "#FF0000",
        "#FF0033",
        "#FF0066",
        "#FF0099",
        "#FF00CC",
        "#FF00FF",
        "#FF3300",
        "#FF3333",
        "#FF3366",
        "#FF3399",
        "#FF33CC",
        "#FF33FF",
        "#FF6600",
        "#FF6633",
        "#FF9900",
        "#FF9933",
        "#FFCC00",
        "#FFCC33"
      ];
      function useColors() {
        if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
          return true;
        }
        if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
          return false;
        }
        return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
        typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
        // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
        typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
        typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
      }
      function formatArgs(args) {
        args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
        if (!this.useColors) {
          return;
        }
        const c = "color: " + this.color;
        args.splice(1, 0, c, "color: inherit");
        let index = 0;
        let lastC = 0;
        args[0].replace(/%[a-zA-Z%]/g, (match) => {
          if (match === "%%") {
            return;
          }
          index++;
          if (match === "%c") {
            lastC = index;
          }
        });
        args.splice(lastC, 0, c);
      }
      exports.log = console.debug || console.log || (() => {
      });
      function save(namespaces) {
        try {
          if (namespaces) {
            exports.storage.setItem("debug", namespaces);
          } else {
            exports.storage.removeItem("debug");
          }
        } catch (error) {
        }
      }
      function load() {
        let r;
        try {
          r = exports.storage.getItem("debug");
        } catch (error) {
        }
        if (!r && typeof process !== "undefined" && "env" in process) {
          r = process.env.DEBUG;
        }
        return r;
      }
      function localstorage() {
        try {
          return localStorage;
        } catch (error) {
        }
      }
      module.exports = require_common()(exports);
      var { formatters } = module.exports;
      formatters.j = function(v) {
        try {
          return JSON.stringify(v);
        } catch (error) {
          return "[UnexpectedJSONParseError]: " + error.message;
        }
      };
    }
  });

  // node_modules/@babel/helper-split-export-declaration/lib/index.js
  var require_lib6 = __commonJS({
    "node_modules/@babel/helper-split-export-declaration/lib/index.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = splitExportDeclaration;
      var _t = require_lib3();
      var {
        cloneNode,
        exportNamedDeclaration,
        exportSpecifier,
        identifier,
        variableDeclaration,
        variableDeclarator
      } = _t;
      function splitExportDeclaration(exportDeclaration) {
        if (!exportDeclaration.isExportDeclaration() || exportDeclaration.isExportAllDeclaration()) {
          throw new Error("Only default and named export declarations can be split.");
        }
        if (exportDeclaration.isExportDefaultDeclaration()) {
          const declaration2 = exportDeclaration.get("declaration");
          const standaloneDeclaration = declaration2.isFunctionDeclaration() || declaration2.isClassDeclaration();
          const exportExpr = declaration2.isFunctionExpression() || declaration2.isClassExpression();
          const scope = declaration2.isScope() ? declaration2.scope.parent : declaration2.scope;
          let id = declaration2.node.id;
          let needBindingRegistration = false;
          if (!id) {
            needBindingRegistration = true;
            id = scope.generateUidIdentifier("default");
            if (standaloneDeclaration || exportExpr) {
              declaration2.node.id = cloneNode(id);
            }
          } else if (exportExpr && scope.hasBinding(id.name)) {
            needBindingRegistration = true;
            id = scope.generateUidIdentifier(id.name);
          }
          const updatedDeclaration = standaloneDeclaration ? declaration2.node : variableDeclaration("var", [variableDeclarator(cloneNode(id), declaration2.node)]);
          const updatedExportDeclaration = exportNamedDeclaration(null, [exportSpecifier(cloneNode(id), identifier("default"))]);
          exportDeclaration.insertAfter(updatedExportDeclaration);
          exportDeclaration.replaceWith(updatedDeclaration);
          if (needBindingRegistration) {
            scope.registerDeclaration(exportDeclaration);
          }
          return exportDeclaration;
        } else if (exportDeclaration.get("specifiers").length > 0) {
          throw new Error("It doesn't make sense to split exported specifiers.");
        }
        const declaration = exportDeclaration.get("declaration");
        const bindingIdentifiers = declaration.getOuterBindingIdentifiers();
        const specifiers = Object.keys(bindingIdentifiers).map((name) => {
          return exportSpecifier(identifier(name), identifier(name));
        });
        const aliasDeclar = exportNamedDeclaration(null, specifiers);
        exportDeclaration.insertAfter(aliasDeclar);
        exportDeclaration.replaceWith(declaration.node);
        return exportDeclaration;
      }
    }
  });

  // node_modules/@babel/helper-environment-visitor/lib/index.js
  var require_lib7 = __commonJS({
    "node_modules/@babel/helper-environment-visitor/lib/index.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.requeueComputedKeyAndDecorators = requeueComputedKeyAndDecorators;
      {
        exports.skipAllButComputedKey = function skipAllButComputedKey(path) {
          path.skip();
          if (path.node.computed) {
            path.context.maybeQueue(path.get("key"));
          }
        };
      }
      function requeueComputedKeyAndDecorators(path) {
        const {
          context,
          node
        } = path;
        if (node.computed) {
          context.maybeQueue(path.get("key"));
        }
        if (node.decorators) {
          for (const decorator of path.get("decorators")) {
            context.maybeQueue(decorator);
          }
        }
      }
      var visitor = {
        FunctionParent(path) {
          if (path.isArrowFunctionExpression()) {
            return;
          } else {
            path.skip();
            if (path.isMethod()) {
              requeueComputedKeyAndDecorators(path);
            }
          }
        },
        Property(path) {
          if (path.isObjectProperty()) {
            return;
          }
          path.skip();
          requeueComputedKeyAndDecorators(path);
        }
      };
      var _default = visitor;
      exports.default = _default;
    }
  });

  // node_modules/@babel/traverse/lib/scope/lib/renamer.js
  var require_renamer = __commonJS({
    "node_modules/@babel/traverse/lib/scope/lib/renamer.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _helperSplitExportDeclaration = require_lib6();
      var t2 = require_lib3();
      var _helperEnvironmentVisitor = require_lib7();
      var _traverseNode = require_traverse_node();
      var _visitors = require_visitors();
      var renameVisitor = {
        ReferencedIdentifier({
          node
        }, state) {
          if (node.name === state.oldName) {
            node.name = state.newName;
          }
        },
        Scope(path, state) {
          if (!path.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier)) {
            path.skip();
            if (path.isMethod()) {
              (0, _helperEnvironmentVisitor.requeueComputedKeyAndDecorators)(path);
            }
          }
        },
        ObjectProperty({
          node,
          scope
        }, state) {
          const {
            name
          } = node.key;
          if (node.shorthand && (name === state.oldName || name === state.newName) && scope.getBindingIdentifier(name) === state.binding.identifier) {
            var _node$extra;
            node.shorthand = false;
            if ((_node$extra = node.extra) != null && _node$extra.shorthand)
              node.extra.shorthand = false;
          }
        },
        "AssignmentExpression|Declaration|VariableDeclarator"(path, state) {
          if (path.isVariableDeclaration())
            return;
          const ids = path.getOuterBindingIdentifiers();
          for (const name in ids) {
            if (name === state.oldName)
              ids[name].name = state.newName;
          }
        }
      };
      var Renamer = class {
        constructor(binding, oldName, newName) {
          this.newName = newName;
          this.oldName = oldName;
          this.binding = binding;
        }
        maybeConvertFromExportDeclaration(parentDeclar) {
          const maybeExportDeclar = parentDeclar.parentPath;
          if (!maybeExportDeclar.isExportDeclaration()) {
            return;
          }
          if (maybeExportDeclar.isExportDefaultDeclaration()) {
            const {
              declaration
            } = maybeExportDeclar.node;
            if (t2.isDeclaration(declaration) && !declaration.id) {
              return;
            }
          }
          if (maybeExportDeclar.isExportAllDeclaration()) {
            return;
          }
          (0, _helperSplitExportDeclaration.default)(maybeExportDeclar);
        }
        maybeConvertFromClassFunctionDeclaration(path) {
          return path;
        }
        maybeConvertFromClassFunctionExpression(path) {
          return path;
        }
        rename() {
          const {
            binding,
            oldName,
            newName
          } = this;
          const {
            scope,
            path
          } = binding;
          const parentDeclar = path.find((path2) => path2.isDeclaration() || path2.isFunctionExpression() || path2.isClassExpression());
          if (parentDeclar) {
            const bindingIds = parentDeclar.getOuterBindingIdentifiers();
            if (bindingIds[oldName] === binding.identifier) {
              this.maybeConvertFromExportDeclaration(parentDeclar);
            }
          }
          const blockToTraverse = arguments[0] || scope.block;
          (0, _traverseNode.traverseNode)(blockToTraverse, (0, _visitors.explode)(renameVisitor), scope, this, scope.path, {
            discriminant: true
          });
          if (!arguments[0]) {
            scope.removeOwnBinding(oldName);
            scope.bindings[newName] = binding;
            this.binding.identifier.name = newName;
          }
          if (parentDeclar) {
            this.maybeConvertFromClassFunctionDeclaration(path);
            this.maybeConvertFromClassFunctionExpression(path);
          }
        }
      };
      exports.default = Renamer;
    }
  });

  // node_modules/@babel/traverse/lib/scope/binding.js
  var require_binding = __commonJS({
    "node_modules/@babel/traverse/lib/scope/binding.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var Binding = class {
        constructor({
          identifier,
          scope,
          path,
          kind
        }) {
          this.identifier = void 0;
          this.scope = void 0;
          this.path = void 0;
          this.kind = void 0;
          this.constantViolations = [];
          this.constant = true;
          this.referencePaths = [];
          this.referenced = false;
          this.references = 0;
          this.identifier = identifier;
          this.scope = scope;
          this.path = path;
          this.kind = kind;
          if ((kind === "var" || kind === "hoisted") && isDeclaredInLoop(path)) {
            this.reassign(path);
          }
          this.clearValue();
        }
        deoptValue() {
          this.clearValue();
          this.hasDeoptedValue = true;
        }
        setValue(value) {
          if (this.hasDeoptedValue)
            return;
          this.hasValue = true;
          this.value = value;
        }
        clearValue() {
          this.hasDeoptedValue = false;
          this.hasValue = false;
          this.value = null;
        }
        reassign(path) {
          this.constant = false;
          if (this.constantViolations.indexOf(path) !== -1) {
            return;
          }
          this.constantViolations.push(path);
        }
        reference(path) {
          if (this.referencePaths.indexOf(path) !== -1) {
            return;
          }
          this.referenced = true;
          this.references++;
          this.referencePaths.push(path);
        }
        dereference() {
          this.references--;
          this.referenced = !!this.references;
        }
      };
      exports.default = Binding;
      function isDeclaredInLoop(path) {
        for (let {
          parentPath,
          key
        } = path; parentPath; {
          parentPath,
          key
        } = parentPath) {
          if (parentPath.isFunctionParent())
            return false;
          if (parentPath.isWhile() || parentPath.isForXStatement() || parentPath.isForStatement() && key === "body") {
            return true;
          }
        }
        return false;
      }
    }
  });

  // node_modules/globals/globals.json
  var require_globals = __commonJS({
    "node_modules/globals/globals.json"(exports, module) {
      module.exports = {
        builtin: {
          Array: false,
          ArrayBuffer: false,
          Atomics: false,
          BigInt: false,
          BigInt64Array: false,
          BigUint64Array: false,
          Boolean: false,
          constructor: false,
          DataView: false,
          Date: false,
          decodeURI: false,
          decodeURIComponent: false,
          encodeURI: false,
          encodeURIComponent: false,
          Error: false,
          escape: false,
          eval: false,
          EvalError: false,
          Float32Array: false,
          Float64Array: false,
          Function: false,
          globalThis: false,
          hasOwnProperty: false,
          Infinity: false,
          Int16Array: false,
          Int32Array: false,
          Int8Array: false,
          isFinite: false,
          isNaN: false,
          isPrototypeOf: false,
          JSON: false,
          Map: false,
          Math: false,
          NaN: false,
          Number: false,
          Object: false,
          parseFloat: false,
          parseInt: false,
          Promise: false,
          propertyIsEnumerable: false,
          Proxy: false,
          RangeError: false,
          ReferenceError: false,
          Reflect: false,
          RegExp: false,
          Set: false,
          SharedArrayBuffer: false,
          String: false,
          Symbol: false,
          SyntaxError: false,
          toLocaleString: false,
          toString: false,
          TypeError: false,
          Uint16Array: false,
          Uint32Array: false,
          Uint8Array: false,
          Uint8ClampedArray: false,
          undefined: false,
          unescape: false,
          URIError: false,
          valueOf: false,
          WeakMap: false,
          WeakSet: false
        },
        es5: {
          Array: false,
          Boolean: false,
          constructor: false,
          Date: false,
          decodeURI: false,
          decodeURIComponent: false,
          encodeURI: false,
          encodeURIComponent: false,
          Error: false,
          escape: false,
          eval: false,
          EvalError: false,
          Function: false,
          hasOwnProperty: false,
          Infinity: false,
          isFinite: false,
          isNaN: false,
          isPrototypeOf: false,
          JSON: false,
          Math: false,
          NaN: false,
          Number: false,
          Object: false,
          parseFloat: false,
          parseInt: false,
          propertyIsEnumerable: false,
          RangeError: false,
          ReferenceError: false,
          RegExp: false,
          String: false,
          SyntaxError: false,
          toLocaleString: false,
          toString: false,
          TypeError: false,
          undefined: false,
          unescape: false,
          URIError: false,
          valueOf: false
        },
        es2015: {
          Array: false,
          ArrayBuffer: false,
          Boolean: false,
          constructor: false,
          DataView: false,
          Date: false,
          decodeURI: false,
          decodeURIComponent: false,
          encodeURI: false,
          encodeURIComponent: false,
          Error: false,
          escape: false,
          eval: false,
          EvalError: false,
          Float32Array: false,
          Float64Array: false,
          Function: false,
          hasOwnProperty: false,
          Infinity: false,
          Int16Array: false,
          Int32Array: false,
          Int8Array: false,
          isFinite: false,
          isNaN: false,
          isPrototypeOf: false,
          JSON: false,
          Map: false,
          Math: false,
          NaN: false,
          Number: false,
          Object: false,
          parseFloat: false,
          parseInt: false,
          Promise: false,
          propertyIsEnumerable: false,
          Proxy: false,
          RangeError: false,
          ReferenceError: false,
          Reflect: false,
          RegExp: false,
          Set: false,
          String: false,
          Symbol: false,
          SyntaxError: false,
          toLocaleString: false,
          toString: false,
          TypeError: false,
          Uint16Array: false,
          Uint32Array: false,
          Uint8Array: false,
          Uint8ClampedArray: false,
          undefined: false,
          unescape: false,
          URIError: false,
          valueOf: false,
          WeakMap: false,
          WeakSet: false
        },
        es2017: {
          Array: false,
          ArrayBuffer: false,
          Atomics: false,
          Boolean: false,
          constructor: false,
          DataView: false,
          Date: false,
          decodeURI: false,
          decodeURIComponent: false,
          encodeURI: false,
          encodeURIComponent: false,
          Error: false,
          escape: false,
          eval: false,
          EvalError: false,
          Float32Array: false,
          Float64Array: false,
          Function: false,
          hasOwnProperty: false,
          Infinity: false,
          Int16Array: false,
          Int32Array: false,
          Int8Array: false,
          isFinite: false,
          isNaN: false,
          isPrototypeOf: false,
          JSON: false,
          Map: false,
          Math: false,
          NaN: false,
          Number: false,
          Object: false,
          parseFloat: false,
          parseInt: false,
          Promise: false,
          propertyIsEnumerable: false,
          Proxy: false,
          RangeError: false,
          ReferenceError: false,
          Reflect: false,
          RegExp: false,
          Set: false,
          SharedArrayBuffer: false,
          String: false,
          Symbol: false,
          SyntaxError: false,
          toLocaleString: false,
          toString: false,
          TypeError: false,
          Uint16Array: false,
          Uint32Array: false,
          Uint8Array: false,
          Uint8ClampedArray: false,
          undefined: false,
          unescape: false,
          URIError: false,
          valueOf: false,
          WeakMap: false,
          WeakSet: false
        },
        browser: {
          AbortController: false,
          AbortSignal: false,
          addEventListener: false,
          alert: false,
          AnalyserNode: false,
          Animation: false,
          AnimationEffectReadOnly: false,
          AnimationEffectTiming: false,
          AnimationEffectTimingReadOnly: false,
          AnimationEvent: false,
          AnimationPlaybackEvent: false,
          AnimationTimeline: false,
          applicationCache: false,
          ApplicationCache: false,
          ApplicationCacheErrorEvent: false,
          atob: false,
          Attr: false,
          Audio: false,
          AudioBuffer: false,
          AudioBufferSourceNode: false,
          AudioContext: false,
          AudioDestinationNode: false,
          AudioListener: false,
          AudioNode: false,
          AudioParam: false,
          AudioProcessingEvent: false,
          AudioScheduledSourceNode: false,
          "AudioWorkletGlobalScope ": false,
          AudioWorkletNode: false,
          AudioWorkletProcessor: false,
          BarProp: false,
          BaseAudioContext: false,
          BatteryManager: false,
          BeforeUnloadEvent: false,
          BiquadFilterNode: false,
          Blob: false,
          BlobEvent: false,
          blur: false,
          BroadcastChannel: false,
          btoa: false,
          BudgetService: false,
          ByteLengthQueuingStrategy: false,
          Cache: false,
          caches: false,
          CacheStorage: false,
          cancelAnimationFrame: false,
          cancelIdleCallback: false,
          CanvasCaptureMediaStreamTrack: false,
          CanvasGradient: false,
          CanvasPattern: false,
          CanvasRenderingContext2D: false,
          ChannelMergerNode: false,
          ChannelSplitterNode: false,
          CharacterData: false,
          clearInterval: false,
          clearTimeout: false,
          clientInformation: false,
          ClipboardEvent: false,
          close: false,
          closed: false,
          CloseEvent: false,
          Comment: false,
          CompositionEvent: false,
          confirm: false,
          console: false,
          ConstantSourceNode: false,
          ConvolverNode: false,
          CountQueuingStrategy: false,
          createImageBitmap: false,
          Credential: false,
          CredentialsContainer: false,
          crypto: false,
          Crypto: false,
          CryptoKey: false,
          CSS: false,
          CSSConditionRule: false,
          CSSFontFaceRule: false,
          CSSGroupingRule: false,
          CSSImportRule: false,
          CSSKeyframeRule: false,
          CSSKeyframesRule: false,
          CSSMediaRule: false,
          CSSNamespaceRule: false,
          CSSPageRule: false,
          CSSRule: false,
          CSSRuleList: false,
          CSSStyleDeclaration: false,
          CSSStyleRule: false,
          CSSStyleSheet: false,
          CSSSupportsRule: false,
          CustomElementRegistry: false,
          customElements: false,
          CustomEvent: false,
          DataTransfer: false,
          DataTransferItem: false,
          DataTransferItemList: false,
          defaultstatus: false,
          defaultStatus: false,
          DelayNode: false,
          DeviceMotionEvent: false,
          DeviceOrientationEvent: false,
          devicePixelRatio: false,
          dispatchEvent: false,
          document: false,
          Document: false,
          DocumentFragment: false,
          DocumentType: false,
          DOMError: false,
          DOMException: false,
          DOMImplementation: false,
          DOMMatrix: false,
          DOMMatrixReadOnly: false,
          DOMParser: false,
          DOMPoint: false,
          DOMPointReadOnly: false,
          DOMQuad: false,
          DOMRect: false,
          DOMRectReadOnly: false,
          DOMStringList: false,
          DOMStringMap: false,
          DOMTokenList: false,
          DragEvent: false,
          DynamicsCompressorNode: false,
          Element: false,
          ErrorEvent: false,
          event: false,
          Event: false,
          EventSource: false,
          EventTarget: false,
          external: false,
          fetch: false,
          File: false,
          FileList: false,
          FileReader: false,
          find: false,
          focus: false,
          FocusEvent: false,
          FontFace: false,
          FontFaceSetLoadEvent: false,
          FormData: false,
          frameElement: false,
          frames: false,
          GainNode: false,
          Gamepad: false,
          GamepadButton: false,
          GamepadEvent: false,
          getComputedStyle: false,
          getSelection: false,
          HashChangeEvent: false,
          Headers: false,
          history: false,
          History: false,
          HTMLAllCollection: false,
          HTMLAnchorElement: false,
          HTMLAreaElement: false,
          HTMLAudioElement: false,
          HTMLBaseElement: false,
          HTMLBodyElement: false,
          HTMLBRElement: false,
          HTMLButtonElement: false,
          HTMLCanvasElement: false,
          HTMLCollection: false,
          HTMLContentElement: false,
          HTMLDataElement: false,
          HTMLDataListElement: false,
          HTMLDetailsElement: false,
          HTMLDialogElement: false,
          HTMLDirectoryElement: false,
          HTMLDivElement: false,
          HTMLDListElement: false,
          HTMLDocument: false,
          HTMLElement: false,
          HTMLEmbedElement: false,
          HTMLFieldSetElement: false,
          HTMLFontElement: false,
          HTMLFormControlsCollection: false,
          HTMLFormElement: false,
          HTMLFrameElement: false,
          HTMLFrameSetElement: false,
          HTMLHeadElement: false,
          HTMLHeadingElement: false,
          HTMLHRElement: false,
          HTMLHtmlElement: false,
          HTMLIFrameElement: false,
          HTMLImageElement: false,
          HTMLInputElement: false,
          HTMLLabelElement: false,
          HTMLLegendElement: false,
          HTMLLIElement: false,
          HTMLLinkElement: false,
          HTMLMapElement: false,
          HTMLMarqueeElement: false,
          HTMLMediaElement: false,
          HTMLMenuElement: false,
          HTMLMetaElement: false,
          HTMLMeterElement: false,
          HTMLModElement: false,
          HTMLObjectElement: false,
          HTMLOListElement: false,
          HTMLOptGroupElement: false,
          HTMLOptionElement: false,
          HTMLOptionsCollection: false,
          HTMLOutputElement: false,
          HTMLParagraphElement: false,
          HTMLParamElement: false,
          HTMLPictureElement: false,
          HTMLPreElement: false,
          HTMLProgressElement: false,
          HTMLQuoteElement: false,
          HTMLScriptElement: false,
          HTMLSelectElement: false,
          HTMLShadowElement: false,
          HTMLSlotElement: false,
          HTMLSourceElement: false,
          HTMLSpanElement: false,
          HTMLStyleElement: false,
          HTMLTableCaptionElement: false,
          HTMLTableCellElement: false,
          HTMLTableColElement: false,
          HTMLTableElement: false,
          HTMLTableRowElement: false,
          HTMLTableSectionElement: false,
          HTMLTemplateElement: false,
          HTMLTextAreaElement: false,
          HTMLTimeElement: false,
          HTMLTitleElement: false,
          HTMLTrackElement: false,
          HTMLUListElement: false,
          HTMLUnknownElement: false,
          HTMLVideoElement: false,
          IDBCursor: false,
          IDBCursorWithValue: false,
          IDBDatabase: false,
          IDBFactory: false,
          IDBIndex: false,
          IDBKeyRange: false,
          IDBObjectStore: false,
          IDBOpenDBRequest: false,
          IDBRequest: false,
          IDBTransaction: false,
          IDBVersionChangeEvent: false,
          IdleDeadline: false,
          IIRFilterNode: false,
          Image: false,
          ImageBitmap: false,
          ImageBitmapRenderingContext: false,
          ImageCapture: false,
          ImageData: false,
          indexedDB: false,
          innerHeight: false,
          innerWidth: false,
          InputEvent: false,
          IntersectionObserver: false,
          IntersectionObserverEntry: false,
          Intl: false,
          isSecureContext: false,
          KeyboardEvent: false,
          KeyframeEffect: false,
          KeyframeEffectReadOnly: false,
          length: false,
          localStorage: false,
          location: true,
          Location: false,
          locationbar: false,
          matchMedia: false,
          MediaDeviceInfo: false,
          MediaDevices: false,
          MediaElementAudioSourceNode: false,
          MediaEncryptedEvent: false,
          MediaError: false,
          MediaKeyMessageEvent: false,
          MediaKeySession: false,
          MediaKeyStatusMap: false,
          MediaKeySystemAccess: false,
          MediaList: false,
          MediaQueryList: false,
          MediaQueryListEvent: false,
          MediaRecorder: false,
          MediaSettingsRange: false,
          MediaSource: false,
          MediaStream: false,
          MediaStreamAudioDestinationNode: false,
          MediaStreamAudioSourceNode: false,
          MediaStreamEvent: false,
          MediaStreamTrack: false,
          MediaStreamTrackEvent: false,
          menubar: false,
          MessageChannel: false,
          MessageEvent: false,
          MessagePort: false,
          MIDIAccess: false,
          MIDIConnectionEvent: false,
          MIDIInput: false,
          MIDIInputMap: false,
          MIDIMessageEvent: false,
          MIDIOutput: false,
          MIDIOutputMap: false,
          MIDIPort: false,
          MimeType: false,
          MimeTypeArray: false,
          MouseEvent: false,
          moveBy: false,
          moveTo: false,
          MutationEvent: false,
          MutationObserver: false,
          MutationRecord: false,
          name: false,
          NamedNodeMap: false,
          NavigationPreloadManager: false,
          navigator: false,
          Navigator: false,
          NetworkInformation: false,
          Node: false,
          NodeFilter: false,
          NodeIterator: false,
          NodeList: false,
          Notification: false,
          OfflineAudioCompletionEvent: false,
          OfflineAudioContext: false,
          offscreenBuffering: false,
          OffscreenCanvas: true,
          onabort: true,
          onafterprint: true,
          onanimationend: true,
          onanimationiteration: true,
          onanimationstart: true,
          onappinstalled: true,
          onauxclick: true,
          onbeforeinstallprompt: true,
          onbeforeprint: true,
          onbeforeunload: true,
          onblur: true,
          oncancel: true,
          oncanplay: true,
          oncanplaythrough: true,
          onchange: true,
          onclick: true,
          onclose: true,
          oncontextmenu: true,
          oncuechange: true,
          ondblclick: true,
          ondevicemotion: true,
          ondeviceorientation: true,
          ondeviceorientationabsolute: true,
          ondrag: true,
          ondragend: true,
          ondragenter: true,
          ondragleave: true,
          ondragover: true,
          ondragstart: true,
          ondrop: true,
          ondurationchange: true,
          onemptied: true,
          onended: true,
          onerror: true,
          onfocus: true,
          ongotpointercapture: true,
          onhashchange: true,
          oninput: true,
          oninvalid: true,
          onkeydown: true,
          onkeypress: true,
          onkeyup: true,
          onlanguagechange: true,
          onload: true,
          onloadeddata: true,
          onloadedmetadata: true,
          onloadstart: true,
          onlostpointercapture: true,
          onmessage: true,
          onmessageerror: true,
          onmousedown: true,
          onmouseenter: true,
          onmouseleave: true,
          onmousemove: true,
          onmouseout: true,
          onmouseover: true,
          onmouseup: true,
          onmousewheel: true,
          onoffline: true,
          ononline: true,
          onpagehide: true,
          onpageshow: true,
          onpause: true,
          onplay: true,
          onplaying: true,
          onpointercancel: true,
          onpointerdown: true,
          onpointerenter: true,
          onpointerleave: true,
          onpointermove: true,
          onpointerout: true,
          onpointerover: true,
          onpointerup: true,
          onpopstate: true,
          onprogress: true,
          onratechange: true,
          onrejectionhandled: true,
          onreset: true,
          onresize: true,
          onscroll: true,
          onsearch: true,
          onseeked: true,
          onseeking: true,
          onselect: true,
          onstalled: true,
          onstorage: true,
          onsubmit: true,
          onsuspend: true,
          ontimeupdate: true,
          ontoggle: true,
          ontransitionend: true,
          onunhandledrejection: true,
          onunload: true,
          onvolumechange: true,
          onwaiting: true,
          onwheel: true,
          open: false,
          openDatabase: false,
          opener: false,
          Option: false,
          origin: false,
          OscillatorNode: false,
          outerHeight: false,
          outerWidth: false,
          PageTransitionEvent: false,
          pageXOffset: false,
          pageYOffset: false,
          PannerNode: false,
          parent: false,
          Path2D: false,
          PaymentAddress: false,
          PaymentRequest: false,
          PaymentRequestUpdateEvent: false,
          PaymentResponse: false,
          performance: false,
          Performance: false,
          PerformanceEntry: false,
          PerformanceLongTaskTiming: false,
          PerformanceMark: false,
          PerformanceMeasure: false,
          PerformanceNavigation: false,
          PerformanceNavigationTiming: false,
          PerformanceObserver: false,
          PerformanceObserverEntryList: false,
          PerformancePaintTiming: false,
          PerformanceResourceTiming: false,
          PerformanceTiming: false,
          PeriodicWave: false,
          Permissions: false,
          PermissionStatus: false,
          personalbar: false,
          PhotoCapabilities: false,
          Plugin: false,
          PluginArray: false,
          PointerEvent: false,
          PopStateEvent: false,
          postMessage: false,
          Presentation: false,
          PresentationAvailability: false,
          PresentationConnection: false,
          PresentationConnectionAvailableEvent: false,
          PresentationConnectionCloseEvent: false,
          PresentationConnectionList: false,
          PresentationReceiver: false,
          PresentationRequest: false,
          print: false,
          ProcessingInstruction: false,
          ProgressEvent: false,
          PromiseRejectionEvent: false,
          prompt: false,
          PushManager: false,
          PushSubscription: false,
          PushSubscriptionOptions: false,
          queueMicrotask: false,
          RadioNodeList: false,
          Range: false,
          ReadableStream: false,
          registerProcessor: false,
          RemotePlayback: false,
          removeEventListener: false,
          Request: false,
          requestAnimationFrame: false,
          requestIdleCallback: false,
          resizeBy: false,
          ResizeObserver: false,
          ResizeObserverEntry: false,
          resizeTo: false,
          Response: false,
          RTCCertificate: false,
          RTCDataChannel: false,
          RTCDataChannelEvent: false,
          RTCDtlsTransport: false,
          RTCIceCandidate: false,
          RTCIceGatherer: false,
          RTCIceTransport: false,
          RTCPeerConnection: false,
          RTCPeerConnectionIceEvent: false,
          RTCRtpContributingSource: false,
          RTCRtpReceiver: false,
          RTCRtpSender: false,
          RTCSctpTransport: false,
          RTCSessionDescription: false,
          RTCStatsReport: false,
          RTCTrackEvent: false,
          screen: false,
          Screen: false,
          screenLeft: false,
          ScreenOrientation: false,
          screenTop: false,
          screenX: false,
          screenY: false,
          ScriptProcessorNode: false,
          scroll: false,
          scrollbars: false,
          scrollBy: false,
          scrollTo: false,
          scrollX: false,
          scrollY: false,
          SecurityPolicyViolationEvent: false,
          Selection: false,
          self: false,
          ServiceWorker: false,
          ServiceWorkerContainer: false,
          ServiceWorkerRegistration: false,
          sessionStorage: false,
          setInterval: false,
          setTimeout: false,
          ShadowRoot: false,
          SharedWorker: false,
          SourceBuffer: false,
          SourceBufferList: false,
          speechSynthesis: false,
          SpeechSynthesisEvent: false,
          SpeechSynthesisUtterance: false,
          StaticRange: false,
          status: false,
          statusbar: false,
          StereoPannerNode: false,
          stop: false,
          Storage: false,
          StorageEvent: false,
          StorageManager: false,
          styleMedia: false,
          StyleSheet: false,
          StyleSheetList: false,
          SubtleCrypto: false,
          SVGAElement: false,
          SVGAngle: false,
          SVGAnimatedAngle: false,
          SVGAnimatedBoolean: false,
          SVGAnimatedEnumeration: false,
          SVGAnimatedInteger: false,
          SVGAnimatedLength: false,
          SVGAnimatedLengthList: false,
          SVGAnimatedNumber: false,
          SVGAnimatedNumberList: false,
          SVGAnimatedPreserveAspectRatio: false,
          SVGAnimatedRect: false,
          SVGAnimatedString: false,
          SVGAnimatedTransformList: false,
          SVGAnimateElement: false,
          SVGAnimateMotionElement: false,
          SVGAnimateTransformElement: false,
          SVGAnimationElement: false,
          SVGCircleElement: false,
          SVGClipPathElement: false,
          SVGComponentTransferFunctionElement: false,
          SVGDefsElement: false,
          SVGDescElement: false,
          SVGDiscardElement: false,
          SVGElement: false,
          SVGEllipseElement: false,
          SVGFEBlendElement: false,
          SVGFEColorMatrixElement: false,
          SVGFEComponentTransferElement: false,
          SVGFECompositeElement: false,
          SVGFEConvolveMatrixElement: false,
          SVGFEDiffuseLightingElement: false,
          SVGFEDisplacementMapElement: false,
          SVGFEDistantLightElement: false,
          SVGFEDropShadowElement: false,
          SVGFEFloodElement: false,
          SVGFEFuncAElement: false,
          SVGFEFuncBElement: false,
          SVGFEFuncGElement: false,
          SVGFEFuncRElement: false,
          SVGFEGaussianBlurElement: false,
          SVGFEImageElement: false,
          SVGFEMergeElement: false,
          SVGFEMergeNodeElement: false,
          SVGFEMorphologyElement: false,
          SVGFEOffsetElement: false,
          SVGFEPointLightElement: false,
          SVGFESpecularLightingElement: false,
          SVGFESpotLightElement: false,
          SVGFETileElement: false,
          SVGFETurbulenceElement: false,
          SVGFilterElement: false,
          SVGForeignObjectElement: false,
          SVGGElement: false,
          SVGGeometryElement: false,
          SVGGradientElement: false,
          SVGGraphicsElement: false,
          SVGImageElement: false,
          SVGLength: false,
          SVGLengthList: false,
          SVGLinearGradientElement: false,
          SVGLineElement: false,
          SVGMarkerElement: false,
          SVGMaskElement: false,
          SVGMatrix: false,
          SVGMetadataElement: false,
          SVGMPathElement: false,
          SVGNumber: false,
          SVGNumberList: false,
          SVGPathElement: false,
          SVGPatternElement: false,
          SVGPoint: false,
          SVGPointList: false,
          SVGPolygonElement: false,
          SVGPolylineElement: false,
          SVGPreserveAspectRatio: false,
          SVGRadialGradientElement: false,
          SVGRect: false,
          SVGRectElement: false,
          SVGScriptElement: false,
          SVGSetElement: false,
          SVGStopElement: false,
          SVGStringList: false,
          SVGStyleElement: false,
          SVGSVGElement: false,
          SVGSwitchElement: false,
          SVGSymbolElement: false,
          SVGTextContentElement: false,
          SVGTextElement: false,
          SVGTextPathElement: false,
          SVGTextPositioningElement: false,
          SVGTitleElement: false,
          SVGTransform: false,
          SVGTransformList: false,
          SVGTSpanElement: false,
          SVGUnitTypes: false,
          SVGUseElement: false,
          SVGViewElement: false,
          TaskAttributionTiming: false,
          Text: false,
          TextDecoder: false,
          TextEncoder: false,
          TextEvent: false,
          TextMetrics: false,
          TextTrack: false,
          TextTrackCue: false,
          TextTrackCueList: false,
          TextTrackList: false,
          TimeRanges: false,
          toolbar: false,
          top: false,
          Touch: false,
          TouchEvent: false,
          TouchList: false,
          TrackEvent: false,
          TransitionEvent: false,
          TreeWalker: false,
          UIEvent: false,
          URL: false,
          URLSearchParams: false,
          ValidityState: false,
          visualViewport: false,
          VisualViewport: false,
          VTTCue: false,
          WaveShaperNode: false,
          WebAssembly: false,
          WebGL2RenderingContext: false,
          WebGLActiveInfo: false,
          WebGLBuffer: false,
          WebGLContextEvent: false,
          WebGLFramebuffer: false,
          WebGLProgram: false,
          WebGLQuery: false,
          WebGLRenderbuffer: false,
          WebGLRenderingContext: false,
          WebGLSampler: false,
          WebGLShader: false,
          WebGLShaderPrecisionFormat: false,
          WebGLSync: false,
          WebGLTexture: false,
          WebGLTransformFeedback: false,
          WebGLUniformLocation: false,
          WebGLVertexArrayObject: false,
          WebSocket: false,
          WheelEvent: false,
          window: false,
          Window: false,
          Worker: false,
          WritableStream: false,
          XMLDocument: false,
          XMLHttpRequest: false,
          XMLHttpRequestEventTarget: false,
          XMLHttpRequestUpload: false,
          XMLSerializer: false,
          XPathEvaluator: false,
          XPathExpression: false,
          XPathResult: false,
          XSLTProcessor: false
        },
        worker: {
          addEventListener: false,
          applicationCache: false,
          atob: false,
          Blob: false,
          BroadcastChannel: false,
          btoa: false,
          Cache: false,
          caches: false,
          clearInterval: false,
          clearTimeout: false,
          close: true,
          console: false,
          fetch: false,
          FileReaderSync: false,
          FormData: false,
          Headers: false,
          IDBCursor: false,
          IDBCursorWithValue: false,
          IDBDatabase: false,
          IDBFactory: false,
          IDBIndex: false,
          IDBKeyRange: false,
          IDBObjectStore: false,
          IDBOpenDBRequest: false,
          IDBRequest: false,
          IDBTransaction: false,
          IDBVersionChangeEvent: false,
          ImageData: false,
          importScripts: true,
          indexedDB: false,
          location: false,
          MessageChannel: false,
          MessagePort: false,
          name: false,
          navigator: false,
          Notification: false,
          onclose: true,
          onconnect: true,
          onerror: true,
          onlanguagechange: true,
          onmessage: true,
          onoffline: true,
          ononline: true,
          onrejectionhandled: true,
          onunhandledrejection: true,
          performance: false,
          Performance: false,
          PerformanceEntry: false,
          PerformanceMark: false,
          PerformanceMeasure: false,
          PerformanceNavigation: false,
          PerformanceResourceTiming: false,
          PerformanceTiming: false,
          postMessage: true,
          Promise: false,
          queueMicrotask: false,
          removeEventListener: false,
          Request: false,
          Response: false,
          self: true,
          ServiceWorkerRegistration: false,
          setInterval: false,
          setTimeout: false,
          TextDecoder: false,
          TextEncoder: false,
          URL: false,
          URLSearchParams: false,
          WebSocket: false,
          Worker: false,
          WorkerGlobalScope: false,
          XMLHttpRequest: false
        },
        node: {
          __dirname: false,
          __filename: false,
          Buffer: false,
          clearImmediate: false,
          clearInterval: false,
          clearTimeout: false,
          console: false,
          exports: true,
          global: false,
          Intl: false,
          module: false,
          process: false,
          queueMicrotask: false,
          require: false,
          setImmediate: false,
          setInterval: false,
          setTimeout: false,
          TextDecoder: false,
          TextEncoder: false,
          URL: false,
          URLSearchParams: false
        },
        commonjs: {
          exports: true,
          global: false,
          module: false,
          require: false
        },
        amd: {
          define: false,
          require: false
        },
        mocha: {
          after: false,
          afterEach: false,
          before: false,
          beforeEach: false,
          context: false,
          describe: false,
          it: false,
          mocha: false,
          run: false,
          setup: false,
          specify: false,
          suite: false,
          suiteSetup: false,
          suiteTeardown: false,
          teardown: false,
          test: false,
          xcontext: false,
          xdescribe: false,
          xit: false,
          xspecify: false
        },
        jasmine: {
          afterAll: false,
          afterEach: false,
          beforeAll: false,
          beforeEach: false,
          describe: false,
          expect: false,
          fail: false,
          fdescribe: false,
          fit: false,
          it: false,
          jasmine: false,
          pending: false,
          runs: false,
          spyOn: false,
          spyOnProperty: false,
          waits: false,
          waitsFor: false,
          xdescribe: false,
          xit: false
        },
        jest: {
          afterAll: false,
          afterEach: false,
          beforeAll: false,
          beforeEach: false,
          describe: false,
          expect: false,
          fdescribe: false,
          fit: false,
          it: false,
          jest: false,
          pit: false,
          require: false,
          test: false,
          xdescribe: false,
          xit: false,
          xtest: false
        },
        qunit: {
          asyncTest: false,
          deepEqual: false,
          equal: false,
          expect: false,
          module: false,
          notDeepEqual: false,
          notEqual: false,
          notOk: false,
          notPropEqual: false,
          notStrictEqual: false,
          ok: false,
          propEqual: false,
          QUnit: false,
          raises: false,
          start: false,
          stop: false,
          strictEqual: false,
          test: false,
          throws: false
        },
        phantomjs: {
          console: true,
          exports: true,
          phantom: true,
          require: true,
          WebPage: true
        },
        couch: {
          emit: false,
          exports: false,
          getRow: false,
          log: false,
          module: false,
          provides: false,
          require: false,
          respond: false,
          send: false,
          start: false,
          sum: false
        },
        rhino: {
          defineClass: false,
          deserialize: false,
          gc: false,
          help: false,
          importClass: false,
          importPackage: false,
          java: false,
          load: false,
          loadClass: false,
          Packages: false,
          print: false,
          quit: false,
          readFile: false,
          readUrl: false,
          runCommand: false,
          seal: false,
          serialize: false,
          spawn: false,
          sync: false,
          toint32: false,
          version: false
        },
        nashorn: {
          __DIR__: false,
          __FILE__: false,
          __LINE__: false,
          com: false,
          edu: false,
          exit: false,
          java: false,
          Java: false,
          javafx: false,
          JavaImporter: false,
          javax: false,
          JSAdapter: false,
          load: false,
          loadWithNewGlobal: false,
          org: false,
          Packages: false,
          print: false,
          quit: false
        },
        wsh: {
          ActiveXObject: true,
          Enumerator: true,
          GetObject: true,
          ScriptEngine: true,
          ScriptEngineBuildVersion: true,
          ScriptEngineMajorVersion: true,
          ScriptEngineMinorVersion: true,
          VBArray: true,
          WScript: true,
          WSH: true,
          XDomainRequest: true
        },
        jquery: {
          $: false,
          jQuery: false
        },
        yui: {
          YAHOO: false,
          YAHOO_config: false,
          YUI: false,
          YUI_config: false
        },
        shelljs: {
          cat: false,
          cd: false,
          chmod: false,
          config: false,
          cp: false,
          dirs: false,
          echo: false,
          env: false,
          error: false,
          exec: false,
          exit: false,
          find: false,
          grep: false,
          ln: false,
          ls: false,
          mkdir: false,
          mv: false,
          popd: false,
          pushd: false,
          pwd: false,
          rm: false,
          sed: false,
          set: false,
          target: false,
          tempdir: false,
          test: false,
          touch: false,
          which: false
        },
        prototypejs: {
          $: false,
          $$: false,
          $A: false,
          $break: false,
          $continue: false,
          $F: false,
          $H: false,
          $R: false,
          $w: false,
          Abstract: false,
          Ajax: false,
          Autocompleter: false,
          Builder: false,
          Class: false,
          Control: false,
          Draggable: false,
          Draggables: false,
          Droppables: false,
          Effect: false,
          Element: false,
          Enumerable: false,
          Event: false,
          Field: false,
          Form: false,
          Hash: false,
          Insertion: false,
          ObjectRange: false,
          PeriodicalExecuter: false,
          Position: false,
          Prototype: false,
          Scriptaculous: false,
          Selector: false,
          Sortable: false,
          SortableObserver: false,
          Sound: false,
          Template: false,
          Toggle: false,
          Try: false
        },
        meteor: {
          _: false,
          $: false,
          Accounts: false,
          AccountsClient: false,
          AccountsCommon: false,
          AccountsServer: false,
          App: false,
          Assets: false,
          Blaze: false,
          check: false,
          Cordova: false,
          DDP: false,
          DDPRateLimiter: false,
          DDPServer: false,
          Deps: false,
          EJSON: false,
          Email: false,
          HTTP: false,
          Log: false,
          Match: false,
          Meteor: false,
          Mongo: false,
          MongoInternals: false,
          Npm: false,
          Package: false,
          Plugin: false,
          process: false,
          Random: false,
          ReactiveDict: false,
          ReactiveVar: false,
          Router: false,
          ServiceConfiguration: false,
          Session: false,
          share: false,
          Spacebars: false,
          Template: false,
          Tinytest: false,
          Tracker: false,
          UI: false,
          Utils: false,
          WebApp: false,
          WebAppInternals: false
        },
        mongo: {
          _isWindows: false,
          _rand: false,
          BulkWriteResult: false,
          cat: false,
          cd: false,
          connect: false,
          db: false,
          getHostName: false,
          getMemInfo: false,
          hostname: false,
          ISODate: false,
          listFiles: false,
          load: false,
          ls: false,
          md5sumFile: false,
          mkdir: false,
          Mongo: false,
          NumberInt: false,
          NumberLong: false,
          ObjectId: false,
          PlanCache: false,
          print: false,
          printjson: false,
          pwd: false,
          quit: false,
          removeFile: false,
          rs: false,
          sh: false,
          UUID: false,
          version: false,
          WriteResult: false
        },
        applescript: {
          $: false,
          Application: false,
          Automation: false,
          console: false,
          delay: false,
          Library: false,
          ObjC: false,
          ObjectSpecifier: false,
          Path: false,
          Progress: false,
          Ref: false
        },
        serviceworker: {
          addEventListener: false,
          applicationCache: false,
          atob: false,
          Blob: false,
          BroadcastChannel: false,
          btoa: false,
          Cache: false,
          caches: false,
          CacheStorage: false,
          clearInterval: false,
          clearTimeout: false,
          Client: false,
          clients: false,
          Clients: false,
          close: true,
          console: false,
          ExtendableEvent: false,
          ExtendableMessageEvent: false,
          fetch: false,
          FetchEvent: false,
          FileReaderSync: false,
          FormData: false,
          Headers: false,
          IDBCursor: false,
          IDBCursorWithValue: false,
          IDBDatabase: false,
          IDBFactory: false,
          IDBIndex: false,
          IDBKeyRange: false,
          IDBObjectStore: false,
          IDBOpenDBRequest: false,
          IDBRequest: false,
          IDBTransaction: false,
          IDBVersionChangeEvent: false,
          ImageData: false,
          importScripts: false,
          indexedDB: false,
          location: false,
          MessageChannel: false,
          MessagePort: false,
          name: false,
          navigator: false,
          Notification: false,
          onclose: true,
          onconnect: true,
          onerror: true,
          onfetch: true,
          oninstall: true,
          onlanguagechange: true,
          onmessage: true,
          onmessageerror: true,
          onnotificationclick: true,
          onnotificationclose: true,
          onoffline: true,
          ononline: true,
          onpush: true,
          onpushsubscriptionchange: true,
          onrejectionhandled: true,
          onsync: true,
          onunhandledrejection: true,
          performance: false,
          Performance: false,
          PerformanceEntry: false,
          PerformanceMark: false,
          PerformanceMeasure: false,
          PerformanceNavigation: false,
          PerformanceResourceTiming: false,
          PerformanceTiming: false,
          postMessage: true,
          Promise: false,
          queueMicrotask: false,
          registration: false,
          removeEventListener: false,
          Request: false,
          Response: false,
          self: false,
          ServiceWorker: false,
          ServiceWorkerContainer: false,
          ServiceWorkerGlobalScope: false,
          ServiceWorkerMessageEvent: false,
          ServiceWorkerRegistration: false,
          setInterval: false,
          setTimeout: false,
          skipWaiting: false,
          TextDecoder: false,
          TextEncoder: false,
          URL: false,
          URLSearchParams: false,
          WebSocket: false,
          WindowClient: false,
          Worker: false,
          WorkerGlobalScope: false,
          XMLHttpRequest: false
        },
        atomtest: {
          advanceClock: false,
          fakeClearInterval: false,
          fakeClearTimeout: false,
          fakeSetInterval: false,
          fakeSetTimeout: false,
          resetTimeouts: false,
          waitsForPromise: false
        },
        embertest: {
          andThen: false,
          click: false,
          currentPath: false,
          currentRouteName: false,
          currentURL: false,
          fillIn: false,
          find: false,
          findAll: false,
          findWithAssert: false,
          keyEvent: false,
          pauseTest: false,
          resumeTest: false,
          triggerEvent: false,
          visit: false,
          wait: false
        },
        protractor: {
          $: false,
          $$: false,
          browser: false,
          by: false,
          By: false,
          DartObject: false,
          element: false,
          protractor: false
        },
        "shared-node-browser": {
          clearInterval: false,
          clearTimeout: false,
          console: false,
          setInterval: false,
          setTimeout: false,
          URL: false,
          URLSearchParams: false
        },
        webextensions: {
          browser: false,
          chrome: false,
          opr: false
        },
        greasemonkey: {
          cloneInto: false,
          createObjectIn: false,
          exportFunction: false,
          GM: false,
          GM_addStyle: false,
          GM_deleteValue: false,
          GM_getResourceText: false,
          GM_getResourceURL: false,
          GM_getValue: false,
          GM_info: false,
          GM_listValues: false,
          GM_log: false,
          GM_openInTab: false,
          GM_registerMenuCommand: false,
          GM_setClipboard: false,
          GM_setValue: false,
          GM_xmlhttpRequest: false,
          unsafeWindow: false
        },
        devtools: {
          $: false,
          $_: false,
          $$: false,
          $0: false,
          $1: false,
          $2: false,
          $3: false,
          $4: false,
          $x: false,
          chrome: false,
          clear: false,
          copy: false,
          debug: false,
          dir: false,
          dirxml: false,
          getEventListeners: false,
          inspect: false,
          keys: false,
          monitor: false,
          monitorEvents: false,
          profile: false,
          profileEnd: false,
          queryObjects: false,
          table: false,
          undebug: false,
          unmonitor: false,
          unmonitorEvents: false,
          values: false
        }
      };
    }
  });

  // node_modules/globals/index.js
  var require_globals2 = __commonJS({
    "node_modules/globals/index.js"(exports, module) {
      "use strict";
      init_esbuild_inject();
      module.exports = require_globals();
    }
  });

  // node_modules/@babel/traverse/lib/scope/index.js
  var require_scope = __commonJS({
    "node_modules/@babel/traverse/lib/scope/index.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _renamer = require_renamer();
      var _index = require_lib13();
      var _binding = require_binding();
      var _globals = require_globals2();
      var _t = require_lib3();
      var t2 = _t;
      var _cache = require_cache();
      var _visitors = require_visitors();
      var {
        NOT_LOCAL_BINDING,
        callExpression,
        cloneNode,
        getBindingIdentifiers,
        identifier,
        isArrayExpression,
        isBinary,
        isClass,
        isClassBody,
        isClassDeclaration,
        isExportAllDeclaration,
        isExportDefaultDeclaration,
        isExportNamedDeclaration,
        isFunctionDeclaration,
        isIdentifier,
        isImportDeclaration,
        isLiteral,
        isMethod,
        isModuleSpecifier,
        isNullLiteral,
        isObjectExpression,
        isProperty,
        isPureish,
        isRegExpLiteral,
        isSuper,
        isTaggedTemplateExpression,
        isTemplateLiteral,
        isThisExpression,
        isUnaryExpression,
        isVariableDeclaration,
        matchesPattern,
        memberExpression,
        numericLiteral,
        toIdentifier,
        variableDeclaration,
        variableDeclarator,
        isRecordExpression,
        isTupleExpression,
        isObjectProperty,
        isTopicReference,
        isMetaProperty,
        isPrivateName,
        isExportDeclaration,
        buildUndefinedNode
      } = _t;
      function gatherNodeParts(node, parts) {
        switch (node == null ? void 0 : node.type) {
          default:
            if (isImportDeclaration(node) || isExportDeclaration(node)) {
              var _node$specifiers;
              if ((isExportAllDeclaration(node) || isExportNamedDeclaration(node) || isImportDeclaration(node)) && node.source) {
                gatherNodeParts(node.source, parts);
              } else if ((isExportNamedDeclaration(node) || isImportDeclaration(node)) && (_node$specifiers = node.specifiers) != null && _node$specifiers.length) {
                for (const e of node.specifiers)
                  gatherNodeParts(e, parts);
              } else if ((isExportDefaultDeclaration(node) || isExportNamedDeclaration(node)) && node.declaration) {
                gatherNodeParts(node.declaration, parts);
              }
            } else if (isModuleSpecifier(node)) {
              gatherNodeParts(node.local, parts);
            } else if (isLiteral(node) && !isNullLiteral(node) && !isRegExpLiteral(node) && !isTemplateLiteral(node)) {
              parts.push(node.value);
            }
            break;
          case "MemberExpression":
          case "OptionalMemberExpression":
          case "JSXMemberExpression":
            gatherNodeParts(node.object, parts);
            gatherNodeParts(node.property, parts);
            break;
          case "Identifier":
          case "JSXIdentifier":
            parts.push(node.name);
            break;
          case "CallExpression":
          case "OptionalCallExpression":
          case "NewExpression":
            gatherNodeParts(node.callee, parts);
            break;
          case "ObjectExpression":
          case "ObjectPattern":
            for (const e of node.properties) {
              gatherNodeParts(e, parts);
            }
            break;
          case "SpreadElement":
          case "RestElement":
            gatherNodeParts(node.argument, parts);
            break;
          case "ObjectProperty":
          case "ObjectMethod":
          case "ClassProperty":
          case "ClassMethod":
          case "ClassPrivateProperty":
          case "ClassPrivateMethod":
            gatherNodeParts(node.key, parts);
            break;
          case "ThisExpression":
            parts.push("this");
            break;
          case "Super":
            parts.push("super");
            break;
          case "Import":
            parts.push("import");
            break;
          case "DoExpression":
            parts.push("do");
            break;
          case "YieldExpression":
            parts.push("yield");
            gatherNodeParts(node.argument, parts);
            break;
          case "AwaitExpression":
            parts.push("await");
            gatherNodeParts(node.argument, parts);
            break;
          case "AssignmentExpression":
            gatherNodeParts(node.left, parts);
            break;
          case "VariableDeclarator":
            gatherNodeParts(node.id, parts);
            break;
          case "FunctionExpression":
          case "FunctionDeclaration":
          case "ClassExpression":
          case "ClassDeclaration":
            gatherNodeParts(node.id, parts);
            break;
          case "PrivateName":
            gatherNodeParts(node.id, parts);
            break;
          case "ParenthesizedExpression":
            gatherNodeParts(node.expression, parts);
            break;
          case "UnaryExpression":
          case "UpdateExpression":
            gatherNodeParts(node.argument, parts);
            break;
          case "MetaProperty":
            gatherNodeParts(node.meta, parts);
            gatherNodeParts(node.property, parts);
            break;
          case "JSXElement":
            gatherNodeParts(node.openingElement, parts);
            break;
          case "JSXOpeningElement":
            gatherNodeParts(node.name, parts);
            break;
          case "JSXFragment":
            gatherNodeParts(node.openingFragment, parts);
            break;
          case "JSXOpeningFragment":
            parts.push("Fragment");
            break;
          case "JSXNamespacedName":
            gatherNodeParts(node.namespace, parts);
            gatherNodeParts(node.name, parts);
            break;
        }
      }
      var collectorVisitor = {
        ForStatement(path) {
          const declar = path.get("init");
          if (declar.isVar()) {
            const {
              scope
            } = path;
            const parentScope = scope.getFunctionParent() || scope.getProgramParent();
            parentScope.registerBinding("var", declar);
          }
        },
        Declaration(path) {
          if (path.isBlockScoped())
            return;
          if (path.isImportDeclaration())
            return;
          if (path.isExportDeclaration())
            return;
          const parent = path.scope.getFunctionParent() || path.scope.getProgramParent();
          parent.registerDeclaration(path);
        },
        ImportDeclaration(path) {
          const parent = path.scope.getBlockParent();
          parent.registerDeclaration(path);
        },
        ReferencedIdentifier(path, state) {
          state.references.push(path);
        },
        ForXStatement(path, state) {
          const left = path.get("left");
          if (left.isPattern() || left.isIdentifier()) {
            state.constantViolations.push(path);
          } else if (left.isVar()) {
            const {
              scope
            } = path;
            const parentScope = scope.getFunctionParent() || scope.getProgramParent();
            parentScope.registerBinding("var", left);
          }
        },
        ExportDeclaration: {
          exit(path) {
            const {
              node,
              scope
            } = path;
            if (isExportAllDeclaration(node))
              return;
            const declar = node.declaration;
            if (isClassDeclaration(declar) || isFunctionDeclaration(declar)) {
              const id = declar.id;
              if (!id)
                return;
              const binding = scope.getBinding(id.name);
              binding == null || binding.reference(path);
            } else if (isVariableDeclaration(declar)) {
              for (const decl of declar.declarations) {
                for (const name of Object.keys(getBindingIdentifiers(decl))) {
                  const binding = scope.getBinding(name);
                  binding == null || binding.reference(path);
                }
              }
            }
          }
        },
        LabeledStatement(path) {
          path.scope.getBlockParent().registerDeclaration(path);
        },
        AssignmentExpression(path, state) {
          state.assignments.push(path);
        },
        UpdateExpression(path, state) {
          state.constantViolations.push(path);
        },
        UnaryExpression(path, state) {
          if (path.node.operator === "delete") {
            state.constantViolations.push(path);
          }
        },
        BlockScoped(path) {
          let scope = path.scope;
          if (scope.path === path)
            scope = scope.parent;
          const parent = scope.getBlockParent();
          parent.registerDeclaration(path);
          if (path.isClassDeclaration() && path.node.id) {
            const id = path.node.id;
            const name = id.name;
            path.scope.bindings[name] = path.scope.parent.getBinding(name);
          }
        },
        CatchClause(path) {
          path.scope.registerBinding("let", path);
        },
        Function(path) {
          const params = path.get("params");
          for (const param of params) {
            path.scope.registerBinding("param", param);
          }
          if (path.isFunctionExpression() && path.has("id") && !path.get("id").node[NOT_LOCAL_BINDING]) {
            path.scope.registerBinding("local", path.get("id"), path);
          }
        },
        ClassExpression(path) {
          if (path.has("id") && !path.get("id").node[NOT_LOCAL_BINDING]) {
            path.scope.registerBinding("local", path);
          }
        }
      };
      var uid = 0;
      var Scope = class _Scope {
        constructor(path) {
          this.uid = void 0;
          this.path = void 0;
          this.block = void 0;
          this.labels = void 0;
          this.inited = void 0;
          this.bindings = void 0;
          this.references = void 0;
          this.globals = void 0;
          this.uids = void 0;
          this.data = void 0;
          this.crawling = void 0;
          const {
            node
          } = path;
          const cached = _cache.scope.get(node);
          if ((cached == null ? void 0 : cached.path) === path) {
            return cached;
          }
          _cache.scope.set(node, this);
          this.uid = uid++;
          this.block = node;
          this.path = path;
          this.labels = /* @__PURE__ */ new Map();
          this.inited = false;
        }
        get parent() {
          var _parent;
          let parent, path = this.path;
          do {
            const shouldSkip = path.key === "key" || path.listKey === "decorators";
            path = path.parentPath;
            if (shouldSkip && path.isMethod())
              path = path.parentPath;
            if (path && path.isScope())
              parent = path;
          } while (path && !parent);
          return (_parent = parent) == null ? void 0 : _parent.scope;
        }
        get parentBlock() {
          return this.path.parent;
        }
        get hub() {
          return this.path.hub;
        }
        traverse(node, opts, state) {
          (0, _index.default)(node, opts, this, state, this.path);
        }
        generateDeclaredUidIdentifier(name) {
          const id = this.generateUidIdentifier(name);
          this.push({
            id
          });
          return cloneNode(id);
        }
        generateUidIdentifier(name) {
          return identifier(this.generateUid(name));
        }
        generateUid(name = "temp") {
          name = toIdentifier(name).replace(/^_+/, "").replace(/[0-9]+$/g, "");
          let uid2;
          let i = 1;
          do {
            uid2 = this._generateUid(name, i);
            i++;
          } while (this.hasLabel(uid2) || this.hasBinding(uid2) || this.hasGlobal(uid2) || this.hasReference(uid2));
          const program = this.getProgramParent();
          program.references[uid2] = true;
          program.uids[uid2] = true;
          return uid2;
        }
        _generateUid(name, i) {
          let id = name;
          if (i > 1)
            id += i;
          return `_${id}`;
        }
        generateUidBasedOnNode(node, defaultName) {
          const parts = [];
          gatherNodeParts(node, parts);
          let id = parts.join("$");
          id = id.replace(/^_/, "") || defaultName || "ref";
          return this.generateUid(id.slice(0, 20));
        }
        generateUidIdentifierBasedOnNode(node, defaultName) {
          return identifier(this.generateUidBasedOnNode(node, defaultName));
        }
        isStatic(node) {
          if (isThisExpression(node) || isSuper(node) || isTopicReference(node)) {
            return true;
          }
          if (isIdentifier(node)) {
            const binding = this.getBinding(node.name);
            if (binding) {
              return binding.constant;
            } else {
              return this.hasBinding(node.name);
            }
          }
          return false;
        }
        maybeGenerateMemoised(node, dontPush) {
          if (this.isStatic(node)) {
            return null;
          } else {
            const id = this.generateUidIdentifierBasedOnNode(node);
            if (!dontPush) {
              this.push({
                id
              });
              return cloneNode(id);
            }
            return id;
          }
        }
        checkBlockScopedCollisions(local, kind, name, id) {
          if (kind === "param")
            return;
          if (local.kind === "local")
            return;
          const duplicate = kind === "let" || local.kind === "let" || local.kind === "const" || local.kind === "module" || local.kind === "param" && kind === "const";
          if (duplicate) {
            throw this.hub.buildError(id, `Duplicate declaration "${name}"`, TypeError);
          }
        }
        rename(oldName, newName) {
          const binding = this.getBinding(oldName);
          if (binding) {
            newName || (newName = this.generateUidIdentifier(oldName).name);
            const renamer = new _renamer.default(binding, oldName, newName);
            {
              renamer.rename(arguments[2]);
            }
          }
        }
        _renameFromMap(map, oldName, newName, value) {
          if (map[oldName]) {
            map[newName] = value;
            map[oldName] = null;
          }
        }
        dump() {
          const sep = "-".repeat(60);
          console.log(sep);
          let scope = this;
          do {
            console.log("#", scope.block.type);
            for (const name of Object.keys(scope.bindings)) {
              const binding = scope.bindings[name];
              console.log(" -", name, {
                constant: binding.constant,
                references: binding.references,
                violations: binding.constantViolations.length,
                kind: binding.kind
              });
            }
          } while (scope = scope.parent);
          console.log(sep);
        }
        toArray(node, i, arrayLikeIsIterable) {
          if (isIdentifier(node)) {
            const binding = this.getBinding(node.name);
            if (binding != null && binding.constant && binding.path.isGenericType("Array")) {
              return node;
            }
          }
          if (isArrayExpression(node)) {
            return node;
          }
          if (isIdentifier(node, {
            name: "arguments"
          })) {
            return callExpression(memberExpression(memberExpression(memberExpression(identifier("Array"), identifier("prototype")), identifier("slice")), identifier("call")), [node]);
          }
          let helperName;
          const args = [node];
          if (i === true) {
            helperName = "toConsumableArray";
          } else if (typeof i === "number") {
            args.push(numericLiteral(i));
            helperName = "slicedToArray";
          } else {
            helperName = "toArray";
          }
          if (arrayLikeIsIterable) {
            args.unshift(this.hub.addHelper(helperName));
            helperName = "maybeArrayLike";
          }
          return callExpression(this.hub.addHelper(helperName), args);
        }
        hasLabel(name) {
          return !!this.getLabel(name);
        }
        getLabel(name) {
          return this.labels.get(name);
        }
        registerLabel(path) {
          this.labels.set(path.node.label.name, path);
        }
        registerDeclaration(path) {
          if (path.isLabeledStatement()) {
            this.registerLabel(path);
          } else if (path.isFunctionDeclaration()) {
            this.registerBinding("hoisted", path.get("id"), path);
          } else if (path.isVariableDeclaration()) {
            const declarations = path.get("declarations");
            const {
              kind
            } = path.node;
            for (const declar of declarations) {
              this.registerBinding(kind === "using" || kind === "await using" ? "const" : kind, declar);
            }
          } else if (path.isClassDeclaration()) {
            if (path.node.declare)
              return;
            this.registerBinding("let", path);
          } else if (path.isImportDeclaration()) {
            const isTypeDeclaration = path.node.importKind === "type" || path.node.importKind === "typeof";
            const specifiers = path.get("specifiers");
            for (const specifier of specifiers) {
              const isTypeSpecifier = isTypeDeclaration || specifier.isImportSpecifier() && (specifier.node.importKind === "type" || specifier.node.importKind === "typeof");
              this.registerBinding(isTypeSpecifier ? "unknown" : "module", specifier);
            }
          } else if (path.isExportDeclaration()) {
            const declar = path.get("declaration");
            if (declar.isClassDeclaration() || declar.isFunctionDeclaration() || declar.isVariableDeclaration()) {
              this.registerDeclaration(declar);
            }
          } else {
            this.registerBinding("unknown", path);
          }
        }
        buildUndefinedNode() {
          return buildUndefinedNode();
        }
        registerConstantViolation(path) {
          const ids = path.getBindingIdentifiers();
          for (const name of Object.keys(ids)) {
            var _this$getBinding;
            (_this$getBinding = this.getBinding(name)) == null || _this$getBinding.reassign(path);
          }
        }
        registerBinding(kind, path, bindingPath = path) {
          if (!kind)
            throw new ReferenceError("no `kind`");
          if (path.isVariableDeclaration()) {
            const declarators = path.get("declarations");
            for (const declar of declarators) {
              this.registerBinding(kind, declar);
            }
            return;
          }
          const parent = this.getProgramParent();
          const ids = path.getOuterBindingIdentifiers(true);
          for (const name of Object.keys(ids)) {
            parent.references[name] = true;
            for (const id of ids[name]) {
              const local = this.getOwnBinding(name);
              if (local) {
                if (local.identifier === id)
                  continue;
                this.checkBlockScopedCollisions(local, kind, name, id);
              }
              if (local) {
                this.registerConstantViolation(bindingPath);
              } else {
                this.bindings[name] = new _binding.default({
                  identifier: id,
                  scope: this,
                  path: bindingPath,
                  kind
                });
              }
            }
          }
        }
        addGlobal(node) {
          this.globals[node.name] = node;
        }
        hasUid(name) {
          let scope = this;
          do {
            if (scope.uids[name])
              return true;
          } while (scope = scope.parent);
          return false;
        }
        hasGlobal(name) {
          let scope = this;
          do {
            if (scope.globals[name])
              return true;
          } while (scope = scope.parent);
          return false;
        }
        hasReference(name) {
          return !!this.getProgramParent().references[name];
        }
        isPure(node, constantsOnly) {
          if (isIdentifier(node)) {
            const binding = this.getBinding(node.name);
            if (!binding)
              return false;
            if (constantsOnly)
              return binding.constant;
            return true;
          } else if (isThisExpression(node) || isMetaProperty(node) || isTopicReference(node) || isPrivateName(node)) {
            return true;
          } else if (isClass(node)) {
            var _node$decorators;
            if (node.superClass && !this.isPure(node.superClass, constantsOnly)) {
              return false;
            }
            if (((_node$decorators = node.decorators) == null ? void 0 : _node$decorators.length) > 0) {
              return false;
            }
            return this.isPure(node.body, constantsOnly);
          } else if (isClassBody(node)) {
            for (const method of node.body) {
              if (!this.isPure(method, constantsOnly))
                return false;
            }
            return true;
          } else if (isBinary(node)) {
            return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);
          } else if (isArrayExpression(node) || isTupleExpression(node)) {
            for (const elem of node.elements) {
              if (elem !== null && !this.isPure(elem, constantsOnly))
                return false;
            }
            return true;
          } else if (isObjectExpression(node) || isRecordExpression(node)) {
            for (const prop of node.properties) {
              if (!this.isPure(prop, constantsOnly))
                return false;
            }
            return true;
          } else if (isMethod(node)) {
            var _node$decorators2;
            if (node.computed && !this.isPure(node.key, constantsOnly))
              return false;
            if (((_node$decorators2 = node.decorators) == null ? void 0 : _node$decorators2.length) > 0) {
              return false;
            }
            return true;
          } else if (isProperty(node)) {
            var _node$decorators3;
            if (node.computed && !this.isPure(node.key, constantsOnly))
              return false;
            if (((_node$decorators3 = node.decorators) == null ? void 0 : _node$decorators3.length) > 0) {
              return false;
            }
            if (isObjectProperty(node) || node.static) {
              if (node.value !== null && !this.isPure(node.value, constantsOnly)) {
                return false;
              }
            }
            return true;
          } else if (isUnaryExpression(node)) {
            return this.isPure(node.argument, constantsOnly);
          } else if (isTaggedTemplateExpression(node)) {
            return matchesPattern(node.tag, "String.raw") && !this.hasBinding("String", true) && this.isPure(node.quasi, constantsOnly);
          } else if (isTemplateLiteral(node)) {
            for (const expression of node.expressions) {
              if (!this.isPure(expression, constantsOnly))
                return false;
            }
            return true;
          } else {
            return isPureish(node);
          }
        }
        setData(key, val) {
          return this.data[key] = val;
        }
        getData(key) {
          let scope = this;
          do {
            const data = scope.data[key];
            if (data != null)
              return data;
          } while (scope = scope.parent);
        }
        removeData(key) {
          let scope = this;
          do {
            const data = scope.data[key];
            if (data != null)
              scope.data[key] = null;
          } while (scope = scope.parent);
        }
        init() {
          if (!this.inited) {
            this.inited = true;
            this.crawl();
          }
        }
        crawl() {
          const path = this.path;
          this.references = /* @__PURE__ */ Object.create(null);
          this.bindings = /* @__PURE__ */ Object.create(null);
          this.globals = /* @__PURE__ */ Object.create(null);
          this.uids = /* @__PURE__ */ Object.create(null);
          this.data = /* @__PURE__ */ Object.create(null);
          const programParent = this.getProgramParent();
          if (programParent.crawling)
            return;
          const state = {
            references: [],
            constantViolations: [],
            assignments: []
          };
          this.crawling = true;
          if (path.type !== "Program" && (0, _visitors.isExplodedVisitor)(collectorVisitor)) {
            for (const visit of collectorVisitor.enter) {
              visit.call(state, path, state);
            }
            const typeVisitors = collectorVisitor[path.type];
            if (typeVisitors) {
              for (const visit of typeVisitors.enter) {
                visit.call(state, path, state);
              }
            }
          }
          path.traverse(collectorVisitor, state);
          this.crawling = false;
          for (const path2 of state.assignments) {
            const ids = path2.getBindingIdentifiers();
            for (const name of Object.keys(ids)) {
              if (path2.scope.getBinding(name))
                continue;
              programParent.addGlobal(ids[name]);
            }
            path2.scope.registerConstantViolation(path2);
          }
          for (const ref of state.references) {
            const binding = ref.scope.getBinding(ref.node.name);
            if (binding) {
              binding.reference(ref);
            } else {
              programParent.addGlobal(ref.node);
            }
          }
          for (const path2 of state.constantViolations) {
            path2.scope.registerConstantViolation(path2);
          }
        }
        push(opts) {
          let path = this.path;
          if (path.isPattern()) {
            path = this.getPatternParent().path;
          } else if (!path.isBlockStatement() && !path.isProgram()) {
            path = this.getBlockParent().path;
          }
          if (path.isSwitchStatement()) {
            path = (this.getFunctionParent() || this.getProgramParent()).path;
          }
          const {
            init,
            unique,
            kind = "var",
            id
          } = opts;
          if (!init && !unique && (kind === "var" || kind === "let") && path.isFunction() && !path.node.name && t2.isCallExpression(path.parent, {
            callee: path.node
          }) && path.parent.arguments.length <= path.node.params.length && t2.isIdentifier(id)) {
            path.pushContainer("params", id);
            path.scope.registerBinding("param", path.get("params")[path.node.params.length - 1]);
            return;
          }
          if (path.isLoop() || path.isCatchClause() || path.isFunction()) {
            path.ensureBlock();
            path = path.get("body");
          }
          const blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;
          const dataKey = `declaration:${kind}:${blockHoist}`;
          let declarPath = !unique && path.getData(dataKey);
          if (!declarPath) {
            const declar = variableDeclaration(kind, []);
            declar._blockHoist = blockHoist;
            [declarPath] = path.unshiftContainer("body", [declar]);
            if (!unique)
              path.setData(dataKey, declarPath);
          }
          const declarator = variableDeclarator(id, init);
          const len = declarPath.node.declarations.push(declarator);
          path.scope.registerBinding(kind, declarPath.get("declarations")[len - 1]);
        }
        getProgramParent() {
          let scope = this;
          do {
            if (scope.path.isProgram()) {
              return scope;
            }
          } while (scope = scope.parent);
          throw new Error("Couldn't find a Program");
        }
        getFunctionParent() {
          let scope = this;
          do {
            if (scope.path.isFunctionParent()) {
              return scope;
            }
          } while (scope = scope.parent);
          return null;
        }
        getBlockParent() {
          let scope = this;
          do {
            if (scope.path.isBlockParent()) {
              return scope;
            }
          } while (scope = scope.parent);
          throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
        }
        getPatternParent() {
          let scope = this;
          do {
            if (!scope.path.isPattern()) {
              return scope.getBlockParent();
            }
          } while (scope = scope.parent.parent);
          throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
        }
        getAllBindings() {
          const ids = /* @__PURE__ */ Object.create(null);
          let scope = this;
          do {
            for (const key of Object.keys(scope.bindings)) {
              if (key in ids === false) {
                ids[key] = scope.bindings[key];
              }
            }
            scope = scope.parent;
          } while (scope);
          return ids;
        }
        getAllBindingsOfKind(...kinds) {
          const ids = /* @__PURE__ */ Object.create(null);
          for (const kind of kinds) {
            let scope = this;
            do {
              for (const name of Object.keys(scope.bindings)) {
                const binding = scope.bindings[name];
                if (binding.kind === kind)
                  ids[name] = binding;
              }
              scope = scope.parent;
            } while (scope);
          }
          return ids;
        }
        bindingIdentifierEquals(name, node) {
          return this.getBindingIdentifier(name) === node;
        }
        getBinding(name) {
          let scope = this;
          let previousPath;
          do {
            const binding = scope.getOwnBinding(name);
            if (binding) {
              var _previousPath;
              if ((_previousPath = previousPath) != null && _previousPath.isPattern() && binding.kind !== "param" && binding.kind !== "local") {
              } else {
                return binding;
              }
            } else if (!binding && name === "arguments" && scope.path.isFunction() && !scope.path.isArrowFunctionExpression()) {
              break;
            }
            previousPath = scope.path;
          } while (scope = scope.parent);
        }
        getOwnBinding(name) {
          return this.bindings[name];
        }
        getBindingIdentifier(name) {
          var _this$getBinding2;
          return (_this$getBinding2 = this.getBinding(name)) == null ? void 0 : _this$getBinding2.identifier;
        }
        getOwnBindingIdentifier(name) {
          const binding = this.bindings[name];
          return binding == null ? void 0 : binding.identifier;
        }
        hasOwnBinding(name) {
          return !!this.getOwnBinding(name);
        }
        hasBinding(name, opts) {
          var _opts, _opts2, _opts3;
          if (!name)
            return false;
          if (this.hasOwnBinding(name))
            return true;
          {
            if (typeof opts === "boolean")
              opts = {
                noGlobals: opts
              };
          }
          if (this.parentHasBinding(name, opts))
            return true;
          if (!((_opts = opts) != null && _opts.noUids) && this.hasUid(name))
            return true;
          if (!((_opts2 = opts) != null && _opts2.noGlobals) && _Scope.globals.includes(name))
            return true;
          if (!((_opts3 = opts) != null && _opts3.noGlobals) && _Scope.contextVariables.includes(name))
            return true;
          return false;
        }
        parentHasBinding(name, opts) {
          var _this$parent;
          return (_this$parent = this.parent) == null ? void 0 : _this$parent.hasBinding(name, opts);
        }
        moveBindingTo(name, scope) {
          const info = this.getBinding(name);
          if (info) {
            info.scope.removeOwnBinding(name);
            info.scope = scope;
            scope.bindings[name] = info;
          }
        }
        removeOwnBinding(name) {
          delete this.bindings[name];
        }
        removeBinding(name) {
          var _this$getBinding3;
          (_this$getBinding3 = this.getBinding(name)) == null || _this$getBinding3.scope.removeOwnBinding(name);
          let scope = this;
          do {
            if (scope.uids[name]) {
              scope.uids[name] = false;
            }
          } while (scope = scope.parent);
        }
      };
      exports.default = Scope;
      Scope.globals = Object.keys(_globals.builtin);
      Scope.contextVariables = ["arguments", "undefined", "Infinity", "NaN"];
    }
  });

  // node_modules/@babel/traverse/lib/path/ancestry.js
  var require_ancestry = __commonJS({
    "node_modules/@babel/traverse/lib/path/ancestry.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.find = find;
      exports.findParent = findParent;
      exports.getAncestry = getAncestry;
      exports.getDeepestCommonAncestorFrom = getDeepestCommonAncestorFrom;
      exports.getEarliestCommonAncestorFrom = getEarliestCommonAncestorFrom;
      exports.getFunctionParent = getFunctionParent;
      exports.getStatementParent = getStatementParent;
      exports.inType = inType;
      exports.isAncestor = isAncestor;
      exports.isDescendant = isDescendant;
      var _t = require_lib3();
      var {
        VISITOR_KEYS
      } = _t;
      function findParent(callback) {
        let path = this;
        while (path = path.parentPath) {
          if (callback(path))
            return path;
        }
        return null;
      }
      function find(callback) {
        let path = this;
        do {
          if (callback(path))
            return path;
        } while (path = path.parentPath);
        return null;
      }
      function getFunctionParent() {
        return this.findParent((p) => p.isFunction());
      }
      function getStatementParent() {
        let path = this;
        do {
          if (!path.parentPath || Array.isArray(path.container) && path.isStatement()) {
            break;
          } else {
            path = path.parentPath;
          }
        } while (path);
        if (path && (path.isProgram() || path.isFile())) {
          throw new Error("File/Program node, we can't possibly find a statement parent to this");
        }
        return path;
      }
      function getEarliestCommonAncestorFrom(paths) {
        return this.getDeepestCommonAncestorFrom(paths, function(deepest, i, ancestries) {
          let earliest;
          const keys = VISITOR_KEYS[deepest.type];
          for (const ancestry of ancestries) {
            const path = ancestry[i + 1];
            if (!earliest) {
              earliest = path;
              continue;
            }
            if (path.listKey && earliest.listKey === path.listKey) {
              if (path.key < earliest.key) {
                earliest = path;
                continue;
              }
            }
            const earliestKeyIndex = keys.indexOf(earliest.parentKey);
            const currentKeyIndex = keys.indexOf(path.parentKey);
            if (earliestKeyIndex > currentKeyIndex) {
              earliest = path;
            }
          }
          return earliest;
        });
      }
      function getDeepestCommonAncestorFrom(paths, filter) {
        if (!paths.length) {
          return this;
        }
        if (paths.length === 1) {
          return paths[0];
        }
        let minDepth = Infinity;
        let lastCommonIndex, lastCommon;
        const ancestries = paths.map((path) => {
          const ancestry = [];
          do {
            ancestry.unshift(path);
          } while ((path = path.parentPath) && path !== this);
          if (ancestry.length < minDepth) {
            minDepth = ancestry.length;
          }
          return ancestry;
        });
        const first = ancestries[0];
        depthLoop:
          for (let i = 0; i < minDepth; i++) {
            const shouldMatch = first[i];
            for (const ancestry of ancestries) {
              if (ancestry[i] !== shouldMatch) {
                break depthLoop;
              }
            }
            lastCommonIndex = i;
            lastCommon = shouldMatch;
          }
        if (lastCommon) {
          if (filter) {
            return filter(lastCommon, lastCommonIndex, ancestries);
          } else {
            return lastCommon;
          }
        } else {
          throw new Error("Couldn't find intersection");
        }
      }
      function getAncestry() {
        let path = this;
        const paths = [];
        do {
          paths.push(path);
        } while (path = path.parentPath);
        return paths;
      }
      function isAncestor(maybeDescendant) {
        return maybeDescendant.isDescendant(this);
      }
      function isDescendant(maybeAncestor) {
        return !!this.findParent((parent) => parent === maybeAncestor);
      }
      function inType(...candidateTypes) {
        let path = this;
        while (path) {
          for (const type of candidateTypes) {
            if (path.node.type === type)
              return true;
          }
          path = path.parentPath;
        }
        return false;
      }
    }
  });

  // node_modules/@babel/traverse/lib/path/inference/util.js
  var require_util = __commonJS({
    "node_modules/@babel/traverse/lib/path/inference/util.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.createUnionType = createUnionType;
      var _t = require_lib3();
      var {
        createFlowUnionType,
        createTSUnionType,
        createUnionTypeAnnotation,
        isFlowType,
        isTSType
      } = _t;
      function createUnionType(types) {
        {
          if (types.every((v) => isFlowType(v))) {
            if (createFlowUnionType) {
              return createFlowUnionType(types);
            }
            return createUnionTypeAnnotation(types);
          } else if (types.every((v) => isTSType(v))) {
            if (createTSUnionType) {
              return createTSUnionType(types);
            }
          }
        }
      }
    }
  });

  // node_modules/@babel/traverse/lib/path/inference/inferer-reference.js
  var require_inferer_reference = __commonJS({
    "node_modules/@babel/traverse/lib/path/inference/inferer-reference.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = _default;
      var _t = require_lib3();
      var _util = require_util();
      var {
        BOOLEAN_NUMBER_BINARY_OPERATORS,
        createTypeAnnotationBasedOnTypeof,
        numberTypeAnnotation,
        voidTypeAnnotation
      } = _t;
      function _default(node) {
        if (!this.isReferenced())
          return;
        const binding = this.scope.getBinding(node.name);
        if (binding) {
          if (binding.identifier.typeAnnotation) {
            return binding.identifier.typeAnnotation;
          } else {
            return getTypeAnnotationBindingConstantViolations(binding, this, node.name);
          }
        }
        if (node.name === "undefined") {
          return voidTypeAnnotation();
        } else if (node.name === "NaN" || node.name === "Infinity") {
          return numberTypeAnnotation();
        } else if (node.name === "arguments") {
        }
      }
      function getTypeAnnotationBindingConstantViolations(binding, path, name) {
        const types = [];
        const functionConstantViolations = [];
        let constantViolations = getConstantViolationsBefore(binding, path, functionConstantViolations);
        const testType = getConditionalAnnotation(binding, path, name);
        if (testType) {
          const testConstantViolations = getConstantViolationsBefore(binding, testType.ifStatement);
          constantViolations = constantViolations.filter((path2) => testConstantViolations.indexOf(path2) < 0);
          types.push(testType.typeAnnotation);
        }
        if (constantViolations.length) {
          constantViolations.push(...functionConstantViolations);
          for (const violation of constantViolations) {
            types.push(violation.getTypeAnnotation());
          }
        }
        if (!types.length) {
          return;
        }
        return (0, _util.createUnionType)(types);
      }
      function getConstantViolationsBefore(binding, path, functions) {
        const violations = binding.constantViolations.slice();
        violations.unshift(binding.path);
        return violations.filter((violation) => {
          violation = violation.resolve();
          const status = violation._guessExecutionStatusRelativeTo(path);
          if (functions && status === "unknown")
            functions.push(violation);
          return status === "before";
        });
      }
      function inferAnnotationFromBinaryExpression(name, path) {
        const operator = path.node.operator;
        const right = path.get("right").resolve();
        const left = path.get("left").resolve();
        let target;
        if (left.isIdentifier({
          name
        })) {
          target = right;
        } else if (right.isIdentifier({
          name
        })) {
          target = left;
        }
        if (target) {
          if (operator === "===") {
            return target.getTypeAnnotation();
          }
          if (BOOLEAN_NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
            return numberTypeAnnotation();
          }
          return;
        }
        if (operator !== "===" && operator !== "==")
          return;
        let typeofPath;
        let typePath;
        if (left.isUnaryExpression({
          operator: "typeof"
        })) {
          typeofPath = left;
          typePath = right;
        } else if (right.isUnaryExpression({
          operator: "typeof"
        })) {
          typeofPath = right;
          typePath = left;
        }
        if (!typeofPath)
          return;
        if (!typeofPath.get("argument").isIdentifier({
          name
        }))
          return;
        typePath = typePath.resolve();
        if (!typePath.isLiteral())
          return;
        const typeValue = typePath.node.value;
        if (typeof typeValue !== "string")
          return;
        return createTypeAnnotationBasedOnTypeof(typeValue);
      }
      function getParentConditionalPath(binding, path, name) {
        let parentPath;
        while (parentPath = path.parentPath) {
          if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {
            if (path.key === "test") {
              return;
            }
            return parentPath;
          }
          if (parentPath.isFunction()) {
            if (parentPath.parentPath.scope.getBinding(name) !== binding)
              return;
          }
          path = parentPath;
        }
      }
      function getConditionalAnnotation(binding, path, name) {
        const ifStatement = getParentConditionalPath(binding, path, name);
        if (!ifStatement)
          return;
        const test = ifStatement.get("test");
        const paths = [test];
        const types = [];
        for (let i = 0; i < paths.length; i++) {
          const path2 = paths[i];
          if (path2.isLogicalExpression()) {
            if (path2.node.operator === "&&") {
              paths.push(path2.get("left"));
              paths.push(path2.get("right"));
            }
          } else if (path2.isBinaryExpression()) {
            const type = inferAnnotationFromBinaryExpression(name, path2);
            if (type)
              types.push(type);
          }
        }
        if (types.length) {
          return {
            typeAnnotation: (0, _util.createUnionType)(types),
            ifStatement
          };
        }
        return getConditionalAnnotation(binding, ifStatement, name);
      }
    }
  });

  // node_modules/@babel/traverse/lib/path/inference/inferers.js
  var require_inferers = __commonJS({
    "node_modules/@babel/traverse/lib/path/inference/inferers.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ArrayExpression = ArrayExpression;
      exports.AssignmentExpression = AssignmentExpression;
      exports.BinaryExpression = BinaryExpression;
      exports.BooleanLiteral = BooleanLiteral;
      exports.CallExpression = CallExpression;
      exports.ConditionalExpression = ConditionalExpression;
      exports.ClassDeclaration = exports.ClassExpression = exports.FunctionDeclaration = exports.ArrowFunctionExpression = exports.FunctionExpression = Func;
      Object.defineProperty(exports, "Identifier", {
        enumerable: true,
        get: function() {
          return _infererReference.default;
        }
      });
      exports.LogicalExpression = LogicalExpression;
      exports.NewExpression = NewExpression;
      exports.NullLiteral = NullLiteral;
      exports.NumericLiteral = NumericLiteral;
      exports.ObjectExpression = ObjectExpression;
      exports.ParenthesizedExpression = ParenthesizedExpression;
      exports.RegExpLiteral = RegExpLiteral;
      exports.RestElement = RestElement;
      exports.SequenceExpression = SequenceExpression;
      exports.StringLiteral = StringLiteral;
      exports.TSAsExpression = TSAsExpression;
      exports.TSNonNullExpression = TSNonNullExpression;
      exports.TaggedTemplateExpression = TaggedTemplateExpression;
      exports.TemplateLiteral = TemplateLiteral;
      exports.TypeCastExpression = TypeCastExpression;
      exports.UnaryExpression = UnaryExpression;
      exports.UpdateExpression = UpdateExpression;
      exports.VariableDeclarator = VariableDeclarator;
      var _t = require_lib3();
      var _infererReference = require_inferer_reference();
      var _util = require_util();
      var {
        BOOLEAN_BINARY_OPERATORS,
        BOOLEAN_UNARY_OPERATORS,
        NUMBER_BINARY_OPERATORS,
        NUMBER_UNARY_OPERATORS,
        STRING_UNARY_OPERATORS,
        anyTypeAnnotation,
        arrayTypeAnnotation,
        booleanTypeAnnotation,
        buildMatchMemberExpression,
        genericTypeAnnotation,
        identifier,
        nullLiteralTypeAnnotation,
        numberTypeAnnotation,
        stringTypeAnnotation,
        tupleTypeAnnotation,
        unionTypeAnnotation,
        voidTypeAnnotation,
        isIdentifier
      } = _t;
      function VariableDeclarator() {
        if (!this.get("id").isIdentifier())
          return;
        return this.get("init").getTypeAnnotation();
      }
      function TypeCastExpression(node) {
        return node.typeAnnotation;
      }
      TypeCastExpression.validParent = true;
      function TSAsExpression(node) {
        return node.typeAnnotation;
      }
      TSAsExpression.validParent = true;
      function TSNonNullExpression() {
        return this.get("expression").getTypeAnnotation();
      }
      function NewExpression(node) {
        if (node.callee.type === "Identifier") {
          return genericTypeAnnotation(node.callee);
        }
      }
      function TemplateLiteral() {
        return stringTypeAnnotation();
      }
      function UnaryExpression(node) {
        const operator = node.operator;
        if (operator === "void") {
          return voidTypeAnnotation();
        } else if (NUMBER_UNARY_OPERATORS.indexOf(operator) >= 0) {
          return numberTypeAnnotation();
        } else if (STRING_UNARY_OPERATORS.indexOf(operator) >= 0) {
          return stringTypeAnnotation();
        } else if (BOOLEAN_UNARY_OPERATORS.indexOf(operator) >= 0) {
          return booleanTypeAnnotation();
        }
      }
      function BinaryExpression(node) {
        const operator = node.operator;
        if (NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
          return numberTypeAnnotation();
        } else if (BOOLEAN_BINARY_OPERATORS.indexOf(operator) >= 0) {
          return booleanTypeAnnotation();
        } else if (operator === "+") {
          const right = this.get("right");
          const left = this.get("left");
          if (left.isBaseType("number") && right.isBaseType("number")) {
            return numberTypeAnnotation();
          } else if (left.isBaseType("string") || right.isBaseType("string")) {
            return stringTypeAnnotation();
          }
          return unionTypeAnnotation([stringTypeAnnotation(), numberTypeAnnotation()]);
        }
      }
      function LogicalExpression() {
        const argumentTypes = [this.get("left").getTypeAnnotation(), this.get("right").getTypeAnnotation()];
        return (0, _util.createUnionType)(argumentTypes);
      }
      function ConditionalExpression() {
        const argumentTypes = [this.get("consequent").getTypeAnnotation(), this.get("alternate").getTypeAnnotation()];
        return (0, _util.createUnionType)(argumentTypes);
      }
      function SequenceExpression() {
        return this.get("expressions").pop().getTypeAnnotation();
      }
      function ParenthesizedExpression() {
        return this.get("expression").getTypeAnnotation();
      }
      function AssignmentExpression() {
        return this.get("right").getTypeAnnotation();
      }
      function UpdateExpression(node) {
        const operator = node.operator;
        if (operator === "++" || operator === "--") {
          return numberTypeAnnotation();
        }
      }
      function StringLiteral() {
        return stringTypeAnnotation();
      }
      function NumericLiteral() {
        return numberTypeAnnotation();
      }
      function BooleanLiteral() {
        return booleanTypeAnnotation();
      }
      function NullLiteral() {
        return nullLiteralTypeAnnotation();
      }
      function RegExpLiteral() {
        return genericTypeAnnotation(identifier("RegExp"));
      }
      function ObjectExpression() {
        return genericTypeAnnotation(identifier("Object"));
      }
      function ArrayExpression() {
        return genericTypeAnnotation(identifier("Array"));
      }
      function RestElement() {
        return ArrayExpression();
      }
      RestElement.validParent = true;
      function Func() {
        return genericTypeAnnotation(identifier("Function"));
      }
      var isArrayFrom = buildMatchMemberExpression("Array.from");
      var isObjectKeys = buildMatchMemberExpression("Object.keys");
      var isObjectValues = buildMatchMemberExpression("Object.values");
      var isObjectEntries = buildMatchMemberExpression("Object.entries");
      function CallExpression() {
        const {
          callee
        } = this.node;
        if (isObjectKeys(callee)) {
          return arrayTypeAnnotation(stringTypeAnnotation());
        } else if (isArrayFrom(callee) || isObjectValues(callee) || isIdentifier(callee, {
          name: "Array"
        })) {
          return arrayTypeAnnotation(anyTypeAnnotation());
        } else if (isObjectEntries(callee)) {
          return arrayTypeAnnotation(tupleTypeAnnotation([stringTypeAnnotation(), anyTypeAnnotation()]));
        }
        return resolveCall(this.get("callee"));
      }
      function TaggedTemplateExpression() {
        return resolveCall(this.get("tag"));
      }
      function resolveCall(callee) {
        callee = callee.resolve();
        if (callee.isFunction()) {
          const {
            node
          } = callee;
          if (node.async) {
            if (node.generator) {
              return genericTypeAnnotation(identifier("AsyncIterator"));
            } else {
              return genericTypeAnnotation(identifier("Promise"));
            }
          } else {
            if (node.generator) {
              return genericTypeAnnotation(identifier("Iterator"));
            } else if (callee.node.returnType) {
              return callee.node.returnType;
            } else {
            }
          }
        }
      }
    }
  });

  // node_modules/@babel/traverse/lib/path/inference/index.js
  var require_inference = __commonJS({
    "node_modules/@babel/traverse/lib/path/inference/index.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports._getTypeAnnotation = _getTypeAnnotation;
      exports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;
      exports.couldBeBaseType = couldBeBaseType;
      exports.getTypeAnnotation = getTypeAnnotation;
      exports.isBaseType = isBaseType;
      exports.isGenericType = isGenericType;
      var inferers = require_inferers();
      var _t = require_lib3();
      var {
        anyTypeAnnotation,
        isAnyTypeAnnotation,
        isArrayTypeAnnotation,
        isBooleanTypeAnnotation,
        isEmptyTypeAnnotation,
        isFlowBaseAnnotation,
        isGenericTypeAnnotation,
        isIdentifier,
        isMixedTypeAnnotation,
        isNumberTypeAnnotation,
        isStringTypeAnnotation,
        isTSArrayType,
        isTSTypeAnnotation,
        isTSTypeReference,
        isTupleTypeAnnotation,
        isTypeAnnotation,
        isUnionTypeAnnotation,
        isVoidTypeAnnotation,
        stringTypeAnnotation,
        voidTypeAnnotation
      } = _t;
      function getTypeAnnotation() {
        let type = this.getData("typeAnnotation");
        if (type != null) {
          return type;
        }
        type = this._getTypeAnnotation() || anyTypeAnnotation();
        if (isTypeAnnotation(type) || isTSTypeAnnotation(type)) {
          type = type.typeAnnotation;
        }
        this.setData("typeAnnotation", type);
        return type;
      }
      var typeAnnotationInferringNodes = /* @__PURE__ */ new WeakSet();
      function _getTypeAnnotation() {
        const node = this.node;
        if (!node) {
          if (this.key === "init" && this.parentPath.isVariableDeclarator()) {
            const declar = this.parentPath.parentPath;
            const declarParent = declar.parentPath;
            if (declar.key === "left" && declarParent.isForInStatement()) {
              return stringTypeAnnotation();
            }
            if (declar.key === "left" && declarParent.isForOfStatement()) {
              return anyTypeAnnotation();
            }
            return voidTypeAnnotation();
          } else {
            return;
          }
        }
        if (node.typeAnnotation) {
          return node.typeAnnotation;
        }
        if (typeAnnotationInferringNodes.has(node)) {
          return;
        }
        typeAnnotationInferringNodes.add(node);
        try {
          var _inferer;
          let inferer = inferers[node.type];
          if (inferer) {
            return inferer.call(this, node);
          }
          inferer = inferers[this.parentPath.type];
          if ((_inferer = inferer) != null && _inferer.validParent) {
            return this.parentPath.getTypeAnnotation();
          }
        } finally {
          typeAnnotationInferringNodes.delete(node);
        }
      }
      function isBaseType(baseName, soft) {
        return _isBaseType(baseName, this.getTypeAnnotation(), soft);
      }
      function _isBaseType(baseName, type, soft) {
        if (baseName === "string") {
          return isStringTypeAnnotation(type);
        } else if (baseName === "number") {
          return isNumberTypeAnnotation(type);
        } else if (baseName === "boolean") {
          return isBooleanTypeAnnotation(type);
        } else if (baseName === "any") {
          return isAnyTypeAnnotation(type);
        } else if (baseName === "mixed") {
          return isMixedTypeAnnotation(type);
        } else if (baseName === "empty") {
          return isEmptyTypeAnnotation(type);
        } else if (baseName === "void") {
          return isVoidTypeAnnotation(type);
        } else {
          if (soft) {
            return false;
          } else {
            throw new Error(`Unknown base type ${baseName}`);
          }
        }
      }
      function couldBeBaseType(name) {
        const type = this.getTypeAnnotation();
        if (isAnyTypeAnnotation(type))
          return true;
        if (isUnionTypeAnnotation(type)) {
          for (const type2 of type.types) {
            if (isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {
              return true;
            }
          }
          return false;
        } else {
          return _isBaseType(name, type, true);
        }
      }
      function baseTypeStrictlyMatches(rightArg) {
        const left = this.getTypeAnnotation();
        const right = rightArg.getTypeAnnotation();
        if (!isAnyTypeAnnotation(left) && isFlowBaseAnnotation(left)) {
          return right.type === left.type;
        }
        return false;
      }
      function isGenericType(genericName) {
        const type = this.getTypeAnnotation();
        if (genericName === "Array") {
          if (isTSArrayType(type) || isArrayTypeAnnotation(type) || isTupleTypeAnnotation(type)) {
            return true;
          }
        }
        return isGenericTypeAnnotation(type) && isIdentifier(type.id, {
          name: genericName
        }) || isTSTypeReference(type) && isIdentifier(type.typeName, {
          name: genericName
        });
      }
    }
  });

  // node_modules/js-tokens/index.js
  var require_js_tokens = __commonJS({
    "node_modules/js-tokens/index.js"(exports) {
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyus]{1,6}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g;
      exports.matchToToken = function(match) {
        var token = { type: "invalid", value: match[0], closed: void 0 };
        if (match[1])
          token.type = "string", token.closed = !!(match[3] || match[4]);
        else if (match[5])
          token.type = "comment";
        else if (match[6])
          token.type = "comment", token.closed = !!match[7];
        else if (match[8])
          token.type = "regex";
        else if (match[9])
          token.type = "number";
        else if (match[10])
          token.type = "name";
        else if (match[11])
          token.type = "punctuator";
        else if (match[12])
          token.type = "whitespace";
        return token;
      };
    }
  });

  // node_modules/escape-string-regexp/index.js
  var require_escape_string_regexp = __commonJS({
    "node_modules/escape-string-regexp/index.js"(exports, module) {
      "use strict";
      init_esbuild_inject();
      var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
      module.exports = function(str) {
        if (typeof str !== "string") {
          throw new TypeError("Expected a string");
        }
        return str.replace(matchOperatorsRe, "\\$&");
      };
    }
  });

  // node_modules/@babel/highlight/node_modules/color-name/index.js
  var require_color_name = __commonJS({
    "node_modules/@babel/highlight/node_modules/color-name/index.js"(exports, module) {
      "use strict";
      init_esbuild_inject();
      module.exports = {
        "aliceblue": [240, 248, 255],
        "antiquewhite": [250, 235, 215],
        "aqua": [0, 255, 255],
        "aquamarine": [127, 255, 212],
        "azure": [240, 255, 255],
        "beige": [245, 245, 220],
        "bisque": [255, 228, 196],
        "black": [0, 0, 0],
        "blanchedalmond": [255, 235, 205],
        "blue": [0, 0, 255],
        "blueviolet": [138, 43, 226],
        "brown": [165, 42, 42],
        "burlywood": [222, 184, 135],
        "cadetblue": [95, 158, 160],
        "chartreuse": [127, 255, 0],
        "chocolate": [210, 105, 30],
        "coral": [255, 127, 80],
        "cornflowerblue": [100, 149, 237],
        "cornsilk": [255, 248, 220],
        "crimson": [220, 20, 60],
        "cyan": [0, 255, 255],
        "darkblue": [0, 0, 139],
        "darkcyan": [0, 139, 139],
        "darkgoldenrod": [184, 134, 11],
        "darkgray": [169, 169, 169],
        "darkgreen": [0, 100, 0],
        "darkgrey": [169, 169, 169],
        "darkkhaki": [189, 183, 107],
        "darkmagenta": [139, 0, 139],
        "darkolivegreen": [85, 107, 47],
        "darkorange": [255, 140, 0],
        "darkorchid": [153, 50, 204],
        "darkred": [139, 0, 0],
        "darksalmon": [233, 150, 122],
        "darkseagreen": [143, 188, 143],
        "darkslateblue": [72, 61, 139],
        "darkslategray": [47, 79, 79],
        "darkslategrey": [47, 79, 79],
        "darkturquoise": [0, 206, 209],
        "darkviolet": [148, 0, 211],
        "deeppink": [255, 20, 147],
        "deepskyblue": [0, 191, 255],
        "dimgray": [105, 105, 105],
        "dimgrey": [105, 105, 105],
        "dodgerblue": [30, 144, 255],
        "firebrick": [178, 34, 34],
        "floralwhite": [255, 250, 240],
        "forestgreen": [34, 139, 34],
        "fuchsia": [255, 0, 255],
        "gainsboro": [220, 220, 220],
        "ghostwhite": [248, 248, 255],
        "gold": [255, 215, 0],
        "goldenrod": [218, 165, 32],
        "gray": [128, 128, 128],
        "green": [0, 128, 0],
        "greenyellow": [173, 255, 47],
        "grey": [128, 128, 128],
        "honeydew": [240, 255, 240],
        "hotpink": [255, 105, 180],
        "indianred": [205, 92, 92],
        "indigo": [75, 0, 130],
        "ivory": [255, 255, 240],
        "khaki": [240, 230, 140],
        "lavender": [230, 230, 250],
        "lavenderblush": [255, 240, 245],
        "lawngreen": [124, 252, 0],
        "lemonchiffon": [255, 250, 205],
        "lightblue": [173, 216, 230],
        "lightcoral": [240, 128, 128],
        "lightcyan": [224, 255, 255],
        "lightgoldenrodyellow": [250, 250, 210],
        "lightgray": [211, 211, 211],
        "lightgreen": [144, 238, 144],
        "lightgrey": [211, 211, 211],
        "lightpink": [255, 182, 193],
        "lightsalmon": [255, 160, 122],
        "lightseagreen": [32, 178, 170],
        "lightskyblue": [135, 206, 250],
        "lightslategray": [119, 136, 153],
        "lightslategrey": [119, 136, 153],
        "lightsteelblue": [176, 196, 222],
        "lightyellow": [255, 255, 224],
        "lime": [0, 255, 0],
        "limegreen": [50, 205, 50],
        "linen": [250, 240, 230],
        "magenta": [255, 0, 255],
        "maroon": [128, 0, 0],
        "mediumaquamarine": [102, 205, 170],
        "mediumblue": [0, 0, 205],
        "mediumorchid": [186, 85, 211],
        "mediumpurple": [147, 112, 219],
        "mediumseagreen": [60, 179, 113],
        "mediumslateblue": [123, 104, 238],
        "mediumspringgreen": [0, 250, 154],
        "mediumturquoise": [72, 209, 204],
        "mediumvioletred": [199, 21, 133],
        "midnightblue": [25, 25, 112],
        "mintcream": [245, 255, 250],
        "mistyrose": [255, 228, 225],
        "moccasin": [255, 228, 181],
        "navajowhite": [255, 222, 173],
        "navy": [0, 0, 128],
        "oldlace": [253, 245, 230],
        "olive": [128, 128, 0],
        "olivedrab": [107, 142, 35],
        "orange": [255, 165, 0],
        "orangered": [255, 69, 0],
        "orchid": [218, 112, 214],
        "palegoldenrod": [238, 232, 170],
        "palegreen": [152, 251, 152],
        "paleturquoise": [175, 238, 238],
        "palevioletred": [219, 112, 147],
        "papayawhip": [255, 239, 213],
        "peachpuff": [255, 218, 185],
        "peru": [205, 133, 63],
        "pink": [255, 192, 203],
        "plum": [221, 160, 221],
        "powderblue": [176, 224, 230],
        "purple": [128, 0, 128],
        "rebeccapurple": [102, 51, 153],
        "red": [255, 0, 0],
        "rosybrown": [188, 143, 143],
        "royalblue": [65, 105, 225],
        "saddlebrown": [139, 69, 19],
        "salmon": [250, 128, 114],
        "sandybrown": [244, 164, 96],
        "seagreen": [46, 139, 87],
        "seashell": [255, 245, 238],
        "sienna": [160, 82, 45],
        "silver": [192, 192, 192],
        "skyblue": [135, 206, 235],
        "slateblue": [106, 90, 205],
        "slategray": [112, 128, 144],
        "slategrey": [112, 128, 144],
        "snow": [255, 250, 250],
        "springgreen": [0, 255, 127],
        "steelblue": [70, 130, 180],
        "tan": [210, 180, 140],
        "teal": [0, 128, 128],
        "thistle": [216, 191, 216],
        "tomato": [255, 99, 71],
        "turquoise": [64, 224, 208],
        "violet": [238, 130, 238],
        "wheat": [245, 222, 179],
        "white": [255, 255, 255],
        "whitesmoke": [245, 245, 245],
        "yellow": [255, 255, 0],
        "yellowgreen": [154, 205, 50]
      };
    }
  });

  // node_modules/@babel/highlight/node_modules/color-convert/conversions.js
  var require_conversions = __commonJS({
    "node_modules/@babel/highlight/node_modules/color-convert/conversions.js"(exports, module) {
      init_esbuild_inject();
      var cssKeywords = require_color_name();
      var reverseKeywords = {};
      for (key in cssKeywords) {
        if (cssKeywords.hasOwnProperty(key)) {
          reverseKeywords[cssKeywords[key]] = key;
        }
      }
      var key;
      var convert = module.exports = {
        rgb: { channels: 3, labels: "rgb" },
        hsl: { channels: 3, labels: "hsl" },
        hsv: { channels: 3, labels: "hsv" },
        hwb: { channels: 3, labels: "hwb" },
        cmyk: { channels: 4, labels: "cmyk" },
        xyz: { channels: 3, labels: "xyz" },
        lab: { channels: 3, labels: "lab" },
        lch: { channels: 3, labels: "lch" },
        hex: { channels: 1, labels: ["hex"] },
        keyword: { channels: 1, labels: ["keyword"] },
        ansi16: { channels: 1, labels: ["ansi16"] },
        ansi256: { channels: 1, labels: ["ansi256"] },
        hcg: { channels: 3, labels: ["h", "c", "g"] },
        apple: { channels: 3, labels: ["r16", "g16", "b16"] },
        gray: { channels: 1, labels: ["gray"] }
      };
      for (model in convert) {
        if (convert.hasOwnProperty(model)) {
          if (!("channels" in convert[model])) {
            throw new Error("missing channels property: " + model);
          }
          if (!("labels" in convert[model])) {
            throw new Error("missing channel labels property: " + model);
          }
          if (convert[model].labels.length !== convert[model].channels) {
            throw new Error("channel and label counts mismatch: " + model);
          }
          channels = convert[model].channels;
          labels = convert[model].labels;
          delete convert[model].channels;
          delete convert[model].labels;
          Object.defineProperty(convert[model], "channels", { value: channels });
          Object.defineProperty(convert[model], "labels", { value: labels });
        }
      }
      var channels;
      var labels;
      var model;
      convert.rgb.hsl = function(rgb) {
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        var min = Math.min(r, g, b);
        var max = Math.max(r, g, b);
        var delta = max - min;
        var h2;
        var s;
        var l;
        if (max === min) {
          h2 = 0;
        } else if (r === max) {
          h2 = (g - b) / delta;
        } else if (g === max) {
          h2 = 2 + (b - r) / delta;
        } else if (b === max) {
          h2 = 4 + (r - g) / delta;
        }
        h2 = Math.min(h2 * 60, 360);
        if (h2 < 0) {
          h2 += 360;
        }
        l = (min + max) / 2;
        if (max === min) {
          s = 0;
        } else if (l <= 0.5) {
          s = delta / (max + min);
        } else {
          s = delta / (2 - max - min);
        }
        return [h2, s * 100, l * 100];
      };
      convert.rgb.hsv = function(rgb) {
        var rdif;
        var gdif;
        var bdif;
        var h2;
        var s;
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        var v = Math.max(r, g, b);
        var diff = v - Math.min(r, g, b);
        var diffc = function(c) {
          return (v - c) / 6 / diff + 1 / 2;
        };
        if (diff === 0) {
          h2 = s = 0;
        } else {
          s = diff / v;
          rdif = diffc(r);
          gdif = diffc(g);
          bdif = diffc(b);
          if (r === v) {
            h2 = bdif - gdif;
          } else if (g === v) {
            h2 = 1 / 3 + rdif - bdif;
          } else if (b === v) {
            h2 = 2 / 3 + gdif - rdif;
          }
          if (h2 < 0) {
            h2 += 1;
          } else if (h2 > 1) {
            h2 -= 1;
          }
        }
        return [
          h2 * 360,
          s * 100,
          v * 100
        ];
      };
      convert.rgb.hwb = function(rgb) {
        var r = rgb[0];
        var g = rgb[1];
        var b = rgb[2];
        var h2 = convert.rgb.hsl(rgb)[0];
        var w2 = 1 / 255 * Math.min(r, Math.min(g, b));
        b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
        return [h2, w2 * 100, b * 100];
      };
      convert.rgb.cmyk = function(rgb) {
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        var c;
        var m;
        var y;
        var k;
        k = Math.min(1 - r, 1 - g, 1 - b);
        c = (1 - r - k) / (1 - k) || 0;
        m = (1 - g - k) / (1 - k) || 0;
        y = (1 - b - k) / (1 - k) || 0;
        return [c * 100, m * 100, y * 100, k * 100];
      };
      function comparativeDistance(x, y) {
        return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
      }
      convert.rgb.keyword = function(rgb) {
        var reversed = reverseKeywords[rgb];
        if (reversed) {
          return reversed;
        }
        var currentClosestDistance = Infinity;
        var currentClosestKeyword;
        for (var keyword in cssKeywords) {
          if (cssKeywords.hasOwnProperty(keyword)) {
            var value = cssKeywords[keyword];
            var distance = comparativeDistance(rgb, value);
            if (distance < currentClosestDistance) {
              currentClosestDistance = distance;
              currentClosestKeyword = keyword;
            }
          }
        }
        return currentClosestKeyword;
      };
      convert.keyword.rgb = function(keyword) {
        return cssKeywords[keyword];
      };
      convert.rgb.xyz = function(rgb) {
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
        g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
        b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
        var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
        var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
        var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
        return [x * 100, y * 100, z * 100];
      };
      convert.rgb.lab = function(rgb) {
        var xyz = convert.rgb.xyz(rgb);
        var x = xyz[0];
        var y = xyz[1];
        var z = xyz[2];
        var l;
        var a2;
        var b;
        x /= 95.047;
        y /= 100;
        z /= 108.883;
        x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
        y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
        z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
        l = 116 * y - 16;
        a2 = 500 * (x - y);
        b = 200 * (y - z);
        return [l, a2, b];
      };
      convert.hsl.rgb = function(hsl) {
        var h2 = hsl[0] / 360;
        var s = hsl[1] / 100;
        var l = hsl[2] / 100;
        var t1;
        var t2;
        var t3;
        var rgb;
        var val;
        if (s === 0) {
          val = l * 255;
          return [val, val, val];
        }
        if (l < 0.5) {
          t2 = l * (1 + s);
        } else {
          t2 = l + s - l * s;
        }
        t1 = 2 * l - t2;
        rgb = [0, 0, 0];
        for (var i = 0; i < 3; i++) {
          t3 = h2 + 1 / 3 * -(i - 1);
          if (t3 < 0) {
            t3++;
          }
          if (t3 > 1) {
            t3--;
          }
          if (6 * t3 < 1) {
            val = t1 + (t2 - t1) * 6 * t3;
          } else if (2 * t3 < 1) {
            val = t2;
          } else if (3 * t3 < 2) {
            val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
          } else {
            val = t1;
          }
          rgb[i] = val * 255;
        }
        return rgb;
      };
      convert.hsl.hsv = function(hsl) {
        var h2 = hsl[0];
        var s = hsl[1] / 100;
        var l = hsl[2] / 100;
        var smin = s;
        var lmin = Math.max(l, 0.01);
        var sv;
        var v;
        l *= 2;
        s *= l <= 1 ? l : 2 - l;
        smin *= lmin <= 1 ? lmin : 2 - lmin;
        v = (l + s) / 2;
        sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
        return [h2, sv * 100, v * 100];
      };
      convert.hsv.rgb = function(hsv) {
        var h2 = hsv[0] / 60;
        var s = hsv[1] / 100;
        var v = hsv[2] / 100;
        var hi = Math.floor(h2) % 6;
        var f = h2 - Math.floor(h2);
        var p = 255 * v * (1 - s);
        var q = 255 * v * (1 - s * f);
        var t2 = 255 * v * (1 - s * (1 - f));
        v *= 255;
        switch (hi) {
          case 0:
            return [v, t2, p];
          case 1:
            return [q, v, p];
          case 2:
            return [p, v, t2];
          case 3:
            return [p, q, v];
          case 4:
            return [t2, p, v];
          case 5:
            return [v, p, q];
        }
      };
      convert.hsv.hsl = function(hsv) {
        var h2 = hsv[0];
        var s = hsv[1] / 100;
        var v = hsv[2] / 100;
        var vmin = Math.max(v, 0.01);
        var lmin;
        var sl;
        var l;
        l = (2 - s) * v;
        lmin = (2 - s) * vmin;
        sl = s * vmin;
        sl /= lmin <= 1 ? lmin : 2 - lmin;
        sl = sl || 0;
        l /= 2;
        return [h2, sl * 100, l * 100];
      };
      convert.hwb.rgb = function(hwb) {
        var h2 = hwb[0] / 360;
        var wh = hwb[1] / 100;
        var bl = hwb[2] / 100;
        var ratio = wh + bl;
        var i;
        var v;
        var f;
        var n;
        if (ratio > 1) {
          wh /= ratio;
          bl /= ratio;
        }
        i = Math.floor(6 * h2);
        v = 1 - bl;
        f = 6 * h2 - i;
        if ((i & 1) !== 0) {
          f = 1 - f;
        }
        n = wh + f * (v - wh);
        var r;
        var g;
        var b;
        switch (i) {
          default:
          case 6:
          case 0:
            r = v;
            g = n;
            b = wh;
            break;
          case 1:
            r = n;
            g = v;
            b = wh;
            break;
          case 2:
            r = wh;
            g = v;
            b = n;
            break;
          case 3:
            r = wh;
            g = n;
            b = v;
            break;
          case 4:
            r = n;
            g = wh;
            b = v;
            break;
          case 5:
            r = v;
            g = wh;
            b = n;
            break;
        }
        return [r * 255, g * 255, b * 255];
      };
      convert.cmyk.rgb = function(cmyk) {
        var c = cmyk[0] / 100;
        var m = cmyk[1] / 100;
        var y = cmyk[2] / 100;
        var k = cmyk[3] / 100;
        var r;
        var g;
        var b;
        r = 1 - Math.min(1, c * (1 - k) + k);
        g = 1 - Math.min(1, m * (1 - k) + k);
        b = 1 - Math.min(1, y * (1 - k) + k);
        return [r * 255, g * 255, b * 255];
      };
      convert.xyz.rgb = function(xyz) {
        var x = xyz[0] / 100;
        var y = xyz[1] / 100;
        var z = xyz[2] / 100;
        var r;
        var g;
        var b;
        r = x * 3.2406 + y * -1.5372 + z * -0.4986;
        g = x * -0.9689 + y * 1.8758 + z * 0.0415;
        b = x * 0.0557 + y * -0.204 + z * 1.057;
        r = r > 31308e-7 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r * 12.92;
        g = g > 31308e-7 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : g * 12.92;
        b = b > 31308e-7 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b * 12.92;
        r = Math.min(Math.max(0, r), 1);
        g = Math.min(Math.max(0, g), 1);
        b = Math.min(Math.max(0, b), 1);
        return [r * 255, g * 255, b * 255];
      };
      convert.xyz.lab = function(xyz) {
        var x = xyz[0];
        var y = xyz[1];
        var z = xyz[2];
        var l;
        var a2;
        var b;
        x /= 95.047;
        y /= 100;
        z /= 108.883;
        x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
        y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
        z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
        l = 116 * y - 16;
        a2 = 500 * (x - y);
        b = 200 * (y - z);
        return [l, a2, b];
      };
      convert.lab.xyz = function(lab) {
        var l = lab[0];
        var a2 = lab[1];
        var b = lab[2];
        var x;
        var y;
        var z;
        y = (l + 16) / 116;
        x = a2 / 500 + y;
        z = y - b / 200;
        var y2 = Math.pow(y, 3);
        var x2 = Math.pow(x, 3);
        var z2 = Math.pow(z, 3);
        y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
        x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
        z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
        x *= 95.047;
        y *= 100;
        z *= 108.883;
        return [x, y, z];
      };
      convert.lab.lch = function(lab) {
        var l = lab[0];
        var a2 = lab[1];
        var b = lab[2];
        var hr;
        var h2;
        var c;
        hr = Math.atan2(b, a2);
        h2 = hr * 360 / 2 / Math.PI;
        if (h2 < 0) {
          h2 += 360;
        }
        c = Math.sqrt(a2 * a2 + b * b);
        return [l, c, h2];
      };
      convert.lch.lab = function(lch) {
        var l = lch[0];
        var c = lch[1];
        var h2 = lch[2];
        var a2;
        var b;
        var hr;
        hr = h2 / 360 * 2 * Math.PI;
        a2 = c * Math.cos(hr);
        b = c * Math.sin(hr);
        return [l, a2, b];
      };
      convert.rgb.ansi16 = function(args) {
        var r = args[0];
        var g = args[1];
        var b = args[2];
        var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
        value = Math.round(value / 50);
        if (value === 0) {
          return 30;
        }
        var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
        if (value === 2) {
          ansi += 60;
        }
        return ansi;
      };
      convert.hsv.ansi16 = function(args) {
        return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
      };
      convert.rgb.ansi256 = function(args) {
        var r = args[0];
        var g = args[1];
        var b = args[2];
        if (r === g && g === b) {
          if (r < 8) {
            return 16;
          }
          if (r > 248) {
            return 231;
          }
          return Math.round((r - 8) / 247 * 24) + 232;
        }
        var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
        return ansi;
      };
      convert.ansi16.rgb = function(args) {
        var color = args % 10;
        if (color === 0 || color === 7) {
          if (args > 50) {
            color += 3.5;
          }
          color = color / 10.5 * 255;
          return [color, color, color];
        }
        var mult = (~~(args > 50) + 1) * 0.5;
        var r = (color & 1) * mult * 255;
        var g = (color >> 1 & 1) * mult * 255;
        var b = (color >> 2 & 1) * mult * 255;
        return [r, g, b];
      };
      convert.ansi256.rgb = function(args) {
        if (args >= 232) {
          var c = (args - 232) * 10 + 8;
          return [c, c, c];
        }
        args -= 16;
        var rem;
        var r = Math.floor(args / 36) / 5 * 255;
        var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
        var b = rem % 6 / 5 * 255;
        return [r, g, b];
      };
      convert.rgb.hex = function(args) {
        var integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
        var string = integer.toString(16).toUpperCase();
        return "000000".substring(string.length) + string;
      };
      convert.hex.rgb = function(args) {
        var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
        if (!match) {
          return [0, 0, 0];
        }
        var colorString = match[0];
        if (match[0].length === 3) {
          colorString = colorString.split("").map(function(char) {
            return char + char;
          }).join("");
        }
        var integer = parseInt(colorString, 16);
        var r = integer >> 16 & 255;
        var g = integer >> 8 & 255;
        var b = integer & 255;
        return [r, g, b];
      };
      convert.rgb.hcg = function(rgb) {
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        var max = Math.max(Math.max(r, g), b);
        var min = Math.min(Math.min(r, g), b);
        var chroma = max - min;
        var grayscale;
        var hue;
        if (chroma < 1) {
          grayscale = min / (1 - chroma);
        } else {
          grayscale = 0;
        }
        if (chroma <= 0) {
          hue = 0;
        } else if (max === r) {
          hue = (g - b) / chroma % 6;
        } else if (max === g) {
          hue = 2 + (b - r) / chroma;
        } else {
          hue = 4 + (r - g) / chroma + 4;
        }
        hue /= 6;
        hue %= 1;
        return [hue * 360, chroma * 100, grayscale * 100];
      };
      convert.hsl.hcg = function(hsl) {
        var s = hsl[1] / 100;
        var l = hsl[2] / 100;
        var c = 1;
        var f = 0;
        if (l < 0.5) {
          c = 2 * s * l;
        } else {
          c = 2 * s * (1 - l);
        }
        if (c < 1) {
          f = (l - 0.5 * c) / (1 - c);
        }
        return [hsl[0], c * 100, f * 100];
      };
      convert.hsv.hcg = function(hsv) {
        var s = hsv[1] / 100;
        var v = hsv[2] / 100;
        var c = s * v;
        var f = 0;
        if (c < 1) {
          f = (v - c) / (1 - c);
        }
        return [hsv[0], c * 100, f * 100];
      };
      convert.hcg.rgb = function(hcg) {
        var h2 = hcg[0] / 360;
        var c = hcg[1] / 100;
        var g = hcg[2] / 100;
        if (c === 0) {
          return [g * 255, g * 255, g * 255];
        }
        var pure = [0, 0, 0];
        var hi = h2 % 1 * 6;
        var v = hi % 1;
        var w2 = 1 - v;
        var mg = 0;
        switch (Math.floor(hi)) {
          case 0:
            pure[0] = 1;
            pure[1] = v;
            pure[2] = 0;
            break;
          case 1:
            pure[0] = w2;
            pure[1] = 1;
            pure[2] = 0;
            break;
          case 2:
            pure[0] = 0;
            pure[1] = 1;
            pure[2] = v;
            break;
          case 3:
            pure[0] = 0;
            pure[1] = w2;
            pure[2] = 1;
            break;
          case 4:
            pure[0] = v;
            pure[1] = 0;
            pure[2] = 1;
            break;
          default:
            pure[0] = 1;
            pure[1] = 0;
            pure[2] = w2;
        }
        mg = (1 - c) * g;
        return [
          (c * pure[0] + mg) * 255,
          (c * pure[1] + mg) * 255,
          (c * pure[2] + mg) * 255
        ];
      };
      convert.hcg.hsv = function(hcg) {
        var c = hcg[1] / 100;
        var g = hcg[2] / 100;
        var v = c + g * (1 - c);
        var f = 0;
        if (v > 0) {
          f = c / v;
        }
        return [hcg[0], f * 100, v * 100];
      };
      convert.hcg.hsl = function(hcg) {
        var c = hcg[1] / 100;
        var g = hcg[2] / 100;
        var l = g * (1 - c) + 0.5 * c;
        var s = 0;
        if (l > 0 && l < 0.5) {
          s = c / (2 * l);
        } else if (l >= 0.5 && l < 1) {
          s = c / (2 * (1 - l));
        }
        return [hcg[0], s * 100, l * 100];
      };
      convert.hcg.hwb = function(hcg) {
        var c = hcg[1] / 100;
        var g = hcg[2] / 100;
        var v = c + g * (1 - c);
        return [hcg[0], (v - c) * 100, (1 - v) * 100];
      };
      convert.hwb.hcg = function(hwb) {
        var w2 = hwb[1] / 100;
        var b = hwb[2] / 100;
        var v = 1 - b;
        var c = v - w2;
        var g = 0;
        if (c < 1) {
          g = (v - c) / (1 - c);
        }
        return [hwb[0], c * 100, g * 100];
      };
      convert.apple.rgb = function(apple) {
        return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
      };
      convert.rgb.apple = function(rgb) {
        return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
      };
      convert.gray.rgb = function(args) {
        return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
      };
      convert.gray.hsl = convert.gray.hsv = function(args) {
        return [0, 0, args[0]];
      };
      convert.gray.hwb = function(gray) {
        return [0, 100, gray[0]];
      };
      convert.gray.cmyk = function(gray) {
        return [0, 0, 0, gray[0]];
      };
      convert.gray.lab = function(gray) {
        return [gray[0], 0, 0];
      };
      convert.gray.hex = function(gray) {
        var val = Math.round(gray[0] / 100 * 255) & 255;
        var integer = (val << 16) + (val << 8) + val;
        var string = integer.toString(16).toUpperCase();
        return "000000".substring(string.length) + string;
      };
      convert.rgb.gray = function(rgb) {
        var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
        return [val / 255 * 100];
      };
    }
  });

  // node_modules/@babel/highlight/node_modules/color-convert/route.js
  var require_route = __commonJS({
    "node_modules/@babel/highlight/node_modules/color-convert/route.js"(exports, module) {
      init_esbuild_inject();
      var conversions = require_conversions();
      function buildGraph() {
        var graph = {};
        var models = Object.keys(conversions);
        for (var len = models.length, i = 0; i < len; i++) {
          graph[models[i]] = {
            // http://jsperf.com/1-vs-infinity
            // micro-opt, but this is simple.
            distance: -1,
            parent: null
          };
        }
        return graph;
      }
      function deriveBFS(fromModel) {
        var graph = buildGraph();
        var queue = [fromModel];
        graph[fromModel].distance = 0;
        while (queue.length) {
          var current = queue.pop();
          var adjacents = Object.keys(conversions[current]);
          for (var len = adjacents.length, i = 0; i < len; i++) {
            var adjacent = adjacents[i];
            var node = graph[adjacent];
            if (node.distance === -1) {
              node.distance = graph[current].distance + 1;
              node.parent = current;
              queue.unshift(adjacent);
            }
          }
        }
        return graph;
      }
      function link(from, to) {
        return function(args) {
          return to(from(args));
        };
      }
      function wrapConversion(toModel, graph) {
        var path = [graph[toModel].parent, toModel];
        var fn = conversions[graph[toModel].parent][toModel];
        var cur = graph[toModel].parent;
        while (graph[cur].parent) {
          path.unshift(graph[cur].parent);
          fn = link(conversions[graph[cur].parent][cur], fn);
          cur = graph[cur].parent;
        }
        fn.conversion = path;
        return fn;
      }
      module.exports = function(fromModel) {
        var graph = deriveBFS(fromModel);
        var conversion = {};
        var models = Object.keys(graph);
        for (var len = models.length, i = 0; i < len; i++) {
          var toModel = models[i];
          var node = graph[toModel];
          if (node.parent === null) {
            continue;
          }
          conversion[toModel] = wrapConversion(toModel, graph);
        }
        return conversion;
      };
    }
  });

  // node_modules/@babel/highlight/node_modules/color-convert/index.js
  var require_color_convert = __commonJS({
    "node_modules/@babel/highlight/node_modules/color-convert/index.js"(exports, module) {
      init_esbuild_inject();
      var conversions = require_conversions();
      var route = require_route();
      var convert = {};
      var models = Object.keys(conversions);
      function wrapRaw(fn) {
        var wrappedFn = function(args) {
          if (args === void 0 || args === null) {
            return args;
          }
          if (arguments.length > 1) {
            args = Array.prototype.slice.call(arguments);
          }
          return fn(args);
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      function wrapRounded(fn) {
        var wrappedFn = function(args) {
          if (args === void 0 || args === null) {
            return args;
          }
          if (arguments.length > 1) {
            args = Array.prototype.slice.call(arguments);
          }
          var result = fn(args);
          if (typeof result === "object") {
            for (var len = result.length, i = 0; i < len; i++) {
              result[i] = Math.round(result[i]);
            }
          }
          return result;
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      models.forEach(function(fromModel) {
        convert[fromModel] = {};
        Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
        Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
        var routes = route(fromModel);
        var routeModels = Object.keys(routes);
        routeModels.forEach(function(toModel) {
          var fn = routes[toModel];
          convert[fromModel][toModel] = wrapRounded(fn);
          convert[fromModel][toModel].raw = wrapRaw(fn);
        });
      });
      module.exports = convert;
    }
  });

  // node_modules/@babel/highlight/node_modules/ansi-styles/index.js
  var require_ansi_styles = __commonJS({
    "node_modules/@babel/highlight/node_modules/ansi-styles/index.js"(exports, module) {
      "use strict";
      init_esbuild_inject();
      var colorConvert = require_color_convert();
      var wrapAnsi16 = (fn, offset) => function() {
        const code = fn.apply(colorConvert, arguments);
        return `\x1B[${code + offset}m`;
      };
      var wrapAnsi256 = (fn, offset) => function() {
        const code = fn.apply(colorConvert, arguments);
        return `\x1B[${38 + offset};5;${code}m`;
      };
      var wrapAnsi16m = (fn, offset) => function() {
        const rgb = fn.apply(colorConvert, arguments);
        return `\x1B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
      };
      function assembleStyles() {
        const codes = /* @__PURE__ */ new Map();
        const styles = {
          modifier: {
            reset: [0, 0],
            // 21 isn't widely supported and 22 does the same thing
            bold: [1, 22],
            dim: [2, 22],
            italic: [3, 23],
            underline: [4, 24],
            inverse: [7, 27],
            hidden: [8, 28],
            strikethrough: [9, 29]
          },
          color: {
            black: [30, 39],
            red: [31, 39],
            green: [32, 39],
            yellow: [33, 39],
            blue: [34, 39],
            magenta: [35, 39],
            cyan: [36, 39],
            white: [37, 39],
            gray: [90, 39],
            // Bright color
            redBright: [91, 39],
            greenBright: [92, 39],
            yellowBright: [93, 39],
            blueBright: [94, 39],
            magentaBright: [95, 39],
            cyanBright: [96, 39],
            whiteBright: [97, 39]
          },
          bgColor: {
            bgBlack: [40, 49],
            bgRed: [41, 49],
            bgGreen: [42, 49],
            bgYellow: [43, 49],
            bgBlue: [44, 49],
            bgMagenta: [45, 49],
            bgCyan: [46, 49],
            bgWhite: [47, 49],
            // Bright color
            bgBlackBright: [100, 49],
            bgRedBright: [101, 49],
            bgGreenBright: [102, 49],
            bgYellowBright: [103, 49],
            bgBlueBright: [104, 49],
            bgMagentaBright: [105, 49],
            bgCyanBright: [106, 49],
            bgWhiteBright: [107, 49]
          }
        };
        styles.color.grey = styles.color.gray;
        for (const groupName of Object.keys(styles)) {
          const group = styles[groupName];
          for (const styleName of Object.keys(group)) {
            const style = group[styleName];
            styles[styleName] = {
              open: `\x1B[${style[0]}m`,
              close: `\x1B[${style[1]}m`
            };
            group[styleName] = styles[styleName];
            codes.set(style[0], style[1]);
          }
          Object.defineProperty(styles, groupName, {
            value: group,
            enumerable: false
          });
          Object.defineProperty(styles, "codes", {
            value: codes,
            enumerable: false
          });
        }
        const ansi2ansi = (n) => n;
        const rgb2rgb = (r, g, b) => [r, g, b];
        styles.color.close = "\x1B[39m";
        styles.bgColor.close = "\x1B[49m";
        styles.color.ansi = {
          ansi: wrapAnsi16(ansi2ansi, 0)
        };
        styles.color.ansi256 = {
          ansi256: wrapAnsi256(ansi2ansi, 0)
        };
        styles.color.ansi16m = {
          rgb: wrapAnsi16m(rgb2rgb, 0)
        };
        styles.bgColor.ansi = {
          ansi: wrapAnsi16(ansi2ansi, 10)
        };
        styles.bgColor.ansi256 = {
          ansi256: wrapAnsi256(ansi2ansi, 10)
        };
        styles.bgColor.ansi16m = {
          rgb: wrapAnsi16m(rgb2rgb, 10)
        };
        for (let key of Object.keys(colorConvert)) {
          if (typeof colorConvert[key] !== "object") {
            continue;
          }
          const suite = colorConvert[key];
          if (key === "ansi16") {
            key = "ansi";
          }
          if ("ansi16" in suite) {
            styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
            styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
          }
          if ("ansi256" in suite) {
            styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
            styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
          }
          if ("rgb" in suite) {
            styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
            styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
          }
        }
        return styles;
      }
      Object.defineProperty(module, "exports", {
        enumerable: true,
        get: assembleStyles
      });
    }
  });

  // node_modules/@babel/highlight/node_modules/supports-color/browser.js
  var require_browser2 = __commonJS({
    "node_modules/@babel/highlight/node_modules/supports-color/browser.js"(exports, module) {
      "use strict";
      init_esbuild_inject();
      module.exports = {
        stdout: false,
        stderr: false
      };
    }
  });

  // node_modules/@babel/highlight/node_modules/chalk/templates.js
  var require_templates = __commonJS({
    "node_modules/@babel/highlight/node_modules/chalk/templates.js"(exports, module) {
      "use strict";
      init_esbuild_inject();
      var TEMPLATE_REGEX = /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
      var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
      var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
      var ESCAPE_REGEX = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi;
      var ESCAPES = /* @__PURE__ */ new Map([
        ["n", "\n"],
        ["r", "\r"],
        ["t", "	"],
        ["b", "\b"],
        ["f", "\f"],
        ["v", "\v"],
        ["0", "\0"],
        ["\\", "\\"],
        ["e", "\x1B"],
        ["a", "\x07"]
      ]);
      function unescape(c) {
        if (c[0] === "u" && c.length === 5 || c[0] === "x" && c.length === 3) {
          return String.fromCharCode(parseInt(c.slice(1), 16));
        }
        return ESCAPES.get(c) || c;
      }
      function parseArguments(name, args) {
        const results = [];
        const chunks = args.trim().split(/\s*,\s*/g);
        let matches;
        for (const chunk of chunks) {
          if (!isNaN(chunk)) {
            results.push(Number(chunk));
          } else if (matches = chunk.match(STRING_REGEX)) {
            results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, chr) => escape ? unescape(escape) : chr));
          } else {
            throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
          }
        }
        return results;
      }
      function parseStyle(style) {
        STYLE_REGEX.lastIndex = 0;
        const results = [];
        let matches;
        while ((matches = STYLE_REGEX.exec(style)) !== null) {
          const name = matches[1];
          if (matches[2]) {
            const args = parseArguments(name, matches[2]);
            results.push([name].concat(args));
          } else {
            results.push([name]);
          }
        }
        return results;
      }
      function buildStyle(chalk, styles) {
        const enabled = {};
        for (const layer of styles) {
          for (const style of layer.styles) {
            enabled[style[0]] = layer.inverse ? null : style.slice(1);
          }
        }
        let current = chalk;
        for (const styleName of Object.keys(enabled)) {
          if (Array.isArray(enabled[styleName])) {
            if (!(styleName in current)) {
              throw new Error(`Unknown Chalk style: ${styleName}`);
            }
            if (enabled[styleName].length > 0) {
              current = current[styleName].apply(current, enabled[styleName]);
            } else {
              current = current[styleName];
            }
          }
        }
        return current;
      }
      module.exports = (chalk, tmp) => {
        const styles = [];
        const chunks = [];
        let chunk = [];
        tmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {
          if (escapeChar) {
            chunk.push(unescape(escapeChar));
          } else if (style) {
            const str = chunk.join("");
            chunk = [];
            chunks.push(styles.length === 0 ? str : buildStyle(chalk, styles)(str));
            styles.push({ inverse, styles: parseStyle(style) });
          } else if (close) {
            if (styles.length === 0) {
              throw new Error("Found extraneous } in Chalk template literal");
            }
            chunks.push(buildStyle(chalk, styles)(chunk.join("")));
            chunk = [];
            styles.pop();
          } else {
            chunk.push(chr);
          }
        });
        chunks.push(chunk.join(""));
        if (styles.length > 0) {
          const errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? "" : "s"} (\`}\`)`;
          throw new Error(errMsg);
        }
        return chunks.join("");
      };
    }
  });

  // node_modules/@babel/highlight/node_modules/chalk/index.js
  var require_chalk = __commonJS({
    "node_modules/@babel/highlight/node_modules/chalk/index.js"(exports, module) {
      "use strict";
      init_esbuild_inject();
      var escapeStringRegexp = require_escape_string_regexp();
      var ansiStyles = require_ansi_styles();
      var stdoutColor = require_browser2().stdout;
      var template = require_templates();
      var isSimpleWindowsTerm = process.platform === "win32" && !(process.env.TERM || "").toLowerCase().startsWith("xterm");
      var levelMapping = ["ansi", "ansi", "ansi256", "ansi16m"];
      var skipModels = /* @__PURE__ */ new Set(["gray"]);
      var styles = /* @__PURE__ */ Object.create(null);
      function applyOptions(obj, options) {
        options = options || {};
        const scLevel = stdoutColor ? stdoutColor.level : 0;
        obj.level = options.level === void 0 ? scLevel : options.level;
        obj.enabled = "enabled" in options ? options.enabled : obj.level > 0;
      }
      function Chalk(options) {
        if (!this || !(this instanceof Chalk) || this.template) {
          const chalk = {};
          applyOptions(chalk, options);
          chalk.template = function() {
            const args = [].slice.call(arguments);
            return chalkTag.apply(null, [chalk.template].concat(args));
          };
          Object.setPrototypeOf(chalk, Chalk.prototype);
          Object.setPrototypeOf(chalk.template, chalk);
          chalk.template.constructor = Chalk;
          return chalk.template;
        }
        applyOptions(this, options);
      }
      if (isSimpleWindowsTerm) {
        ansiStyles.blue.open = "\x1B[94m";
      }
      for (const key of Object.keys(ansiStyles)) {
        ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), "g");
        styles[key] = {
          get() {
            const codes = ansiStyles[key];
            return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key);
          }
        };
      }
      styles.visible = {
        get() {
          return build.call(this, this._styles || [], true, "visible");
        }
      };
      ansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), "g");
      for (const model of Object.keys(ansiStyles.color.ansi)) {
        if (skipModels.has(model)) {
          continue;
        }
        styles[model] = {
          get() {
            const level = this.level;
            return function() {
              const open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);
              const codes = {
                open,
                close: ansiStyles.color.close,
                closeRe: ansiStyles.color.closeRe
              };
              return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
            };
          }
        };
      }
      ansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), "g");
      for (const model of Object.keys(ansiStyles.bgColor.ansi)) {
        if (skipModels.has(model)) {
          continue;
        }
        const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
        styles[bgModel] = {
          get() {
            const level = this.level;
            return function() {
              const open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);
              const codes = {
                open,
                close: ansiStyles.bgColor.close,
                closeRe: ansiStyles.bgColor.closeRe
              };
              return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
            };
          }
        };
      }
      var proto = Object.defineProperties(() => {
      }, styles);
      function build(_styles, _empty, key) {
        const builder = function() {
          return applyStyle.apply(builder, arguments);
        };
        builder._styles = _styles;
        builder._empty = _empty;
        const self2 = this;
        Object.defineProperty(builder, "level", {
          enumerable: true,
          get() {
            return self2.level;
          },
          set(level) {
            self2.level = level;
          }
        });
        Object.defineProperty(builder, "enabled", {
          enumerable: true,
          get() {
            return self2.enabled;
          },
          set(enabled) {
            self2.enabled = enabled;
          }
        });
        builder.hasGrey = this.hasGrey || key === "gray" || key === "grey";
        builder.__proto__ = proto;
        return builder;
      }
      function applyStyle() {
        const args = arguments;
        const argsLen = args.length;
        let str = String(arguments[0]);
        if (argsLen === 0) {
          return "";
        }
        if (argsLen > 1) {
          for (let a2 = 1; a2 < argsLen; a2++) {
            str += " " + args[a2];
          }
        }
        if (!this.enabled || this.level <= 0 || !str) {
          return this._empty ? "" : str;
        }
        const originalDim = ansiStyles.dim.open;
        if (isSimpleWindowsTerm && this.hasGrey) {
          ansiStyles.dim.open = "";
        }
        for (const code of this._styles.slice().reverse()) {
          str = code.open + str.replace(code.closeRe, code.open) + code.close;
          str = str.replace(/\r?\n/g, `${code.close}$&${code.open}`);
        }
        ansiStyles.dim.open = originalDim;
        return str;
      }
      function chalkTag(chalk, strings) {
        if (!Array.isArray(strings)) {
          return [].slice.call(arguments, 1).join(" ");
        }
        const args = [].slice.call(arguments, 2);
        const parts = [strings.raw[0]];
        for (let i = 1; i < strings.length; i++) {
          parts.push(String(args[i - 1]).replace(/[{}\\]/g, "\\$&"));
          parts.push(String(strings.raw[i]));
        }
        return template(chalk, parts.join(""));
      }
      Object.defineProperties(Chalk.prototype, styles);
      module.exports = Chalk();
      module.exports.supportsColor = stdoutColor;
      module.exports.default = module.exports;
    }
  });

  // node_modules/@babel/highlight/lib/index.js
  var require_lib8 = __commonJS({
    "node_modules/@babel/highlight/lib/index.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = highlight;
      exports.shouldHighlight = shouldHighlight;
      var _jsTokens = require_js_tokens();
      var _helperValidatorIdentifier = require_lib();
      var _chalk = _interopRequireWildcard(require_chalk(), true);
      function _getRequireWildcardCache(e) {
        if ("function" != typeof WeakMap)
          return null;
        var r = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e2) {
          return e2 ? t2 : r;
        })(e);
      }
      function _interopRequireWildcard(e, r) {
        if (!r && e && e.__esModule)
          return e;
        if (null === e || "object" != typeof e && "function" != typeof e)
          return { default: e };
        var t2 = _getRequireWildcardCache(r);
        if (t2 && t2.has(e))
          return t2.get(e);
        var n = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u in e)
          if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
            var i = a2 ? Object.getOwnPropertyDescriptor(e, u) : null;
            i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
          }
        return n.default = e, t2 && t2.set(e, n), n;
      }
      var sometimesKeywords = /* @__PURE__ */ new Set(["as", "async", "from", "get", "of", "set"]);
      function getDefs(chalk) {
        return {
          keyword: chalk.cyan,
          capitalized: chalk.yellow,
          jsxIdentifier: chalk.yellow,
          punctuator: chalk.yellow,
          number: chalk.magenta,
          string: chalk.green,
          regex: chalk.magenta,
          comment: chalk.grey,
          invalid: chalk.white.bgRed.bold
        };
      }
      var NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
      var BRACKET = /^[()[\]{}]$/;
      var tokenize2;
      {
        const JSX_TAG = /^[a-z][\w-]*$/i;
        const getTokenType = function(token, offset, text) {
          if (token.type === "name") {
            if ((0, _helperValidatorIdentifier.isKeyword)(token.value) || (0, _helperValidatorIdentifier.isStrictReservedWord)(token.value, true) || sometimesKeywords.has(token.value)) {
              return "keyword";
            }
            if (JSX_TAG.test(token.value) && (text[offset - 1] === "<" || text.slice(offset - 2, offset) == "</")) {
              return "jsxIdentifier";
            }
            if (token.value[0] !== token.value[0].toLowerCase()) {
              return "capitalized";
            }
          }
          if (token.type === "punctuator" && BRACKET.test(token.value)) {
            return "bracket";
          }
          if (token.type === "invalid" && (token.value === "@" || token.value === "#")) {
            return "punctuator";
          }
          return token.type;
        };
        tokenize2 = function* (text) {
          let match;
          while (match = _jsTokens.default.exec(text)) {
            const token = _jsTokens.matchToToken(match);
            yield {
              type: getTokenType(token, match.index, text),
              value: token.value
            };
          }
        };
      }
      function highlightTokens(defs, text) {
        let highlighted = "";
        for (const {
          type,
          value
        } of tokenize2(text)) {
          const colorize = defs[type];
          if (colorize) {
            highlighted += value.split(NEWLINE).map((str) => colorize(str)).join("\n");
          } else {
            highlighted += value;
          }
        }
        return highlighted;
      }
      function shouldHighlight(options) {
        return _chalk.default.level > 0 || options.forceColor;
      }
      var chalkWithForcedColor = void 0;
      function getChalk(forceColor) {
        if (forceColor) {
          var _chalkWithForcedColor;
          (_chalkWithForcedColor = chalkWithForcedColor) != null ? _chalkWithForcedColor : chalkWithForcedColor = new _chalk.default.constructor({
            enabled: true,
            level: 1
          });
          return chalkWithForcedColor;
        }
        return _chalk.default;
      }
      {
        exports.getChalk = (options) => getChalk(options.forceColor);
      }
      function highlight(code, options = {}) {
        if (code !== "" && shouldHighlight(options)) {
          const defs = getDefs(getChalk(options.forceColor));
          return highlightTokens(defs, code);
        } else {
          return code;
        }
      }
    }
  });

  // node_modules/@babel/code-frame/node_modules/color-name/index.js
  var require_color_name2 = __commonJS({
    "node_modules/@babel/code-frame/node_modules/color-name/index.js"(exports, module) {
      "use strict";
      init_esbuild_inject();
      module.exports = {
        "aliceblue": [240, 248, 255],
        "antiquewhite": [250, 235, 215],
        "aqua": [0, 255, 255],
        "aquamarine": [127, 255, 212],
        "azure": [240, 255, 255],
        "beige": [245, 245, 220],
        "bisque": [255, 228, 196],
        "black": [0, 0, 0],
        "blanchedalmond": [255, 235, 205],
        "blue": [0, 0, 255],
        "blueviolet": [138, 43, 226],
        "brown": [165, 42, 42],
        "burlywood": [222, 184, 135],
        "cadetblue": [95, 158, 160],
        "chartreuse": [127, 255, 0],
        "chocolate": [210, 105, 30],
        "coral": [255, 127, 80],
        "cornflowerblue": [100, 149, 237],
        "cornsilk": [255, 248, 220],
        "crimson": [220, 20, 60],
        "cyan": [0, 255, 255],
        "darkblue": [0, 0, 139],
        "darkcyan": [0, 139, 139],
        "darkgoldenrod": [184, 134, 11],
        "darkgray": [169, 169, 169],
        "darkgreen": [0, 100, 0],
        "darkgrey": [169, 169, 169],
        "darkkhaki": [189, 183, 107],
        "darkmagenta": [139, 0, 139],
        "darkolivegreen": [85, 107, 47],
        "darkorange": [255, 140, 0],
        "darkorchid": [153, 50, 204],
        "darkred": [139, 0, 0],
        "darksalmon": [233, 150, 122],
        "darkseagreen": [143, 188, 143],
        "darkslateblue": [72, 61, 139],
        "darkslategray": [47, 79, 79],
        "darkslategrey": [47, 79, 79],
        "darkturquoise": [0, 206, 209],
        "darkviolet": [148, 0, 211],
        "deeppink": [255, 20, 147],
        "deepskyblue": [0, 191, 255],
        "dimgray": [105, 105, 105],
        "dimgrey": [105, 105, 105],
        "dodgerblue": [30, 144, 255],
        "firebrick": [178, 34, 34],
        "floralwhite": [255, 250, 240],
        "forestgreen": [34, 139, 34],
        "fuchsia": [255, 0, 255],
        "gainsboro": [220, 220, 220],
        "ghostwhite": [248, 248, 255],
        "gold": [255, 215, 0],
        "goldenrod": [218, 165, 32],
        "gray": [128, 128, 128],
        "green": [0, 128, 0],
        "greenyellow": [173, 255, 47],
        "grey": [128, 128, 128],
        "honeydew": [240, 255, 240],
        "hotpink": [255, 105, 180],
        "indianred": [205, 92, 92],
        "indigo": [75, 0, 130],
        "ivory": [255, 255, 240],
        "khaki": [240, 230, 140],
        "lavender": [230, 230, 250],
        "lavenderblush": [255, 240, 245],
        "lawngreen": [124, 252, 0],
        "lemonchiffon": [255, 250, 205],
        "lightblue": [173, 216, 230],
        "lightcoral": [240, 128, 128],
        "lightcyan": [224, 255, 255],
        "lightgoldenrodyellow": [250, 250, 210],
        "lightgray": [211, 211, 211],
        "lightgreen": [144, 238, 144],
        "lightgrey": [211, 211, 211],
        "lightpink": [255, 182, 193],
        "lightsalmon": [255, 160, 122],
        "lightseagreen": [32, 178, 170],
        "lightskyblue": [135, 206, 250],
        "lightslategray": [119, 136, 153],
        "lightslategrey": [119, 136, 153],
        "lightsteelblue": [176, 196, 222],
        "lightyellow": [255, 255, 224],
        "lime": [0, 255, 0],
        "limegreen": [50, 205, 50],
        "linen": [250, 240, 230],
        "magenta": [255, 0, 255],
        "maroon": [128, 0, 0],
        "mediumaquamarine": [102, 205, 170],
        "mediumblue": [0, 0, 205],
        "mediumorchid": [186, 85, 211],
        "mediumpurple": [147, 112, 219],
        "mediumseagreen": [60, 179, 113],
        "mediumslateblue": [123, 104, 238],
        "mediumspringgreen": [0, 250, 154],
        "mediumturquoise": [72, 209, 204],
        "mediumvioletred": [199, 21, 133],
        "midnightblue": [25, 25, 112],
        "mintcream": [245, 255, 250],
        "mistyrose": [255, 228, 225],
        "moccasin": [255, 228, 181],
        "navajowhite": [255, 222, 173],
        "navy": [0, 0, 128],
        "oldlace": [253, 245, 230],
        "olive": [128, 128, 0],
        "olivedrab": [107, 142, 35],
        "orange": [255, 165, 0],
        "orangered": [255, 69, 0],
        "orchid": [218, 112, 214],
        "palegoldenrod": [238, 232, 170],
        "palegreen": [152, 251, 152],
        "paleturquoise": [175, 238, 238],
        "palevioletred": [219, 112, 147],
        "papayawhip": [255, 239, 213],
        "peachpuff": [255, 218, 185],
        "peru": [205, 133, 63],
        "pink": [255, 192, 203],
        "plum": [221, 160, 221],
        "powderblue": [176, 224, 230],
        "purple": [128, 0, 128],
        "rebeccapurple": [102, 51, 153],
        "red": [255, 0, 0],
        "rosybrown": [188, 143, 143],
        "royalblue": [65, 105, 225],
        "saddlebrown": [139, 69, 19],
        "salmon": [250, 128, 114],
        "sandybrown": [244, 164, 96],
        "seagreen": [46, 139, 87],
        "seashell": [255, 245, 238],
        "sienna": [160, 82, 45],
        "silver": [192, 192, 192],
        "skyblue": [135, 206, 235],
        "slateblue": [106, 90, 205],
        "slategray": [112, 128, 144],
        "slategrey": [112, 128, 144],
        "snow": [255, 250, 250],
        "springgreen": [0, 255, 127],
        "steelblue": [70, 130, 180],
        "tan": [210, 180, 140],
        "teal": [0, 128, 128],
        "thistle": [216, 191, 216],
        "tomato": [255, 99, 71],
        "turquoise": [64, 224, 208],
        "violet": [238, 130, 238],
        "wheat": [245, 222, 179],
        "white": [255, 255, 255],
        "whitesmoke": [245, 245, 245],
        "yellow": [255, 255, 0],
        "yellowgreen": [154, 205, 50]
      };
    }
  });

  // node_modules/@babel/code-frame/node_modules/color-convert/conversions.js
  var require_conversions2 = __commonJS({
    "node_modules/@babel/code-frame/node_modules/color-convert/conversions.js"(exports, module) {
      init_esbuild_inject();
      var cssKeywords = require_color_name2();
      var reverseKeywords = {};
      for (key in cssKeywords) {
        if (cssKeywords.hasOwnProperty(key)) {
          reverseKeywords[cssKeywords[key]] = key;
        }
      }
      var key;
      var convert = module.exports = {
        rgb: { channels: 3, labels: "rgb" },
        hsl: { channels: 3, labels: "hsl" },
        hsv: { channels: 3, labels: "hsv" },
        hwb: { channels: 3, labels: "hwb" },
        cmyk: { channels: 4, labels: "cmyk" },
        xyz: { channels: 3, labels: "xyz" },
        lab: { channels: 3, labels: "lab" },
        lch: { channels: 3, labels: "lch" },
        hex: { channels: 1, labels: ["hex"] },
        keyword: { channels: 1, labels: ["keyword"] },
        ansi16: { channels: 1, labels: ["ansi16"] },
        ansi256: { channels: 1, labels: ["ansi256"] },
        hcg: { channels: 3, labels: ["h", "c", "g"] },
        apple: { channels: 3, labels: ["r16", "g16", "b16"] },
        gray: { channels: 1, labels: ["gray"] }
      };
      for (model in convert) {
        if (convert.hasOwnProperty(model)) {
          if (!("channels" in convert[model])) {
            throw new Error("missing channels property: " + model);
          }
          if (!("labels" in convert[model])) {
            throw new Error("missing channel labels property: " + model);
          }
          if (convert[model].labels.length !== convert[model].channels) {
            throw new Error("channel and label counts mismatch: " + model);
          }
          channels = convert[model].channels;
          labels = convert[model].labels;
          delete convert[model].channels;
          delete convert[model].labels;
          Object.defineProperty(convert[model], "channels", { value: channels });
          Object.defineProperty(convert[model], "labels", { value: labels });
        }
      }
      var channels;
      var labels;
      var model;
      convert.rgb.hsl = function(rgb) {
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        var min = Math.min(r, g, b);
        var max = Math.max(r, g, b);
        var delta = max - min;
        var h2;
        var s;
        var l;
        if (max === min) {
          h2 = 0;
        } else if (r === max) {
          h2 = (g - b) / delta;
        } else if (g === max) {
          h2 = 2 + (b - r) / delta;
        } else if (b === max) {
          h2 = 4 + (r - g) / delta;
        }
        h2 = Math.min(h2 * 60, 360);
        if (h2 < 0) {
          h2 += 360;
        }
        l = (min + max) / 2;
        if (max === min) {
          s = 0;
        } else if (l <= 0.5) {
          s = delta / (max + min);
        } else {
          s = delta / (2 - max - min);
        }
        return [h2, s * 100, l * 100];
      };
      convert.rgb.hsv = function(rgb) {
        var rdif;
        var gdif;
        var bdif;
        var h2;
        var s;
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        var v = Math.max(r, g, b);
        var diff = v - Math.min(r, g, b);
        var diffc = function(c) {
          return (v - c) / 6 / diff + 1 / 2;
        };
        if (diff === 0) {
          h2 = s = 0;
        } else {
          s = diff / v;
          rdif = diffc(r);
          gdif = diffc(g);
          bdif = diffc(b);
          if (r === v) {
            h2 = bdif - gdif;
          } else if (g === v) {
            h2 = 1 / 3 + rdif - bdif;
          } else if (b === v) {
            h2 = 2 / 3 + gdif - rdif;
          }
          if (h2 < 0) {
            h2 += 1;
          } else if (h2 > 1) {
            h2 -= 1;
          }
        }
        return [
          h2 * 360,
          s * 100,
          v * 100
        ];
      };
      convert.rgb.hwb = function(rgb) {
        var r = rgb[0];
        var g = rgb[1];
        var b = rgb[2];
        var h2 = convert.rgb.hsl(rgb)[0];
        var w2 = 1 / 255 * Math.min(r, Math.min(g, b));
        b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
        return [h2, w2 * 100, b * 100];
      };
      convert.rgb.cmyk = function(rgb) {
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        var c;
        var m;
        var y;
        var k;
        k = Math.min(1 - r, 1 - g, 1 - b);
        c = (1 - r - k) / (1 - k) || 0;
        m = (1 - g - k) / (1 - k) || 0;
        y = (1 - b - k) / (1 - k) || 0;
        return [c * 100, m * 100, y * 100, k * 100];
      };
      function comparativeDistance(x, y) {
        return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
      }
      convert.rgb.keyword = function(rgb) {
        var reversed = reverseKeywords[rgb];
        if (reversed) {
          return reversed;
        }
        var currentClosestDistance = Infinity;
        var currentClosestKeyword;
        for (var keyword in cssKeywords) {
          if (cssKeywords.hasOwnProperty(keyword)) {
            var value = cssKeywords[keyword];
            var distance = comparativeDistance(rgb, value);
            if (distance < currentClosestDistance) {
              currentClosestDistance = distance;
              currentClosestKeyword = keyword;
            }
          }
        }
        return currentClosestKeyword;
      };
      convert.keyword.rgb = function(keyword) {
        return cssKeywords[keyword];
      };
      convert.rgb.xyz = function(rgb) {
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
        g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
        b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
        var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
        var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
        var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
        return [x * 100, y * 100, z * 100];
      };
      convert.rgb.lab = function(rgb) {
        var xyz = convert.rgb.xyz(rgb);
        var x = xyz[0];
        var y = xyz[1];
        var z = xyz[2];
        var l;
        var a2;
        var b;
        x /= 95.047;
        y /= 100;
        z /= 108.883;
        x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
        y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
        z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
        l = 116 * y - 16;
        a2 = 500 * (x - y);
        b = 200 * (y - z);
        return [l, a2, b];
      };
      convert.hsl.rgb = function(hsl) {
        var h2 = hsl[0] / 360;
        var s = hsl[1] / 100;
        var l = hsl[2] / 100;
        var t1;
        var t2;
        var t3;
        var rgb;
        var val;
        if (s === 0) {
          val = l * 255;
          return [val, val, val];
        }
        if (l < 0.5) {
          t2 = l * (1 + s);
        } else {
          t2 = l + s - l * s;
        }
        t1 = 2 * l - t2;
        rgb = [0, 0, 0];
        for (var i = 0; i < 3; i++) {
          t3 = h2 + 1 / 3 * -(i - 1);
          if (t3 < 0) {
            t3++;
          }
          if (t3 > 1) {
            t3--;
          }
          if (6 * t3 < 1) {
            val = t1 + (t2 - t1) * 6 * t3;
          } else if (2 * t3 < 1) {
            val = t2;
          } else if (3 * t3 < 2) {
            val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
          } else {
            val = t1;
          }
          rgb[i] = val * 255;
        }
        return rgb;
      };
      convert.hsl.hsv = function(hsl) {
        var h2 = hsl[0];
        var s = hsl[1] / 100;
        var l = hsl[2] / 100;
        var smin = s;
        var lmin = Math.max(l, 0.01);
        var sv;
        var v;
        l *= 2;
        s *= l <= 1 ? l : 2 - l;
        smin *= lmin <= 1 ? lmin : 2 - lmin;
        v = (l + s) / 2;
        sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
        return [h2, sv * 100, v * 100];
      };
      convert.hsv.rgb = function(hsv) {
        var h2 = hsv[0] / 60;
        var s = hsv[1] / 100;
        var v = hsv[2] / 100;
        var hi = Math.floor(h2) % 6;
        var f = h2 - Math.floor(h2);
        var p = 255 * v * (1 - s);
        var q = 255 * v * (1 - s * f);
        var t2 = 255 * v * (1 - s * (1 - f));
        v *= 255;
        switch (hi) {
          case 0:
            return [v, t2, p];
          case 1:
            return [q, v, p];
          case 2:
            return [p, v, t2];
          case 3:
            return [p, q, v];
          case 4:
            return [t2, p, v];
          case 5:
            return [v, p, q];
        }
      };
      convert.hsv.hsl = function(hsv) {
        var h2 = hsv[0];
        var s = hsv[1] / 100;
        var v = hsv[2] / 100;
        var vmin = Math.max(v, 0.01);
        var lmin;
        var sl;
        var l;
        l = (2 - s) * v;
        lmin = (2 - s) * vmin;
        sl = s * vmin;
        sl /= lmin <= 1 ? lmin : 2 - lmin;
        sl = sl || 0;
        l /= 2;
        return [h2, sl * 100, l * 100];
      };
      convert.hwb.rgb = function(hwb) {
        var h2 = hwb[0] / 360;
        var wh = hwb[1] / 100;
        var bl = hwb[2] / 100;
        var ratio = wh + bl;
        var i;
        var v;
        var f;
        var n;
        if (ratio > 1) {
          wh /= ratio;
          bl /= ratio;
        }
        i = Math.floor(6 * h2);
        v = 1 - bl;
        f = 6 * h2 - i;
        if ((i & 1) !== 0) {
          f = 1 - f;
        }
        n = wh + f * (v - wh);
        var r;
        var g;
        var b;
        switch (i) {
          default:
          case 6:
          case 0:
            r = v;
            g = n;
            b = wh;
            break;
          case 1:
            r = n;
            g = v;
            b = wh;
            break;
          case 2:
            r = wh;
            g = v;
            b = n;
            break;
          case 3:
            r = wh;
            g = n;
            b = v;
            break;
          case 4:
            r = n;
            g = wh;
            b = v;
            break;
          case 5:
            r = v;
            g = wh;
            b = n;
            break;
        }
        return [r * 255, g * 255, b * 255];
      };
      convert.cmyk.rgb = function(cmyk) {
        var c = cmyk[0] / 100;
        var m = cmyk[1] / 100;
        var y = cmyk[2] / 100;
        var k = cmyk[3] / 100;
        var r;
        var g;
        var b;
        r = 1 - Math.min(1, c * (1 - k) + k);
        g = 1 - Math.min(1, m * (1 - k) + k);
        b = 1 - Math.min(1, y * (1 - k) + k);
        return [r * 255, g * 255, b * 255];
      };
      convert.xyz.rgb = function(xyz) {
        var x = xyz[0] / 100;
        var y = xyz[1] / 100;
        var z = xyz[2] / 100;
        var r;
        var g;
        var b;
        r = x * 3.2406 + y * -1.5372 + z * -0.4986;
        g = x * -0.9689 + y * 1.8758 + z * 0.0415;
        b = x * 0.0557 + y * -0.204 + z * 1.057;
        r = r > 31308e-7 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r * 12.92;
        g = g > 31308e-7 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : g * 12.92;
        b = b > 31308e-7 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b * 12.92;
        r = Math.min(Math.max(0, r), 1);
        g = Math.min(Math.max(0, g), 1);
        b = Math.min(Math.max(0, b), 1);
        return [r * 255, g * 255, b * 255];
      };
      convert.xyz.lab = function(xyz) {
        var x = xyz[0];
        var y = xyz[1];
        var z = xyz[2];
        var l;
        var a2;
        var b;
        x /= 95.047;
        y /= 100;
        z /= 108.883;
        x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
        y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
        z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
        l = 116 * y - 16;
        a2 = 500 * (x - y);
        b = 200 * (y - z);
        return [l, a2, b];
      };
      convert.lab.xyz = function(lab) {
        var l = lab[0];
        var a2 = lab[1];
        var b = lab[2];
        var x;
        var y;
        var z;
        y = (l + 16) / 116;
        x = a2 / 500 + y;
        z = y - b / 200;
        var y2 = Math.pow(y, 3);
        var x2 = Math.pow(x, 3);
        var z2 = Math.pow(z, 3);
        y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
        x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
        z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
        x *= 95.047;
        y *= 100;
        z *= 108.883;
        return [x, y, z];
      };
      convert.lab.lch = function(lab) {
        var l = lab[0];
        var a2 = lab[1];
        var b = lab[2];
        var hr;
        var h2;
        var c;
        hr = Math.atan2(b, a2);
        h2 = hr * 360 / 2 / Math.PI;
        if (h2 < 0) {
          h2 += 360;
        }
        c = Math.sqrt(a2 * a2 + b * b);
        return [l, c, h2];
      };
      convert.lch.lab = function(lch) {
        var l = lch[0];
        var c = lch[1];
        var h2 = lch[2];
        var a2;
        var b;
        var hr;
        hr = h2 / 360 * 2 * Math.PI;
        a2 = c * Math.cos(hr);
        b = c * Math.sin(hr);
        return [l, a2, b];
      };
      convert.rgb.ansi16 = function(args) {
        var r = args[0];
        var g = args[1];
        var b = args[2];
        var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
        value = Math.round(value / 50);
        if (value === 0) {
          return 30;
        }
        var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
        if (value === 2) {
          ansi += 60;
        }
        return ansi;
      };
      convert.hsv.ansi16 = function(args) {
        return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
      };
      convert.rgb.ansi256 = function(args) {
        var r = args[0];
        var g = args[1];
        var b = args[2];
        if (r === g && g === b) {
          if (r < 8) {
            return 16;
          }
          if (r > 248) {
            return 231;
          }
          return Math.round((r - 8) / 247 * 24) + 232;
        }
        var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
        return ansi;
      };
      convert.ansi16.rgb = function(args) {
        var color = args % 10;
        if (color === 0 || color === 7) {
          if (args > 50) {
            color += 3.5;
          }
          color = color / 10.5 * 255;
          return [color, color, color];
        }
        var mult = (~~(args > 50) + 1) * 0.5;
        var r = (color & 1) * mult * 255;
        var g = (color >> 1 & 1) * mult * 255;
        var b = (color >> 2 & 1) * mult * 255;
        return [r, g, b];
      };
      convert.ansi256.rgb = function(args) {
        if (args >= 232) {
          var c = (args - 232) * 10 + 8;
          return [c, c, c];
        }
        args -= 16;
        var rem;
        var r = Math.floor(args / 36) / 5 * 255;
        var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
        var b = rem % 6 / 5 * 255;
        return [r, g, b];
      };
      convert.rgb.hex = function(args) {
        var integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
        var string = integer.toString(16).toUpperCase();
        return "000000".substring(string.length) + string;
      };
      convert.hex.rgb = function(args) {
        var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
        if (!match) {
          return [0, 0, 0];
        }
        var colorString = match[0];
        if (match[0].length === 3) {
          colorString = colorString.split("").map(function(char) {
            return char + char;
          }).join("");
        }
        var integer = parseInt(colorString, 16);
        var r = integer >> 16 & 255;
        var g = integer >> 8 & 255;
        var b = integer & 255;
        return [r, g, b];
      };
      convert.rgb.hcg = function(rgb) {
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        var max = Math.max(Math.max(r, g), b);
        var min = Math.min(Math.min(r, g), b);
        var chroma = max - min;
        var grayscale;
        var hue;
        if (chroma < 1) {
          grayscale = min / (1 - chroma);
        } else {
          grayscale = 0;
        }
        if (chroma <= 0) {
          hue = 0;
        } else if (max === r) {
          hue = (g - b) / chroma % 6;
        } else if (max === g) {
          hue = 2 + (b - r) / chroma;
        } else {
          hue = 4 + (r - g) / chroma + 4;
        }
        hue /= 6;
        hue %= 1;
        return [hue * 360, chroma * 100, grayscale * 100];
      };
      convert.hsl.hcg = function(hsl) {
        var s = hsl[1] / 100;
        var l = hsl[2] / 100;
        var c = 1;
        var f = 0;
        if (l < 0.5) {
          c = 2 * s * l;
        } else {
          c = 2 * s * (1 - l);
        }
        if (c < 1) {
          f = (l - 0.5 * c) / (1 - c);
        }
        return [hsl[0], c * 100, f * 100];
      };
      convert.hsv.hcg = function(hsv) {
        var s = hsv[1] / 100;
        var v = hsv[2] / 100;
        var c = s * v;
        var f = 0;
        if (c < 1) {
          f = (v - c) / (1 - c);
        }
        return [hsv[0], c * 100, f * 100];
      };
      convert.hcg.rgb = function(hcg) {
        var h2 = hcg[0] / 360;
        var c = hcg[1] / 100;
        var g = hcg[2] / 100;
        if (c === 0) {
          return [g * 255, g * 255, g * 255];
        }
        var pure = [0, 0, 0];
        var hi = h2 % 1 * 6;
        var v = hi % 1;
        var w2 = 1 - v;
        var mg = 0;
        switch (Math.floor(hi)) {
          case 0:
            pure[0] = 1;
            pure[1] = v;
            pure[2] = 0;
            break;
          case 1:
            pure[0] = w2;
            pure[1] = 1;
            pure[2] = 0;
            break;
          case 2:
            pure[0] = 0;
            pure[1] = 1;
            pure[2] = v;
            break;
          case 3:
            pure[0] = 0;
            pure[1] = w2;
            pure[2] = 1;
            break;
          case 4:
            pure[0] = v;
            pure[1] = 0;
            pure[2] = 1;
            break;
          default:
            pure[0] = 1;
            pure[1] = 0;
            pure[2] = w2;
        }
        mg = (1 - c) * g;
        return [
          (c * pure[0] + mg) * 255,
          (c * pure[1] + mg) * 255,
          (c * pure[2] + mg) * 255
        ];
      };
      convert.hcg.hsv = function(hcg) {
        var c = hcg[1] / 100;
        var g = hcg[2] / 100;
        var v = c + g * (1 - c);
        var f = 0;
        if (v > 0) {
          f = c / v;
        }
        return [hcg[0], f * 100, v * 100];
      };
      convert.hcg.hsl = function(hcg) {
        var c = hcg[1] / 100;
        var g = hcg[2] / 100;
        var l = g * (1 - c) + 0.5 * c;
        var s = 0;
        if (l > 0 && l < 0.5) {
          s = c / (2 * l);
        } else if (l >= 0.5 && l < 1) {
          s = c / (2 * (1 - l));
        }
        return [hcg[0], s * 100, l * 100];
      };
      convert.hcg.hwb = function(hcg) {
        var c = hcg[1] / 100;
        var g = hcg[2] / 100;
        var v = c + g * (1 - c);
        return [hcg[0], (v - c) * 100, (1 - v) * 100];
      };
      convert.hwb.hcg = function(hwb) {
        var w2 = hwb[1] / 100;
        var b = hwb[2] / 100;
        var v = 1 - b;
        var c = v - w2;
        var g = 0;
        if (c < 1) {
          g = (v - c) / (1 - c);
        }
        return [hwb[0], c * 100, g * 100];
      };
      convert.apple.rgb = function(apple) {
        return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
      };
      convert.rgb.apple = function(rgb) {
        return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
      };
      convert.gray.rgb = function(args) {
        return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
      };
      convert.gray.hsl = convert.gray.hsv = function(args) {
        return [0, 0, args[0]];
      };
      convert.gray.hwb = function(gray) {
        return [0, 100, gray[0]];
      };
      convert.gray.cmyk = function(gray) {
        return [0, 0, 0, gray[0]];
      };
      convert.gray.lab = function(gray) {
        return [gray[0], 0, 0];
      };
      convert.gray.hex = function(gray) {
        var val = Math.round(gray[0] / 100 * 255) & 255;
        var integer = (val << 16) + (val << 8) + val;
        var string = integer.toString(16).toUpperCase();
        return "000000".substring(string.length) + string;
      };
      convert.rgb.gray = function(rgb) {
        var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
        return [val / 255 * 100];
      };
    }
  });

  // node_modules/@babel/code-frame/node_modules/color-convert/route.js
  var require_route2 = __commonJS({
    "node_modules/@babel/code-frame/node_modules/color-convert/route.js"(exports, module) {
      init_esbuild_inject();
      var conversions = require_conversions2();
      function buildGraph() {
        var graph = {};
        var models = Object.keys(conversions);
        for (var len = models.length, i = 0; i < len; i++) {
          graph[models[i]] = {
            // http://jsperf.com/1-vs-infinity
            // micro-opt, but this is simple.
            distance: -1,
            parent: null
          };
        }
        return graph;
      }
      function deriveBFS(fromModel) {
        var graph = buildGraph();
        var queue = [fromModel];
        graph[fromModel].distance = 0;
        while (queue.length) {
          var current = queue.pop();
          var adjacents = Object.keys(conversions[current]);
          for (var len = adjacents.length, i = 0; i < len; i++) {
            var adjacent = adjacents[i];
            var node = graph[adjacent];
            if (node.distance === -1) {
              node.distance = graph[current].distance + 1;
              node.parent = current;
              queue.unshift(adjacent);
            }
          }
        }
        return graph;
      }
      function link(from, to) {
        return function(args) {
          return to(from(args));
        };
      }
      function wrapConversion(toModel, graph) {
        var path = [graph[toModel].parent, toModel];
        var fn = conversions[graph[toModel].parent][toModel];
        var cur = graph[toModel].parent;
        while (graph[cur].parent) {
          path.unshift(graph[cur].parent);
          fn = link(conversions[graph[cur].parent][cur], fn);
          cur = graph[cur].parent;
        }
        fn.conversion = path;
        return fn;
      }
      module.exports = function(fromModel) {
        var graph = deriveBFS(fromModel);
        var conversion = {};
        var models = Object.keys(graph);
        for (var len = models.length, i = 0; i < len; i++) {
          var toModel = models[i];
          var node = graph[toModel];
          if (node.parent === null) {
            continue;
          }
          conversion[toModel] = wrapConversion(toModel, graph);
        }
        return conversion;
      };
    }
  });

  // node_modules/@babel/code-frame/node_modules/color-convert/index.js
  var require_color_convert2 = __commonJS({
    "node_modules/@babel/code-frame/node_modules/color-convert/index.js"(exports, module) {
      init_esbuild_inject();
      var conversions = require_conversions2();
      var route = require_route2();
      var convert = {};
      var models = Object.keys(conversions);
      function wrapRaw(fn) {
        var wrappedFn = function(args) {
          if (args === void 0 || args === null) {
            return args;
          }
          if (arguments.length > 1) {
            args = Array.prototype.slice.call(arguments);
          }
          return fn(args);
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      function wrapRounded(fn) {
        var wrappedFn = function(args) {
          if (args === void 0 || args === null) {
            return args;
          }
          if (arguments.length > 1) {
            args = Array.prototype.slice.call(arguments);
          }
          var result = fn(args);
          if (typeof result === "object") {
            for (var len = result.length, i = 0; i < len; i++) {
              result[i] = Math.round(result[i]);
            }
          }
          return result;
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      models.forEach(function(fromModel) {
        convert[fromModel] = {};
        Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
        Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
        var routes = route(fromModel);
        var routeModels = Object.keys(routes);
        routeModels.forEach(function(toModel) {
          var fn = routes[toModel];
          convert[fromModel][toModel] = wrapRounded(fn);
          convert[fromModel][toModel].raw = wrapRaw(fn);
        });
      });
      module.exports = convert;
    }
  });

  // node_modules/@babel/code-frame/node_modules/ansi-styles/index.js
  var require_ansi_styles2 = __commonJS({
    "node_modules/@babel/code-frame/node_modules/ansi-styles/index.js"(exports, module) {
      "use strict";
      init_esbuild_inject();
      var colorConvert = require_color_convert2();
      var wrapAnsi16 = (fn, offset) => function() {
        const code = fn.apply(colorConvert, arguments);
        return `\x1B[${code + offset}m`;
      };
      var wrapAnsi256 = (fn, offset) => function() {
        const code = fn.apply(colorConvert, arguments);
        return `\x1B[${38 + offset};5;${code}m`;
      };
      var wrapAnsi16m = (fn, offset) => function() {
        const rgb = fn.apply(colorConvert, arguments);
        return `\x1B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
      };
      function assembleStyles() {
        const codes = /* @__PURE__ */ new Map();
        const styles = {
          modifier: {
            reset: [0, 0],
            // 21 isn't widely supported and 22 does the same thing
            bold: [1, 22],
            dim: [2, 22],
            italic: [3, 23],
            underline: [4, 24],
            inverse: [7, 27],
            hidden: [8, 28],
            strikethrough: [9, 29]
          },
          color: {
            black: [30, 39],
            red: [31, 39],
            green: [32, 39],
            yellow: [33, 39],
            blue: [34, 39],
            magenta: [35, 39],
            cyan: [36, 39],
            white: [37, 39],
            gray: [90, 39],
            // Bright color
            redBright: [91, 39],
            greenBright: [92, 39],
            yellowBright: [93, 39],
            blueBright: [94, 39],
            magentaBright: [95, 39],
            cyanBright: [96, 39],
            whiteBright: [97, 39]
          },
          bgColor: {
            bgBlack: [40, 49],
            bgRed: [41, 49],
            bgGreen: [42, 49],
            bgYellow: [43, 49],
            bgBlue: [44, 49],
            bgMagenta: [45, 49],
            bgCyan: [46, 49],
            bgWhite: [47, 49],
            // Bright color
            bgBlackBright: [100, 49],
            bgRedBright: [101, 49],
            bgGreenBright: [102, 49],
            bgYellowBright: [103, 49],
            bgBlueBright: [104, 49],
            bgMagentaBright: [105, 49],
            bgCyanBright: [106, 49],
            bgWhiteBright: [107, 49]
          }
        };
        styles.color.grey = styles.color.gray;
        for (const groupName of Object.keys(styles)) {
          const group = styles[groupName];
          for (const styleName of Object.keys(group)) {
            const style = group[styleName];
            styles[styleName] = {
              open: `\x1B[${style[0]}m`,
              close: `\x1B[${style[1]}m`
            };
            group[styleName] = styles[styleName];
            codes.set(style[0], style[1]);
          }
          Object.defineProperty(styles, groupName, {
            value: group,
            enumerable: false
          });
          Object.defineProperty(styles, "codes", {
            value: codes,
            enumerable: false
          });
        }
        const ansi2ansi = (n) => n;
        const rgb2rgb = (r, g, b) => [r, g, b];
        styles.color.close = "\x1B[39m";
        styles.bgColor.close = "\x1B[49m";
        styles.color.ansi = {
          ansi: wrapAnsi16(ansi2ansi, 0)
        };
        styles.color.ansi256 = {
          ansi256: wrapAnsi256(ansi2ansi, 0)
        };
        styles.color.ansi16m = {
          rgb: wrapAnsi16m(rgb2rgb, 0)
        };
        styles.bgColor.ansi = {
          ansi: wrapAnsi16(ansi2ansi, 10)
        };
        styles.bgColor.ansi256 = {
          ansi256: wrapAnsi256(ansi2ansi, 10)
        };
        styles.bgColor.ansi16m = {
          rgb: wrapAnsi16m(rgb2rgb, 10)
        };
        for (let key of Object.keys(colorConvert)) {
          if (typeof colorConvert[key] !== "object") {
            continue;
          }
          const suite = colorConvert[key];
          if (key === "ansi16") {
            key = "ansi";
          }
          if ("ansi16" in suite) {
            styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
            styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
          }
          if ("ansi256" in suite) {
            styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
            styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
          }
          if ("rgb" in suite) {
            styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
            styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
          }
        }
        return styles;
      }
      Object.defineProperty(module, "exports", {
        enumerable: true,
        get: assembleStyles
      });
    }
  });

  // node_modules/@babel/code-frame/node_modules/supports-color/browser.js
  var require_browser3 = __commonJS({
    "node_modules/@babel/code-frame/node_modules/supports-color/browser.js"(exports, module) {
      "use strict";
      init_esbuild_inject();
      module.exports = {
        stdout: false,
        stderr: false
      };
    }
  });

  // node_modules/@babel/code-frame/node_modules/chalk/templates.js
  var require_templates2 = __commonJS({
    "node_modules/@babel/code-frame/node_modules/chalk/templates.js"(exports, module) {
      "use strict";
      init_esbuild_inject();
      var TEMPLATE_REGEX = /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
      var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
      var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
      var ESCAPE_REGEX = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi;
      var ESCAPES = /* @__PURE__ */ new Map([
        ["n", "\n"],
        ["r", "\r"],
        ["t", "	"],
        ["b", "\b"],
        ["f", "\f"],
        ["v", "\v"],
        ["0", "\0"],
        ["\\", "\\"],
        ["e", "\x1B"],
        ["a", "\x07"]
      ]);
      function unescape(c) {
        if (c[0] === "u" && c.length === 5 || c[0] === "x" && c.length === 3) {
          return String.fromCharCode(parseInt(c.slice(1), 16));
        }
        return ESCAPES.get(c) || c;
      }
      function parseArguments(name, args) {
        const results = [];
        const chunks = args.trim().split(/\s*,\s*/g);
        let matches;
        for (const chunk of chunks) {
          if (!isNaN(chunk)) {
            results.push(Number(chunk));
          } else if (matches = chunk.match(STRING_REGEX)) {
            results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, chr) => escape ? unescape(escape) : chr));
          } else {
            throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
          }
        }
        return results;
      }
      function parseStyle(style) {
        STYLE_REGEX.lastIndex = 0;
        const results = [];
        let matches;
        while ((matches = STYLE_REGEX.exec(style)) !== null) {
          const name = matches[1];
          if (matches[2]) {
            const args = parseArguments(name, matches[2]);
            results.push([name].concat(args));
          } else {
            results.push([name]);
          }
        }
        return results;
      }
      function buildStyle(chalk, styles) {
        const enabled = {};
        for (const layer of styles) {
          for (const style of layer.styles) {
            enabled[style[0]] = layer.inverse ? null : style.slice(1);
          }
        }
        let current = chalk;
        for (const styleName of Object.keys(enabled)) {
          if (Array.isArray(enabled[styleName])) {
            if (!(styleName in current)) {
              throw new Error(`Unknown Chalk style: ${styleName}`);
            }
            if (enabled[styleName].length > 0) {
              current = current[styleName].apply(current, enabled[styleName]);
            } else {
              current = current[styleName];
            }
          }
        }
        return current;
      }
      module.exports = (chalk, tmp) => {
        const styles = [];
        const chunks = [];
        let chunk = [];
        tmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {
          if (escapeChar) {
            chunk.push(unescape(escapeChar));
          } else if (style) {
            const str = chunk.join("");
            chunk = [];
            chunks.push(styles.length === 0 ? str : buildStyle(chalk, styles)(str));
            styles.push({ inverse, styles: parseStyle(style) });
          } else if (close) {
            if (styles.length === 0) {
              throw new Error("Found extraneous } in Chalk template literal");
            }
            chunks.push(buildStyle(chalk, styles)(chunk.join("")));
            chunk = [];
            styles.pop();
          } else {
            chunk.push(chr);
          }
        });
        chunks.push(chunk.join(""));
        if (styles.length > 0) {
          const errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? "" : "s"} (\`}\`)`;
          throw new Error(errMsg);
        }
        return chunks.join("");
      };
    }
  });

  // node_modules/@babel/code-frame/node_modules/chalk/index.js
  var require_chalk2 = __commonJS({
    "node_modules/@babel/code-frame/node_modules/chalk/index.js"(exports, module) {
      "use strict";
      init_esbuild_inject();
      var escapeStringRegexp = require_escape_string_regexp();
      var ansiStyles = require_ansi_styles2();
      var stdoutColor = require_browser3().stdout;
      var template = require_templates2();
      var isSimpleWindowsTerm = process.platform === "win32" && !(process.env.TERM || "").toLowerCase().startsWith("xterm");
      var levelMapping = ["ansi", "ansi", "ansi256", "ansi16m"];
      var skipModels = /* @__PURE__ */ new Set(["gray"]);
      var styles = /* @__PURE__ */ Object.create(null);
      function applyOptions(obj, options) {
        options = options || {};
        const scLevel = stdoutColor ? stdoutColor.level : 0;
        obj.level = options.level === void 0 ? scLevel : options.level;
        obj.enabled = "enabled" in options ? options.enabled : obj.level > 0;
      }
      function Chalk(options) {
        if (!this || !(this instanceof Chalk) || this.template) {
          const chalk = {};
          applyOptions(chalk, options);
          chalk.template = function() {
            const args = [].slice.call(arguments);
            return chalkTag.apply(null, [chalk.template].concat(args));
          };
          Object.setPrototypeOf(chalk, Chalk.prototype);
          Object.setPrototypeOf(chalk.template, chalk);
          chalk.template.constructor = Chalk;
          return chalk.template;
        }
        applyOptions(this, options);
      }
      if (isSimpleWindowsTerm) {
        ansiStyles.blue.open = "\x1B[94m";
      }
      for (const key of Object.keys(ansiStyles)) {
        ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), "g");
        styles[key] = {
          get() {
            const codes = ansiStyles[key];
            return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key);
          }
        };
      }
      styles.visible = {
        get() {
          return build.call(this, this._styles || [], true, "visible");
        }
      };
      ansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), "g");
      for (const model of Object.keys(ansiStyles.color.ansi)) {
        if (skipModels.has(model)) {
          continue;
        }
        styles[model] = {
          get() {
            const level = this.level;
            return function() {
              const open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);
              const codes = {
                open,
                close: ansiStyles.color.close,
                closeRe: ansiStyles.color.closeRe
              };
              return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
            };
          }
        };
      }
      ansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), "g");
      for (const model of Object.keys(ansiStyles.bgColor.ansi)) {
        if (skipModels.has(model)) {
          continue;
        }
        const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
        styles[bgModel] = {
          get() {
            const level = this.level;
            return function() {
              const open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);
              const codes = {
                open,
                close: ansiStyles.bgColor.close,
                closeRe: ansiStyles.bgColor.closeRe
              };
              return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
            };
          }
        };
      }
      var proto = Object.defineProperties(() => {
      }, styles);
      function build(_styles, _empty, key) {
        const builder = function() {
          return applyStyle.apply(builder, arguments);
        };
        builder._styles = _styles;
        builder._empty = _empty;
        const self2 = this;
        Object.defineProperty(builder, "level", {
          enumerable: true,
          get() {
            return self2.level;
          },
          set(level) {
            self2.level = level;
          }
        });
        Object.defineProperty(builder, "enabled", {
          enumerable: true,
          get() {
            return self2.enabled;
          },
          set(enabled) {
            self2.enabled = enabled;
          }
        });
        builder.hasGrey = this.hasGrey || key === "gray" || key === "grey";
        builder.__proto__ = proto;
        return builder;
      }
      function applyStyle() {
        const args = arguments;
        const argsLen = args.length;
        let str = String(arguments[0]);
        if (argsLen === 0) {
          return "";
        }
        if (argsLen > 1) {
          for (let a2 = 1; a2 < argsLen; a2++) {
            str += " " + args[a2];
          }
        }
        if (!this.enabled || this.level <= 0 || !str) {
          return this._empty ? "" : str;
        }
        const originalDim = ansiStyles.dim.open;
        if (isSimpleWindowsTerm && this.hasGrey) {
          ansiStyles.dim.open = "";
        }
        for (const code of this._styles.slice().reverse()) {
          str = code.open + str.replace(code.closeRe, code.open) + code.close;
          str = str.replace(/\r?\n/g, `${code.close}$&${code.open}`);
        }
        ansiStyles.dim.open = originalDim;
        return str;
      }
      function chalkTag(chalk, strings) {
        if (!Array.isArray(strings)) {
          return [].slice.call(arguments, 1).join(" ");
        }
        const args = [].slice.call(arguments, 2);
        const parts = [strings.raw[0]];
        for (let i = 1; i < strings.length; i++) {
          parts.push(String(args[i - 1]).replace(/[{}\\]/g, "\\$&"));
          parts.push(String(strings.raw[i]));
        }
        return template(chalk, parts.join(""));
      }
      Object.defineProperties(Chalk.prototype, styles);
      module.exports = Chalk();
      module.exports.supportsColor = stdoutColor;
      module.exports.default = module.exports;
    }
  });

  // node_modules/@babel/code-frame/lib/index.js
  var require_lib9 = __commonJS({
    "node_modules/@babel/code-frame/lib/index.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.codeFrameColumns = codeFrameColumns;
      exports.default = _default;
      var _highlight = require_lib8();
      var _chalk = _interopRequireWildcard(require_chalk2(), true);
      function _getRequireWildcardCache(e) {
        if ("function" != typeof WeakMap)
          return null;
        var r = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e2) {
          return e2 ? t2 : r;
        })(e);
      }
      function _interopRequireWildcard(e, r) {
        if (!r && e && e.__esModule)
          return e;
        if (null === e || "object" != typeof e && "function" != typeof e)
          return { default: e };
        var t2 = _getRequireWildcardCache(r);
        if (t2 && t2.has(e))
          return t2.get(e);
        var n = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u in e)
          if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
            var i = a2 ? Object.getOwnPropertyDescriptor(e, u) : null;
            i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
          }
        return n.default = e, t2 && t2.set(e, n), n;
      }
      var chalkWithForcedColor = void 0;
      function getChalk(forceColor) {
        if (forceColor) {
          var _chalkWithForcedColor;
          (_chalkWithForcedColor = chalkWithForcedColor) != null ? _chalkWithForcedColor : chalkWithForcedColor = new _chalk.default.constructor({
            enabled: true,
            level: 1
          });
          return chalkWithForcedColor;
        }
        return _chalk.default;
      }
      var deprecationWarningShown = false;
      function getDefs(chalk) {
        return {
          gutter: chalk.grey,
          marker: chalk.red.bold,
          message: chalk.red.bold
        };
      }
      var NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
      function getMarkerLines(loc, source, opts) {
        const startLoc = Object.assign({
          column: 0,
          line: -1
        }, loc.start);
        const endLoc = Object.assign({}, startLoc, loc.end);
        const {
          linesAbove = 2,
          linesBelow = 3
        } = opts || {};
        const startLine = startLoc.line;
        const startColumn = startLoc.column;
        const endLine = endLoc.line;
        const endColumn = endLoc.column;
        let start = Math.max(startLine - (linesAbove + 1), 0);
        let end = Math.min(source.length, endLine + linesBelow);
        if (startLine === -1) {
          start = 0;
        }
        if (endLine === -1) {
          end = source.length;
        }
        const lineDiff = endLine - startLine;
        const markerLines = {};
        if (lineDiff) {
          for (let i = 0; i <= lineDiff; i++) {
            const lineNumber = i + startLine;
            if (!startColumn) {
              markerLines[lineNumber] = true;
            } else if (i === 0) {
              const sourceLength = source[lineNumber - 1].length;
              markerLines[lineNumber] = [startColumn, sourceLength - startColumn + 1];
            } else if (i === lineDiff) {
              markerLines[lineNumber] = [0, endColumn];
            } else {
              const sourceLength = source[lineNumber - i].length;
              markerLines[lineNumber] = [0, sourceLength];
            }
          }
        } else {
          if (startColumn === endColumn) {
            if (startColumn) {
              markerLines[startLine] = [startColumn, 0];
            } else {
              markerLines[startLine] = true;
            }
          } else {
            markerLines[startLine] = [startColumn, endColumn - startColumn];
          }
        }
        return {
          start,
          end,
          markerLines
        };
      }
      function codeFrameColumns(rawLines, loc, opts = {}) {
        const highlighted = (opts.highlightCode || opts.forceColor) && (0, _highlight.shouldHighlight)(opts);
        const chalk = getChalk(opts.forceColor);
        const defs = getDefs(chalk);
        const maybeHighlight = (chalkFn, string) => {
          return highlighted ? chalkFn(string) : string;
        };
        const lines = rawLines.split(NEWLINE);
        const {
          start,
          end,
          markerLines
        } = getMarkerLines(loc, lines, opts);
        const hasColumns = loc.start && typeof loc.start.column === "number";
        const numberMaxWidth = String(end).length;
        const highlightedLines = highlighted ? (0, _highlight.default)(rawLines, opts) : rawLines;
        let frame = highlightedLines.split(NEWLINE, end).slice(start, end).map((line, index) => {
          const number = start + 1 + index;
          const paddedNumber = ` ${number}`.slice(-numberMaxWidth);
          const gutter = ` ${paddedNumber} |`;
          const hasMarker = markerLines[number];
          const lastMarkerLine = !markerLines[number + 1];
          if (hasMarker) {
            let markerLine = "";
            if (Array.isArray(hasMarker)) {
              const markerSpacing = line.slice(0, Math.max(hasMarker[0] - 1, 0)).replace(/[^\t]/g, " ");
              const numberOfMarkers = hasMarker[1] || 1;
              markerLine = ["\n ", maybeHighlight(defs.gutter, gutter.replace(/\d/g, " ")), " ", markerSpacing, maybeHighlight(defs.marker, "^").repeat(numberOfMarkers)].join("");
              if (lastMarkerLine && opts.message) {
                markerLine += " " + maybeHighlight(defs.message, opts.message);
              }
            }
            return [maybeHighlight(defs.marker, ">"), maybeHighlight(defs.gutter, gutter), line.length > 0 ? ` ${line}` : "", markerLine].join("");
          } else {
            return ` ${maybeHighlight(defs.gutter, gutter)}${line.length > 0 ? ` ${line}` : ""}`;
          }
        }).join("\n");
        if (opts.message && !hasColumns) {
          frame = `${" ".repeat(numberMaxWidth + 1)}${opts.message}
${frame}`;
        }
        if (highlighted) {
          return chalk.reset(frame);
        } else {
          return frame;
        }
      }
      function _default(rawLines, lineNumber, colNumber, opts = {}) {
        if (!deprecationWarningShown) {
          deprecationWarningShown = true;
          const message = "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";
          if (process.emitWarning) {
            process.emitWarning(message, "DeprecationWarning");
          } else {
            const deprecationError = new Error(message);
            deprecationError.name = "DeprecationWarning";
            console.warn(new Error(message));
          }
        }
        colNumber = Math.max(colNumber, 0);
        const location = {
          start: {
            column: colNumber,
            line: lineNumber
          }
        };
        return codeFrameColumns(rawLines, location, opts);
      }
    }
  });

  // node_modules/@babel/helper-hoist-variables/lib/index.js
  var require_lib10 = __commonJS({
    "node_modules/@babel/helper-hoist-variables/lib/index.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = hoistVariables;
      var _t = require_lib3();
      var {
        assignmentExpression,
        expressionStatement,
        identifier
      } = _t;
      var visitor = {
        Scope(path, state) {
          if (state.kind === "let")
            path.skip();
        },
        FunctionParent(path) {
          path.skip();
        },
        VariableDeclaration(path, state) {
          if (state.kind && path.node.kind !== state.kind)
            return;
          const nodes = [];
          const declarations = path.get("declarations");
          let firstId;
          for (const declar of declarations) {
            firstId = declar.node.id;
            if (declar.node.init) {
              nodes.push(expressionStatement(assignmentExpression("=", declar.node.id, declar.node.init)));
            }
            for (const name of Object.keys(declar.getBindingIdentifiers())) {
              state.emit(identifier(name), name, declar.node.init !== null);
            }
          }
          if (path.parentPath.isFor({
            left: path.node
          })) {
            path.replaceWith(firstId);
          } else {
            path.replaceWithMultiple(nodes);
          }
        }
      };
      function hoistVariables(path, emit, kind = "var") {
        path.traverse(visitor, {
          kind,
          emit
        });
      }
    }
  });

  // node_modules/@babel/traverse/lib/path/replacement.js
  var require_replacement = __commonJS({
    "node_modules/@babel/traverse/lib/path/replacement.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports._replaceWith = _replaceWith;
      exports.replaceExpressionWithStatements = replaceExpressionWithStatements;
      exports.replaceInline = replaceInline;
      exports.replaceWith = replaceWith;
      exports.replaceWithMultiple = replaceWithMultiple;
      exports.replaceWithSourceString = replaceWithSourceString;
      var _codeFrame = require_lib9();
      var _index = require_lib13();
      var _index2 = require_path();
      var _cache = require_cache();
      var _parser = require_lib5();
      var _t = require_lib3();
      var _helperHoistVariables = require_lib10();
      var {
        FUNCTION_TYPES,
        arrowFunctionExpression,
        assignmentExpression,
        awaitExpression,
        blockStatement,
        buildUndefinedNode,
        callExpression,
        cloneNode,
        conditionalExpression,
        expressionStatement,
        getBindingIdentifiers,
        identifier,
        inheritLeadingComments,
        inheritTrailingComments,
        inheritsComments,
        isBlockStatement,
        isEmptyStatement,
        isExpression,
        isExpressionStatement,
        isIfStatement,
        isProgram,
        isStatement,
        isVariableDeclaration,
        removeComments,
        returnStatement,
        sequenceExpression,
        validate,
        yieldExpression
      } = _t;
      function replaceWithMultiple(nodes) {
        var _getCachedPaths;
        this.resync();
        nodes = this._verifyNodeList(nodes);
        inheritLeadingComments(nodes[0], this.node);
        inheritTrailingComments(nodes[nodes.length - 1], this.node);
        (_getCachedPaths = (0, _cache.getCachedPaths)(this.hub, this.parent)) == null || _getCachedPaths.delete(this.node);
        this.node = this.container[this.key] = null;
        const paths = this.insertAfter(nodes);
        if (this.node) {
          this.requeue();
        } else {
          this.remove();
        }
        return paths;
      }
      function replaceWithSourceString(replacement) {
        this.resync();
        let ast;
        try {
          replacement = `(${replacement})`;
          ast = (0, _parser.parse)(replacement);
        } catch (err) {
          const loc = err.loc;
          if (loc) {
            err.message += " - make sure this is an expression.\n" + (0, _codeFrame.codeFrameColumns)(replacement, {
              start: {
                line: loc.line,
                column: loc.column + 1
              }
            });
            err.code = "BABEL_REPLACE_SOURCE_ERROR";
          }
          throw err;
        }
        const expressionAST = ast.program.body[0].expression;
        _index.default.removeProperties(expressionAST);
        return this.replaceWith(expressionAST);
      }
      function replaceWith(replacementPath) {
        this.resync();
        if (this.removed) {
          throw new Error("You can't replace this node, we've already removed it");
        }
        let replacement = replacementPath instanceof _index2.default ? replacementPath.node : replacementPath;
        if (!replacement) {
          throw new Error("You passed `path.replaceWith()` a falsy node, use `path.remove()` instead");
        }
        if (this.node === replacement) {
          return [this];
        }
        if (this.isProgram() && !isProgram(replacement)) {
          throw new Error("You can only replace a Program root node with another Program node");
        }
        if (Array.isArray(replacement)) {
          throw new Error("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");
        }
        if (typeof replacement === "string") {
          throw new Error("Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`");
        }
        let nodePath = "";
        if (this.isNodeType("Statement") && isExpression(replacement)) {
          if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement) && !this.parentPath.isExportDefaultDeclaration()) {
            replacement = expressionStatement(replacement);
            nodePath = "expression";
          }
        }
        if (this.isNodeType("Expression") && isStatement(replacement)) {
          if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) {
            return this.replaceExpressionWithStatements([replacement]);
          }
        }
        const oldNode = this.node;
        if (oldNode) {
          inheritsComments(replacement, oldNode);
          removeComments(oldNode);
        }
        this._replaceWith(replacement);
        this.type = replacement.type;
        this.setScope();
        this.requeue();
        return [nodePath ? this.get(nodePath) : this];
      }
      function _replaceWith(node) {
        var _getCachedPaths2;
        if (!this.container) {
          throw new ReferenceError("Container is falsy");
        }
        if (this.inList) {
          validate(this.parent, this.key, [node]);
        } else {
          validate(this.parent, this.key, node);
        }
        this.debug(`Replace with ${node == null ? void 0 : node.type}`);
        (_getCachedPaths2 = (0, _cache.getCachedPaths)(this.hub, this.parent)) == null || _getCachedPaths2.set(node, this).delete(this.node);
        this.node = this.container[this.key] = node;
      }
      function replaceExpressionWithStatements(nodes) {
        this.resync();
        const declars = [];
        const nodesAsSingleExpression = gatherSequenceExpressions(nodes, declars);
        if (nodesAsSingleExpression) {
          for (const id of declars)
            this.scope.push({
              id
            });
          return this.replaceWith(nodesAsSingleExpression)[0].get("expressions");
        }
        const functionParent = this.getFunctionParent();
        const isParentAsync = functionParent == null ? void 0 : functionParent.is("async");
        const isParentGenerator = functionParent == null ? void 0 : functionParent.is("generator");
        const container = arrowFunctionExpression([], blockStatement(nodes));
        this.replaceWith(callExpression(container, []));
        const callee = this.get("callee");
        (0, _helperHoistVariables.default)(callee.get("body"), (id) => {
          this.scope.push({
            id
          });
        }, "var");
        const completionRecords = this.get("callee").getCompletionRecords();
        for (const path of completionRecords) {
          if (!path.isExpressionStatement())
            continue;
          const loop = path.findParent((path2) => path2.isLoop());
          if (loop) {
            let uid = loop.getData("expressionReplacementReturnUid");
            if (!uid) {
              uid = callee.scope.generateDeclaredUidIdentifier("ret");
              callee.get("body").pushContainer("body", returnStatement(cloneNode(uid)));
              loop.setData("expressionReplacementReturnUid", uid);
            } else {
              uid = identifier(uid.name);
            }
            path.get("expression").replaceWith(assignmentExpression("=", cloneNode(uid), path.node.expression));
          } else {
            path.replaceWith(returnStatement(path.node.expression));
          }
        }
        callee.arrowFunctionToExpression();
        const newCallee = callee;
        const needToAwaitFunction = isParentAsync && _index.default.hasType(this.get("callee.body").node, "AwaitExpression", FUNCTION_TYPES);
        const needToYieldFunction = isParentGenerator && _index.default.hasType(this.get("callee.body").node, "YieldExpression", FUNCTION_TYPES);
        if (needToAwaitFunction) {
          newCallee.set("async", true);
          if (!needToYieldFunction) {
            this.replaceWith(awaitExpression(this.node));
          }
        }
        if (needToYieldFunction) {
          newCallee.set("generator", true);
          this.replaceWith(yieldExpression(this.node, true));
        }
        return newCallee.get("body.body");
      }
      function gatherSequenceExpressions(nodes, declars) {
        const exprs = [];
        let ensureLastUndefined = true;
        for (const node of nodes) {
          if (!isEmptyStatement(node)) {
            ensureLastUndefined = false;
          }
          if (isExpression(node)) {
            exprs.push(node);
          } else if (isExpressionStatement(node)) {
            exprs.push(node.expression);
          } else if (isVariableDeclaration(node)) {
            if (node.kind !== "var")
              return;
            for (const declar of node.declarations) {
              const bindings = getBindingIdentifiers(declar);
              for (const key of Object.keys(bindings)) {
                declars.push(cloneNode(bindings[key]));
              }
              if (declar.init) {
                exprs.push(assignmentExpression("=", declar.id, declar.init));
              }
            }
            ensureLastUndefined = true;
          } else if (isIfStatement(node)) {
            const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], declars) : buildUndefinedNode();
            const alternate = node.alternate ? gatherSequenceExpressions([node.alternate], declars) : buildUndefinedNode();
            if (!consequent || !alternate)
              return;
            exprs.push(conditionalExpression(node.test, consequent, alternate));
          } else if (isBlockStatement(node)) {
            const body = gatherSequenceExpressions(node.body, declars);
            if (!body)
              return;
            exprs.push(body);
          } else if (isEmptyStatement(node)) {
            if (nodes.indexOf(node) === 0) {
              ensureLastUndefined = true;
            }
          } else {
            return;
          }
        }
        if (ensureLastUndefined)
          exprs.push(buildUndefinedNode());
        if (exprs.length === 1) {
          return exprs[0];
        } else {
          return sequenceExpression(exprs);
        }
      }
      function replaceInline(nodes) {
        this.resync();
        if (Array.isArray(nodes)) {
          if (Array.isArray(this.container)) {
            nodes = this._verifyNodeList(nodes);
            const paths = this._containerInsertAfter(nodes);
            this.remove();
            return paths;
          } else {
            return this.replaceWithMultiple(nodes);
          }
        } else {
          return this.replaceWith(nodes);
        }
      }
    }
  });

  // node_modules/@babel/traverse/lib/path/evaluation.js
  var require_evaluation = __commonJS({
    "node_modules/@babel/traverse/lib/path/evaluation.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.evaluate = evaluate;
      exports.evaluateTruthy = evaluateTruthy;
      var VALID_OBJECT_CALLEES = ["Number", "String", "Math"];
      var VALID_IDENTIFIER_CALLEES = ["isFinite", "isNaN", "parseFloat", "parseInt", "decodeURI", "decodeURIComponent", "encodeURI", "encodeURIComponent", null, null];
      var INVALID_METHODS = ["random"];
      function isValidObjectCallee(val) {
        return VALID_OBJECT_CALLEES.includes(val);
      }
      function isValidIdentifierCallee(val) {
        return VALID_IDENTIFIER_CALLEES.includes(val);
      }
      function isInvalidMethod(val) {
        return INVALID_METHODS.includes(val);
      }
      function evaluateTruthy() {
        const res = this.evaluate();
        if (res.confident)
          return !!res.value;
      }
      function deopt(path, state) {
        if (!state.confident)
          return;
        state.deoptPath = path;
        state.confident = false;
      }
      var Globals = /* @__PURE__ */ new Map([["undefined", void 0], ["Infinity", Infinity], ["NaN", NaN]]);
      function evaluateCached(path, state) {
        const {
          node
        } = path;
        const {
          seen
        } = state;
        if (seen.has(node)) {
          const existing = seen.get(node);
          if (existing.resolved) {
            return existing.value;
          } else {
            deopt(path, state);
            return;
          }
        } else {
          const item = {
            resolved: false
          };
          seen.set(node, item);
          const val = _evaluate(path, state);
          if (state.confident) {
            item.resolved = true;
            item.value = val;
          }
          return val;
        }
      }
      function _evaluate(path, state) {
        if (!state.confident)
          return;
        if (path.isSequenceExpression()) {
          const exprs = path.get("expressions");
          return evaluateCached(exprs[exprs.length - 1], state);
        }
        if (path.isStringLiteral() || path.isNumericLiteral() || path.isBooleanLiteral()) {
          return path.node.value;
        }
        if (path.isNullLiteral()) {
          return null;
        }
        if (path.isTemplateLiteral()) {
          return evaluateQuasis(path, path.node.quasis, state);
        }
        if (path.isTaggedTemplateExpression() && path.get("tag").isMemberExpression()) {
          const object = path.get("tag.object");
          const {
            node: {
              name
            }
          } = object;
          const property = path.get("tag.property");
          if (object.isIdentifier() && name === "String" && !path.scope.getBinding(name) && property.isIdentifier() && property.node.name === "raw") {
            return evaluateQuasis(path, path.node.quasi.quasis, state, true);
          }
        }
        if (path.isConditionalExpression()) {
          const testResult = evaluateCached(path.get("test"), state);
          if (!state.confident)
            return;
          if (testResult) {
            return evaluateCached(path.get("consequent"), state);
          } else {
            return evaluateCached(path.get("alternate"), state);
          }
        }
        if (path.isExpressionWrapper()) {
          return evaluateCached(path.get("expression"), state);
        }
        if (path.isMemberExpression() && !path.parentPath.isCallExpression({
          callee: path.node
        })) {
          const property = path.get("property");
          const object = path.get("object");
          if (object.isLiteral()) {
            const value = object.node.value;
            const type = typeof value;
            let key = null;
            if (path.node.computed) {
              key = evaluateCached(property, state);
              if (!state.confident)
                return;
            } else if (property.isIdentifier()) {
              key = property.node.name;
            }
            if ((type === "number" || type === "string") && key != null && (typeof key === "number" || typeof key === "string")) {
              return value[key];
            }
          }
        }
        if (path.isReferencedIdentifier()) {
          const binding = path.scope.getBinding(path.node.name);
          if (binding) {
            if (binding.constantViolations.length > 0 || path.node.start < binding.path.node.end) {
              deopt(binding.path, state);
              return;
            }
            if (binding.hasValue) {
              return binding.value;
            }
          }
          const name = path.node.name;
          if (Globals.has(name)) {
            if (!binding) {
              return Globals.get(name);
            }
            deopt(binding.path, state);
            return;
          }
          const resolved = path.resolve();
          if (resolved === path) {
            deopt(path, state);
            return;
          } else {
            return evaluateCached(resolved, state);
          }
        }
        if (path.isUnaryExpression({
          prefix: true
        })) {
          if (path.node.operator === "void") {
            return void 0;
          }
          const argument = path.get("argument");
          if (path.node.operator === "typeof" && (argument.isFunction() || argument.isClass())) {
            return "function";
          }
          const arg = evaluateCached(argument, state);
          if (!state.confident)
            return;
          switch (path.node.operator) {
            case "!":
              return !arg;
            case "+":
              return +arg;
            case "-":
              return -arg;
            case "~":
              return ~arg;
            case "typeof":
              return typeof arg;
          }
        }
        if (path.isArrayExpression()) {
          const arr = [];
          const elems = path.get("elements");
          for (const elem of elems) {
            const elemValue = elem.evaluate();
            if (elemValue.confident) {
              arr.push(elemValue.value);
            } else {
              deopt(elemValue.deopt, state);
              return;
            }
          }
          return arr;
        }
        if (path.isObjectExpression()) {
          const obj = {};
          const props = path.get("properties");
          for (const prop of props) {
            if (prop.isObjectMethod() || prop.isSpreadElement()) {
              deopt(prop, state);
              return;
            }
            const keyPath = prop.get("key");
            let key;
            if (prop.node.computed) {
              key = keyPath.evaluate();
              if (!key.confident) {
                deopt(key.deopt, state);
                return;
              }
              key = key.value;
            } else if (keyPath.isIdentifier()) {
              key = keyPath.node.name;
            } else {
              key = keyPath.node.value;
            }
            const valuePath = prop.get("value");
            let value = valuePath.evaluate();
            if (!value.confident) {
              deopt(value.deopt, state);
              return;
            }
            value = value.value;
            obj[key] = value;
          }
          return obj;
        }
        if (path.isLogicalExpression()) {
          const wasConfident = state.confident;
          const left = evaluateCached(path.get("left"), state);
          const leftConfident = state.confident;
          state.confident = wasConfident;
          const right = evaluateCached(path.get("right"), state);
          const rightConfident = state.confident;
          switch (path.node.operator) {
            case "||":
              state.confident = leftConfident && (!!left || rightConfident);
              if (!state.confident)
                return;
              return left || right;
            case "&&":
              state.confident = leftConfident && (!left || rightConfident);
              if (!state.confident)
                return;
              return left && right;
            case "??":
              state.confident = leftConfident && (left != null || rightConfident);
              if (!state.confident)
                return;
              return left != null ? left : right;
          }
        }
        if (path.isBinaryExpression()) {
          const left = evaluateCached(path.get("left"), state);
          if (!state.confident)
            return;
          const right = evaluateCached(path.get("right"), state);
          if (!state.confident)
            return;
          switch (path.node.operator) {
            case "-":
              return left - right;
            case "+":
              return left + right;
            case "/":
              return left / right;
            case "*":
              return left * right;
            case "%":
              return left % right;
            case "**":
              return Math.pow(left, right);
            case "<":
              return left < right;
            case ">":
              return left > right;
            case "<=":
              return left <= right;
            case ">=":
              return left >= right;
            case "==":
              return left == right;
            case "!=":
              return left != right;
            case "===":
              return left === right;
            case "!==":
              return left !== right;
            case "|":
              return left | right;
            case "&":
              return left & right;
            case "^":
              return left ^ right;
            case "<<":
              return left << right;
            case ">>":
              return left >> right;
            case ">>>":
              return left >>> right;
          }
        }
        if (path.isCallExpression()) {
          const callee = path.get("callee");
          let context;
          let func;
          if (callee.isIdentifier() && !path.scope.getBinding(callee.node.name) && (isValidObjectCallee(callee.node.name) || isValidIdentifierCallee(callee.node.name))) {
            func = global[callee.node.name];
          }
          if (callee.isMemberExpression()) {
            const object = callee.get("object");
            const property = callee.get("property");
            if (object.isIdentifier() && property.isIdentifier() && isValidObjectCallee(object.node.name) && !isInvalidMethod(property.node.name)) {
              context = global[object.node.name];
              const key = property.node.name;
              if (Object.hasOwnProperty.call(context, key)) {
                func = context[key];
              }
            }
            if (object.isLiteral() && property.isIdentifier()) {
              const type = typeof object.node.value;
              if (type === "string" || type === "number") {
                context = object.node.value;
                func = context[property.node.name];
              }
            }
          }
          if (func) {
            const args = path.get("arguments").map((arg) => evaluateCached(arg, state));
            if (!state.confident)
              return;
            return func.apply(context, args);
          }
        }
        deopt(path, state);
      }
      function evaluateQuasis(path, quasis, state, raw = false) {
        let str = "";
        let i = 0;
        const exprs = path.isTemplateLiteral() ? path.get("expressions") : path.get("quasi.expressions");
        for (const elem of quasis) {
          if (!state.confident)
            break;
          str += raw ? elem.value.raw : elem.value.cooked;
          const expr = exprs[i++];
          if (expr)
            str += String(evaluateCached(expr, state));
        }
        if (!state.confident)
          return;
        return str;
      }
      function evaluate() {
        const state = {
          confident: true,
          deoptPath: null,
          seen: /* @__PURE__ */ new Map()
        };
        let value = evaluateCached(this, state);
        if (!state.confident)
          value = void 0;
        return {
          confident: state.confident,
          deopt: state.deoptPath,
          value
        };
      }
    }
  });

  // node_modules/@babel/template/lib/formatters.js
  var require_formatters = __commonJS({
    "node_modules/@babel/template/lib/formatters.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.statements = exports.statement = exports.smart = exports.program = exports.expression = void 0;
      var _t = require_lib3();
      var {
        assertExpressionStatement
      } = _t;
      function makeStatementFormatter(fn) {
        return {
          code: (str) => `/* @babel/template */;
${str}`,
          validate: () => {
          },
          unwrap: (ast) => {
            return fn(ast.program.body.slice(1));
          }
        };
      }
      var smart = exports.smart = makeStatementFormatter((body) => {
        if (body.length > 1) {
          return body;
        } else {
          return body[0];
        }
      });
      var statements = exports.statements = makeStatementFormatter((body) => body);
      var statement = exports.statement = makeStatementFormatter((body) => {
        if (body.length === 0) {
          throw new Error("Found nothing to return.");
        }
        if (body.length > 1) {
          throw new Error("Found multiple statements but wanted one");
        }
        return body[0];
      });
      var expression = exports.expression = {
        code: (str) => `(
${str}
)`,
        validate: (ast) => {
          if (ast.program.body.length > 1) {
            throw new Error("Found multiple statements but wanted one");
          }
          if (expression.unwrap(ast).start === 0) {
            throw new Error("Parse result included parens.");
          }
        },
        unwrap: ({
          program: program2
        }) => {
          const [stmt] = program2.body;
          assertExpressionStatement(stmt);
          return stmt.expression;
        }
      };
      var program = exports.program = {
        code: (str) => str,
        validate: () => {
        },
        unwrap: (ast) => ast.program
      };
    }
  });

  // node_modules/@babel/template/lib/options.js
  var require_options = __commonJS({
    "node_modules/@babel/template/lib/options.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.merge = merge;
      exports.normalizeReplacements = normalizeReplacements;
      exports.validate = validate;
      var _excluded = ["placeholderWhitelist", "placeholderPattern", "preserveComments", "syntacticPlaceholders"];
      function _objectWithoutPropertiesLoose(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function merge(a2, b) {
        const {
          placeholderWhitelist = a2.placeholderWhitelist,
          placeholderPattern = a2.placeholderPattern,
          preserveComments = a2.preserveComments,
          syntacticPlaceholders = a2.syntacticPlaceholders
        } = b;
        return {
          parser: Object.assign({}, a2.parser, b.parser),
          placeholderWhitelist,
          placeholderPattern,
          preserveComments,
          syntacticPlaceholders
        };
      }
      function validate(opts) {
        if (opts != null && typeof opts !== "object") {
          throw new Error("Unknown template options.");
        }
        const _ref = opts || {}, {
          placeholderWhitelist,
          placeholderPattern,
          preserveComments,
          syntacticPlaceholders
        } = _ref, parser2 = _objectWithoutPropertiesLoose(_ref, _excluded);
        if (placeholderWhitelist != null && !(placeholderWhitelist instanceof Set)) {
          throw new Error("'.placeholderWhitelist' must be a Set, null, or undefined");
        }
        if (placeholderPattern != null && !(placeholderPattern instanceof RegExp) && placeholderPattern !== false) {
          throw new Error("'.placeholderPattern' must be a RegExp, false, null, or undefined");
        }
        if (preserveComments != null && typeof preserveComments !== "boolean") {
          throw new Error("'.preserveComments' must be a boolean, null, or undefined");
        }
        if (syntacticPlaceholders != null && typeof syntacticPlaceholders !== "boolean") {
          throw new Error("'.syntacticPlaceholders' must be a boolean, null, or undefined");
        }
        if (syntacticPlaceholders === true && (placeholderWhitelist != null || placeholderPattern != null)) {
          throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
        }
        return {
          parser: parser2,
          placeholderWhitelist: placeholderWhitelist || void 0,
          placeholderPattern: placeholderPattern == null ? void 0 : placeholderPattern,
          preserveComments: preserveComments == null ? void 0 : preserveComments,
          syntacticPlaceholders: syntacticPlaceholders == null ? void 0 : syntacticPlaceholders
        };
      }
      function normalizeReplacements(replacements) {
        if (Array.isArray(replacements)) {
          return replacements.reduce((acc, replacement, i) => {
            acc["$" + i] = replacement;
            return acc;
          }, {});
        } else if (typeof replacements === "object" || replacements == null) {
          return replacements || void 0;
        }
        throw new Error("Template replacements must be an array, object, null, or undefined");
      }
    }
  });

  // node_modules/@babel/template/lib/parse.js
  var require_parse = __commonJS({
    "node_modules/@babel/template/lib/parse.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = parseAndBuildMetadata;
      var _t = require_lib3();
      var _parser = require_lib5();
      var _codeFrame = require_lib9();
      var {
        isCallExpression,
        isExpressionStatement,
        isFunction,
        isIdentifier,
        isJSXIdentifier,
        isNewExpression,
        isPlaceholder,
        isStatement,
        isStringLiteral,
        removePropertiesDeep,
        traverse: traverse2
      } = _t;
      var PATTERN = /^[_$A-Z0-9]+$/;
      function parseAndBuildMetadata(formatter, code, opts) {
        const {
          placeholderWhitelist,
          placeholderPattern,
          preserveComments,
          syntacticPlaceholders
        } = opts;
        const ast = parseWithCodeFrame(code, opts.parser, syntacticPlaceholders);
        removePropertiesDeep(ast, {
          preserveComments
        });
        formatter.validate(ast);
        const state = {
          syntactic: {
            placeholders: [],
            placeholderNames: /* @__PURE__ */ new Set()
          },
          legacy: {
            placeholders: [],
            placeholderNames: /* @__PURE__ */ new Set()
          },
          placeholderWhitelist,
          placeholderPattern,
          syntacticPlaceholders
        };
        traverse2(ast, placeholderVisitorHandler, state);
        return Object.assign({
          ast
        }, state.syntactic.placeholders.length ? state.syntactic : state.legacy);
      }
      function placeholderVisitorHandler(node, ancestors, state) {
        var _state$placeholderWhi;
        let name;
        let hasSyntacticPlaceholders = state.syntactic.placeholders.length > 0;
        if (isPlaceholder(node)) {
          if (state.syntacticPlaceholders === false) {
            throw new Error("%%foo%%-style placeholders can't be used when '.syntacticPlaceholders' is false.");
          }
          name = node.name.name;
          hasSyntacticPlaceholders = true;
        } else if (hasSyntacticPlaceholders || state.syntacticPlaceholders) {
          return;
        } else if (isIdentifier(node) || isJSXIdentifier(node)) {
          name = node.name;
        } else if (isStringLiteral(node)) {
          name = node.value;
        } else {
          return;
        }
        if (hasSyntacticPlaceholders && (state.placeholderPattern != null || state.placeholderWhitelist != null)) {
          throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
        }
        if (!hasSyntacticPlaceholders && (state.placeholderPattern === false || !(state.placeholderPattern || PATTERN).test(name)) && !((_state$placeholderWhi = state.placeholderWhitelist) != null && _state$placeholderWhi.has(name))) {
          return;
        }
        ancestors = ancestors.slice();
        const {
          node: parent,
          key
        } = ancestors[ancestors.length - 1];
        let type;
        if (isStringLiteral(node) || isPlaceholder(node, {
          expectedNode: "StringLiteral"
        })) {
          type = "string";
        } else if (isNewExpression(parent) && key === "arguments" || isCallExpression(parent) && key === "arguments" || isFunction(parent) && key === "params") {
          type = "param";
        } else if (isExpressionStatement(parent) && !isPlaceholder(node)) {
          type = "statement";
          ancestors = ancestors.slice(0, -1);
        } else if (isStatement(node) && isPlaceholder(node)) {
          type = "statement";
        } else {
          type = "other";
        }
        const {
          placeholders,
          placeholderNames
        } = !hasSyntacticPlaceholders ? state.legacy : state.syntactic;
        placeholders.push({
          name,
          type,
          resolve: (ast) => resolveAncestors(ast, ancestors),
          isDuplicate: placeholderNames.has(name)
        });
        placeholderNames.add(name);
      }
      function resolveAncestors(ast, ancestors) {
        let parent = ast;
        for (let i = 0; i < ancestors.length - 1; i++) {
          const {
            key: key2,
            index: index2
          } = ancestors[i];
          if (index2 === void 0) {
            parent = parent[key2];
          } else {
            parent = parent[key2][index2];
          }
        }
        const {
          key,
          index
        } = ancestors[ancestors.length - 1];
        return {
          parent,
          key,
          index
        };
      }
      function parseWithCodeFrame(code, parserOpts, syntacticPlaceholders) {
        const plugins = (parserOpts.plugins || []).slice();
        if (syntacticPlaceholders !== false) {
          plugins.push("placeholders");
        }
        parserOpts = Object.assign({
          allowReturnOutsideFunction: true,
          allowSuperOutsideMethod: true,
          sourceType: "module"
        }, parserOpts, {
          plugins
        });
        try {
          return (0, _parser.parse)(code, parserOpts);
        } catch (err) {
          const loc = err.loc;
          if (loc) {
            err.message += "\n" + (0, _codeFrame.codeFrameColumns)(code, {
              start: loc
            });
            err.code = "BABEL_TEMPLATE_PARSE_ERROR";
          }
          throw err;
        }
      }
    }
  });

  // node_modules/@babel/template/lib/populate.js
  var require_populate = __commonJS({
    "node_modules/@babel/template/lib/populate.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = populatePlaceholders;
      var _t = require_lib3();
      var {
        blockStatement,
        cloneNode,
        emptyStatement,
        expressionStatement,
        identifier,
        isStatement,
        isStringLiteral,
        stringLiteral,
        validate
      } = _t;
      function populatePlaceholders(metadata, replacements) {
        const ast = cloneNode(metadata.ast);
        if (replacements) {
          metadata.placeholders.forEach((placeholder) => {
            if (!Object.prototype.hasOwnProperty.call(replacements, placeholder.name)) {
              const placeholderName = placeholder.name;
              throw new Error(`Error: No substitution given for "${placeholderName}". If this is not meant to be a
            placeholder you may want to consider passing one of the following options to @babel/template:
            - { placeholderPattern: false, placeholderWhitelist: new Set(['${placeholderName}'])}
            - { placeholderPattern: /^${placeholderName}$/ }`);
            }
          });
          Object.keys(replacements).forEach((key) => {
            if (!metadata.placeholderNames.has(key)) {
              throw new Error(`Unknown substitution "${key}" given`);
            }
          });
        }
        metadata.placeholders.slice().reverse().forEach((placeholder) => {
          try {
            applyReplacement(placeholder, ast, replacements && replacements[placeholder.name] || null);
          } catch (e) {
            e.message = `@babel/template placeholder "${placeholder.name}": ${e.message}`;
            throw e;
          }
        });
        return ast;
      }
      function applyReplacement(placeholder, ast, replacement) {
        if (placeholder.isDuplicate) {
          if (Array.isArray(replacement)) {
            replacement = replacement.map((node) => cloneNode(node));
          } else if (typeof replacement === "object") {
            replacement = cloneNode(replacement);
          }
        }
        const {
          parent,
          key,
          index
        } = placeholder.resolve(ast);
        if (placeholder.type === "string") {
          if (typeof replacement === "string") {
            replacement = stringLiteral(replacement);
          }
          if (!replacement || !isStringLiteral(replacement)) {
            throw new Error("Expected string substitution");
          }
        } else if (placeholder.type === "statement") {
          if (index === void 0) {
            if (!replacement) {
              replacement = emptyStatement();
            } else if (Array.isArray(replacement)) {
              replacement = blockStatement(replacement);
            } else if (typeof replacement === "string") {
              replacement = expressionStatement(identifier(replacement));
            } else if (!isStatement(replacement)) {
              replacement = expressionStatement(replacement);
            }
          } else {
            if (replacement && !Array.isArray(replacement)) {
              if (typeof replacement === "string") {
                replacement = identifier(replacement);
              }
              if (!isStatement(replacement)) {
                replacement = expressionStatement(replacement);
              }
            }
          }
        } else if (placeholder.type === "param") {
          if (typeof replacement === "string") {
            replacement = identifier(replacement);
          }
          if (index === void 0)
            throw new Error("Assertion failure.");
        } else {
          if (typeof replacement === "string") {
            replacement = identifier(replacement);
          }
          if (Array.isArray(replacement)) {
            throw new Error("Cannot replace single expression with an array.");
          }
        }
        if (index === void 0) {
          validate(parent, key, replacement);
          parent[key] = replacement;
        } else {
          const items = parent[key].slice();
          if (placeholder.type === "statement" || placeholder.type === "param") {
            if (replacement == null) {
              items.splice(index, 1);
            } else if (Array.isArray(replacement)) {
              items.splice(index, 1, ...replacement);
            } else {
              items[index] = replacement;
            }
          } else {
            items[index] = replacement;
          }
          validate(parent, key, items);
          parent[key] = items;
        }
      }
    }
  });

  // node_modules/@babel/template/lib/string.js
  var require_string = __commonJS({
    "node_modules/@babel/template/lib/string.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = stringTemplate;
      var _options = require_options();
      var _parse = require_parse();
      var _populate = require_populate();
      function stringTemplate(formatter, code, opts) {
        code = formatter.code(code);
        let metadata;
        return (arg) => {
          const replacements = (0, _options.normalizeReplacements)(arg);
          if (!metadata)
            metadata = (0, _parse.default)(formatter, code, opts);
          return formatter.unwrap((0, _populate.default)(metadata, replacements));
        };
      }
    }
  });

  // node_modules/@babel/template/lib/literal.js
  var require_literal = __commonJS({
    "node_modules/@babel/template/lib/literal.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = literalTemplate;
      var _options = require_options();
      var _parse = require_parse();
      var _populate = require_populate();
      function literalTemplate(formatter, tpl, opts) {
        const {
          metadata,
          names
        } = buildLiteralData(formatter, tpl, opts);
        return (arg) => {
          const defaultReplacements = {};
          arg.forEach((replacement, i) => {
            defaultReplacements[names[i]] = replacement;
          });
          return (arg2) => {
            const replacements = (0, _options.normalizeReplacements)(arg2);
            if (replacements) {
              Object.keys(replacements).forEach((key) => {
                if (Object.prototype.hasOwnProperty.call(defaultReplacements, key)) {
                  throw new Error("Unexpected replacement overlap.");
                }
              });
            }
            return formatter.unwrap((0, _populate.default)(metadata, replacements ? Object.assign(replacements, defaultReplacements) : defaultReplacements));
          };
        };
      }
      function buildLiteralData(formatter, tpl, opts) {
        let prefix = "BABEL_TPL$";
        const raw = tpl.join("");
        do {
          prefix = "$$" + prefix;
        } while (raw.includes(prefix));
        const {
          names,
          code
        } = buildTemplateCode(tpl, prefix);
        const metadata = (0, _parse.default)(formatter, formatter.code(code), {
          parser: opts.parser,
          placeholderWhitelist: new Set(names.concat(opts.placeholderWhitelist ? Array.from(opts.placeholderWhitelist) : [])),
          placeholderPattern: opts.placeholderPattern,
          preserveComments: opts.preserveComments,
          syntacticPlaceholders: opts.syntacticPlaceholders
        });
        return {
          metadata,
          names
        };
      }
      function buildTemplateCode(tpl, prefix) {
        const names = [];
        let code = tpl[0];
        for (let i = 1; i < tpl.length; i++) {
          const value = `${prefix}${i - 1}`;
          names.push(value);
          code += value + tpl[i];
        }
        return {
          names,
          code
        };
      }
    }
  });

  // node_modules/@babel/template/lib/builder.js
  var require_builder = __commonJS({
    "node_modules/@babel/template/lib/builder.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createTemplateBuilder;
      var _options = require_options();
      var _string = require_string();
      var _literal = require_literal();
      var NO_PLACEHOLDER = (0, _options.validate)({
        placeholderPattern: false
      });
      function createTemplateBuilder(formatter, defaultOpts) {
        const templateFnCache = /* @__PURE__ */ new WeakMap();
        const templateAstCache = /* @__PURE__ */ new WeakMap();
        const cachedOpts = defaultOpts || (0, _options.validate)(null);
        return Object.assign((tpl, ...args) => {
          if (typeof tpl === "string") {
            if (args.length > 1)
              throw new Error("Unexpected extra params.");
            return extendedTrace((0, _string.default)(formatter, tpl, (0, _options.merge)(cachedOpts, (0, _options.validate)(args[0]))));
          } else if (Array.isArray(tpl)) {
            let builder = templateFnCache.get(tpl);
            if (!builder) {
              builder = (0, _literal.default)(formatter, tpl, cachedOpts);
              templateFnCache.set(tpl, builder);
            }
            return extendedTrace(builder(args));
          } else if (typeof tpl === "object" && tpl) {
            if (args.length > 0)
              throw new Error("Unexpected extra params.");
            return createTemplateBuilder(formatter, (0, _options.merge)(cachedOpts, (0, _options.validate)(tpl)));
          }
          throw new Error(`Unexpected template param ${typeof tpl}`);
        }, {
          ast: (tpl, ...args) => {
            if (typeof tpl === "string") {
              if (args.length > 1)
                throw new Error("Unexpected extra params.");
              return (0, _string.default)(formatter, tpl, (0, _options.merge)((0, _options.merge)(cachedOpts, (0, _options.validate)(args[0])), NO_PLACEHOLDER))();
            } else if (Array.isArray(tpl)) {
              let builder = templateAstCache.get(tpl);
              if (!builder) {
                builder = (0, _literal.default)(formatter, tpl, (0, _options.merge)(cachedOpts, NO_PLACEHOLDER));
                templateAstCache.set(tpl, builder);
              }
              return builder(args)();
            }
            throw new Error(`Unexpected template param ${typeof tpl}`);
          }
        });
      }
      function extendedTrace(fn) {
        let rootStack = "";
        try {
          throw new Error();
        } catch (error) {
          if (error.stack) {
            rootStack = error.stack.split("\n").slice(3).join("\n");
          }
        }
        return (arg) => {
          try {
            return fn(arg);
          } catch (err) {
            err.stack += `
    =============
${rootStack}`;
            throw err;
          }
        };
      }
    }
  });

  // node_modules/@babel/template/lib/index.js
  var require_lib11 = __commonJS({
    "node_modules/@babel/template/lib/index.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.statements = exports.statement = exports.smart = exports.program = exports.expression = exports.default = void 0;
      var formatters = require_formatters();
      var _builder = require_builder();
      var smart = exports.smart = (0, _builder.default)(formatters.smart);
      var statement = exports.statement = (0, _builder.default)(formatters.statement);
      var statements = exports.statements = (0, _builder.default)(formatters.statements);
      var expression = exports.expression = (0, _builder.default)(formatters.expression);
      var program = exports.program = (0, _builder.default)(formatters.program);
      var _default = exports.default = Object.assign(smart.bind(void 0), {
        smart,
        statement,
        statements,
        expression,
        program,
        ast: smart.ast
      });
    }
  });

  // node_modules/@babel/helper-function-name/lib/index.js
  var require_lib12 = __commonJS({
    "node_modules/@babel/helper-function-name/lib/index.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = _default;
      var _template = require_lib11();
      var _t = require_lib3();
      var {
        NOT_LOCAL_BINDING,
        cloneNode,
        identifier,
        isAssignmentExpression,
        isAssignmentPattern,
        isFunction,
        isIdentifier,
        isLiteral,
        isNullLiteral,
        isObjectMethod,
        isObjectProperty,
        isRegExpLiteral,
        isRestElement,
        isTemplateLiteral,
        isVariableDeclarator,
        toBindingIdentifierName
      } = _t;
      function getFunctionArity(node) {
        const count = node.params.findIndex((param) => isAssignmentPattern(param) || isRestElement(param));
        return count === -1 ? node.params.length : count;
      }
      var buildPropertyMethodAssignmentWrapper = _template.default.statement(`
  (function (FUNCTION_KEY) {
    function FUNCTION_ID() {
      return FUNCTION_KEY.apply(this, arguments);
    }

    FUNCTION_ID.toString = function () {
      return FUNCTION_KEY.toString();
    }

    return FUNCTION_ID;
  })(FUNCTION)
`);
      var buildGeneratorPropertyMethodAssignmentWrapper = _template.default.statement(`
  (function (FUNCTION_KEY) {
    function* FUNCTION_ID() {
      return yield* FUNCTION_KEY.apply(this, arguments);
    }

    FUNCTION_ID.toString = function () {
      return FUNCTION_KEY.toString();
    };

    return FUNCTION_ID;
  })(FUNCTION)
`);
      var visitor = {
        "ReferencedIdentifier|BindingIdentifier"(path, state) {
          if (path.node.name !== state.name)
            return;
          const localDeclar = path.scope.getBindingIdentifier(state.name);
          if (localDeclar !== state.outerDeclar)
            return;
          state.selfReference = true;
          path.stop();
        }
      };
      function getNameFromLiteralId(id) {
        if (isNullLiteral(id)) {
          return "null";
        }
        if (isRegExpLiteral(id)) {
          return `_${id.pattern}_${id.flags}`;
        }
        if (isTemplateLiteral(id)) {
          return id.quasis.map((quasi) => quasi.value.raw).join("");
        }
        if (id.value !== void 0) {
          return id.value + "";
        }
        return "";
      }
      function wrap(state, method, id, scope) {
        if (state.selfReference) {
          if (scope.hasBinding(id.name) && !scope.hasGlobal(id.name)) {
            scope.rename(id.name);
          } else {
            if (!isFunction(method))
              return;
            let build = buildPropertyMethodAssignmentWrapper;
            if (method.generator) {
              build = buildGeneratorPropertyMethodAssignmentWrapper;
            }
            const template = build({
              FUNCTION: method,
              FUNCTION_ID: id,
              FUNCTION_KEY: scope.generateUidIdentifier(id.name)
            }).expression;
            const params = template.callee.body.body[0].params;
            for (let i = 0, len = getFunctionArity(method); i < len; i++) {
              params.push(scope.generateUidIdentifier("x"));
            }
            return template;
          }
        }
        method.id = id;
        scope.getProgramParent().references[id.name] = true;
      }
      function visit(node, name, scope) {
        const state = {
          selfAssignment: false,
          selfReference: false,
          outerDeclar: scope.getBindingIdentifier(name),
          name
        };
        const binding = scope.getOwnBinding(name);
        if (binding) {
          if (binding.kind === "param") {
            state.selfReference = true;
          } else {
          }
        } else if (state.outerDeclar || scope.hasGlobal(name)) {
          scope.traverse(node, visitor, state);
        }
        return state;
      }
      function _default({
        node,
        parent,
        scope,
        id
      }, localBinding = false, supportUnicodeId = false) {
        if (node.id)
          return;
        if ((isObjectProperty(parent) || isObjectMethod(parent, {
          kind: "method"
        })) && (!parent.computed || isLiteral(parent.key))) {
          id = parent.key;
        } else if (isVariableDeclarator(parent)) {
          id = parent.id;
          if (isIdentifier(id) && !localBinding) {
            const binding = scope.parent.getBinding(id.name);
            if (binding && binding.constant && scope.getBinding(id.name) === binding) {
              node.id = cloneNode(id);
              node.id[NOT_LOCAL_BINDING] = true;
              return;
            }
          }
        } else if (isAssignmentExpression(parent, {
          operator: "="
        })) {
          id = parent.left;
        } else if (!id) {
          return;
        }
        let name;
        if (id && isLiteral(id)) {
          name = getNameFromLiteralId(id);
        } else if (id && isIdentifier(id)) {
          name = id.name;
        }
        if (name === void 0) {
          return;
        }
        if (!supportUnicodeId && isFunction(node) && /[\uD800-\uDFFF]/.test(name)) {
          return;
        }
        name = toBindingIdentifierName(name);
        const newId = identifier(name);
        newId[NOT_LOCAL_BINDING] = true;
        const state = visit(node, name, scope);
        return wrap(state, node, newId, scope) || node;
      }
    }
  });

  // node_modules/@babel/traverse/lib/path/conversion.js
  var require_conversion = __commonJS({
    "node_modules/@babel/traverse/lib/path/conversion.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.arrowFunctionToExpression = arrowFunctionToExpression;
      exports.ensureBlock = ensureBlock;
      exports.toComputedKey = toComputedKey;
      exports.unwrapFunctionEnvironment = unwrapFunctionEnvironment;
      var _t = require_lib3();
      var _helperEnvironmentVisitor = require_lib7();
      var _helperFunctionName = require_lib12();
      var _visitors = require_visitors();
      var {
        arrowFunctionExpression,
        assignmentExpression,
        binaryExpression,
        blockStatement,
        callExpression,
        conditionalExpression,
        expressionStatement,
        identifier,
        isIdentifier,
        jsxIdentifier,
        logicalExpression,
        LOGICAL_OPERATORS,
        memberExpression,
        metaProperty,
        numericLiteral,
        objectExpression,
        restElement,
        returnStatement,
        sequenceExpression,
        spreadElement,
        stringLiteral,
        super: _super,
        thisExpression,
        toExpression,
        unaryExpression
      } = _t;
      function toComputedKey() {
        let key;
        if (this.isMemberExpression()) {
          key = this.node.property;
        } else if (this.isProperty() || this.isMethod()) {
          key = this.node.key;
        } else {
          throw new ReferenceError("todo");
        }
        if (!this.node.computed) {
          if (isIdentifier(key))
            key = stringLiteral(key.name);
        }
        return key;
      }
      function ensureBlock() {
        const body = this.get("body");
        const bodyNode = body.node;
        if (Array.isArray(body)) {
          throw new Error("Can't convert array path to a block statement");
        }
        if (!bodyNode) {
          throw new Error("Can't convert node without a body");
        }
        if (body.isBlockStatement()) {
          return bodyNode;
        }
        const statements = [];
        let stringPath = "body";
        let key;
        let listKey;
        if (body.isStatement()) {
          listKey = "body";
          key = 0;
          statements.push(body.node);
        } else {
          stringPath += ".body.0";
          if (this.isFunction()) {
            key = "argument";
            statements.push(returnStatement(body.node));
          } else {
            key = "expression";
            statements.push(expressionStatement(body.node));
          }
        }
        this.node.body = blockStatement(statements);
        const parentPath = this.get(stringPath);
        body.setup(parentPath, listKey ? parentPath.node[listKey] : parentPath.node, listKey, key);
        return this.node;
      }
      {
        exports.arrowFunctionToShadowed = function() {
          if (!this.isArrowFunctionExpression())
            return;
          this.arrowFunctionToExpression();
        };
      }
      function unwrapFunctionEnvironment() {
        if (!this.isArrowFunctionExpression() && !this.isFunctionExpression() && !this.isFunctionDeclaration()) {
          throw this.buildCodeFrameError("Can only unwrap the environment of a function.");
        }
        hoistFunctionEnvironment(this);
      }
      function setType(path, type) {
        path.node.type = type;
      }
      function arrowFunctionToExpression({
        allowInsertArrow = true,
        allowInsertArrowWithRest = allowInsertArrow,
        noNewArrows = !((_arguments$) => (_arguments$ = arguments[0]) == null ? void 0 : _arguments$.specCompliant)()
      } = {}) {
        if (!this.isArrowFunctionExpression()) {
          throw this.buildCodeFrameError("Cannot convert non-arrow function to a function expression.");
        }
        const {
          thisBinding,
          fnPath: fn
        } = hoistFunctionEnvironment(this, noNewArrows, allowInsertArrow, allowInsertArrowWithRest);
        fn.ensureBlock();
        setType(fn, "FunctionExpression");
        if (!noNewArrows) {
          const checkBinding = thisBinding ? null : fn.scope.generateUidIdentifier("arrowCheckId");
          if (checkBinding) {
            fn.parentPath.scope.push({
              id: checkBinding,
              init: objectExpression([])
            });
          }
          fn.get("body").unshiftContainer("body", expressionStatement(callExpression(this.hub.addHelper("newArrowCheck"), [thisExpression(), checkBinding ? identifier(checkBinding.name) : identifier(thisBinding)])));
          fn.replaceWith(callExpression(memberExpression((0, _helperFunctionName.default)(this, true) || fn.node, identifier("bind")), [checkBinding ? identifier(checkBinding.name) : thisExpression()]));
          return fn.get("callee.object");
        }
        return fn;
      }
      var getSuperCallsVisitor = (0, _visitors.merge)([{
        CallExpression(child, {
          allSuperCalls
        }) {
          if (!child.get("callee").isSuper())
            return;
          allSuperCalls.push(child);
        }
      }, _helperEnvironmentVisitor.default]);
      function hoistFunctionEnvironment(fnPath, noNewArrows = true, allowInsertArrow = true, allowInsertArrowWithRest = true) {
        let arrowParent;
        let thisEnvFn = fnPath.findParent((p) => {
          if (p.isArrowFunctionExpression()) {
            var _arrowParent;
            (_arrowParent = arrowParent) != null ? _arrowParent : arrowParent = p;
            return false;
          }
          return p.isFunction() || p.isProgram() || p.isClassProperty({
            static: false
          }) || p.isClassPrivateProperty({
            static: false
          });
        });
        const inConstructor = thisEnvFn.isClassMethod({
          kind: "constructor"
        });
        if (thisEnvFn.isClassProperty() || thisEnvFn.isClassPrivateProperty()) {
          if (arrowParent) {
            thisEnvFn = arrowParent;
          } else if (allowInsertArrow) {
            fnPath.replaceWith(callExpression(arrowFunctionExpression([], toExpression(fnPath.node)), []));
            thisEnvFn = fnPath.get("callee");
            fnPath = thisEnvFn.get("body");
          } else {
            throw fnPath.buildCodeFrameError("Unable to transform arrow inside class property");
          }
        }
        const {
          thisPaths,
          argumentsPaths,
          newTargetPaths,
          superProps,
          superCalls
        } = getScopeInformation(fnPath);
        if (inConstructor && superCalls.length > 0) {
          if (!allowInsertArrow) {
            throw superCalls[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', it's not possible to compile `super()` in an arrow function without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
          }
          if (!allowInsertArrowWithRest) {
            throw superCalls[0].buildCodeFrameError("When using '@babel/plugin-transform-parameters', it's not possible to compile `super()` in an arrow function with default or rest parameters without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
          }
          const allSuperCalls = [];
          thisEnvFn.traverse(getSuperCallsVisitor, {
            allSuperCalls
          });
          const superBinding = getSuperBinding(thisEnvFn);
          allSuperCalls.forEach((superCall) => {
            const callee = identifier(superBinding);
            callee.loc = superCall.node.callee.loc;
            superCall.get("callee").replaceWith(callee);
          });
        }
        if (argumentsPaths.length > 0) {
          const argumentsBinding = getBinding(thisEnvFn, "arguments", () => {
            const args = () => identifier("arguments");
            if (thisEnvFn.scope.path.isProgram()) {
              return conditionalExpression(binaryExpression("===", unaryExpression("typeof", args()), stringLiteral("undefined")), thisEnvFn.scope.buildUndefinedNode(), args());
            } else {
              return args();
            }
          });
          argumentsPaths.forEach((argumentsChild) => {
            const argsRef = identifier(argumentsBinding);
            argsRef.loc = argumentsChild.node.loc;
            argumentsChild.replaceWith(argsRef);
          });
        }
        if (newTargetPaths.length > 0) {
          const newTargetBinding = getBinding(thisEnvFn, "newtarget", () => metaProperty(identifier("new"), identifier("target")));
          newTargetPaths.forEach((targetChild) => {
            const targetRef = identifier(newTargetBinding);
            targetRef.loc = targetChild.node.loc;
            targetChild.replaceWith(targetRef);
          });
        }
        if (superProps.length > 0) {
          if (!allowInsertArrow) {
            throw superProps[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', it's not possible to compile `super.prop` in an arrow function without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
          }
          const flatSuperProps = superProps.reduce((acc, superProp) => acc.concat(standardizeSuperProperty(superProp)), []);
          flatSuperProps.forEach((superProp) => {
            const key = superProp.node.computed ? "" : superProp.get("property").node.name;
            const superParentPath = superProp.parentPath;
            const isAssignment = superParentPath.isAssignmentExpression({
              left: superProp.node
            });
            const isCall = superParentPath.isCallExpression({
              callee: superProp.node
            });
            const isTaggedTemplate = superParentPath.isTaggedTemplateExpression({
              tag: superProp.node
            });
            const superBinding = getSuperPropBinding(thisEnvFn, isAssignment, key);
            const args = [];
            if (superProp.node.computed) {
              args.push(superProp.get("property").node);
            }
            if (isAssignment) {
              const value = superParentPath.node.right;
              args.push(value);
            }
            const call = callExpression(identifier(superBinding), args);
            if (isCall) {
              superParentPath.unshiftContainer("arguments", thisExpression());
              superProp.replaceWith(memberExpression(call, identifier("call")));
              thisPaths.push(superParentPath.get("arguments.0"));
            } else if (isAssignment) {
              superParentPath.replaceWith(call);
            } else if (isTaggedTemplate) {
              superProp.replaceWith(callExpression(memberExpression(call, identifier("bind"), false), [thisExpression()]));
              thisPaths.push(superProp.get("arguments.0"));
            } else {
              superProp.replaceWith(call);
            }
          });
        }
        let thisBinding;
        if (thisPaths.length > 0 || !noNewArrows) {
          thisBinding = getThisBinding(thisEnvFn, inConstructor);
          if (noNewArrows || inConstructor && hasSuperClass(thisEnvFn)) {
            thisPaths.forEach((thisChild) => {
              const thisRef = thisChild.isJSX() ? jsxIdentifier(thisBinding) : identifier(thisBinding);
              thisRef.loc = thisChild.node.loc;
              thisChild.replaceWith(thisRef);
            });
            if (!noNewArrows)
              thisBinding = null;
          }
        }
        return {
          thisBinding,
          fnPath
        };
      }
      function isLogicalOp(op) {
        return LOGICAL_OPERATORS.includes(op);
      }
      function standardizeSuperProperty(superProp) {
        if (superProp.parentPath.isAssignmentExpression() && superProp.parentPath.node.operator !== "=") {
          const assignmentPath = superProp.parentPath;
          const op = assignmentPath.node.operator.slice(0, -1);
          const value = assignmentPath.node.right;
          const isLogicalAssignment = isLogicalOp(op);
          if (superProp.node.computed) {
            const tmp = superProp.scope.generateDeclaredUidIdentifier("tmp");
            const object = superProp.node.object;
            const property = superProp.node.property;
            assignmentPath.get("left").replaceWith(memberExpression(object, assignmentExpression("=", tmp, property), true));
            assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object, identifier(tmp.name), true), value));
          } else {
            const object = superProp.node.object;
            const property = superProp.node.property;
            assignmentPath.get("left").replaceWith(memberExpression(object, property));
            assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object, identifier(property.name)), value));
          }
          if (isLogicalAssignment) {
            assignmentPath.replaceWith(logicalExpression(op, assignmentPath.node.left, assignmentPath.node.right));
          } else {
            assignmentPath.node.operator = "=";
          }
          return [assignmentPath.get("left"), assignmentPath.get("right").get("left")];
        } else if (superProp.parentPath.isUpdateExpression()) {
          const updateExpr = superProp.parentPath;
          const tmp = superProp.scope.generateDeclaredUidIdentifier("tmp");
          const computedKey = superProp.node.computed ? superProp.scope.generateDeclaredUidIdentifier("prop") : null;
          const parts = [assignmentExpression("=", tmp, memberExpression(superProp.node.object, computedKey ? assignmentExpression("=", computedKey, superProp.node.property) : superProp.node.property, superProp.node.computed)), assignmentExpression("=", memberExpression(superProp.node.object, computedKey ? identifier(computedKey.name) : superProp.node.property, superProp.node.computed), binaryExpression(superProp.parentPath.node.operator[0], identifier(tmp.name), numericLiteral(1)))];
          if (!superProp.parentPath.node.prefix) {
            parts.push(identifier(tmp.name));
          }
          updateExpr.replaceWith(sequenceExpression(parts));
          const left = updateExpr.get("expressions.0.right");
          const right = updateExpr.get("expressions.1.left");
          return [left, right];
        }
        return [superProp];
        function rightExpression(op, left, right) {
          if (op === "=") {
            return assignmentExpression("=", left, right);
          } else {
            return binaryExpression(op, left, right);
          }
        }
      }
      function hasSuperClass(thisEnvFn) {
        return thisEnvFn.isClassMethod() && !!thisEnvFn.parentPath.parentPath.node.superClass;
      }
      var assignSuperThisVisitor = (0, _visitors.merge)([{
        CallExpression(child, {
          supers,
          thisBinding
        }) {
          if (!child.get("callee").isSuper())
            return;
          if (supers.has(child.node))
            return;
          supers.add(child.node);
          child.replaceWithMultiple([child.node, assignmentExpression("=", identifier(thisBinding), identifier("this"))]);
        }
      }, _helperEnvironmentVisitor.default]);
      function getThisBinding(thisEnvFn, inConstructor) {
        return getBinding(thisEnvFn, "this", (thisBinding) => {
          if (!inConstructor || !hasSuperClass(thisEnvFn))
            return thisExpression();
          thisEnvFn.traverse(assignSuperThisVisitor, {
            supers: /* @__PURE__ */ new WeakSet(),
            thisBinding
          });
        });
      }
      function getSuperBinding(thisEnvFn) {
        return getBinding(thisEnvFn, "supercall", () => {
          const argsBinding = thisEnvFn.scope.generateUidIdentifier("args");
          return arrowFunctionExpression([restElement(argsBinding)], callExpression(_super(), [spreadElement(identifier(argsBinding.name))]));
        });
      }
      function getSuperPropBinding(thisEnvFn, isAssignment, propName) {
        const op = isAssignment ? "set" : "get";
        return getBinding(thisEnvFn, `superprop_${op}:${propName || ""}`, () => {
          const argsList = [];
          let fnBody;
          if (propName) {
            fnBody = memberExpression(_super(), identifier(propName));
          } else {
            const method = thisEnvFn.scope.generateUidIdentifier("prop");
            argsList.unshift(method);
            fnBody = memberExpression(_super(), identifier(method.name), true);
          }
          if (isAssignment) {
            const valueIdent = thisEnvFn.scope.generateUidIdentifier("value");
            argsList.push(valueIdent);
            fnBody = assignmentExpression("=", fnBody, identifier(valueIdent.name));
          }
          return arrowFunctionExpression(argsList, fnBody);
        });
      }
      function getBinding(thisEnvFn, key, init) {
        const cacheKey = "binding:" + key;
        let data = thisEnvFn.getData(cacheKey);
        if (!data) {
          const id = thisEnvFn.scope.generateUidIdentifier(key);
          data = id.name;
          thisEnvFn.setData(cacheKey, data);
          thisEnvFn.scope.push({
            id,
            init: init(data)
          });
        }
        return data;
      }
      var getScopeInformationVisitor = (0, _visitors.merge)([{
        ThisExpression(child, {
          thisPaths
        }) {
          thisPaths.push(child);
        },
        JSXIdentifier(child, {
          thisPaths
        }) {
          if (child.node.name !== "this")
            return;
          if (!child.parentPath.isJSXMemberExpression({
            object: child.node
          }) && !child.parentPath.isJSXOpeningElement({
            name: child.node
          })) {
            return;
          }
          thisPaths.push(child);
        },
        CallExpression(child, {
          superCalls
        }) {
          if (child.get("callee").isSuper())
            superCalls.push(child);
        },
        MemberExpression(child, {
          superProps
        }) {
          if (child.get("object").isSuper())
            superProps.push(child);
        },
        Identifier(child, {
          argumentsPaths
        }) {
          if (!child.isReferencedIdentifier({
            name: "arguments"
          }))
            return;
          let curr = child.scope;
          do {
            if (curr.hasOwnBinding("arguments")) {
              curr.rename("arguments");
              return;
            }
            if (curr.path.isFunction() && !curr.path.isArrowFunctionExpression()) {
              break;
            }
          } while (curr = curr.parent);
          argumentsPaths.push(child);
        },
        MetaProperty(child, {
          newTargetPaths
        }) {
          if (!child.get("meta").isIdentifier({
            name: "new"
          }))
            return;
          if (!child.get("property").isIdentifier({
            name: "target"
          }))
            return;
          newTargetPaths.push(child);
        }
      }, _helperEnvironmentVisitor.default]);
      function getScopeInformation(fnPath) {
        const thisPaths = [];
        const argumentsPaths = [];
        const newTargetPaths = [];
        const superProps = [];
        const superCalls = [];
        fnPath.traverse(getScopeInformationVisitor, {
          thisPaths,
          argumentsPaths,
          newTargetPaths,
          superProps,
          superCalls
        });
        return {
          thisPaths,
          argumentsPaths,
          newTargetPaths,
          superProps,
          superCalls
        };
      }
    }
  });

  // node_modules/@babel/traverse/lib/path/introspection.js
  var require_introspection = __commonJS({
    "node_modules/@babel/traverse/lib/path/introspection.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports._guessExecutionStatusRelativeTo = _guessExecutionStatusRelativeTo;
      exports._resolve = _resolve;
      exports.canHaveVariableDeclarationOrExpression = canHaveVariableDeclarationOrExpression;
      exports.canSwapBetweenExpressionAndStatement = canSwapBetweenExpressionAndStatement;
      exports.equals = equals;
      exports.getSource = getSource;
      exports.has = has;
      exports.is = void 0;
      exports.isCompletionRecord = isCompletionRecord;
      exports.isConstantExpression = isConstantExpression;
      exports.isInStrictMode = isInStrictMode;
      exports.isNodeType = isNodeType;
      exports.isStatementOrBlock = isStatementOrBlock;
      exports.isStatic = isStatic;
      exports.isnt = isnt;
      exports.matchesPattern = matchesPattern;
      exports.referencesImport = referencesImport;
      exports.resolve = resolve;
      exports.willIMaybeExecuteBefore = willIMaybeExecuteBefore;
      var _t = require_lib3();
      var {
        STATEMENT_OR_BLOCK_KEYS,
        VISITOR_KEYS,
        isBlockStatement,
        isExpression,
        isIdentifier,
        isLiteral,
        isStringLiteral,
        isType,
        matchesPattern: _matchesPattern
      } = _t;
      function matchesPattern(pattern, allowPartial) {
        return _matchesPattern(this.node, pattern, allowPartial);
      }
      function has(key) {
        const val = this.node && this.node[key];
        if (val && Array.isArray(val)) {
          return !!val.length;
        } else {
          return !!val;
        }
      }
      function isStatic() {
        return this.scope.isStatic(this.node);
      }
      var is = exports.is = has;
      function isnt(key) {
        return !this.has(key);
      }
      function equals(key, value) {
        return this.node[key] === value;
      }
      function isNodeType(type) {
        return isType(this.type, type);
      }
      function canHaveVariableDeclarationOrExpression() {
        return (this.key === "init" || this.key === "left") && this.parentPath.isFor();
      }
      function canSwapBetweenExpressionAndStatement(replacement) {
        if (this.key !== "body" || !this.parentPath.isArrowFunctionExpression()) {
          return false;
        }
        if (this.isExpression()) {
          return isBlockStatement(replacement);
        } else if (this.isBlockStatement()) {
          return isExpression(replacement);
        }
        return false;
      }
      function isCompletionRecord(allowInsideFunction) {
        let path = this;
        let first = true;
        do {
          const {
            type,
            container
          } = path;
          if (!first && (path.isFunction() || type === "StaticBlock")) {
            return !!allowInsideFunction;
          }
          first = false;
          if (Array.isArray(container) && path.key !== container.length - 1) {
            return false;
          }
        } while ((path = path.parentPath) && !path.isProgram() && !path.isDoExpression());
        return true;
      }
      function isStatementOrBlock() {
        if (this.parentPath.isLabeledStatement() || isBlockStatement(this.container)) {
          return false;
        } else {
          return STATEMENT_OR_BLOCK_KEYS.includes(this.key);
        }
      }
      function referencesImport(moduleSource, importName) {
        if (!this.isReferencedIdentifier()) {
          if (this.isJSXMemberExpression() && this.node.property.name === importName || (this.isMemberExpression() || this.isOptionalMemberExpression()) && (this.node.computed ? isStringLiteral(this.node.property, {
            value: importName
          }) : this.node.property.name === importName)) {
            const object = this.get("object");
            return object.isReferencedIdentifier() && object.referencesImport(moduleSource, "*");
          }
          return false;
        }
        const binding = this.scope.getBinding(this.node.name);
        if (!binding || binding.kind !== "module")
          return false;
        const path = binding.path;
        const parent = path.parentPath;
        if (!parent.isImportDeclaration())
          return false;
        if (parent.node.source.value === moduleSource) {
          if (!importName)
            return true;
        } else {
          return false;
        }
        if (path.isImportDefaultSpecifier() && importName === "default") {
          return true;
        }
        if (path.isImportNamespaceSpecifier() && importName === "*") {
          return true;
        }
        if (path.isImportSpecifier() && isIdentifier(path.node.imported, {
          name: importName
        })) {
          return true;
        }
        return false;
      }
      function getSource() {
        const node = this.node;
        if (node.end) {
          const code = this.hub.getCode();
          if (code)
            return code.slice(node.start, node.end);
        }
        return "";
      }
      function willIMaybeExecuteBefore(target) {
        return this._guessExecutionStatusRelativeTo(target) !== "after";
      }
      function getOuterFunction(path) {
        return path.isProgram() ? path : (path.parentPath.scope.getFunctionParent() || path.parentPath.scope.getProgramParent()).path;
      }
      function isExecutionUncertain(type, key) {
        switch (type) {
          case "LogicalExpression":
            return key === "right";
          case "ConditionalExpression":
          case "IfStatement":
            return key === "consequent" || key === "alternate";
          case "WhileStatement":
          case "DoWhileStatement":
          case "ForInStatement":
          case "ForOfStatement":
            return key === "body";
          case "ForStatement":
            return key === "body" || key === "update";
          case "SwitchStatement":
            return key === "cases";
          case "TryStatement":
            return key === "handler";
          case "AssignmentPattern":
            return key === "right";
          case "OptionalMemberExpression":
            return key === "property";
          case "OptionalCallExpression":
            return key === "arguments";
          default:
            return false;
        }
      }
      function isExecutionUncertainInList(paths, maxIndex) {
        for (let i = 0; i < maxIndex; i++) {
          const path = paths[i];
          if (isExecutionUncertain(path.parent.type, path.parentKey)) {
            return true;
          }
        }
        return false;
      }
      var SYMBOL_CHECKING = Symbol();
      function _guessExecutionStatusRelativeTo(target) {
        return _guessExecutionStatusRelativeToCached(this, target, /* @__PURE__ */ new Map());
      }
      function _guessExecutionStatusRelativeToCached(base, target, cache) {
        const funcParent = {
          this: getOuterFunction(base),
          target: getOuterFunction(target)
        };
        if (funcParent.target.node !== funcParent.this.node) {
          return _guessExecutionStatusRelativeToDifferentFunctionsCached(base, funcParent.target, cache);
        }
        const paths = {
          target: target.getAncestry(),
          this: base.getAncestry()
        };
        if (paths.target.indexOf(base) >= 0)
          return "after";
        if (paths.this.indexOf(target) >= 0)
          return "before";
        let commonPath;
        const commonIndex = {
          target: 0,
          this: 0
        };
        while (!commonPath && commonIndex.this < paths.this.length) {
          const path = paths.this[commonIndex.this];
          commonIndex.target = paths.target.indexOf(path);
          if (commonIndex.target >= 0) {
            commonPath = path;
          } else {
            commonIndex.this++;
          }
        }
        if (!commonPath) {
          throw new Error("Internal Babel error - The two compared nodes don't appear to belong to the same program.");
        }
        if (isExecutionUncertainInList(paths.this, commonIndex.this - 1) || isExecutionUncertainInList(paths.target, commonIndex.target - 1)) {
          return "unknown";
        }
        const divergence = {
          this: paths.this[commonIndex.this - 1],
          target: paths.target[commonIndex.target - 1]
        };
        if (divergence.target.listKey && divergence.this.listKey && divergence.target.container === divergence.this.container) {
          return divergence.target.key > divergence.this.key ? "before" : "after";
        }
        const keys = VISITOR_KEYS[commonPath.type];
        const keyPosition = {
          this: keys.indexOf(divergence.this.parentKey),
          target: keys.indexOf(divergence.target.parentKey)
        };
        return keyPosition.target > keyPosition.this ? "before" : "after";
      }
      function _guessExecutionStatusRelativeToDifferentFunctionsInternal(base, target, cache) {
        if (!target.isFunctionDeclaration()) {
          if (_guessExecutionStatusRelativeToCached(base, target, cache) === "before") {
            return "before";
          }
          return "unknown";
        } else if (target.parentPath.isExportDeclaration()) {
          return "unknown";
        }
        const binding = target.scope.getBinding(target.node.id.name);
        if (!binding.references)
          return "before";
        const referencePaths = binding.referencePaths;
        let allStatus;
        for (const path of referencePaths) {
          const childOfFunction = !!path.find((path2) => path2.node === target.node);
          if (childOfFunction)
            continue;
          if (path.key !== "callee" || !path.parentPath.isCallExpression()) {
            return "unknown";
          }
          const status = _guessExecutionStatusRelativeToCached(base, path, cache);
          if (allStatus && allStatus !== status) {
            return "unknown";
          } else {
            allStatus = status;
          }
        }
        return allStatus;
      }
      function _guessExecutionStatusRelativeToDifferentFunctionsCached(base, target, cache) {
        let nodeMap = cache.get(base.node);
        let cached;
        if (!nodeMap) {
          cache.set(base.node, nodeMap = /* @__PURE__ */ new Map());
        } else if (cached = nodeMap.get(target.node)) {
          if (cached === SYMBOL_CHECKING) {
            return "unknown";
          }
          return cached;
        }
        nodeMap.set(target.node, SYMBOL_CHECKING);
        const result = _guessExecutionStatusRelativeToDifferentFunctionsInternal(base, target, cache);
        nodeMap.set(target.node, result);
        return result;
      }
      function resolve(dangerous, resolved) {
        return this._resolve(dangerous, resolved) || this;
      }
      function _resolve(dangerous, resolved) {
        if (resolved && resolved.indexOf(this) >= 0)
          return;
        resolved = resolved || [];
        resolved.push(this);
        if (this.isVariableDeclarator()) {
          if (this.get("id").isIdentifier()) {
            return this.get("init").resolve(dangerous, resolved);
          } else {
          }
        } else if (this.isReferencedIdentifier()) {
          const binding = this.scope.getBinding(this.node.name);
          if (!binding)
            return;
          if (!binding.constant)
            return;
          if (binding.kind === "module")
            return;
          if (binding.path !== this) {
            const ret = binding.path.resolve(dangerous, resolved);
            if (this.find((parent) => parent.node === ret.node))
              return;
            return ret;
          }
        } else if (this.isTypeCastExpression()) {
          return this.get("expression").resolve(dangerous, resolved);
        } else if (dangerous && this.isMemberExpression()) {
          const targetKey = this.toComputedKey();
          if (!isLiteral(targetKey))
            return;
          const targetName = targetKey.value;
          const target = this.get("object").resolve(dangerous, resolved);
          if (target.isObjectExpression()) {
            const props = target.get("properties");
            for (const prop of props) {
              if (!prop.isProperty())
                continue;
              const key = prop.get("key");
              let match = prop.isnt("computed") && key.isIdentifier({
                name: targetName
              });
              match = match || key.isLiteral({
                value: targetName
              });
              if (match)
                return prop.get("value").resolve(dangerous, resolved);
            }
          } else if (target.isArrayExpression() && !isNaN(+targetName)) {
            const elems = target.get("elements");
            const elem = elems[targetName];
            if (elem)
              return elem.resolve(dangerous, resolved);
          }
        }
      }
      function isConstantExpression() {
        if (this.isIdentifier()) {
          const binding = this.scope.getBinding(this.node.name);
          if (!binding)
            return false;
          return binding.constant;
        }
        if (this.isLiteral()) {
          if (this.isRegExpLiteral()) {
            return false;
          }
          if (this.isTemplateLiteral()) {
            return this.get("expressions").every((expression) => expression.isConstantExpression());
          }
          return true;
        }
        if (this.isUnaryExpression()) {
          if (this.node.operator !== "void") {
            return false;
          }
          return this.get("argument").isConstantExpression();
        }
        if (this.isBinaryExpression()) {
          const {
            operator
          } = this.node;
          return operator !== "in" && operator !== "instanceof" && this.get("left").isConstantExpression() && this.get("right").isConstantExpression();
        }
        return false;
      }
      function isInStrictMode() {
        const start = this.isProgram() ? this : this.parentPath;
        const strictParent = start.find((path) => {
          if (path.isProgram({
            sourceType: "module"
          }))
            return true;
          if (path.isClass())
            return true;
          if (path.isArrowFunctionExpression() && !path.get("body").isBlockStatement()) {
            return false;
          }
          let body;
          if (path.isFunction()) {
            body = path.node.body;
          } else if (path.isProgram()) {
            body = path.node;
          } else {
            return false;
          }
          for (const directive of body.directives) {
            if (directive.value.value === "use strict") {
              return true;
            }
          }
        });
        return !!strictParent;
      }
    }
  });

  // node_modules/@babel/traverse/lib/path/context.js
  var require_context = __commonJS({
    "node_modules/@babel/traverse/lib/path/context.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports._call = _call;
      exports._getQueueContexts = _getQueueContexts;
      exports._resyncKey = _resyncKey;
      exports._resyncList = _resyncList;
      exports._resyncParent = _resyncParent;
      exports._resyncRemoved = _resyncRemoved;
      exports.call = call;
      exports.isBlacklisted = exports.isDenylisted = isDenylisted;
      exports.popContext = popContext;
      exports.pushContext = pushContext;
      exports.requeue = requeue;
      exports.resync = resync;
      exports.setContext = setContext;
      exports.setKey = setKey;
      exports.setScope = setScope;
      exports.setup = setup;
      exports.skip = skip;
      exports.skipKey = skipKey;
      exports.stop = stop;
      exports.visit = visit;
      var _traverseNode = require_traverse_node();
      var _index = require_path();
      function call(key) {
        const opts = this.opts;
        this.debug(key);
        if (this.node) {
          if (this._call(opts[key]))
            return true;
        }
        if (this.node) {
          var _opts$this$node$type;
          return this._call((_opts$this$node$type = opts[this.node.type]) == null ? void 0 : _opts$this$node$type[key]);
        }
        return false;
      }
      function _call(fns) {
        if (!fns)
          return false;
        for (const fn of fns) {
          if (!fn)
            continue;
          const node = this.node;
          if (!node)
            return true;
          const ret = fn.call(this.state, this, this.state);
          if (ret && typeof ret === "object" && typeof ret.then === "function") {
            throw new Error(`You appear to be using a plugin with an async traversal visitor, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.`);
          }
          if (ret) {
            throw new Error(`Unexpected return value from visitor method ${fn}`);
          }
          if (this.node !== node)
            return true;
          if (this._traverseFlags > 0)
            return true;
        }
        return false;
      }
      function isDenylisted() {
        var _this$opts$denylist;
        const denylist = (_this$opts$denylist = this.opts.denylist) != null ? _this$opts$denylist : this.opts.blacklist;
        return denylist && denylist.indexOf(this.node.type) > -1;
      }
      function restoreContext(path, context) {
        if (path.context !== context) {
          path.context = context;
          path.state = context.state;
          path.opts = context.opts;
        }
      }
      function visit() {
        var _this$opts$shouldSkip, _this$opts;
        if (!this.node) {
          return false;
        }
        if (this.isDenylisted()) {
          return false;
        }
        if ((_this$opts$shouldSkip = (_this$opts = this.opts).shouldSkip) != null && _this$opts$shouldSkip.call(_this$opts, this)) {
          return false;
        }
        const currentContext = this.context;
        if (this.shouldSkip || this.call("enter")) {
          this.debug("Skip...");
          return this.shouldStop;
        }
        restoreContext(this, currentContext);
        this.debug("Recursing into...");
        this.shouldStop = (0, _traverseNode.traverseNode)(this.node, this.opts, this.scope, this.state, this, this.skipKeys);
        restoreContext(this, currentContext);
        this.call("exit");
        return this.shouldStop;
      }
      function skip() {
        this.shouldSkip = true;
      }
      function skipKey(key) {
        if (this.skipKeys == null) {
          this.skipKeys = {};
        }
        this.skipKeys[key] = true;
      }
      function stop() {
        this._traverseFlags |= _index.SHOULD_SKIP | _index.SHOULD_STOP;
      }
      function setScope() {
        var _this$opts2, _this$scope;
        if ((_this$opts2 = this.opts) != null && _this$opts2.noScope)
          return;
        let path = this.parentPath;
        if ((this.key === "key" || this.listKey === "decorators") && path.isMethod() || this.key === "discriminant" && path.isSwitchStatement()) {
          path = path.parentPath;
        }
        let target;
        while (path && !target) {
          var _path$opts;
          if ((_path$opts = path.opts) != null && _path$opts.noScope)
            return;
          target = path.scope;
          path = path.parentPath;
        }
        this.scope = this.getScope(target);
        (_this$scope = this.scope) == null || _this$scope.init();
      }
      function setContext(context) {
        if (this.skipKeys != null) {
          this.skipKeys = {};
        }
        this._traverseFlags = 0;
        if (context) {
          this.context = context;
          this.state = context.state;
          this.opts = context.opts;
        }
        this.setScope();
        return this;
      }
      function resync() {
        if (this.removed)
          return;
        this._resyncParent();
        this._resyncList();
        this._resyncKey();
      }
      function _resyncParent() {
        if (this.parentPath) {
          this.parent = this.parentPath.node;
        }
      }
      function _resyncKey() {
        if (!this.container)
          return;
        if (this.node === this.container[this.key]) {
          return;
        }
        if (Array.isArray(this.container)) {
          for (let i = 0; i < this.container.length; i++) {
            if (this.container[i] === this.node) {
              this.setKey(i);
              return;
            }
          }
        } else {
          for (const key of Object.keys(this.container)) {
            if (this.container[key] === this.node) {
              this.setKey(key);
              return;
            }
          }
        }
        this.key = null;
      }
      function _resyncList() {
        if (!this.parent || !this.inList)
          return;
        const newContainer = this.parent[this.listKey];
        if (this.container === newContainer)
          return;
        this.container = newContainer || null;
      }
      function _resyncRemoved() {
        if (this.key == null || !this.container || this.container[this.key] !== this.node) {
          this._markRemoved();
        }
      }
      function popContext() {
        this.contexts.pop();
        if (this.contexts.length > 0) {
          this.setContext(this.contexts[this.contexts.length - 1]);
        } else {
          this.setContext(void 0);
        }
      }
      function pushContext(context) {
        this.contexts.push(context);
        this.setContext(context);
      }
      function setup(parentPath, container, listKey, key) {
        this.listKey = listKey;
        this.container = container;
        this.parentPath = parentPath || this.parentPath;
        this.setKey(key);
      }
      function setKey(key) {
        var _this$node;
        this.key = key;
        this.node = this.container[this.key];
        this.type = (_this$node = this.node) == null ? void 0 : _this$node.type;
      }
      function requeue(pathToQueue = this) {
        if (pathToQueue.removed)
          return;
        ;
        const contexts = this.contexts;
        for (const context of contexts) {
          context.maybeQueue(pathToQueue);
        }
      }
      function _getQueueContexts() {
        let path = this;
        let contexts = this.contexts;
        while (!contexts.length) {
          path = path.parentPath;
          if (!path)
            break;
          contexts = path.contexts;
        }
        return contexts;
      }
    }
  });

  // node_modules/@babel/traverse/lib/path/lib/removal-hooks.js
  var require_removal_hooks = __commonJS({
    "node_modules/@babel/traverse/lib/path/lib/removal-hooks.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.hooks = void 0;
      var hooks = exports.hooks = [function(self2, parent) {
        const removeParent = self2.key === "test" && (parent.isWhile() || parent.isSwitchCase()) || self2.key === "declaration" && parent.isExportDeclaration() || self2.key === "body" && parent.isLabeledStatement() || self2.listKey === "declarations" && parent.isVariableDeclaration() && parent.node.declarations.length === 1 || self2.key === "expression" && parent.isExpressionStatement();
        if (removeParent) {
          parent.remove();
          return true;
        }
      }, function(self2, parent) {
        if (parent.isSequenceExpression() && parent.node.expressions.length === 1) {
          parent.replaceWith(parent.node.expressions[0]);
          return true;
        }
      }, function(self2, parent) {
        if (parent.isBinary()) {
          if (self2.key === "left") {
            parent.replaceWith(parent.node.right);
          } else {
            parent.replaceWith(parent.node.left);
          }
          return true;
        }
      }, function(self2, parent) {
        if (parent.isIfStatement() && self2.key === "consequent" || self2.key === "body" && (parent.isLoop() || parent.isArrowFunctionExpression())) {
          self2.replaceWith({
            type: "BlockStatement",
            body: []
          });
          return true;
        }
      }];
    }
  });

  // node_modules/@babel/traverse/lib/path/removal.js
  var require_removal = __commonJS({
    "node_modules/@babel/traverse/lib/path/removal.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports._assertUnremoved = _assertUnremoved;
      exports._callRemovalHooks = _callRemovalHooks;
      exports._markRemoved = _markRemoved;
      exports._remove = _remove;
      exports._removeFromScope = _removeFromScope;
      exports.remove = remove;
      var _removalHooks = require_removal_hooks();
      var _cache = require_cache();
      var _index = require_path();
      var _t = require_lib3();
      var {
        getBindingIdentifiers
      } = _t;
      function remove() {
        var _this$opts;
        this._assertUnremoved();
        this.resync();
        if (!((_this$opts = this.opts) != null && _this$opts.noScope)) {
          this._removeFromScope();
        }
        if (this._callRemovalHooks()) {
          this._markRemoved();
          return;
        }
        this.shareCommentsWithSiblings();
        this._remove();
        this._markRemoved();
      }
      function _removeFromScope() {
        const bindings = getBindingIdentifiers(this.node, false, false, true);
        Object.keys(bindings).forEach((name) => this.scope.removeBinding(name));
      }
      function _callRemovalHooks() {
        if (this.parentPath) {
          for (const fn of _removalHooks.hooks) {
            if (fn(this, this.parentPath))
              return true;
          }
        }
      }
      function _remove() {
        if (Array.isArray(this.container)) {
          this.container.splice(this.key, 1);
          this.updateSiblingKeys(this.key, -1);
        } else {
          this._replaceWith(null);
        }
      }
      function _markRemoved() {
        this._traverseFlags |= _index.SHOULD_SKIP | _index.REMOVED;
        if (this.parent) {
          (0, _cache.getCachedPaths)(this.hub, this.parent).delete(this.node);
        }
        this.node = null;
      }
      function _assertUnremoved() {
        if (this.removed) {
          throw this.buildCodeFrameError("NodePath has been removed so is read-only.");
        }
      }
    }
  });

  // node_modules/@babel/traverse/lib/path/lib/hoister.js
  var require_hoister = __commonJS({
    "node_modules/@babel/traverse/lib/path/lib/hoister.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _t = require_lib3();
      var _t2 = _t;
      var {
        react
      } = _t;
      var {
        cloneNode,
        jsxExpressionContainer,
        variableDeclaration,
        variableDeclarator
      } = _t2;
      var referenceVisitor = {
        ReferencedIdentifier(path, state) {
          if (path.isJSXIdentifier() && react.isCompatTag(path.node.name) && !path.parentPath.isJSXMemberExpression()) {
            return;
          }
          if (path.node.name === "this") {
            let scope = path.scope;
            do {
              if (scope.path.isFunction() && !scope.path.isArrowFunctionExpression()) {
                break;
              }
            } while (scope = scope.parent);
            if (scope)
              state.breakOnScopePaths.push(scope.path);
          }
          const binding = path.scope.getBinding(path.node.name);
          if (!binding)
            return;
          for (const violation of binding.constantViolations) {
            if (violation.scope !== binding.path.scope) {
              state.mutableBinding = true;
              path.stop();
              return;
            }
          }
          if (binding !== state.scope.getBinding(path.node.name))
            return;
          state.bindings[path.node.name] = binding;
        }
      };
      var PathHoister = class {
        constructor(path, scope) {
          this.breakOnScopePaths = void 0;
          this.bindings = void 0;
          this.mutableBinding = void 0;
          this.scopes = void 0;
          this.scope = void 0;
          this.path = void 0;
          this.attachAfter = void 0;
          this.breakOnScopePaths = [];
          this.bindings = {};
          this.mutableBinding = false;
          this.scopes = [];
          this.scope = scope;
          this.path = path;
          this.attachAfter = false;
        }
        isCompatibleScope(scope) {
          for (const key of Object.keys(this.bindings)) {
            const binding = this.bindings[key];
            if (!scope.bindingIdentifierEquals(key, binding.identifier)) {
              return false;
            }
          }
          return true;
        }
        getCompatibleScopes() {
          let scope = this.path.scope;
          do {
            if (this.isCompatibleScope(scope)) {
              this.scopes.push(scope);
            } else {
              break;
            }
            if (this.breakOnScopePaths.indexOf(scope.path) >= 0) {
              break;
            }
          } while (scope = scope.parent);
        }
        getAttachmentPath() {
          let path = this._getAttachmentPath();
          if (!path)
            return;
          let targetScope = path.scope;
          if (targetScope.path === path) {
            targetScope = path.scope.parent;
          }
          if (targetScope.path.isProgram() || targetScope.path.isFunction()) {
            for (const name of Object.keys(this.bindings)) {
              if (!targetScope.hasOwnBinding(name))
                continue;
              const binding = this.bindings[name];
              if (binding.kind === "param" || binding.path.parentKey === "params") {
                continue;
              }
              const bindingParentPath = this.getAttachmentParentForPath(binding.path);
              if (bindingParentPath.key >= path.key) {
                this.attachAfter = true;
                path = binding.path;
                for (const violationPath of binding.constantViolations) {
                  if (this.getAttachmentParentForPath(violationPath).key > path.key) {
                    path = violationPath;
                  }
                }
              }
            }
          }
          return path;
        }
        _getAttachmentPath() {
          const scopes = this.scopes;
          const scope = scopes.pop();
          if (!scope)
            return;
          if (scope.path.isFunction()) {
            if (this.hasOwnParamBindings(scope)) {
              if (this.scope === scope)
                return;
              const bodies = scope.path.get("body").get("body");
              for (let i = 0; i < bodies.length; i++) {
                if (bodies[i].node._blockHoist)
                  continue;
                return bodies[i];
              }
            } else {
              return this.getNextScopeAttachmentParent();
            }
          } else if (scope.path.isProgram()) {
            return this.getNextScopeAttachmentParent();
          }
        }
        getNextScopeAttachmentParent() {
          const scope = this.scopes.pop();
          if (scope)
            return this.getAttachmentParentForPath(scope.path);
        }
        getAttachmentParentForPath(path) {
          do {
            if (!path.parentPath || Array.isArray(path.container) && path.isStatement()) {
              return path;
            }
          } while (path = path.parentPath);
        }
        hasOwnParamBindings(scope) {
          for (const name of Object.keys(this.bindings)) {
            if (!scope.hasOwnBinding(name))
              continue;
            const binding = this.bindings[name];
            if (binding.kind === "param" && binding.constant)
              return true;
          }
          return false;
        }
        run() {
          this.path.traverse(referenceVisitor, this);
          if (this.mutableBinding)
            return;
          this.getCompatibleScopes();
          const attachTo = this.getAttachmentPath();
          if (!attachTo)
            return;
          if (attachTo.getFunctionParent() === this.path.getFunctionParent())
            return;
          let uid = attachTo.scope.generateUidIdentifier("ref");
          const declarator = variableDeclarator(uid, this.path.node);
          const insertFn = this.attachAfter ? "insertAfter" : "insertBefore";
          const [attached] = attachTo[insertFn]([attachTo.isVariableDeclarator() ? declarator : variableDeclaration("var", [declarator])]);
          const parent = this.path.parentPath;
          if (parent.isJSXElement() && this.path.container === parent.node.children) {
            uid = jsxExpressionContainer(uid);
          }
          this.path.replaceWith(cloneNode(uid));
          return attachTo.isVariableDeclarator() ? attached.get("init") : attached.get("declarations.0.init");
        }
      };
      exports.default = PathHoister;
    }
  });

  // node_modules/@babel/traverse/lib/path/modification.js
  var require_modification = __commonJS({
    "node_modules/@babel/traverse/lib/path/modification.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports._containerInsert = _containerInsert;
      exports._containerInsertAfter = _containerInsertAfter;
      exports._containerInsertBefore = _containerInsertBefore;
      exports._verifyNodeList = _verifyNodeList;
      exports.hoist = hoist;
      exports.insertAfter = insertAfter;
      exports.insertBefore = insertBefore;
      exports.pushContainer = pushContainer;
      exports.unshiftContainer = unshiftContainer;
      exports.updateSiblingKeys = updateSiblingKeys;
      var _cache = require_cache();
      var _hoister = require_hoister();
      var _index = require_path();
      var _t = require_lib3();
      var {
        arrowFunctionExpression,
        assertExpression,
        assignmentExpression,
        blockStatement,
        callExpression,
        cloneNode,
        expressionStatement,
        isAssignmentExpression,
        isCallExpression,
        isExportNamedDeclaration,
        isExpression,
        isIdentifier,
        isSequenceExpression,
        isSuper,
        thisExpression
      } = _t;
      function insertBefore(nodes_) {
        this._assertUnremoved();
        const nodes = this._verifyNodeList(nodes_);
        const {
          parentPath,
          parent
        } = this;
        if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) {
          return parentPath.insertBefore(nodes);
        } else if (this.isNodeType("Expression") && !this.isJSXElement() || parentPath.isForStatement() && this.key === "init") {
          if (this.node)
            nodes.push(this.node);
          return this.replaceExpressionWithStatements(nodes);
        } else if (Array.isArray(this.container)) {
          return this._containerInsertBefore(nodes);
        } else if (this.isStatementOrBlock()) {
          const node = this.node;
          const shouldInsertCurrentNode = node && (!this.isExpressionStatement() || node.expression != null);
          this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : []));
          return this.unshiftContainer("body", nodes);
        } else {
          throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
        }
      }
      function _containerInsert(from, nodes) {
        this.updateSiblingKeys(from, nodes.length);
        const paths = [];
        this.container.splice(from, 0, ...nodes);
        for (let i = 0; i < nodes.length; i++) {
          var _this$context;
          const to = from + i;
          const path = this.getSibling(to);
          paths.push(path);
          if ((_this$context = this.context) != null && _this$context.queue) {
            path.pushContext(this.context);
          }
        }
        const contexts = this._getQueueContexts();
        for (const path of paths) {
          path.setScope();
          path.debug("Inserted.");
          for (const context of contexts) {
            context.maybeQueue(path, true);
          }
        }
        return paths;
      }
      function _containerInsertBefore(nodes) {
        return this._containerInsert(this.key, nodes);
      }
      function _containerInsertAfter(nodes) {
        return this._containerInsert(this.key + 1, nodes);
      }
      var last = (arr) => arr[arr.length - 1];
      function isHiddenInSequenceExpression(path) {
        return isSequenceExpression(path.parent) && (last(path.parent.expressions) !== path.node || isHiddenInSequenceExpression(path.parentPath));
      }
      function isAlmostConstantAssignment(node, scope) {
        if (!isAssignmentExpression(node) || !isIdentifier(node.left)) {
          return false;
        }
        const blockScope = scope.getBlockParent();
        return blockScope.hasOwnBinding(node.left.name) && blockScope.getOwnBinding(node.left.name).constantViolations.length <= 1;
      }
      function insertAfter(nodes_) {
        this._assertUnremoved();
        if (this.isSequenceExpression()) {
          return last(this.get("expressions")).insertAfter(nodes_);
        }
        const nodes = this._verifyNodeList(nodes_);
        const {
          parentPath,
          parent
        } = this;
        if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) {
          return parentPath.insertAfter(nodes.map((node) => {
            return isExpression(node) ? expressionStatement(node) : node;
          }));
        } else if (this.isNodeType("Expression") && !this.isJSXElement() && !parentPath.isJSXElement() || parentPath.isForStatement() && this.key === "init") {
          if (this.node) {
            const node = this.node;
            let {
              scope
            } = this;
            if (scope.path.isPattern()) {
              assertExpression(node);
              this.replaceWith(callExpression(arrowFunctionExpression([], node), []));
              this.get("callee.body").insertAfter(nodes);
              return [this];
            }
            if (isHiddenInSequenceExpression(this)) {
              nodes.unshift(node);
            } else if (isCallExpression(node) && isSuper(node.callee)) {
              nodes.unshift(node);
              nodes.push(thisExpression());
            } else if (isAlmostConstantAssignment(node, scope)) {
              nodes.unshift(node);
              nodes.push(cloneNode(node.left));
            } else if (scope.isPure(node, true)) {
              nodes.push(node);
            } else {
              if (parentPath.isMethod({
                computed: true,
                key: node
              })) {
                scope = scope.parent;
              }
              const temp = scope.generateDeclaredUidIdentifier();
              nodes.unshift(expressionStatement(assignmentExpression("=", cloneNode(temp), node)));
              nodes.push(expressionStatement(cloneNode(temp)));
            }
          }
          return this.replaceExpressionWithStatements(nodes);
        } else if (Array.isArray(this.container)) {
          return this._containerInsertAfter(nodes);
        } else if (this.isStatementOrBlock()) {
          const node = this.node;
          const shouldInsertCurrentNode = node && (!this.isExpressionStatement() || node.expression != null);
          this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : []));
          return this.pushContainer("body", nodes);
        } else {
          throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
        }
      }
      function updateSiblingKeys(fromIndex, incrementBy) {
        if (!this.parent)
          return;
        const paths = (0, _cache.getCachedPaths)(this.hub, this.parent) || [];
        for (const [, path] of paths) {
          if (typeof path.key === "number" && path.key >= fromIndex) {
            path.key += incrementBy;
          }
        }
      }
      function _verifyNodeList(nodes) {
        if (!nodes) {
          return [];
        }
        if (!Array.isArray(nodes)) {
          nodes = [nodes];
        }
        for (let i = 0; i < nodes.length; i++) {
          const node = nodes[i];
          let msg;
          if (!node) {
            msg = "has falsy node";
          } else if (typeof node !== "object") {
            msg = "contains a non-object node";
          } else if (!node.type) {
            msg = "without a type";
          } else if (node instanceof _index.default) {
            msg = "has a NodePath when it expected a raw object";
          }
          if (msg) {
            const type = Array.isArray(node) ? "array" : typeof node;
            throw new Error(`Node list ${msg} with the index of ${i} and type of ${type}`);
          }
        }
        return nodes;
      }
      function unshiftContainer(listKey, nodes) {
        this._assertUnremoved();
        nodes = this._verifyNodeList(nodes);
        const path = _index.default.get({
          parentPath: this,
          parent: this.node,
          container: this.node[listKey],
          listKey,
          key: 0
        }).setContext(this.context);
        return path._containerInsertBefore(nodes);
      }
      function pushContainer(listKey, nodes) {
        this._assertUnremoved();
        const verifiedNodes = this._verifyNodeList(nodes);
        const container = this.node[listKey];
        const path = _index.default.get({
          parentPath: this,
          parent: this.node,
          container,
          listKey,
          key: container.length
        }).setContext(this.context);
        return path.replaceWithMultiple(verifiedNodes);
      }
      function hoist(scope = this.scope) {
        const hoister = new _hoister.default(this, scope);
        return hoister.run();
      }
    }
  });

  // node_modules/@babel/traverse/lib/path/family.js
  var require_family = __commonJS({
    "node_modules/@babel/traverse/lib/path/family.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports._getKey = _getKey;
      exports._getPattern = _getPattern;
      exports.get = get;
      exports.getAllNextSiblings = getAllNextSiblings;
      exports.getAllPrevSiblings = getAllPrevSiblings;
      exports.getBindingIdentifierPaths = getBindingIdentifierPaths;
      exports.getBindingIdentifiers = getBindingIdentifiers;
      exports.getCompletionRecords = getCompletionRecords;
      exports.getNextSibling = getNextSibling;
      exports.getOpposite = getOpposite;
      exports.getOuterBindingIdentifierPaths = getOuterBindingIdentifierPaths;
      exports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;
      exports.getPrevSibling = getPrevSibling;
      exports.getSibling = getSibling;
      var _index = require_path();
      var _t = require_lib3();
      var {
        getBindingIdentifiers: _getBindingIdentifiers,
        getOuterBindingIdentifiers: _getOuterBindingIdentifiers,
        isDeclaration,
        numericLiteral,
        unaryExpression
      } = _t;
      var NORMAL_COMPLETION = 0;
      var BREAK_COMPLETION = 1;
      function NormalCompletion(path) {
        return {
          type: NORMAL_COMPLETION,
          path
        };
      }
      function BreakCompletion(path) {
        return {
          type: BREAK_COMPLETION,
          path
        };
      }
      function getOpposite() {
        if (this.key === "left") {
          return this.getSibling("right");
        } else if (this.key === "right") {
          return this.getSibling("left");
        }
        return null;
      }
      function addCompletionRecords(path, records, context) {
        if (path) {
          records.push(..._getCompletionRecords(path, context));
        }
        return records;
      }
      function completionRecordForSwitch(cases, records, context) {
        let lastNormalCompletions = [];
        for (let i = 0; i < cases.length; i++) {
          const casePath = cases[i];
          const caseCompletions = _getCompletionRecords(casePath, context);
          const normalCompletions = [];
          const breakCompletions = [];
          for (const c of caseCompletions) {
            if (c.type === NORMAL_COMPLETION) {
              normalCompletions.push(c);
            }
            if (c.type === BREAK_COMPLETION) {
              breakCompletions.push(c);
            }
          }
          if (normalCompletions.length) {
            lastNormalCompletions = normalCompletions;
          }
          records.push(...breakCompletions);
        }
        records.push(...lastNormalCompletions);
        return records;
      }
      function normalCompletionToBreak(completions) {
        completions.forEach((c) => {
          c.type = BREAK_COMPLETION;
        });
      }
      function replaceBreakStatementInBreakCompletion(completions, reachable) {
        completions.forEach((c) => {
          if (c.path.isBreakStatement({
            label: null
          })) {
            if (reachable) {
              c.path.replaceWith(unaryExpression("void", numericLiteral(0)));
            } else {
              c.path.remove();
            }
          }
        });
      }
      function getStatementListCompletion(paths, context) {
        const completions = [];
        if (context.canHaveBreak) {
          let lastNormalCompletions = [];
          for (let i = 0; i < paths.length; i++) {
            const path = paths[i];
            const newContext = Object.assign({}, context, {
              inCaseClause: false
            });
            if (path.isBlockStatement() && (context.inCaseClause || context.shouldPopulateBreak)) {
              newContext.shouldPopulateBreak = true;
            } else {
              newContext.shouldPopulateBreak = false;
            }
            const statementCompletions = _getCompletionRecords(path, newContext);
            if (statementCompletions.length > 0 && statementCompletions.every((c) => c.type === BREAK_COMPLETION)) {
              if (lastNormalCompletions.length > 0 && statementCompletions.every((c) => c.path.isBreakStatement({
                label: null
              }))) {
                normalCompletionToBreak(lastNormalCompletions);
                completions.push(...lastNormalCompletions);
                if (lastNormalCompletions.some((c) => c.path.isDeclaration())) {
                  completions.push(...statementCompletions);
                  replaceBreakStatementInBreakCompletion(statementCompletions, true);
                }
                replaceBreakStatementInBreakCompletion(statementCompletions, false);
              } else {
                completions.push(...statementCompletions);
                if (!context.shouldPopulateBreak) {
                  replaceBreakStatementInBreakCompletion(statementCompletions, true);
                }
              }
              break;
            }
            if (i === paths.length - 1) {
              completions.push(...statementCompletions);
            } else {
              lastNormalCompletions = [];
              for (let i2 = 0; i2 < statementCompletions.length; i2++) {
                const c = statementCompletions[i2];
                if (c.type === BREAK_COMPLETION) {
                  completions.push(c);
                }
                if (c.type === NORMAL_COMPLETION) {
                  lastNormalCompletions.push(c);
                }
              }
            }
          }
        } else if (paths.length) {
          for (let i = paths.length - 1; i >= 0; i--) {
            const pathCompletions = _getCompletionRecords(paths[i], context);
            if (pathCompletions.length > 1 || pathCompletions.length === 1 && !pathCompletions[0].path.isVariableDeclaration()) {
              completions.push(...pathCompletions);
              break;
            }
          }
        }
        return completions;
      }
      function _getCompletionRecords(path, context) {
        let records = [];
        if (path.isIfStatement()) {
          records = addCompletionRecords(path.get("consequent"), records, context);
          records = addCompletionRecords(path.get("alternate"), records, context);
        } else if (path.isDoExpression() || path.isFor() || path.isWhile() || path.isLabeledStatement()) {
          return addCompletionRecords(path.get("body"), records, context);
        } else if (path.isProgram() || path.isBlockStatement()) {
          return getStatementListCompletion(path.get("body"), context);
        } else if (path.isFunction()) {
          return _getCompletionRecords(path.get("body"), context);
        } else if (path.isTryStatement()) {
          records = addCompletionRecords(path.get("block"), records, context);
          records = addCompletionRecords(path.get("handler"), records, context);
        } else if (path.isCatchClause()) {
          return addCompletionRecords(path.get("body"), records, context);
        } else if (path.isSwitchStatement()) {
          return completionRecordForSwitch(path.get("cases"), records, context);
        } else if (path.isSwitchCase()) {
          return getStatementListCompletion(path.get("consequent"), {
            canHaveBreak: true,
            shouldPopulateBreak: false,
            inCaseClause: true
          });
        } else if (path.isBreakStatement()) {
          records.push(BreakCompletion(path));
        } else {
          records.push(NormalCompletion(path));
        }
        return records;
      }
      function getCompletionRecords() {
        const records = _getCompletionRecords(this, {
          canHaveBreak: false,
          shouldPopulateBreak: false,
          inCaseClause: false
        });
        return records.map((r) => r.path);
      }
      function getSibling(key) {
        return _index.default.get({
          parentPath: this.parentPath,
          parent: this.parent,
          container: this.container,
          listKey: this.listKey,
          key
        }).setContext(this.context);
      }
      function getPrevSibling() {
        return this.getSibling(this.key - 1);
      }
      function getNextSibling() {
        return this.getSibling(this.key + 1);
      }
      function getAllNextSiblings() {
        let _key = this.key;
        let sibling = this.getSibling(++_key);
        const siblings = [];
        while (sibling.node) {
          siblings.push(sibling);
          sibling = this.getSibling(++_key);
        }
        return siblings;
      }
      function getAllPrevSiblings() {
        let _key = this.key;
        let sibling = this.getSibling(--_key);
        const siblings = [];
        while (sibling.node) {
          siblings.push(sibling);
          sibling = this.getSibling(--_key);
        }
        return siblings;
      }
      function get(key, context = true) {
        if (context === true)
          context = this.context;
        const parts = key.split(".");
        if (parts.length === 1) {
          return this._getKey(key, context);
        } else {
          return this._getPattern(parts, context);
        }
      }
      function _getKey(key, context) {
        const node = this.node;
        const container = node[key];
        if (Array.isArray(container)) {
          return container.map((_, i) => {
            return _index.default.get({
              listKey: key,
              parentPath: this,
              parent: node,
              container,
              key: i
            }).setContext(context);
          });
        } else {
          return _index.default.get({
            parentPath: this,
            parent: node,
            container: node,
            key
          }).setContext(context);
        }
      }
      function _getPattern(parts, context) {
        let path = this;
        for (const part of parts) {
          if (part === ".") {
            path = path.parentPath;
          } else {
            if (Array.isArray(path)) {
              path = path[part];
            } else {
              path = path.get(part, context);
            }
          }
        }
        return path;
      }
      function getBindingIdentifiers(duplicates) {
        return _getBindingIdentifiers(this.node, duplicates);
      }
      function getOuterBindingIdentifiers(duplicates) {
        return _getOuterBindingIdentifiers(this.node, duplicates);
      }
      function getBindingIdentifierPaths(duplicates = false, outerOnly = false) {
        const path = this;
        const search = [path];
        const ids = /* @__PURE__ */ Object.create(null);
        while (search.length) {
          const id = search.shift();
          if (!id)
            continue;
          if (!id.node)
            continue;
          const keys = _getBindingIdentifiers.keys[id.node.type];
          if (id.isIdentifier()) {
            if (duplicates) {
              const _ids = ids[id.node.name] = ids[id.node.name] || [];
              _ids.push(id);
            } else {
              ids[id.node.name] = id;
            }
            continue;
          }
          if (id.isExportDeclaration()) {
            const declaration = id.get("declaration");
            if (isDeclaration(declaration)) {
              search.push(declaration);
            }
            continue;
          }
          if (outerOnly) {
            if (id.isFunctionDeclaration()) {
              search.push(id.get("id"));
              continue;
            }
            if (id.isFunctionExpression()) {
              continue;
            }
          }
          if (keys) {
            for (let i = 0; i < keys.length; i++) {
              const key = keys[i];
              const child = id.get(key);
              if (Array.isArray(child)) {
                search.push(...child);
              } else if (child.node) {
                search.push(child);
              }
            }
          }
        }
        return ids;
      }
      function getOuterBindingIdentifierPaths(duplicates = false) {
        return this.getBindingIdentifierPaths(duplicates, true);
      }
    }
  });

  // node_modules/@babel/traverse/lib/path/comments.js
  var require_comments = __commonJS({
    "node_modules/@babel/traverse/lib/path/comments.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.addComment = addComment;
      exports.addComments = addComments;
      exports.shareCommentsWithSiblings = shareCommentsWithSiblings;
      var _t = require_lib3();
      var {
        addComment: _addComment,
        addComments: _addComments
      } = _t;
      function shareCommentsWithSiblings() {
        if (typeof this.key === "string")
          return;
        const node = this.node;
        if (!node)
          return;
        const trailing = node.trailingComments;
        const leading = node.leadingComments;
        if (!trailing && !leading)
          return;
        const prev = this.getSibling(this.key - 1);
        const next = this.getSibling(this.key + 1);
        const hasPrev = Boolean(prev.node);
        const hasNext = Boolean(next.node);
        if (hasPrev) {
          if (leading) {
            prev.addComments("trailing", removeIfExisting(leading, prev.node.trailingComments));
          }
          if (trailing && !hasNext)
            prev.addComments("trailing", trailing);
        }
        if (hasNext) {
          if (trailing) {
            next.addComments("leading", removeIfExisting(trailing, next.node.leadingComments));
          }
          if (leading && !hasPrev)
            next.addComments("leading", leading);
        }
      }
      function removeIfExisting(list, toRemove) {
        if (!(toRemove != null && toRemove.length))
          return list;
        const set = new Set(toRemove);
        return list.filter((el) => {
          return !set.has(el);
        });
      }
      function addComment(type, content, line) {
        _addComment(this.node, type, content, line);
      }
      function addComments(type, comments) {
        _addComments(this.node, type, comments);
      }
    }
  });

  // node_modules/@babel/traverse/lib/path/index.js
  var require_path = __commonJS({
    "node_modules/@babel/traverse/lib/path/index.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.SHOULD_STOP = exports.SHOULD_SKIP = exports.REMOVED = void 0;
      var virtualTypes = require_virtual_types();
      var _debug = require_browser();
      var _index = require_lib13();
      var _index2 = require_scope();
      var _t = require_lib3();
      var t2 = _t;
      var cache = require_cache();
      var _generator = require_lib4();
      var NodePath_ancestry = require_ancestry();
      var NodePath_inference = require_inference();
      var NodePath_replacement = require_replacement();
      var NodePath_evaluation = require_evaluation();
      var NodePath_conversion = require_conversion();
      var NodePath_introspection = require_introspection();
      var NodePath_context = require_context();
      var NodePath_removal = require_removal();
      var NodePath_modification = require_modification();
      var NodePath_family = require_family();
      var NodePath_comments = require_comments();
      var NodePath_virtual_types_validator = require_virtual_types_validator();
      var {
        validate
      } = _t;
      var debug = _debug("babel");
      var REMOVED = exports.REMOVED = 1 << 0;
      var SHOULD_STOP = exports.SHOULD_STOP = 1 << 1;
      var SHOULD_SKIP = exports.SHOULD_SKIP = 1 << 2;
      var NodePath = class _NodePath {
        constructor(hub, parent) {
          this.contexts = [];
          this.state = null;
          this.opts = null;
          this._traverseFlags = 0;
          this.skipKeys = null;
          this.parentPath = null;
          this.container = null;
          this.listKey = null;
          this.key = null;
          this.node = null;
          this.type = null;
          this.parent = parent;
          this.hub = hub;
          this.data = null;
          this.context = null;
          this.scope = null;
        }
        static get({
          hub,
          parentPath,
          parent,
          container,
          listKey,
          key
        }) {
          if (!hub && parentPath) {
            hub = parentPath.hub;
          }
          if (!parent) {
            throw new Error("To get a node path the parent needs to exist");
          }
          const targetNode = container[key];
          const paths = cache.getOrCreateCachedPaths(hub, parent);
          let path = paths.get(targetNode);
          if (!path) {
            path = new _NodePath(hub, parent);
            if (targetNode)
              paths.set(targetNode, path);
          }
          path.setup(parentPath, container, listKey, key);
          return path;
        }
        getScope(scope) {
          return this.isScope() ? new _index2.default(this) : scope;
        }
        setData(key, val) {
          if (this.data == null) {
            this.data = /* @__PURE__ */ Object.create(null);
          }
          return this.data[key] = val;
        }
        getData(key, def) {
          if (this.data == null) {
            this.data = /* @__PURE__ */ Object.create(null);
          }
          let val = this.data[key];
          if (val === void 0 && def !== void 0)
            val = this.data[key] = def;
          return val;
        }
        hasNode() {
          return this.node != null;
        }
        buildCodeFrameError(msg, Error2 = SyntaxError) {
          return this.hub.buildError(this.node, msg, Error2);
        }
        traverse(visitor, state) {
          (0, _index.default)(this.node, visitor, this.scope, state, this);
        }
        set(key, node) {
          validate(this.node, key, node);
          this.node[key] = node;
        }
        getPathLocation() {
          const parts = [];
          let path = this;
          do {
            let key = path.key;
            if (path.inList)
              key = `${path.listKey}[${key}]`;
            parts.unshift(key);
          } while (path = path.parentPath);
          return parts.join(".");
        }
        debug(message) {
          if (!debug.enabled)
            return;
          debug(`${this.getPathLocation()} ${this.type}: ${message}`);
        }
        toString() {
          return (0, _generator.default)(this.node).code;
        }
        get inList() {
          return !!this.listKey;
        }
        set inList(inList) {
          if (!inList) {
            this.listKey = null;
          }
        }
        get parentKey() {
          return this.listKey || this.key;
        }
        get shouldSkip() {
          return !!(this._traverseFlags & SHOULD_SKIP);
        }
        set shouldSkip(v) {
          if (v) {
            this._traverseFlags |= SHOULD_SKIP;
          } else {
            this._traverseFlags &= ~SHOULD_SKIP;
          }
        }
        get shouldStop() {
          return !!(this._traverseFlags & SHOULD_STOP);
        }
        set shouldStop(v) {
          if (v) {
            this._traverseFlags |= SHOULD_STOP;
          } else {
            this._traverseFlags &= ~SHOULD_STOP;
          }
        }
        get removed() {
          return !!(this._traverseFlags & REMOVED);
        }
        set removed(v) {
          if (v) {
            this._traverseFlags |= REMOVED;
          } else {
            this._traverseFlags &= ~REMOVED;
          }
        }
      };
      Object.assign(NodePath.prototype, NodePath_ancestry, NodePath_inference, NodePath_replacement, NodePath_evaluation, NodePath_conversion, NodePath_introspection, NodePath_context, NodePath_removal, NodePath_modification, NodePath_family, NodePath_comments);
      {
        NodePath.prototype._guessExecutionStatusRelativeToDifferentFunctions = NodePath_introspection._guessExecutionStatusRelativeTo;
      }
      for (const type of t2.TYPES) {
        const typeKey = `is${type}`;
        const fn = t2[typeKey];
        NodePath.prototype[typeKey] = function(opts) {
          return fn(this.node, opts);
        };
        NodePath.prototype[`assert${type}`] = function(opts) {
          if (!fn(this.node, opts)) {
            throw new TypeError(`Expected node path of type ${type}`);
          }
        };
      }
      Object.assign(NodePath.prototype, NodePath_virtual_types_validator);
      for (const type of Object.keys(virtualTypes)) {
        if (type[0] === "_")
          continue;
        if (!t2.TYPES.includes(type))
          t2.TYPES.push(type);
      }
      var _default = exports.default = NodePath;
    }
  });

  // node_modules/@babel/traverse/lib/context.js
  var require_context2 = __commonJS({
    "node_modules/@babel/traverse/lib/context.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _index = require_path();
      var _t = require_lib3();
      var {
        VISITOR_KEYS
      } = _t;
      var TraversalContext = class {
        constructor(scope, opts, state, parentPath) {
          this.queue = null;
          this.priorityQueue = null;
          this.parentPath = parentPath;
          this.scope = scope;
          this.state = state;
          this.opts = opts;
        }
        shouldVisit(node) {
          const opts = this.opts;
          if (opts.enter || opts.exit)
            return true;
          if (opts[node.type])
            return true;
          const keys = VISITOR_KEYS[node.type];
          if (!(keys != null && keys.length))
            return false;
          for (const key of keys) {
            if (node[key]) {
              return true;
            }
          }
          return false;
        }
        create(node, container, key, listKey) {
          return _index.default.get({
            parentPath: this.parentPath,
            parent: node,
            container,
            key,
            listKey
          });
        }
        maybeQueue(path, notPriority) {
          if (this.queue) {
            if (notPriority) {
              this.queue.push(path);
            } else {
              this.priorityQueue.push(path);
            }
          }
        }
        visitMultiple(container, parent, listKey) {
          if (container.length === 0)
            return false;
          const queue = [];
          for (let key = 0; key < container.length; key++) {
            const node = container[key];
            if (node && this.shouldVisit(node)) {
              queue.push(this.create(parent, container, key, listKey));
            }
          }
          return this.visitQueue(queue);
        }
        visitSingle(node, key) {
          if (this.shouldVisit(node[key])) {
            return this.visitQueue([this.create(node, node, key)]);
          } else {
            return false;
          }
        }
        visitQueue(queue) {
          this.queue = queue;
          this.priorityQueue = [];
          const visited = /* @__PURE__ */ new WeakSet();
          let stop = false;
          for (const path of queue) {
            path.resync();
            if (path.contexts.length === 0 || path.contexts[path.contexts.length - 1] !== this) {
              path.pushContext(this);
            }
            if (path.key === null)
              continue;
            const {
              node
            } = path;
            if (visited.has(node))
              continue;
            if (node)
              visited.add(node);
            if (path.visit()) {
              stop = true;
              break;
            }
            if (this.priorityQueue.length) {
              stop = this.visitQueue(this.priorityQueue);
              this.priorityQueue = [];
              this.queue = queue;
              if (stop)
                break;
            }
          }
          for (const path of queue) {
            path.popContext();
          }
          this.queue = null;
          return stop;
        }
        visit(node, key) {
          const nodes = node[key];
          if (!nodes)
            return false;
          if (Array.isArray(nodes)) {
            return this.visitMultiple(nodes, node, key);
          } else {
            return this.visitSingle(node, key);
          }
        }
      };
      exports.default = TraversalContext;
    }
  });

  // node_modules/@babel/traverse/lib/traverse-node.js
  var require_traverse_node = __commonJS({
    "node_modules/@babel/traverse/lib/traverse-node.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.traverseNode = traverseNode;
      var _context = require_context2();
      var _t = require_lib3();
      var {
        VISITOR_KEYS
      } = _t;
      function traverseNode(node, opts, scope, state, path, skipKeys, visitSelf) {
        const keys = VISITOR_KEYS[node.type];
        if (!keys)
          return false;
        const context = new _context.default(scope, opts, state, path);
        if (visitSelf) {
          if (skipKeys != null && skipKeys[path.parentKey])
            return false;
          return context.visitQueue([path]);
        }
        for (const key of keys) {
          if (skipKeys != null && skipKeys[key])
            continue;
          if (context.visit(node, key)) {
            return true;
          }
        }
        return false;
      }
    }
  });

  // node_modules/@babel/traverse/lib/hub.js
  var require_hub = __commonJS({
    "node_modules/@babel/traverse/lib/hub.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var Hub = class {
        getCode() {
        }
        getScope() {
        }
        addHelper() {
          throw new Error("Helpers are not supported by the default hub.");
        }
        buildError(node, msg, Error2 = TypeError) {
          return new Error2(msg);
        }
      };
      exports.default = Hub;
    }
  });

  // node_modules/@babel/traverse/lib/index.js
  var require_lib13 = __commonJS({
    "node_modules/@babel/traverse/lib/index.js"(exports) {
      "use strict";
      init_esbuild_inject();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "Hub", {
        enumerable: true,
        get: function() {
          return _hub.default;
        }
      });
      Object.defineProperty(exports, "NodePath", {
        enumerable: true,
        get: function() {
          return _index.default;
        }
      });
      Object.defineProperty(exports, "Scope", {
        enumerable: true,
        get: function() {
          return _index2.default;
        }
      });
      exports.visitors = exports.default = void 0;
      var visitors = require_visitors();
      exports.visitors = visitors;
      var _t = require_lib3();
      var cache = require_cache();
      var _traverseNode = require_traverse_node();
      var _index = require_path();
      var _index2 = require_scope();
      var _hub = require_hub();
      var {
        VISITOR_KEYS,
        removeProperties,
        traverseFast
      } = _t;
      function traverse2(parent, opts = {}, scope, state, parentPath, visitSelf) {
        if (!parent)
          return;
        if (!opts.noScope && !scope) {
          if (parent.type !== "Program" && parent.type !== "File") {
            throw new Error(`You must pass a scope and parentPath unless traversing a Program/File. Instead of that you tried to traverse a ${parent.type} node without passing scope and parentPath.`);
          }
        }
        if (!parentPath && visitSelf) {
          throw new Error("visitSelf can only be used when providing a NodePath.");
        }
        if (!VISITOR_KEYS[parent.type]) {
          return;
        }
        visitors.explode(opts);
        (0, _traverseNode.traverseNode)(parent, opts, scope, state, parentPath, null, visitSelf);
      }
      var _default = exports.default = traverse2;
      traverse2.visitors = visitors;
      traverse2.verify = visitors.verify;
      traverse2.explode = visitors.explode;
      traverse2.cheap = function(node, enter) {
        traverseFast(node, enter);
        return;
      };
      traverse2.node = function(node, opts, scope, state, path, skipKeys) {
        (0, _traverseNode.traverseNode)(node, opts, scope, state, path, skipKeys);
      };
      traverse2.clearNode = function(node, opts) {
        removeProperties(node, opts);
      };
      traverse2.removeProperties = function(tree, opts) {
        traverseFast(tree, traverse2.clearNode, opts);
        return tree;
      };
      function hasDenylistedType(path, state) {
        if (path.node.type === state.type) {
          state.has = true;
          path.stop();
        }
      }
      traverse2.hasType = function(tree, type, denylistTypes) {
        if (denylistTypes != null && denylistTypes.includes(tree.type))
          return false;
        if (tree.type === type)
          return true;
        const state = {
          has: false,
          type
        };
        traverse2(tree, {
          noScope: true,
          denylist: denylistTypes,
          enter: hasDenylistedType
        }, null, state);
        return state.has;
      };
      traverse2.cache = cache;
    }
  });

  // node_modules/esprima/dist/esprima.js
  var require_esprima = __commonJS({
    "node_modules/esprima/dist/esprima.js"(exports, module) {
      init_esbuild_inject();
      (function webpackUniversalModuleDefinition(root2, factory) {
        if (typeof exports === "object" && typeof module === "object")
          module.exports = factory();
        else if (typeof define === "function" && define.amd)
          define([], factory);
        else if (typeof exports === "object")
          exports["esprima"] = factory();
        else
          root2["esprima"] = factory();
      })(exports, function() {
        return (
          /******/
          function(modules) {
            var installedModules = {};
            function __webpack_require__(moduleId) {
              if (installedModules[moduleId])
                return installedModules[moduleId].exports;
              var module2 = installedModules[moduleId] = {
                /******/
                exports: {},
                /******/
                id: moduleId,
                /******/
                loaded: false
                /******/
              };
              modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
              module2.loaded = true;
              return module2.exports;
            }
            __webpack_require__.m = modules;
            __webpack_require__.c = installedModules;
            __webpack_require__.p = "";
            return __webpack_require__(0);
          }([
            /* 0 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              Object.defineProperty(exports2, "__esModule", { value: true });
              var comment_handler_1 = __webpack_require__(1);
              var jsx_parser_1 = __webpack_require__(3);
              var parser_1 = __webpack_require__(8);
              var tokenizer_1 = __webpack_require__(15);
              function parse2(code, options, delegate) {
                var commentHandler = null;
                var proxyDelegate = function(node, metadata) {
                  if (delegate) {
                    delegate(node, metadata);
                  }
                  if (commentHandler) {
                    commentHandler.visit(node, metadata);
                  }
                };
                var parserDelegate = typeof delegate === "function" ? proxyDelegate : null;
                var collectComment = false;
                if (options) {
                  collectComment = typeof options.comment === "boolean" && options.comment;
                  var attachComment = typeof options.attachComment === "boolean" && options.attachComment;
                  if (collectComment || attachComment) {
                    commentHandler = new comment_handler_1.CommentHandler();
                    commentHandler.attach = attachComment;
                    options.comment = true;
                    parserDelegate = proxyDelegate;
                  }
                }
                var isModule = false;
                if (options && typeof options.sourceType === "string") {
                  isModule = options.sourceType === "module";
                }
                var parser2;
                if (options && typeof options.jsx === "boolean" && options.jsx) {
                  parser2 = new jsx_parser_1.JSXParser(code, options, parserDelegate);
                } else {
                  parser2 = new parser_1.Parser(code, options, parserDelegate);
                }
                var program = isModule ? parser2.parseModule() : parser2.parseScript();
                var ast = program;
                if (collectComment && commentHandler) {
                  ast.comments = commentHandler.comments;
                }
                if (parser2.config.tokens) {
                  ast.tokens = parser2.tokens;
                }
                if (parser2.config.tolerant) {
                  ast.errors = parser2.errorHandler.errors;
                }
                return ast;
              }
              exports2.parse = parse2;
              function parseModule(code, options, delegate) {
                var parsingOptions = options || {};
                parsingOptions.sourceType = "module";
                return parse2(code, parsingOptions, delegate);
              }
              exports2.parseModule = parseModule;
              function parseScript(code, options, delegate) {
                var parsingOptions = options || {};
                parsingOptions.sourceType = "script";
                return parse2(code, parsingOptions, delegate);
              }
              exports2.parseScript = parseScript;
              function tokenize2(code, options, delegate) {
                var tokenizer = new tokenizer_1.Tokenizer(code, options);
                var tokens;
                tokens = [];
                try {
                  while (true) {
                    var token = tokenizer.getNextToken();
                    if (!token) {
                      break;
                    }
                    if (delegate) {
                      token = delegate(token);
                    }
                    tokens.push(token);
                  }
                } catch (e) {
                  tokenizer.errorHandler.tolerate(e);
                }
                if (tokenizer.errorHandler.tolerant) {
                  tokens.errors = tokenizer.errors();
                }
                return tokens;
              }
              exports2.tokenize = tokenize2;
              var syntax_1 = __webpack_require__(2);
              exports2.Syntax = syntax_1.Syntax;
              exports2.version = "4.0.1";
            },
            /* 1 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              Object.defineProperty(exports2, "__esModule", { value: true });
              var syntax_1 = __webpack_require__(2);
              var CommentHandler = function() {
                function CommentHandler2() {
                  this.attach = false;
                  this.comments = [];
                  this.stack = [];
                  this.leading = [];
                  this.trailing = [];
                }
                CommentHandler2.prototype.insertInnerComments = function(node, metadata) {
                  if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {
                    var innerComments = [];
                    for (var i = this.leading.length - 1; i >= 0; --i) {
                      var entry = this.leading[i];
                      if (metadata.end.offset >= entry.start) {
                        innerComments.unshift(entry.comment);
                        this.leading.splice(i, 1);
                        this.trailing.splice(i, 1);
                      }
                    }
                    if (innerComments.length) {
                      node.innerComments = innerComments;
                    }
                  }
                };
                CommentHandler2.prototype.findTrailingComments = function(metadata) {
                  var trailingComments = [];
                  if (this.trailing.length > 0) {
                    for (var i = this.trailing.length - 1; i >= 0; --i) {
                      var entry_1 = this.trailing[i];
                      if (entry_1.start >= metadata.end.offset) {
                        trailingComments.unshift(entry_1.comment);
                      }
                    }
                    this.trailing.length = 0;
                    return trailingComments;
                  }
                  var entry = this.stack[this.stack.length - 1];
                  if (entry && entry.node.trailingComments) {
                    var firstComment = entry.node.trailingComments[0];
                    if (firstComment && firstComment.range[0] >= metadata.end.offset) {
                      trailingComments = entry.node.trailingComments;
                      delete entry.node.trailingComments;
                    }
                  }
                  return trailingComments;
                };
                CommentHandler2.prototype.findLeadingComments = function(metadata) {
                  var leadingComments = [];
                  var target;
                  while (this.stack.length > 0) {
                    var entry = this.stack[this.stack.length - 1];
                    if (entry && entry.start >= metadata.start.offset) {
                      target = entry.node;
                      this.stack.pop();
                    } else {
                      break;
                    }
                  }
                  if (target) {
                    var count = target.leadingComments ? target.leadingComments.length : 0;
                    for (var i = count - 1; i >= 0; --i) {
                      var comment = target.leadingComments[i];
                      if (comment.range[1] <= metadata.start.offset) {
                        leadingComments.unshift(comment);
                        target.leadingComments.splice(i, 1);
                      }
                    }
                    if (target.leadingComments && target.leadingComments.length === 0) {
                      delete target.leadingComments;
                    }
                    return leadingComments;
                  }
                  for (var i = this.leading.length - 1; i >= 0; --i) {
                    var entry = this.leading[i];
                    if (entry.start <= metadata.start.offset) {
                      leadingComments.unshift(entry.comment);
                      this.leading.splice(i, 1);
                    }
                  }
                  return leadingComments;
                };
                CommentHandler2.prototype.visitNode = function(node, metadata) {
                  if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {
                    return;
                  }
                  this.insertInnerComments(node, metadata);
                  var trailingComments = this.findTrailingComments(metadata);
                  var leadingComments = this.findLeadingComments(metadata);
                  if (leadingComments.length > 0) {
                    node.leadingComments = leadingComments;
                  }
                  if (trailingComments.length > 0) {
                    node.trailingComments = trailingComments;
                  }
                  this.stack.push({
                    node,
                    start: metadata.start.offset
                  });
                };
                CommentHandler2.prototype.visitComment = function(node, metadata) {
                  var type = node.type[0] === "L" ? "Line" : "Block";
                  var comment = {
                    type,
                    value: node.value
                  };
                  if (node.range) {
                    comment.range = node.range;
                  }
                  if (node.loc) {
                    comment.loc = node.loc;
                  }
                  this.comments.push(comment);
                  if (this.attach) {
                    var entry = {
                      comment: {
                        type,
                        value: node.value,
                        range: [metadata.start.offset, metadata.end.offset]
                      },
                      start: metadata.start.offset
                    };
                    if (node.loc) {
                      entry.comment.loc = node.loc;
                    }
                    node.type = type;
                    this.leading.push(entry);
                    this.trailing.push(entry);
                  }
                };
                CommentHandler2.prototype.visit = function(node, metadata) {
                  if (node.type === "LineComment") {
                    this.visitComment(node, metadata);
                  } else if (node.type === "BlockComment") {
                    this.visitComment(node, metadata);
                  } else if (this.attach) {
                    this.visitNode(node, metadata);
                  }
                };
                return CommentHandler2;
              }();
              exports2.CommentHandler = CommentHandler;
            },
            /* 2 */
            /***/
            function(module2, exports2) {
              "use strict";
              Object.defineProperty(exports2, "__esModule", { value: true });
              exports2.Syntax = {
                AssignmentExpression: "AssignmentExpression",
                AssignmentPattern: "AssignmentPattern",
                ArrayExpression: "ArrayExpression",
                ArrayPattern: "ArrayPattern",
                ArrowFunctionExpression: "ArrowFunctionExpression",
                AwaitExpression: "AwaitExpression",
                BlockStatement: "BlockStatement",
                BinaryExpression: "BinaryExpression",
                BreakStatement: "BreakStatement",
                CallExpression: "CallExpression",
                CatchClause: "CatchClause",
                ClassBody: "ClassBody",
                ClassDeclaration: "ClassDeclaration",
                ClassExpression: "ClassExpression",
                ConditionalExpression: "ConditionalExpression",
                ContinueStatement: "ContinueStatement",
                DoWhileStatement: "DoWhileStatement",
                DebuggerStatement: "DebuggerStatement",
                EmptyStatement: "EmptyStatement",
                ExportAllDeclaration: "ExportAllDeclaration",
                ExportDefaultDeclaration: "ExportDefaultDeclaration",
                ExportNamedDeclaration: "ExportNamedDeclaration",
                ExportSpecifier: "ExportSpecifier",
                ExpressionStatement: "ExpressionStatement",
                ForStatement: "ForStatement",
                ForOfStatement: "ForOfStatement",
                ForInStatement: "ForInStatement",
                FunctionDeclaration: "FunctionDeclaration",
                FunctionExpression: "FunctionExpression",
                Identifier: "Identifier",
                IfStatement: "IfStatement",
                ImportDeclaration: "ImportDeclaration",
                ImportDefaultSpecifier: "ImportDefaultSpecifier",
                ImportNamespaceSpecifier: "ImportNamespaceSpecifier",
                ImportSpecifier: "ImportSpecifier",
                Literal: "Literal",
                LabeledStatement: "LabeledStatement",
                LogicalExpression: "LogicalExpression",
                MemberExpression: "MemberExpression",
                MetaProperty: "MetaProperty",
                MethodDefinition: "MethodDefinition",
                NewExpression: "NewExpression",
                ObjectExpression: "ObjectExpression",
                ObjectPattern: "ObjectPattern",
                Program: "Program",
                Property: "Property",
                RestElement: "RestElement",
                ReturnStatement: "ReturnStatement",
                SequenceExpression: "SequenceExpression",
                SpreadElement: "SpreadElement",
                Super: "Super",
                SwitchCase: "SwitchCase",
                SwitchStatement: "SwitchStatement",
                TaggedTemplateExpression: "TaggedTemplateExpression",
                TemplateElement: "TemplateElement",
                TemplateLiteral: "TemplateLiteral",
                ThisExpression: "ThisExpression",
                ThrowStatement: "ThrowStatement",
                TryStatement: "TryStatement",
                UnaryExpression: "UnaryExpression",
                UpdateExpression: "UpdateExpression",
                VariableDeclaration: "VariableDeclaration",
                VariableDeclarator: "VariableDeclarator",
                WhileStatement: "WhileStatement",
                WithStatement: "WithStatement",
                YieldExpression: "YieldExpression"
              };
            },
            /* 3 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              var __extends = this && this.__extends || function() {
                var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b) {
                  d2.__proto__ = b;
                } || function(d2, b) {
                  for (var p in b)
                    if (b.hasOwnProperty(p))
                      d2[p] = b[p];
                };
                return function(d2, b) {
                  extendStatics(d2, b);
                  function __() {
                    this.constructor = d2;
                  }
                  d2.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
              }();
              Object.defineProperty(exports2, "__esModule", { value: true });
              var character_1 = __webpack_require__(4);
              var JSXNode = __webpack_require__(5);
              var jsx_syntax_1 = __webpack_require__(6);
              var Node = __webpack_require__(7);
              var parser_1 = __webpack_require__(8);
              var token_1 = __webpack_require__(13);
              var xhtml_entities_1 = __webpack_require__(14);
              token_1.TokenName[
                100
                /* Identifier */
              ] = "JSXIdentifier";
              token_1.TokenName[
                101
                /* Text */
              ] = "JSXText";
              function getQualifiedElementName(elementName) {
                var qualifiedName;
                switch (elementName.type) {
                  case jsx_syntax_1.JSXSyntax.JSXIdentifier:
                    var id = elementName;
                    qualifiedName = id.name;
                    break;
                  case jsx_syntax_1.JSXSyntax.JSXNamespacedName:
                    var ns = elementName;
                    qualifiedName = getQualifiedElementName(ns.namespace) + ":" + getQualifiedElementName(ns.name);
                    break;
                  case jsx_syntax_1.JSXSyntax.JSXMemberExpression:
                    var expr = elementName;
                    qualifiedName = getQualifiedElementName(expr.object) + "." + getQualifiedElementName(expr.property);
                    break;
                  default:
                    break;
                }
                return qualifiedName;
              }
              var JSXParser = function(_super) {
                __extends(JSXParser2, _super);
                function JSXParser2(code, options, delegate) {
                  return _super.call(this, code, options, delegate) || this;
                }
                JSXParser2.prototype.parsePrimaryExpression = function() {
                  return this.match("<") ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);
                };
                JSXParser2.prototype.startJSX = function() {
                  this.scanner.index = this.startMarker.index;
                  this.scanner.lineNumber = this.startMarker.line;
                  this.scanner.lineStart = this.startMarker.index - this.startMarker.column;
                };
                JSXParser2.prototype.finishJSX = function() {
                  this.nextToken();
                };
                JSXParser2.prototype.reenterJSX = function() {
                  this.startJSX();
                  this.expectJSX("}");
                  if (this.config.tokens) {
                    this.tokens.pop();
                  }
                };
                JSXParser2.prototype.createJSXNode = function() {
                  this.collectComments();
                  return {
                    index: this.scanner.index,
                    line: this.scanner.lineNumber,
                    column: this.scanner.index - this.scanner.lineStart
                  };
                };
                JSXParser2.prototype.createJSXChildNode = function() {
                  return {
                    index: this.scanner.index,
                    line: this.scanner.lineNumber,
                    column: this.scanner.index - this.scanner.lineStart
                  };
                };
                JSXParser2.prototype.scanXHTMLEntity = function(quote) {
                  var result = "&";
                  var valid = true;
                  var terminated = false;
                  var numeric = false;
                  var hex = false;
                  while (!this.scanner.eof() && valid && !terminated) {
                    var ch = this.scanner.source[this.scanner.index];
                    if (ch === quote) {
                      break;
                    }
                    terminated = ch === ";";
                    result += ch;
                    ++this.scanner.index;
                    if (!terminated) {
                      switch (result.length) {
                        case 2:
                          numeric = ch === "#";
                          break;
                        case 3:
                          if (numeric) {
                            hex = ch === "x";
                            valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));
                            numeric = numeric && !hex;
                          }
                          break;
                        default:
                          valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));
                          valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));
                          break;
                      }
                    }
                  }
                  if (valid && terminated && result.length > 2) {
                    var str = result.substr(1, result.length - 2);
                    if (numeric && str.length > 1) {
                      result = String.fromCharCode(parseInt(str.substr(1), 10));
                    } else if (hex && str.length > 2) {
                      result = String.fromCharCode(parseInt("0" + str.substr(1), 16));
                    } else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {
                      result = xhtml_entities_1.XHTMLEntities[str];
                    }
                  }
                  return result;
                };
                JSXParser2.prototype.lexJSX = function() {
                  var cp = this.scanner.source.charCodeAt(this.scanner.index);
                  if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {
                    var value = this.scanner.source[this.scanner.index++];
                    return {
                      type: 7,
                      value,
                      lineNumber: this.scanner.lineNumber,
                      lineStart: this.scanner.lineStart,
                      start: this.scanner.index - 1,
                      end: this.scanner.index
                    };
                  }
                  if (cp === 34 || cp === 39) {
                    var start = this.scanner.index;
                    var quote = this.scanner.source[this.scanner.index++];
                    var str = "";
                    while (!this.scanner.eof()) {
                      var ch = this.scanner.source[this.scanner.index++];
                      if (ch === quote) {
                        break;
                      } else if (ch === "&") {
                        str += this.scanXHTMLEntity(quote);
                      } else {
                        str += ch;
                      }
                    }
                    return {
                      type: 8,
                      value: str,
                      lineNumber: this.scanner.lineNumber,
                      lineStart: this.scanner.lineStart,
                      start,
                      end: this.scanner.index
                    };
                  }
                  if (cp === 46) {
                    var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);
                    var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);
                    var value = n1 === 46 && n2 === 46 ? "..." : ".";
                    var start = this.scanner.index;
                    this.scanner.index += value.length;
                    return {
                      type: 7,
                      value,
                      lineNumber: this.scanner.lineNumber,
                      lineStart: this.scanner.lineStart,
                      start,
                      end: this.scanner.index
                    };
                  }
                  if (cp === 96) {
                    return {
                      type: 10,
                      value: "",
                      lineNumber: this.scanner.lineNumber,
                      lineStart: this.scanner.lineStart,
                      start: this.scanner.index,
                      end: this.scanner.index
                    };
                  }
                  if (character_1.Character.isIdentifierStart(cp) && cp !== 92) {
                    var start = this.scanner.index;
                    ++this.scanner.index;
                    while (!this.scanner.eof()) {
                      var ch = this.scanner.source.charCodeAt(this.scanner.index);
                      if (character_1.Character.isIdentifierPart(ch) && ch !== 92) {
                        ++this.scanner.index;
                      } else if (ch === 45) {
                        ++this.scanner.index;
                      } else {
                        break;
                      }
                    }
                    var id = this.scanner.source.slice(start, this.scanner.index);
                    return {
                      type: 100,
                      value: id,
                      lineNumber: this.scanner.lineNumber,
                      lineStart: this.scanner.lineStart,
                      start,
                      end: this.scanner.index
                    };
                  }
                  return this.scanner.lex();
                };
                JSXParser2.prototype.nextJSXToken = function() {
                  this.collectComments();
                  this.startMarker.index = this.scanner.index;
                  this.startMarker.line = this.scanner.lineNumber;
                  this.startMarker.column = this.scanner.index - this.scanner.lineStart;
                  var token = this.lexJSX();
                  this.lastMarker.index = this.scanner.index;
                  this.lastMarker.line = this.scanner.lineNumber;
                  this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
                  if (this.config.tokens) {
                    this.tokens.push(this.convertToken(token));
                  }
                  return token;
                };
                JSXParser2.prototype.nextJSXText = function() {
                  this.startMarker.index = this.scanner.index;
                  this.startMarker.line = this.scanner.lineNumber;
                  this.startMarker.column = this.scanner.index - this.scanner.lineStart;
                  var start = this.scanner.index;
                  var text = "";
                  while (!this.scanner.eof()) {
                    var ch = this.scanner.source[this.scanner.index];
                    if (ch === "{" || ch === "<") {
                      break;
                    }
                    ++this.scanner.index;
                    text += ch;
                    if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
                      ++this.scanner.lineNumber;
                      if (ch === "\r" && this.scanner.source[this.scanner.index] === "\n") {
                        ++this.scanner.index;
                      }
                      this.scanner.lineStart = this.scanner.index;
                    }
                  }
                  this.lastMarker.index = this.scanner.index;
                  this.lastMarker.line = this.scanner.lineNumber;
                  this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
                  var token = {
                    type: 101,
                    value: text,
                    lineNumber: this.scanner.lineNumber,
                    lineStart: this.scanner.lineStart,
                    start,
                    end: this.scanner.index
                  };
                  if (text.length > 0 && this.config.tokens) {
                    this.tokens.push(this.convertToken(token));
                  }
                  return token;
                };
                JSXParser2.prototype.peekJSXToken = function() {
                  var state = this.scanner.saveState();
                  this.scanner.scanComments();
                  var next = this.lexJSX();
                  this.scanner.restoreState(state);
                  return next;
                };
                JSXParser2.prototype.expectJSX = function(value) {
                  var token = this.nextJSXToken();
                  if (token.type !== 7 || token.value !== value) {
                    this.throwUnexpectedToken(token);
                  }
                };
                JSXParser2.prototype.matchJSX = function(value) {
                  var next = this.peekJSXToken();
                  return next.type === 7 && next.value === value;
                };
                JSXParser2.prototype.parseJSXIdentifier = function() {
                  var node = this.createJSXNode();
                  var token = this.nextJSXToken();
                  if (token.type !== 100) {
                    this.throwUnexpectedToken(token);
                  }
                  return this.finalize(node, new JSXNode.JSXIdentifier(token.value));
                };
                JSXParser2.prototype.parseJSXElementName = function() {
                  var node = this.createJSXNode();
                  var elementName = this.parseJSXIdentifier();
                  if (this.matchJSX(":")) {
                    var namespace = elementName;
                    this.expectJSX(":");
                    var name_1 = this.parseJSXIdentifier();
                    elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));
                  } else if (this.matchJSX(".")) {
                    while (this.matchJSX(".")) {
                      var object = elementName;
                      this.expectJSX(".");
                      var property = this.parseJSXIdentifier();
                      elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));
                    }
                  }
                  return elementName;
                };
                JSXParser2.prototype.parseJSXAttributeName = function() {
                  var node = this.createJSXNode();
                  var attributeName;
                  var identifier = this.parseJSXIdentifier();
                  if (this.matchJSX(":")) {
                    var namespace = identifier;
                    this.expectJSX(":");
                    var name_2 = this.parseJSXIdentifier();
                    attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));
                  } else {
                    attributeName = identifier;
                  }
                  return attributeName;
                };
                JSXParser2.prototype.parseJSXStringLiteralAttribute = function() {
                  var node = this.createJSXNode();
                  var token = this.nextJSXToken();
                  if (token.type !== 8) {
                    this.throwUnexpectedToken(token);
                  }
                  var raw = this.getTokenRaw(token);
                  return this.finalize(node, new Node.Literal(token.value, raw));
                };
                JSXParser2.prototype.parseJSXExpressionAttribute = function() {
                  var node = this.createJSXNode();
                  this.expectJSX("{");
                  this.finishJSX();
                  if (this.match("}")) {
                    this.tolerateError("JSX attributes must only be assigned a non-empty expression");
                  }
                  var expression = this.parseAssignmentExpression();
                  this.reenterJSX();
                  return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
                };
                JSXParser2.prototype.parseJSXAttributeValue = function() {
                  return this.matchJSX("{") ? this.parseJSXExpressionAttribute() : this.matchJSX("<") ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();
                };
                JSXParser2.prototype.parseJSXNameValueAttribute = function() {
                  var node = this.createJSXNode();
                  var name = this.parseJSXAttributeName();
                  var value = null;
                  if (this.matchJSX("=")) {
                    this.expectJSX("=");
                    value = this.parseJSXAttributeValue();
                  }
                  return this.finalize(node, new JSXNode.JSXAttribute(name, value));
                };
                JSXParser2.prototype.parseJSXSpreadAttribute = function() {
                  var node = this.createJSXNode();
                  this.expectJSX("{");
                  this.expectJSX("...");
                  this.finishJSX();
                  var argument = this.parseAssignmentExpression();
                  this.reenterJSX();
                  return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));
                };
                JSXParser2.prototype.parseJSXAttributes = function() {
                  var attributes = [];
                  while (!this.matchJSX("/") && !this.matchJSX(">")) {
                    var attribute = this.matchJSX("{") ? this.parseJSXSpreadAttribute() : this.parseJSXNameValueAttribute();
                    attributes.push(attribute);
                  }
                  return attributes;
                };
                JSXParser2.prototype.parseJSXOpeningElement = function() {
                  var node = this.createJSXNode();
                  this.expectJSX("<");
                  var name = this.parseJSXElementName();
                  var attributes = this.parseJSXAttributes();
                  var selfClosing = this.matchJSX("/");
                  if (selfClosing) {
                    this.expectJSX("/");
                  }
                  this.expectJSX(">");
                  return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
                };
                JSXParser2.prototype.parseJSXBoundaryElement = function() {
                  var node = this.createJSXNode();
                  this.expectJSX("<");
                  if (this.matchJSX("/")) {
                    this.expectJSX("/");
                    var name_3 = this.parseJSXElementName();
                    this.expectJSX(">");
                    return this.finalize(node, new JSXNode.JSXClosingElement(name_3));
                  }
                  var name = this.parseJSXElementName();
                  var attributes = this.parseJSXAttributes();
                  var selfClosing = this.matchJSX("/");
                  if (selfClosing) {
                    this.expectJSX("/");
                  }
                  this.expectJSX(">");
                  return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
                };
                JSXParser2.prototype.parseJSXEmptyExpression = function() {
                  var node = this.createJSXChildNode();
                  this.collectComments();
                  this.lastMarker.index = this.scanner.index;
                  this.lastMarker.line = this.scanner.lineNumber;
                  this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
                  return this.finalize(node, new JSXNode.JSXEmptyExpression());
                };
                JSXParser2.prototype.parseJSXExpressionContainer = function() {
                  var node = this.createJSXNode();
                  this.expectJSX("{");
                  var expression;
                  if (this.matchJSX("}")) {
                    expression = this.parseJSXEmptyExpression();
                    this.expectJSX("}");
                  } else {
                    this.finishJSX();
                    expression = this.parseAssignmentExpression();
                    this.reenterJSX();
                  }
                  return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
                };
                JSXParser2.prototype.parseJSXChildren = function() {
                  var children = [];
                  while (!this.scanner.eof()) {
                    var node = this.createJSXChildNode();
                    var token = this.nextJSXText();
                    if (token.start < token.end) {
                      var raw = this.getTokenRaw(token);
                      var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));
                      children.push(child);
                    }
                    if (this.scanner.source[this.scanner.index] === "{") {
                      var container = this.parseJSXExpressionContainer();
                      children.push(container);
                    } else {
                      break;
                    }
                  }
                  return children;
                };
                JSXParser2.prototype.parseComplexJSXElement = function(el) {
                  var stack = [];
                  while (!this.scanner.eof()) {
                    el.children = el.children.concat(this.parseJSXChildren());
                    var node = this.createJSXChildNode();
                    var element = this.parseJSXBoundaryElement();
                    if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {
                      var opening = element;
                      if (opening.selfClosing) {
                        var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));
                        el.children.push(child);
                      } else {
                        stack.push(el);
                        el = { node, opening, closing: null, children: [] };
                      }
                    }
                    if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {
                      el.closing = element;
                      var open_1 = getQualifiedElementName(el.opening.name);
                      var close_1 = getQualifiedElementName(el.closing.name);
                      if (open_1 !== close_1) {
                        this.tolerateError("Expected corresponding JSX closing tag for %0", open_1);
                      }
                      if (stack.length > 0) {
                        var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));
                        el = stack[stack.length - 1];
                        el.children.push(child);
                        stack.pop();
                      } else {
                        break;
                      }
                    }
                  }
                  return el;
                };
                JSXParser2.prototype.parseJSXElement = function() {
                  var node = this.createJSXNode();
                  var opening = this.parseJSXOpeningElement();
                  var children = [];
                  var closing = null;
                  if (!opening.selfClosing) {
                    var el = this.parseComplexJSXElement({ node, opening, closing, children });
                    children = el.children;
                    closing = el.closing;
                  }
                  return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));
                };
                JSXParser2.prototype.parseJSXRoot = function() {
                  if (this.config.tokens) {
                    this.tokens.pop();
                  }
                  this.startJSX();
                  var element = this.parseJSXElement();
                  this.finishJSX();
                  return element;
                };
                JSXParser2.prototype.isStartOfExpression = function() {
                  return _super.prototype.isStartOfExpression.call(this) || this.match("<");
                };
                return JSXParser2;
              }(parser_1.Parser);
              exports2.JSXParser = JSXParser;
            },
            /* 4 */
            /***/
            function(module2, exports2) {
              "use strict";
              Object.defineProperty(exports2, "__esModule", { value: true });
              var Regex = {
                // Unicode v8.0.0 NonAsciiIdentifierStart:
                NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
                // Unicode v8.0.0 NonAsciiIdentifierPart:
                NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
              };
              exports2.Character = {
                /* tslint:disable:no-bitwise */
                fromCodePoint: function(cp) {
                  return cp < 65536 ? String.fromCharCode(cp) : String.fromCharCode(55296 + (cp - 65536 >> 10)) + String.fromCharCode(56320 + (cp - 65536 & 1023));
                },
                // https://tc39.github.io/ecma262/#sec-white-space
                isWhiteSpace: function(cp) {
                  return cp === 32 || cp === 9 || cp === 11 || cp === 12 || cp === 160 || cp >= 5760 && [5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288, 65279].indexOf(cp) >= 0;
                },
                // https://tc39.github.io/ecma262/#sec-line-terminators
                isLineTerminator: function(cp) {
                  return cp === 10 || cp === 13 || cp === 8232 || cp === 8233;
                },
                // https://tc39.github.io/ecma262/#sec-names-and-keywords
                isIdentifierStart: function(cp) {
                  return cp === 36 || cp === 95 || cp >= 65 && cp <= 90 || cp >= 97 && cp <= 122 || cp === 92 || cp >= 128 && Regex.NonAsciiIdentifierStart.test(exports2.Character.fromCodePoint(cp));
                },
                isIdentifierPart: function(cp) {
                  return cp === 36 || cp === 95 || cp >= 65 && cp <= 90 || cp >= 97 && cp <= 122 || cp >= 48 && cp <= 57 || cp === 92 || cp >= 128 && Regex.NonAsciiIdentifierPart.test(exports2.Character.fromCodePoint(cp));
                },
                // https://tc39.github.io/ecma262/#sec-literals-numeric-literals
                isDecimalDigit: function(cp) {
                  return cp >= 48 && cp <= 57;
                },
                isHexDigit: function(cp) {
                  return cp >= 48 && cp <= 57 || cp >= 65 && cp <= 70 || cp >= 97 && cp <= 102;
                },
                isOctalDigit: function(cp) {
                  return cp >= 48 && cp <= 55;
                }
              };
            },
            /* 5 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              Object.defineProperty(exports2, "__esModule", { value: true });
              var jsx_syntax_1 = __webpack_require__(6);
              var JSXClosingElement = /* @__PURE__ */ function() {
                function JSXClosingElement2(name) {
                  this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;
                  this.name = name;
                }
                return JSXClosingElement2;
              }();
              exports2.JSXClosingElement = JSXClosingElement;
              var JSXElement = /* @__PURE__ */ function() {
                function JSXElement2(openingElement, children, closingElement) {
                  this.type = jsx_syntax_1.JSXSyntax.JSXElement;
                  this.openingElement = openingElement;
                  this.children = children;
                  this.closingElement = closingElement;
                }
                return JSXElement2;
              }();
              exports2.JSXElement = JSXElement;
              var JSXEmptyExpression = /* @__PURE__ */ function() {
                function JSXEmptyExpression2() {
                  this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;
                }
                return JSXEmptyExpression2;
              }();
              exports2.JSXEmptyExpression = JSXEmptyExpression;
              var JSXExpressionContainer = /* @__PURE__ */ function() {
                function JSXExpressionContainer2(expression) {
                  this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;
                  this.expression = expression;
                }
                return JSXExpressionContainer2;
              }();
              exports2.JSXExpressionContainer = JSXExpressionContainer;
              var JSXIdentifier = /* @__PURE__ */ function() {
                function JSXIdentifier2(name) {
                  this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;
                  this.name = name;
                }
                return JSXIdentifier2;
              }();
              exports2.JSXIdentifier = JSXIdentifier;
              var JSXMemberExpression = /* @__PURE__ */ function() {
                function JSXMemberExpression2(object, property) {
                  this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;
                  this.object = object;
                  this.property = property;
                }
                return JSXMemberExpression2;
              }();
              exports2.JSXMemberExpression = JSXMemberExpression;
              var JSXAttribute = /* @__PURE__ */ function() {
                function JSXAttribute2(name, value) {
                  this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;
                  this.name = name;
                  this.value = value;
                }
                return JSXAttribute2;
              }();
              exports2.JSXAttribute = JSXAttribute;
              var JSXNamespacedName = /* @__PURE__ */ function() {
                function JSXNamespacedName2(namespace, name) {
                  this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;
                  this.namespace = namespace;
                  this.name = name;
                }
                return JSXNamespacedName2;
              }();
              exports2.JSXNamespacedName = JSXNamespacedName;
              var JSXOpeningElement = /* @__PURE__ */ function() {
                function JSXOpeningElement2(name, selfClosing, attributes) {
                  this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;
                  this.name = name;
                  this.selfClosing = selfClosing;
                  this.attributes = attributes;
                }
                return JSXOpeningElement2;
              }();
              exports2.JSXOpeningElement = JSXOpeningElement;
              var JSXSpreadAttribute = /* @__PURE__ */ function() {
                function JSXSpreadAttribute2(argument) {
                  this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;
                  this.argument = argument;
                }
                return JSXSpreadAttribute2;
              }();
              exports2.JSXSpreadAttribute = JSXSpreadAttribute;
              var JSXText = /* @__PURE__ */ function() {
                function JSXText2(value, raw) {
                  this.type = jsx_syntax_1.JSXSyntax.JSXText;
                  this.value = value;
                  this.raw = raw;
                }
                return JSXText2;
              }();
              exports2.JSXText = JSXText;
            },
            /* 6 */
            /***/
            function(module2, exports2) {
              "use strict";
              Object.defineProperty(exports2, "__esModule", { value: true });
              exports2.JSXSyntax = {
                JSXAttribute: "JSXAttribute",
                JSXClosingElement: "JSXClosingElement",
                JSXElement: "JSXElement",
                JSXEmptyExpression: "JSXEmptyExpression",
                JSXExpressionContainer: "JSXExpressionContainer",
                JSXIdentifier: "JSXIdentifier",
                JSXMemberExpression: "JSXMemberExpression",
                JSXNamespacedName: "JSXNamespacedName",
                JSXOpeningElement: "JSXOpeningElement",
                JSXSpreadAttribute: "JSXSpreadAttribute",
                JSXText: "JSXText"
              };
            },
            /* 7 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              Object.defineProperty(exports2, "__esModule", { value: true });
              var syntax_1 = __webpack_require__(2);
              var ArrayExpression = /* @__PURE__ */ function() {
                function ArrayExpression2(elements) {
                  this.type = syntax_1.Syntax.ArrayExpression;
                  this.elements = elements;
                }
                return ArrayExpression2;
              }();
              exports2.ArrayExpression = ArrayExpression;
              var ArrayPattern = /* @__PURE__ */ function() {
                function ArrayPattern2(elements) {
                  this.type = syntax_1.Syntax.ArrayPattern;
                  this.elements = elements;
                }
                return ArrayPattern2;
              }();
              exports2.ArrayPattern = ArrayPattern;
              var ArrowFunctionExpression = /* @__PURE__ */ function() {
                function ArrowFunctionExpression2(params, body, expression) {
                  this.type = syntax_1.Syntax.ArrowFunctionExpression;
                  this.id = null;
                  this.params = params;
                  this.body = body;
                  this.generator = false;
                  this.expression = expression;
                  this.async = false;
                }
                return ArrowFunctionExpression2;
              }();
              exports2.ArrowFunctionExpression = ArrowFunctionExpression;
              var AssignmentExpression = /* @__PURE__ */ function() {
                function AssignmentExpression2(operator, left, right) {
                  this.type = syntax_1.Syntax.AssignmentExpression;
                  this.operator = operator;
                  this.left = left;
                  this.right = right;
                }
                return AssignmentExpression2;
              }();
              exports2.AssignmentExpression = AssignmentExpression;
              var AssignmentPattern = /* @__PURE__ */ function() {
                function AssignmentPattern2(left, right) {
                  this.type = syntax_1.Syntax.AssignmentPattern;
                  this.left = left;
                  this.right = right;
                }
                return AssignmentPattern2;
              }();
              exports2.AssignmentPattern = AssignmentPattern;
              var AsyncArrowFunctionExpression = /* @__PURE__ */ function() {
                function AsyncArrowFunctionExpression2(params, body, expression) {
                  this.type = syntax_1.Syntax.ArrowFunctionExpression;
                  this.id = null;
                  this.params = params;
                  this.body = body;
                  this.generator = false;
                  this.expression = expression;
                  this.async = true;
                }
                return AsyncArrowFunctionExpression2;
              }();
              exports2.AsyncArrowFunctionExpression = AsyncArrowFunctionExpression;
              var AsyncFunctionDeclaration = /* @__PURE__ */ function() {
                function AsyncFunctionDeclaration2(id, params, body) {
                  this.type = syntax_1.Syntax.FunctionDeclaration;
                  this.id = id;
                  this.params = params;
                  this.body = body;
                  this.generator = false;
                  this.expression = false;
                  this.async = true;
                }
                return AsyncFunctionDeclaration2;
              }();
              exports2.AsyncFunctionDeclaration = AsyncFunctionDeclaration;
              var AsyncFunctionExpression = /* @__PURE__ */ function() {
                function AsyncFunctionExpression2(id, params, body) {
                  this.type = syntax_1.Syntax.FunctionExpression;
                  this.id = id;
                  this.params = params;
                  this.body = body;
                  this.generator = false;
                  this.expression = false;
                  this.async = true;
                }
                return AsyncFunctionExpression2;
              }();
              exports2.AsyncFunctionExpression = AsyncFunctionExpression;
              var AwaitExpression = /* @__PURE__ */ function() {
                function AwaitExpression2(argument) {
                  this.type = syntax_1.Syntax.AwaitExpression;
                  this.argument = argument;
                }
                return AwaitExpression2;
              }();
              exports2.AwaitExpression = AwaitExpression;
              var BinaryExpression = /* @__PURE__ */ function() {
                function BinaryExpression2(operator, left, right) {
                  var logical = operator === "||" || operator === "&&";
                  this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;
                  this.operator = operator;
                  this.left = left;
                  this.right = right;
                }
                return BinaryExpression2;
              }();
              exports2.BinaryExpression = BinaryExpression;
              var BlockStatement = /* @__PURE__ */ function() {
                function BlockStatement2(body) {
                  this.type = syntax_1.Syntax.BlockStatement;
                  this.body = body;
                }
                return BlockStatement2;
              }();
              exports2.BlockStatement = BlockStatement;
              var BreakStatement = /* @__PURE__ */ function() {
                function BreakStatement2(label) {
                  this.type = syntax_1.Syntax.BreakStatement;
                  this.label = label;
                }
                return BreakStatement2;
              }();
              exports2.BreakStatement = BreakStatement;
              var CallExpression = /* @__PURE__ */ function() {
                function CallExpression2(callee, args) {
                  this.type = syntax_1.Syntax.CallExpression;
                  this.callee = callee;
                  this.arguments = args;
                }
                return CallExpression2;
              }();
              exports2.CallExpression = CallExpression;
              var CatchClause = /* @__PURE__ */ function() {
                function CatchClause2(param, body) {
                  this.type = syntax_1.Syntax.CatchClause;
                  this.param = param;
                  this.body = body;
                }
                return CatchClause2;
              }();
              exports2.CatchClause = CatchClause;
              var ClassBody = /* @__PURE__ */ function() {
                function ClassBody2(body) {
                  this.type = syntax_1.Syntax.ClassBody;
                  this.body = body;
                }
                return ClassBody2;
              }();
              exports2.ClassBody = ClassBody;
              var ClassDeclaration = /* @__PURE__ */ function() {
                function ClassDeclaration2(id, superClass, body) {
                  this.type = syntax_1.Syntax.ClassDeclaration;
                  this.id = id;
                  this.superClass = superClass;
                  this.body = body;
                }
                return ClassDeclaration2;
              }();
              exports2.ClassDeclaration = ClassDeclaration;
              var ClassExpression = /* @__PURE__ */ function() {
                function ClassExpression2(id, superClass, body) {
                  this.type = syntax_1.Syntax.ClassExpression;
                  this.id = id;
                  this.superClass = superClass;
                  this.body = body;
                }
                return ClassExpression2;
              }();
              exports2.ClassExpression = ClassExpression;
              var ComputedMemberExpression = /* @__PURE__ */ function() {
                function ComputedMemberExpression2(object, property) {
                  this.type = syntax_1.Syntax.MemberExpression;
                  this.computed = true;
                  this.object = object;
                  this.property = property;
                }
                return ComputedMemberExpression2;
              }();
              exports2.ComputedMemberExpression = ComputedMemberExpression;
              var ConditionalExpression = /* @__PURE__ */ function() {
                function ConditionalExpression2(test, consequent, alternate) {
                  this.type = syntax_1.Syntax.ConditionalExpression;
                  this.test = test;
                  this.consequent = consequent;
                  this.alternate = alternate;
                }
                return ConditionalExpression2;
              }();
              exports2.ConditionalExpression = ConditionalExpression;
              var ContinueStatement = /* @__PURE__ */ function() {
                function ContinueStatement2(label) {
                  this.type = syntax_1.Syntax.ContinueStatement;
                  this.label = label;
                }
                return ContinueStatement2;
              }();
              exports2.ContinueStatement = ContinueStatement;
              var DebuggerStatement = /* @__PURE__ */ function() {
                function DebuggerStatement2() {
                  this.type = syntax_1.Syntax.DebuggerStatement;
                }
                return DebuggerStatement2;
              }();
              exports2.DebuggerStatement = DebuggerStatement;
              var Directive = /* @__PURE__ */ function() {
                function Directive2(expression, directive) {
                  this.type = syntax_1.Syntax.ExpressionStatement;
                  this.expression = expression;
                  this.directive = directive;
                }
                return Directive2;
              }();
              exports2.Directive = Directive;
              var DoWhileStatement = /* @__PURE__ */ function() {
                function DoWhileStatement2(body, test) {
                  this.type = syntax_1.Syntax.DoWhileStatement;
                  this.body = body;
                  this.test = test;
                }
                return DoWhileStatement2;
              }();
              exports2.DoWhileStatement = DoWhileStatement;
              var EmptyStatement = /* @__PURE__ */ function() {
                function EmptyStatement2() {
                  this.type = syntax_1.Syntax.EmptyStatement;
                }
                return EmptyStatement2;
              }();
              exports2.EmptyStatement = EmptyStatement;
              var ExportAllDeclaration = /* @__PURE__ */ function() {
                function ExportAllDeclaration2(source) {
                  this.type = syntax_1.Syntax.ExportAllDeclaration;
                  this.source = source;
                }
                return ExportAllDeclaration2;
              }();
              exports2.ExportAllDeclaration = ExportAllDeclaration;
              var ExportDefaultDeclaration = /* @__PURE__ */ function() {
                function ExportDefaultDeclaration2(declaration) {
                  this.type = syntax_1.Syntax.ExportDefaultDeclaration;
                  this.declaration = declaration;
                }
                return ExportDefaultDeclaration2;
              }();
              exports2.ExportDefaultDeclaration = ExportDefaultDeclaration;
              var ExportNamedDeclaration = /* @__PURE__ */ function() {
                function ExportNamedDeclaration2(declaration, specifiers, source) {
                  this.type = syntax_1.Syntax.ExportNamedDeclaration;
                  this.declaration = declaration;
                  this.specifiers = specifiers;
                  this.source = source;
                }
                return ExportNamedDeclaration2;
              }();
              exports2.ExportNamedDeclaration = ExportNamedDeclaration;
              var ExportSpecifier = /* @__PURE__ */ function() {
                function ExportSpecifier2(local, exported) {
                  this.type = syntax_1.Syntax.ExportSpecifier;
                  this.exported = exported;
                  this.local = local;
                }
                return ExportSpecifier2;
              }();
              exports2.ExportSpecifier = ExportSpecifier;
              var ExpressionStatement = /* @__PURE__ */ function() {
                function ExpressionStatement2(expression) {
                  this.type = syntax_1.Syntax.ExpressionStatement;
                  this.expression = expression;
                }
                return ExpressionStatement2;
              }();
              exports2.ExpressionStatement = ExpressionStatement;
              var ForInStatement = /* @__PURE__ */ function() {
                function ForInStatement2(left, right, body) {
                  this.type = syntax_1.Syntax.ForInStatement;
                  this.left = left;
                  this.right = right;
                  this.body = body;
                  this.each = false;
                }
                return ForInStatement2;
              }();
              exports2.ForInStatement = ForInStatement;
              var ForOfStatement = /* @__PURE__ */ function() {
                function ForOfStatement2(left, right, body) {
                  this.type = syntax_1.Syntax.ForOfStatement;
                  this.left = left;
                  this.right = right;
                  this.body = body;
                }
                return ForOfStatement2;
              }();
              exports2.ForOfStatement = ForOfStatement;
              var ForStatement = /* @__PURE__ */ function() {
                function ForStatement2(init, test, update, body) {
                  this.type = syntax_1.Syntax.ForStatement;
                  this.init = init;
                  this.test = test;
                  this.update = update;
                  this.body = body;
                }
                return ForStatement2;
              }();
              exports2.ForStatement = ForStatement;
              var FunctionDeclaration = /* @__PURE__ */ function() {
                function FunctionDeclaration2(id, params, body, generator) {
                  this.type = syntax_1.Syntax.FunctionDeclaration;
                  this.id = id;
                  this.params = params;
                  this.body = body;
                  this.generator = generator;
                  this.expression = false;
                  this.async = false;
                }
                return FunctionDeclaration2;
              }();
              exports2.FunctionDeclaration = FunctionDeclaration;
              var FunctionExpression = /* @__PURE__ */ function() {
                function FunctionExpression2(id, params, body, generator) {
                  this.type = syntax_1.Syntax.FunctionExpression;
                  this.id = id;
                  this.params = params;
                  this.body = body;
                  this.generator = generator;
                  this.expression = false;
                  this.async = false;
                }
                return FunctionExpression2;
              }();
              exports2.FunctionExpression = FunctionExpression;
              var Identifier = /* @__PURE__ */ function() {
                function Identifier2(name) {
                  this.type = syntax_1.Syntax.Identifier;
                  this.name = name;
                }
                return Identifier2;
              }();
              exports2.Identifier = Identifier;
              var IfStatement = /* @__PURE__ */ function() {
                function IfStatement2(test, consequent, alternate) {
                  this.type = syntax_1.Syntax.IfStatement;
                  this.test = test;
                  this.consequent = consequent;
                  this.alternate = alternate;
                }
                return IfStatement2;
              }();
              exports2.IfStatement = IfStatement;
              var ImportDeclaration = /* @__PURE__ */ function() {
                function ImportDeclaration2(specifiers, source) {
                  this.type = syntax_1.Syntax.ImportDeclaration;
                  this.specifiers = specifiers;
                  this.source = source;
                }
                return ImportDeclaration2;
              }();
              exports2.ImportDeclaration = ImportDeclaration;
              var ImportDefaultSpecifier = /* @__PURE__ */ function() {
                function ImportDefaultSpecifier2(local) {
                  this.type = syntax_1.Syntax.ImportDefaultSpecifier;
                  this.local = local;
                }
                return ImportDefaultSpecifier2;
              }();
              exports2.ImportDefaultSpecifier = ImportDefaultSpecifier;
              var ImportNamespaceSpecifier = /* @__PURE__ */ function() {
                function ImportNamespaceSpecifier2(local) {
                  this.type = syntax_1.Syntax.ImportNamespaceSpecifier;
                  this.local = local;
                }
                return ImportNamespaceSpecifier2;
              }();
              exports2.ImportNamespaceSpecifier = ImportNamespaceSpecifier;
              var ImportSpecifier = /* @__PURE__ */ function() {
                function ImportSpecifier2(local, imported) {
                  this.type = syntax_1.Syntax.ImportSpecifier;
                  this.local = local;
                  this.imported = imported;
                }
                return ImportSpecifier2;
              }();
              exports2.ImportSpecifier = ImportSpecifier;
              var LabeledStatement = /* @__PURE__ */ function() {
                function LabeledStatement2(label, body) {
                  this.type = syntax_1.Syntax.LabeledStatement;
                  this.label = label;
                  this.body = body;
                }
                return LabeledStatement2;
              }();
              exports2.LabeledStatement = LabeledStatement;
              var Literal = /* @__PURE__ */ function() {
                function Literal2(value, raw) {
                  this.type = syntax_1.Syntax.Literal;
                  this.value = value;
                  this.raw = raw;
                }
                return Literal2;
              }();
              exports2.Literal = Literal;
              var MetaProperty = /* @__PURE__ */ function() {
                function MetaProperty2(meta, property) {
                  this.type = syntax_1.Syntax.MetaProperty;
                  this.meta = meta;
                  this.property = property;
                }
                return MetaProperty2;
              }();
              exports2.MetaProperty = MetaProperty;
              var MethodDefinition = /* @__PURE__ */ function() {
                function MethodDefinition2(key, computed, value, kind, isStatic) {
                  this.type = syntax_1.Syntax.MethodDefinition;
                  this.key = key;
                  this.computed = computed;
                  this.value = value;
                  this.kind = kind;
                  this.static = isStatic;
                }
                return MethodDefinition2;
              }();
              exports2.MethodDefinition = MethodDefinition;
              var Module = /* @__PURE__ */ function() {
                function Module2(body) {
                  this.type = syntax_1.Syntax.Program;
                  this.body = body;
                  this.sourceType = "module";
                }
                return Module2;
              }();
              exports2.Module = Module;
              var NewExpression = /* @__PURE__ */ function() {
                function NewExpression2(callee, args) {
                  this.type = syntax_1.Syntax.NewExpression;
                  this.callee = callee;
                  this.arguments = args;
                }
                return NewExpression2;
              }();
              exports2.NewExpression = NewExpression;
              var ObjectExpression = /* @__PURE__ */ function() {
                function ObjectExpression2(properties) {
                  this.type = syntax_1.Syntax.ObjectExpression;
                  this.properties = properties;
                }
                return ObjectExpression2;
              }();
              exports2.ObjectExpression = ObjectExpression;
              var ObjectPattern = /* @__PURE__ */ function() {
                function ObjectPattern2(properties) {
                  this.type = syntax_1.Syntax.ObjectPattern;
                  this.properties = properties;
                }
                return ObjectPattern2;
              }();
              exports2.ObjectPattern = ObjectPattern;
              var Property = /* @__PURE__ */ function() {
                function Property2(kind, key, computed, value, method, shorthand) {
                  this.type = syntax_1.Syntax.Property;
                  this.key = key;
                  this.computed = computed;
                  this.value = value;
                  this.kind = kind;
                  this.method = method;
                  this.shorthand = shorthand;
                }
                return Property2;
              }();
              exports2.Property = Property;
              var RegexLiteral = /* @__PURE__ */ function() {
                function RegexLiteral2(value, raw, pattern, flags) {
                  this.type = syntax_1.Syntax.Literal;
                  this.value = value;
                  this.raw = raw;
                  this.regex = { pattern, flags };
                }
                return RegexLiteral2;
              }();
              exports2.RegexLiteral = RegexLiteral;
              var RestElement = /* @__PURE__ */ function() {
                function RestElement2(argument) {
                  this.type = syntax_1.Syntax.RestElement;
                  this.argument = argument;
                }
                return RestElement2;
              }();
              exports2.RestElement = RestElement;
              var ReturnStatement = /* @__PURE__ */ function() {
                function ReturnStatement2(argument) {
                  this.type = syntax_1.Syntax.ReturnStatement;
                  this.argument = argument;
                }
                return ReturnStatement2;
              }();
              exports2.ReturnStatement = ReturnStatement;
              var Script = /* @__PURE__ */ function() {
                function Script2(body) {
                  this.type = syntax_1.Syntax.Program;
                  this.body = body;
                  this.sourceType = "script";
                }
                return Script2;
              }();
              exports2.Script = Script;
              var SequenceExpression = /* @__PURE__ */ function() {
                function SequenceExpression2(expressions) {
                  this.type = syntax_1.Syntax.SequenceExpression;
                  this.expressions = expressions;
                }
                return SequenceExpression2;
              }();
              exports2.SequenceExpression = SequenceExpression;
              var SpreadElement = /* @__PURE__ */ function() {
                function SpreadElement2(argument) {
                  this.type = syntax_1.Syntax.SpreadElement;
                  this.argument = argument;
                }
                return SpreadElement2;
              }();
              exports2.SpreadElement = SpreadElement;
              var StaticMemberExpression = /* @__PURE__ */ function() {
                function StaticMemberExpression2(object, property) {
                  this.type = syntax_1.Syntax.MemberExpression;
                  this.computed = false;
                  this.object = object;
                  this.property = property;
                }
                return StaticMemberExpression2;
              }();
              exports2.StaticMemberExpression = StaticMemberExpression;
              var Super = /* @__PURE__ */ function() {
                function Super2() {
                  this.type = syntax_1.Syntax.Super;
                }
                return Super2;
              }();
              exports2.Super = Super;
              var SwitchCase = /* @__PURE__ */ function() {
                function SwitchCase2(test, consequent) {
                  this.type = syntax_1.Syntax.SwitchCase;
                  this.test = test;
                  this.consequent = consequent;
                }
                return SwitchCase2;
              }();
              exports2.SwitchCase = SwitchCase;
              var SwitchStatement = /* @__PURE__ */ function() {
                function SwitchStatement2(discriminant, cases) {
                  this.type = syntax_1.Syntax.SwitchStatement;
                  this.discriminant = discriminant;
                  this.cases = cases;
                }
                return SwitchStatement2;
              }();
              exports2.SwitchStatement = SwitchStatement;
              var TaggedTemplateExpression = /* @__PURE__ */ function() {
                function TaggedTemplateExpression2(tag, quasi) {
                  this.type = syntax_1.Syntax.TaggedTemplateExpression;
                  this.tag = tag;
                  this.quasi = quasi;
                }
                return TaggedTemplateExpression2;
              }();
              exports2.TaggedTemplateExpression = TaggedTemplateExpression;
              var TemplateElement = /* @__PURE__ */ function() {
                function TemplateElement2(value, tail) {
                  this.type = syntax_1.Syntax.TemplateElement;
                  this.value = value;
                  this.tail = tail;
                }
                return TemplateElement2;
              }();
              exports2.TemplateElement = TemplateElement;
              var TemplateLiteral = /* @__PURE__ */ function() {
                function TemplateLiteral2(quasis, expressions) {
                  this.type = syntax_1.Syntax.TemplateLiteral;
                  this.quasis = quasis;
                  this.expressions = expressions;
                }
                return TemplateLiteral2;
              }();
              exports2.TemplateLiteral = TemplateLiteral;
              var ThisExpression = /* @__PURE__ */ function() {
                function ThisExpression2() {
                  this.type = syntax_1.Syntax.ThisExpression;
                }
                return ThisExpression2;
              }();
              exports2.ThisExpression = ThisExpression;
              var ThrowStatement = /* @__PURE__ */ function() {
                function ThrowStatement2(argument) {
                  this.type = syntax_1.Syntax.ThrowStatement;
                  this.argument = argument;
                }
                return ThrowStatement2;
              }();
              exports2.ThrowStatement = ThrowStatement;
              var TryStatement = /* @__PURE__ */ function() {
                function TryStatement2(block, handler, finalizer) {
                  this.type = syntax_1.Syntax.TryStatement;
                  this.block = block;
                  this.handler = handler;
                  this.finalizer = finalizer;
                }
                return TryStatement2;
              }();
              exports2.TryStatement = TryStatement;
              var UnaryExpression = /* @__PURE__ */ function() {
                function UnaryExpression2(operator, argument) {
                  this.type = syntax_1.Syntax.UnaryExpression;
                  this.operator = operator;
                  this.argument = argument;
                  this.prefix = true;
                }
                return UnaryExpression2;
              }();
              exports2.UnaryExpression = UnaryExpression;
              var UpdateExpression = /* @__PURE__ */ function() {
                function UpdateExpression2(operator, argument, prefix) {
                  this.type = syntax_1.Syntax.UpdateExpression;
                  this.operator = operator;
                  this.argument = argument;
                  this.prefix = prefix;
                }
                return UpdateExpression2;
              }();
              exports2.UpdateExpression = UpdateExpression;
              var VariableDeclaration = /* @__PURE__ */ function() {
                function VariableDeclaration2(declarations, kind) {
                  this.type = syntax_1.Syntax.VariableDeclaration;
                  this.declarations = declarations;
                  this.kind = kind;
                }
                return VariableDeclaration2;
              }();
              exports2.VariableDeclaration = VariableDeclaration;
              var VariableDeclarator = /* @__PURE__ */ function() {
                function VariableDeclarator2(id, init) {
                  this.type = syntax_1.Syntax.VariableDeclarator;
                  this.id = id;
                  this.init = init;
                }
                return VariableDeclarator2;
              }();
              exports2.VariableDeclarator = VariableDeclarator;
              var WhileStatement = /* @__PURE__ */ function() {
                function WhileStatement2(test, body) {
                  this.type = syntax_1.Syntax.WhileStatement;
                  this.test = test;
                  this.body = body;
                }
                return WhileStatement2;
              }();
              exports2.WhileStatement = WhileStatement;
              var WithStatement = /* @__PURE__ */ function() {
                function WithStatement2(object, body) {
                  this.type = syntax_1.Syntax.WithStatement;
                  this.object = object;
                  this.body = body;
                }
                return WithStatement2;
              }();
              exports2.WithStatement = WithStatement;
              var YieldExpression = /* @__PURE__ */ function() {
                function YieldExpression2(argument, delegate) {
                  this.type = syntax_1.Syntax.YieldExpression;
                  this.argument = argument;
                  this.delegate = delegate;
                }
                return YieldExpression2;
              }();
              exports2.YieldExpression = YieldExpression;
            },
            /* 8 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              Object.defineProperty(exports2, "__esModule", { value: true });
              var assert_1 = __webpack_require__(9);
              var error_handler_1 = __webpack_require__(10);
              var messages_1 = __webpack_require__(11);
              var Node = __webpack_require__(7);
              var scanner_1 = __webpack_require__(12);
              var syntax_1 = __webpack_require__(2);
              var token_1 = __webpack_require__(13);
              var ArrowParameterPlaceHolder = "ArrowParameterPlaceHolder";
              var Parser = function() {
                function Parser2(code, options, delegate) {
                  if (options === void 0) {
                    options = {};
                  }
                  this.config = {
                    range: typeof options.range === "boolean" && options.range,
                    loc: typeof options.loc === "boolean" && options.loc,
                    source: null,
                    tokens: typeof options.tokens === "boolean" && options.tokens,
                    comment: typeof options.comment === "boolean" && options.comment,
                    tolerant: typeof options.tolerant === "boolean" && options.tolerant
                  };
                  if (this.config.loc && options.source && options.source !== null) {
                    this.config.source = String(options.source);
                  }
                  this.delegate = delegate;
                  this.errorHandler = new error_handler_1.ErrorHandler();
                  this.errorHandler.tolerant = this.config.tolerant;
                  this.scanner = new scanner_1.Scanner(code, this.errorHandler);
                  this.scanner.trackComment = this.config.comment;
                  this.operatorPrecedence = {
                    ")": 0,
                    ";": 0,
                    ",": 0,
                    "=": 0,
                    "]": 0,
                    "||": 1,
                    "&&": 2,
                    "|": 3,
                    "^": 4,
                    "&": 5,
                    "==": 6,
                    "!=": 6,
                    "===": 6,
                    "!==": 6,
                    "<": 7,
                    ">": 7,
                    "<=": 7,
                    ">=": 7,
                    "<<": 8,
                    ">>": 8,
                    ">>>": 8,
                    "+": 9,
                    "-": 9,
                    "*": 11,
                    "/": 11,
                    "%": 11
                  };
                  this.lookahead = {
                    type: 2,
                    value: "",
                    lineNumber: this.scanner.lineNumber,
                    lineStart: 0,
                    start: 0,
                    end: 0
                  };
                  this.hasLineTerminator = false;
                  this.context = {
                    isModule: false,
                    await: false,
                    allowIn: true,
                    allowStrictDirective: true,
                    allowYield: true,
                    firstCoverInitializedNameError: null,
                    isAssignmentTarget: false,
                    isBindingElement: false,
                    inFunctionBody: false,
                    inIteration: false,
                    inSwitch: false,
                    labelSet: {},
                    strict: false
                  };
                  this.tokens = [];
                  this.startMarker = {
                    index: 0,
                    line: this.scanner.lineNumber,
                    column: 0
                  };
                  this.lastMarker = {
                    index: 0,
                    line: this.scanner.lineNumber,
                    column: 0
                  };
                  this.nextToken();
                  this.lastMarker = {
                    index: this.scanner.index,
                    line: this.scanner.lineNumber,
                    column: this.scanner.index - this.scanner.lineStart
                  };
                }
                Parser2.prototype.throwError = function(messageFormat) {
                  var values2 = [];
                  for (var _i = 1; _i < arguments.length; _i++) {
                    values2[_i - 1] = arguments[_i];
                  }
                  var args = Array.prototype.slice.call(arguments, 1);
                  var msg = messageFormat.replace(/%(\d)/g, function(whole, idx) {
                    assert_1.assert(idx < args.length, "Message reference must be in range");
                    return args[idx];
                  });
                  var index = this.lastMarker.index;
                  var line = this.lastMarker.line;
                  var column = this.lastMarker.column + 1;
                  throw this.errorHandler.createError(index, line, column, msg);
                };
                Parser2.prototype.tolerateError = function(messageFormat) {
                  var values2 = [];
                  for (var _i = 1; _i < arguments.length; _i++) {
                    values2[_i - 1] = arguments[_i];
                  }
                  var args = Array.prototype.slice.call(arguments, 1);
                  var msg = messageFormat.replace(/%(\d)/g, function(whole, idx) {
                    assert_1.assert(idx < args.length, "Message reference must be in range");
                    return args[idx];
                  });
                  var index = this.lastMarker.index;
                  var line = this.scanner.lineNumber;
                  var column = this.lastMarker.column + 1;
                  this.errorHandler.tolerateError(index, line, column, msg);
                };
                Parser2.prototype.unexpectedTokenError = function(token, message) {
                  var msg = message || messages_1.Messages.UnexpectedToken;
                  var value;
                  if (token) {
                    if (!message) {
                      msg = token.type === 2 ? messages_1.Messages.UnexpectedEOS : token.type === 3 ? messages_1.Messages.UnexpectedIdentifier : token.type === 6 ? messages_1.Messages.UnexpectedNumber : token.type === 8 ? messages_1.Messages.UnexpectedString : token.type === 10 ? messages_1.Messages.UnexpectedTemplate : messages_1.Messages.UnexpectedToken;
                      if (token.type === 4) {
                        if (this.scanner.isFutureReservedWord(token.value)) {
                          msg = messages_1.Messages.UnexpectedReserved;
                        } else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {
                          msg = messages_1.Messages.StrictReservedWord;
                        }
                      }
                    }
                    value = token.value;
                  } else {
                    value = "ILLEGAL";
                  }
                  msg = msg.replace("%0", value);
                  if (token && typeof token.lineNumber === "number") {
                    var index = token.start;
                    var line = token.lineNumber;
                    var lastMarkerLineStart = this.lastMarker.index - this.lastMarker.column;
                    var column = token.start - lastMarkerLineStart + 1;
                    return this.errorHandler.createError(index, line, column, msg);
                  } else {
                    var index = this.lastMarker.index;
                    var line = this.lastMarker.line;
                    var column = this.lastMarker.column + 1;
                    return this.errorHandler.createError(index, line, column, msg);
                  }
                };
                Parser2.prototype.throwUnexpectedToken = function(token, message) {
                  throw this.unexpectedTokenError(token, message);
                };
                Parser2.prototype.tolerateUnexpectedToken = function(token, message) {
                  this.errorHandler.tolerate(this.unexpectedTokenError(token, message));
                };
                Parser2.prototype.collectComments = function() {
                  if (!this.config.comment) {
                    this.scanner.scanComments();
                  } else {
                    var comments = this.scanner.scanComments();
                    if (comments.length > 0 && this.delegate) {
                      for (var i = 0; i < comments.length; ++i) {
                        var e = comments[i];
                        var node = void 0;
                        node = {
                          type: e.multiLine ? "BlockComment" : "LineComment",
                          value: this.scanner.source.slice(e.slice[0], e.slice[1])
                        };
                        if (this.config.range) {
                          node.range = e.range;
                        }
                        if (this.config.loc) {
                          node.loc = e.loc;
                        }
                        var metadata = {
                          start: {
                            line: e.loc.start.line,
                            column: e.loc.start.column,
                            offset: e.range[0]
                          },
                          end: {
                            line: e.loc.end.line,
                            column: e.loc.end.column,
                            offset: e.range[1]
                          }
                        };
                        this.delegate(node, metadata);
                      }
                    }
                  }
                };
                Parser2.prototype.getTokenRaw = function(token) {
                  return this.scanner.source.slice(token.start, token.end);
                };
                Parser2.prototype.convertToken = function(token) {
                  var t2 = {
                    type: token_1.TokenName[token.type],
                    value: this.getTokenRaw(token)
                  };
                  if (this.config.range) {
                    t2.range = [token.start, token.end];
                  }
                  if (this.config.loc) {
                    t2.loc = {
                      start: {
                        line: this.startMarker.line,
                        column: this.startMarker.column
                      },
                      end: {
                        line: this.scanner.lineNumber,
                        column: this.scanner.index - this.scanner.lineStart
                      }
                    };
                  }
                  if (token.type === 9) {
                    var pattern = token.pattern;
                    var flags = token.flags;
                    t2.regex = { pattern, flags };
                  }
                  return t2;
                };
                Parser2.prototype.nextToken = function() {
                  var token = this.lookahead;
                  this.lastMarker.index = this.scanner.index;
                  this.lastMarker.line = this.scanner.lineNumber;
                  this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
                  this.collectComments();
                  if (this.scanner.index !== this.startMarker.index) {
                    this.startMarker.index = this.scanner.index;
                    this.startMarker.line = this.scanner.lineNumber;
                    this.startMarker.column = this.scanner.index - this.scanner.lineStart;
                  }
                  var next = this.scanner.lex();
                  this.hasLineTerminator = token.lineNumber !== next.lineNumber;
                  if (next && this.context.strict && next.type === 3) {
                    if (this.scanner.isStrictModeReservedWord(next.value)) {
                      next.type = 4;
                    }
                  }
                  this.lookahead = next;
                  if (this.config.tokens && next.type !== 2) {
                    this.tokens.push(this.convertToken(next));
                  }
                  return token;
                };
                Parser2.prototype.nextRegexToken = function() {
                  this.collectComments();
                  var token = this.scanner.scanRegExp();
                  if (this.config.tokens) {
                    this.tokens.pop();
                    this.tokens.push(this.convertToken(token));
                  }
                  this.lookahead = token;
                  this.nextToken();
                  return token;
                };
                Parser2.prototype.createNode = function() {
                  return {
                    index: this.startMarker.index,
                    line: this.startMarker.line,
                    column: this.startMarker.column
                  };
                };
                Parser2.prototype.startNode = function(token, lastLineStart) {
                  if (lastLineStart === void 0) {
                    lastLineStart = 0;
                  }
                  var column = token.start - token.lineStart;
                  var line = token.lineNumber;
                  if (column < 0) {
                    column += lastLineStart;
                    line--;
                  }
                  return {
                    index: token.start,
                    line,
                    column
                  };
                };
                Parser2.prototype.finalize = function(marker, node) {
                  if (this.config.range) {
                    node.range = [marker.index, this.lastMarker.index];
                  }
                  if (this.config.loc) {
                    node.loc = {
                      start: {
                        line: marker.line,
                        column: marker.column
                      },
                      end: {
                        line: this.lastMarker.line,
                        column: this.lastMarker.column
                      }
                    };
                    if (this.config.source) {
                      node.loc.source = this.config.source;
                    }
                  }
                  if (this.delegate) {
                    var metadata = {
                      start: {
                        line: marker.line,
                        column: marker.column,
                        offset: marker.index
                      },
                      end: {
                        line: this.lastMarker.line,
                        column: this.lastMarker.column,
                        offset: this.lastMarker.index
                      }
                    };
                    this.delegate(node, metadata);
                  }
                  return node;
                };
                Parser2.prototype.expect = function(value) {
                  var token = this.nextToken();
                  if (token.type !== 7 || token.value !== value) {
                    this.throwUnexpectedToken(token);
                  }
                };
                Parser2.prototype.expectCommaSeparator = function() {
                  if (this.config.tolerant) {
                    var token = this.lookahead;
                    if (token.type === 7 && token.value === ",") {
                      this.nextToken();
                    } else if (token.type === 7 && token.value === ";") {
                      this.nextToken();
                      this.tolerateUnexpectedToken(token);
                    } else {
                      this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);
                    }
                  } else {
                    this.expect(",");
                  }
                };
                Parser2.prototype.expectKeyword = function(keyword) {
                  var token = this.nextToken();
                  if (token.type !== 4 || token.value !== keyword) {
                    this.throwUnexpectedToken(token);
                  }
                };
                Parser2.prototype.match = function(value) {
                  return this.lookahead.type === 7 && this.lookahead.value === value;
                };
                Parser2.prototype.matchKeyword = function(keyword) {
                  return this.lookahead.type === 4 && this.lookahead.value === keyword;
                };
                Parser2.prototype.matchContextualKeyword = function(keyword) {
                  return this.lookahead.type === 3 && this.lookahead.value === keyword;
                };
                Parser2.prototype.matchAssign = function() {
                  if (this.lookahead.type !== 7) {
                    return false;
                  }
                  var op = this.lookahead.value;
                  return op === "=" || op === "*=" || op === "**=" || op === "/=" || op === "%=" || op === "+=" || op === "-=" || op === "<<=" || op === ">>=" || op === ">>>=" || op === "&=" || op === "^=" || op === "|=";
                };
                Parser2.prototype.isolateCoverGrammar = function(parseFunction) {
                  var previousIsBindingElement = this.context.isBindingElement;
                  var previousIsAssignmentTarget = this.context.isAssignmentTarget;
                  var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
                  this.context.isBindingElement = true;
                  this.context.isAssignmentTarget = true;
                  this.context.firstCoverInitializedNameError = null;
                  var result = parseFunction.call(this);
                  if (this.context.firstCoverInitializedNameError !== null) {
                    this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);
                  }
                  this.context.isBindingElement = previousIsBindingElement;
                  this.context.isAssignmentTarget = previousIsAssignmentTarget;
                  this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;
                  return result;
                };
                Parser2.prototype.inheritCoverGrammar = function(parseFunction) {
                  var previousIsBindingElement = this.context.isBindingElement;
                  var previousIsAssignmentTarget = this.context.isAssignmentTarget;
                  var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
                  this.context.isBindingElement = true;
                  this.context.isAssignmentTarget = true;
                  this.context.firstCoverInitializedNameError = null;
                  var result = parseFunction.call(this);
                  this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;
                  this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;
                  this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;
                  return result;
                };
                Parser2.prototype.consumeSemicolon = function() {
                  if (this.match(";")) {
                    this.nextToken();
                  } else if (!this.hasLineTerminator) {
                    if (this.lookahead.type !== 2 && !this.match("}")) {
                      this.throwUnexpectedToken(this.lookahead);
                    }
                    this.lastMarker.index = this.startMarker.index;
                    this.lastMarker.line = this.startMarker.line;
                    this.lastMarker.column = this.startMarker.column;
                  }
                };
                Parser2.prototype.parsePrimaryExpression = function() {
                  var node = this.createNode();
                  var expr;
                  var token, raw;
                  switch (this.lookahead.type) {
                    case 3:
                      if ((this.context.isModule || this.context.await) && this.lookahead.value === "await") {
                        this.tolerateUnexpectedToken(this.lookahead);
                      }
                      expr = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(node, new Node.Identifier(this.nextToken().value));
                      break;
                    case 6:
                    case 8:
                      if (this.context.strict && this.lookahead.octal) {
                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);
                      }
                      this.context.isAssignmentTarget = false;
                      this.context.isBindingElement = false;
                      token = this.nextToken();
                      raw = this.getTokenRaw(token);
                      expr = this.finalize(node, new Node.Literal(token.value, raw));
                      break;
                    case 1:
                      this.context.isAssignmentTarget = false;
                      this.context.isBindingElement = false;
                      token = this.nextToken();
                      raw = this.getTokenRaw(token);
                      expr = this.finalize(node, new Node.Literal(token.value === "true", raw));
                      break;
                    case 5:
                      this.context.isAssignmentTarget = false;
                      this.context.isBindingElement = false;
                      token = this.nextToken();
                      raw = this.getTokenRaw(token);
                      expr = this.finalize(node, new Node.Literal(null, raw));
                      break;
                    case 10:
                      expr = this.parseTemplateLiteral();
                      break;
                    case 7:
                      switch (this.lookahead.value) {
                        case "(":
                          this.context.isBindingElement = false;
                          expr = this.inheritCoverGrammar(this.parseGroupExpression);
                          break;
                        case "[":
                          expr = this.inheritCoverGrammar(this.parseArrayInitializer);
                          break;
                        case "{":
                          expr = this.inheritCoverGrammar(this.parseObjectInitializer);
                          break;
                        case "/":
                        case "/=":
                          this.context.isAssignmentTarget = false;
                          this.context.isBindingElement = false;
                          this.scanner.index = this.startMarker.index;
                          token = this.nextRegexToken();
                          raw = this.getTokenRaw(token);
                          expr = this.finalize(node, new Node.RegexLiteral(token.regex, raw, token.pattern, token.flags));
                          break;
                        default:
                          expr = this.throwUnexpectedToken(this.nextToken());
                      }
                      break;
                    case 4:
                      if (!this.context.strict && this.context.allowYield && this.matchKeyword("yield")) {
                        expr = this.parseIdentifierName();
                      } else if (!this.context.strict && this.matchKeyword("let")) {
                        expr = this.finalize(node, new Node.Identifier(this.nextToken().value));
                      } else {
                        this.context.isAssignmentTarget = false;
                        this.context.isBindingElement = false;
                        if (this.matchKeyword("function")) {
                          expr = this.parseFunctionExpression();
                        } else if (this.matchKeyword("this")) {
                          this.nextToken();
                          expr = this.finalize(node, new Node.ThisExpression());
                        } else if (this.matchKeyword("class")) {
                          expr = this.parseClassExpression();
                        } else {
                          expr = this.throwUnexpectedToken(this.nextToken());
                        }
                      }
                      break;
                    default:
                      expr = this.throwUnexpectedToken(this.nextToken());
                  }
                  return expr;
                };
                Parser2.prototype.parseSpreadElement = function() {
                  var node = this.createNode();
                  this.expect("...");
                  var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);
                  return this.finalize(node, new Node.SpreadElement(arg));
                };
                Parser2.prototype.parseArrayInitializer = function() {
                  var node = this.createNode();
                  var elements = [];
                  this.expect("[");
                  while (!this.match("]")) {
                    if (this.match(",")) {
                      this.nextToken();
                      elements.push(null);
                    } else if (this.match("...")) {
                      var element = this.parseSpreadElement();
                      if (!this.match("]")) {
                        this.context.isAssignmentTarget = false;
                        this.context.isBindingElement = false;
                        this.expect(",");
                      }
                      elements.push(element);
                    } else {
                      elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
                      if (!this.match("]")) {
                        this.expect(",");
                      }
                    }
                  }
                  this.expect("]");
                  return this.finalize(node, new Node.ArrayExpression(elements));
                };
                Parser2.prototype.parsePropertyMethod = function(params) {
                  this.context.isAssignmentTarget = false;
                  this.context.isBindingElement = false;
                  var previousStrict = this.context.strict;
                  var previousAllowStrictDirective = this.context.allowStrictDirective;
                  this.context.allowStrictDirective = params.simple;
                  var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);
                  if (this.context.strict && params.firstRestricted) {
                    this.tolerateUnexpectedToken(params.firstRestricted, params.message);
                  }
                  if (this.context.strict && params.stricted) {
                    this.tolerateUnexpectedToken(params.stricted, params.message);
                  }
                  this.context.strict = previousStrict;
                  this.context.allowStrictDirective = previousAllowStrictDirective;
                  return body;
                };
                Parser2.prototype.parsePropertyMethodFunction = function() {
                  var isGenerator = false;
                  var node = this.createNode();
                  var previousAllowYield = this.context.allowYield;
                  this.context.allowYield = true;
                  var params = this.parseFormalParameters();
                  var method = this.parsePropertyMethod(params);
                  this.context.allowYield = previousAllowYield;
                  return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
                };
                Parser2.prototype.parsePropertyMethodAsyncFunction = function() {
                  var node = this.createNode();
                  var previousAllowYield = this.context.allowYield;
                  var previousAwait = this.context.await;
                  this.context.allowYield = false;
                  this.context.await = true;
                  var params = this.parseFormalParameters();
                  var method = this.parsePropertyMethod(params);
                  this.context.allowYield = previousAllowYield;
                  this.context.await = previousAwait;
                  return this.finalize(node, new Node.AsyncFunctionExpression(null, params.params, method));
                };
                Parser2.prototype.parseObjectPropertyKey = function() {
                  var node = this.createNode();
                  var token = this.nextToken();
                  var key;
                  switch (token.type) {
                    case 8:
                    case 6:
                      if (this.context.strict && token.octal) {
                        this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);
                      }
                      var raw = this.getTokenRaw(token);
                      key = this.finalize(node, new Node.Literal(token.value, raw));
                      break;
                    case 3:
                    case 1:
                    case 5:
                    case 4:
                      key = this.finalize(node, new Node.Identifier(token.value));
                      break;
                    case 7:
                      if (token.value === "[") {
                        key = this.isolateCoverGrammar(this.parseAssignmentExpression);
                        this.expect("]");
                      } else {
                        key = this.throwUnexpectedToken(token);
                      }
                      break;
                    default:
                      key = this.throwUnexpectedToken(token);
                  }
                  return key;
                };
                Parser2.prototype.isPropertyKey = function(key, value) {
                  return key.type === syntax_1.Syntax.Identifier && key.name === value || key.type === syntax_1.Syntax.Literal && key.value === value;
                };
                Parser2.prototype.parseObjectProperty = function(hasProto) {
                  var node = this.createNode();
                  var token = this.lookahead;
                  var kind;
                  var key = null;
                  var value = null;
                  var computed = false;
                  var method = false;
                  var shorthand = false;
                  var isAsync = false;
                  if (token.type === 3) {
                    var id = token.value;
                    this.nextToken();
                    computed = this.match("[");
                    isAsync = !this.hasLineTerminator && id === "async" && !this.match(":") && !this.match("(") && !this.match("*") && !this.match(",");
                    key = isAsync ? this.parseObjectPropertyKey() : this.finalize(node, new Node.Identifier(id));
                  } else if (this.match("*")) {
                    this.nextToken();
                  } else {
                    computed = this.match("[");
                    key = this.parseObjectPropertyKey();
                  }
                  var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);
                  if (token.type === 3 && !isAsync && token.value === "get" && lookaheadPropertyKey) {
                    kind = "get";
                    computed = this.match("[");
                    key = this.parseObjectPropertyKey();
                    this.context.allowYield = false;
                    value = this.parseGetterMethod();
                  } else if (token.type === 3 && !isAsync && token.value === "set" && lookaheadPropertyKey) {
                    kind = "set";
                    computed = this.match("[");
                    key = this.parseObjectPropertyKey();
                    value = this.parseSetterMethod();
                  } else if (token.type === 7 && token.value === "*" && lookaheadPropertyKey) {
                    kind = "init";
                    computed = this.match("[");
                    key = this.parseObjectPropertyKey();
                    value = this.parseGeneratorMethod();
                    method = true;
                  } else {
                    if (!key) {
                      this.throwUnexpectedToken(this.lookahead);
                    }
                    kind = "init";
                    if (this.match(":") && !isAsync) {
                      if (!computed && this.isPropertyKey(key, "__proto__")) {
                        if (hasProto.value) {
                          this.tolerateError(messages_1.Messages.DuplicateProtoProperty);
                        }
                        hasProto.value = true;
                      }
                      this.nextToken();
                      value = this.inheritCoverGrammar(this.parseAssignmentExpression);
                    } else if (this.match("(")) {
                      value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
                      method = true;
                    } else if (token.type === 3) {
                      var id = this.finalize(node, new Node.Identifier(token.value));
                      if (this.match("=")) {
                        this.context.firstCoverInitializedNameError = this.lookahead;
                        this.nextToken();
                        shorthand = true;
                        var init = this.isolateCoverGrammar(this.parseAssignmentExpression);
                        value = this.finalize(node, new Node.AssignmentPattern(id, init));
                      } else {
                        shorthand = true;
                        value = id;
                      }
                    } else {
                      this.throwUnexpectedToken(this.nextToken());
                    }
                  }
                  return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));
                };
                Parser2.prototype.parseObjectInitializer = function() {
                  var node = this.createNode();
                  this.expect("{");
                  var properties = [];
                  var hasProto = { value: false };
                  while (!this.match("}")) {
                    properties.push(this.parseObjectProperty(hasProto));
                    if (!this.match("}")) {
                      this.expectCommaSeparator();
                    }
                  }
                  this.expect("}");
                  return this.finalize(node, new Node.ObjectExpression(properties));
                };
                Parser2.prototype.parseTemplateHead = function() {
                  assert_1.assert(this.lookahead.head, "Template literal must start with a template head");
                  var node = this.createNode();
                  var token = this.nextToken();
                  var raw = token.value;
                  var cooked = token.cooked;
                  return this.finalize(node, new Node.TemplateElement({ raw, cooked }, token.tail));
                };
                Parser2.prototype.parseTemplateElement = function() {
                  if (this.lookahead.type !== 10) {
                    this.throwUnexpectedToken();
                  }
                  var node = this.createNode();
                  var token = this.nextToken();
                  var raw = token.value;
                  var cooked = token.cooked;
                  return this.finalize(node, new Node.TemplateElement({ raw, cooked }, token.tail));
                };
                Parser2.prototype.parseTemplateLiteral = function() {
                  var node = this.createNode();
                  var expressions = [];
                  var quasis = [];
                  var quasi = this.parseTemplateHead();
                  quasis.push(quasi);
                  while (!quasi.tail) {
                    expressions.push(this.parseExpression());
                    quasi = this.parseTemplateElement();
                    quasis.push(quasi);
                  }
                  return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));
                };
                Parser2.prototype.reinterpretExpressionAsPattern = function(expr) {
                  switch (expr.type) {
                    case syntax_1.Syntax.Identifier:
                    case syntax_1.Syntax.MemberExpression:
                    case syntax_1.Syntax.RestElement:
                    case syntax_1.Syntax.AssignmentPattern:
                      break;
                    case syntax_1.Syntax.SpreadElement:
                      expr.type = syntax_1.Syntax.RestElement;
                      this.reinterpretExpressionAsPattern(expr.argument);
                      break;
                    case syntax_1.Syntax.ArrayExpression:
                      expr.type = syntax_1.Syntax.ArrayPattern;
                      for (var i = 0; i < expr.elements.length; i++) {
                        if (expr.elements[i] !== null) {
                          this.reinterpretExpressionAsPattern(expr.elements[i]);
                        }
                      }
                      break;
                    case syntax_1.Syntax.ObjectExpression:
                      expr.type = syntax_1.Syntax.ObjectPattern;
                      for (var i = 0; i < expr.properties.length; i++) {
                        this.reinterpretExpressionAsPattern(expr.properties[i].value);
                      }
                      break;
                    case syntax_1.Syntax.AssignmentExpression:
                      expr.type = syntax_1.Syntax.AssignmentPattern;
                      delete expr.operator;
                      this.reinterpretExpressionAsPattern(expr.left);
                      break;
                    default:
                      break;
                  }
                };
                Parser2.prototype.parseGroupExpression = function() {
                  var expr;
                  this.expect("(");
                  if (this.match(")")) {
                    this.nextToken();
                    if (!this.match("=>")) {
                      this.expect("=>");
                    }
                    expr = {
                      type: ArrowParameterPlaceHolder,
                      params: [],
                      async: false
                    };
                  } else {
                    var startToken = this.lookahead;
                    var params = [];
                    if (this.match("...")) {
                      expr = this.parseRestElement(params);
                      this.expect(")");
                      if (!this.match("=>")) {
                        this.expect("=>");
                      }
                      expr = {
                        type: ArrowParameterPlaceHolder,
                        params: [expr],
                        async: false
                      };
                    } else {
                      var arrow = false;
                      this.context.isBindingElement = true;
                      expr = this.inheritCoverGrammar(this.parseAssignmentExpression);
                      if (this.match(",")) {
                        var expressions = [];
                        this.context.isAssignmentTarget = false;
                        expressions.push(expr);
                        while (this.lookahead.type !== 2) {
                          if (!this.match(",")) {
                            break;
                          }
                          this.nextToken();
                          if (this.match(")")) {
                            this.nextToken();
                            for (var i = 0; i < expressions.length; i++) {
                              this.reinterpretExpressionAsPattern(expressions[i]);
                            }
                            arrow = true;
                            expr = {
                              type: ArrowParameterPlaceHolder,
                              params: expressions,
                              async: false
                            };
                          } else if (this.match("...")) {
                            if (!this.context.isBindingElement) {
                              this.throwUnexpectedToken(this.lookahead);
                            }
                            expressions.push(this.parseRestElement(params));
                            this.expect(")");
                            if (!this.match("=>")) {
                              this.expect("=>");
                            }
                            this.context.isBindingElement = false;
                            for (var i = 0; i < expressions.length; i++) {
                              this.reinterpretExpressionAsPattern(expressions[i]);
                            }
                            arrow = true;
                            expr = {
                              type: ArrowParameterPlaceHolder,
                              params: expressions,
                              async: false
                            };
                          } else {
                            expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
                          }
                          if (arrow) {
                            break;
                          }
                        }
                        if (!arrow) {
                          expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
                        }
                      }
                      if (!arrow) {
                        this.expect(")");
                        if (this.match("=>")) {
                          if (expr.type === syntax_1.Syntax.Identifier && expr.name === "yield") {
                            arrow = true;
                            expr = {
                              type: ArrowParameterPlaceHolder,
                              params: [expr],
                              async: false
                            };
                          }
                          if (!arrow) {
                            if (!this.context.isBindingElement) {
                              this.throwUnexpectedToken(this.lookahead);
                            }
                            if (expr.type === syntax_1.Syntax.SequenceExpression) {
                              for (var i = 0; i < expr.expressions.length; i++) {
                                this.reinterpretExpressionAsPattern(expr.expressions[i]);
                              }
                            } else {
                              this.reinterpretExpressionAsPattern(expr);
                            }
                            var parameters = expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr];
                            expr = {
                              type: ArrowParameterPlaceHolder,
                              params: parameters,
                              async: false
                            };
                          }
                        }
                        this.context.isBindingElement = false;
                      }
                    }
                  }
                  return expr;
                };
                Parser2.prototype.parseArguments = function() {
                  this.expect("(");
                  var args = [];
                  if (!this.match(")")) {
                    while (true) {
                      var expr = this.match("...") ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAssignmentExpression);
                      args.push(expr);
                      if (this.match(")")) {
                        break;
                      }
                      this.expectCommaSeparator();
                      if (this.match(")")) {
                        break;
                      }
                    }
                  }
                  this.expect(")");
                  return args;
                };
                Parser2.prototype.isIdentifierName = function(token) {
                  return token.type === 3 || token.type === 4 || token.type === 1 || token.type === 5;
                };
                Parser2.prototype.parseIdentifierName = function() {
                  var node = this.createNode();
                  var token = this.nextToken();
                  if (!this.isIdentifierName(token)) {
                    this.throwUnexpectedToken(token);
                  }
                  return this.finalize(node, new Node.Identifier(token.value));
                };
                Parser2.prototype.parseNewExpression = function() {
                  var node = this.createNode();
                  var id = this.parseIdentifierName();
                  assert_1.assert(id.name === "new", "New expression must start with `new`");
                  var expr;
                  if (this.match(".")) {
                    this.nextToken();
                    if (this.lookahead.type === 3 && this.context.inFunctionBody && this.lookahead.value === "target") {
                      var property = this.parseIdentifierName();
                      expr = new Node.MetaProperty(id, property);
                    } else {
                      this.throwUnexpectedToken(this.lookahead);
                    }
                  } else {
                    var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);
                    var args = this.match("(") ? this.parseArguments() : [];
                    expr = new Node.NewExpression(callee, args);
                    this.context.isAssignmentTarget = false;
                    this.context.isBindingElement = false;
                  }
                  return this.finalize(node, expr);
                };
                Parser2.prototype.parseAsyncArgument = function() {
                  var arg = this.parseAssignmentExpression();
                  this.context.firstCoverInitializedNameError = null;
                  return arg;
                };
                Parser2.prototype.parseAsyncArguments = function() {
                  this.expect("(");
                  var args = [];
                  if (!this.match(")")) {
                    while (true) {
                      var expr = this.match("...") ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAsyncArgument);
                      args.push(expr);
                      if (this.match(")")) {
                        break;
                      }
                      this.expectCommaSeparator();
                      if (this.match(")")) {
                        break;
                      }
                    }
                  }
                  this.expect(")");
                  return args;
                };
                Parser2.prototype.parseLeftHandSideExpressionAllowCall = function() {
                  var startToken = this.lookahead;
                  var maybeAsync = this.matchContextualKeyword("async");
                  var previousAllowIn = this.context.allowIn;
                  this.context.allowIn = true;
                  var expr;
                  if (this.matchKeyword("super") && this.context.inFunctionBody) {
                    expr = this.createNode();
                    this.nextToken();
                    expr = this.finalize(expr, new Node.Super());
                    if (!this.match("(") && !this.match(".") && !this.match("[")) {
                      this.throwUnexpectedToken(this.lookahead);
                    }
                  } else {
                    expr = this.inheritCoverGrammar(this.matchKeyword("new") ? this.parseNewExpression : this.parsePrimaryExpression);
                  }
                  while (true) {
                    if (this.match(".")) {
                      this.context.isBindingElement = false;
                      this.context.isAssignmentTarget = true;
                      this.expect(".");
                      var property = this.parseIdentifierName();
                      expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));
                    } else if (this.match("(")) {
                      var asyncArrow = maybeAsync && startToken.lineNumber === this.lookahead.lineNumber;
                      this.context.isBindingElement = false;
                      this.context.isAssignmentTarget = false;
                      var args = asyncArrow ? this.parseAsyncArguments() : this.parseArguments();
                      expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));
                      if (asyncArrow && this.match("=>")) {
                        for (var i = 0; i < args.length; ++i) {
                          this.reinterpretExpressionAsPattern(args[i]);
                        }
                        expr = {
                          type: ArrowParameterPlaceHolder,
                          params: args,
                          async: true
                        };
                      }
                    } else if (this.match("[")) {
                      this.context.isBindingElement = false;
                      this.context.isAssignmentTarget = true;
                      this.expect("[");
                      var property = this.isolateCoverGrammar(this.parseExpression);
                      this.expect("]");
                      expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));
                    } else if (this.lookahead.type === 10 && this.lookahead.head) {
                      var quasi = this.parseTemplateLiteral();
                      expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));
                    } else {
                      break;
                    }
                  }
                  this.context.allowIn = previousAllowIn;
                  return expr;
                };
                Parser2.prototype.parseSuper = function() {
                  var node = this.createNode();
                  this.expectKeyword("super");
                  if (!this.match("[") && !this.match(".")) {
                    this.throwUnexpectedToken(this.lookahead);
                  }
                  return this.finalize(node, new Node.Super());
                };
                Parser2.prototype.parseLeftHandSideExpression = function() {
                  assert_1.assert(this.context.allowIn, "callee of new expression always allow in keyword.");
                  var node = this.startNode(this.lookahead);
                  var expr = this.matchKeyword("super") && this.context.inFunctionBody ? this.parseSuper() : this.inheritCoverGrammar(this.matchKeyword("new") ? this.parseNewExpression : this.parsePrimaryExpression);
                  while (true) {
                    if (this.match("[")) {
                      this.context.isBindingElement = false;
                      this.context.isAssignmentTarget = true;
                      this.expect("[");
                      var property = this.isolateCoverGrammar(this.parseExpression);
                      this.expect("]");
                      expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));
                    } else if (this.match(".")) {
                      this.context.isBindingElement = false;
                      this.context.isAssignmentTarget = true;
                      this.expect(".");
                      var property = this.parseIdentifierName();
                      expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));
                    } else if (this.lookahead.type === 10 && this.lookahead.head) {
                      var quasi = this.parseTemplateLiteral();
                      expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));
                    } else {
                      break;
                    }
                  }
                  return expr;
                };
                Parser2.prototype.parseUpdateExpression = function() {
                  var expr;
                  var startToken = this.lookahead;
                  if (this.match("++") || this.match("--")) {
                    var node = this.startNode(startToken);
                    var token = this.nextToken();
                    expr = this.inheritCoverGrammar(this.parseUnaryExpression);
                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
                      this.tolerateError(messages_1.Messages.StrictLHSPrefix);
                    }
                    if (!this.context.isAssignmentTarget) {
                      this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
                    }
                    var prefix = true;
                    expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));
                    this.context.isAssignmentTarget = false;
                    this.context.isBindingElement = false;
                  } else {
                    expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
                    if (!this.hasLineTerminator && this.lookahead.type === 7) {
                      if (this.match("++") || this.match("--")) {
                        if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
                          this.tolerateError(messages_1.Messages.StrictLHSPostfix);
                        }
                        if (!this.context.isAssignmentTarget) {
                          this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
                        }
                        this.context.isAssignmentTarget = false;
                        this.context.isBindingElement = false;
                        var operator = this.nextToken().value;
                        var prefix = false;
                        expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));
                      }
                    }
                  }
                  return expr;
                };
                Parser2.prototype.parseAwaitExpression = function() {
                  var node = this.createNode();
                  this.nextToken();
                  var argument = this.parseUnaryExpression();
                  return this.finalize(node, new Node.AwaitExpression(argument));
                };
                Parser2.prototype.parseUnaryExpression = function() {
                  var expr;
                  if (this.match("+") || this.match("-") || this.match("~") || this.match("!") || this.matchKeyword("delete") || this.matchKeyword("void") || this.matchKeyword("typeof")) {
                    var node = this.startNode(this.lookahead);
                    var token = this.nextToken();
                    expr = this.inheritCoverGrammar(this.parseUnaryExpression);
                    expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));
                    if (this.context.strict && expr.operator === "delete" && expr.argument.type === syntax_1.Syntax.Identifier) {
                      this.tolerateError(messages_1.Messages.StrictDelete);
                    }
                    this.context.isAssignmentTarget = false;
                    this.context.isBindingElement = false;
                  } else if (this.context.await && this.matchContextualKeyword("await")) {
                    expr = this.parseAwaitExpression();
                  } else {
                    expr = this.parseUpdateExpression();
                  }
                  return expr;
                };
                Parser2.prototype.parseExponentiationExpression = function() {
                  var startToken = this.lookahead;
                  var expr = this.inheritCoverGrammar(this.parseUnaryExpression);
                  if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match("**")) {
                    this.nextToken();
                    this.context.isAssignmentTarget = false;
                    this.context.isBindingElement = false;
                    var left = expr;
                    var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
                    expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression("**", left, right));
                  }
                  return expr;
                };
                Parser2.prototype.binaryPrecedence = function(token) {
                  var op = token.value;
                  var precedence;
                  if (token.type === 7) {
                    precedence = this.operatorPrecedence[op] || 0;
                  } else if (token.type === 4) {
                    precedence = op === "instanceof" || this.context.allowIn && op === "in" ? 7 : 0;
                  } else {
                    precedence = 0;
                  }
                  return precedence;
                };
                Parser2.prototype.parseBinaryExpression = function() {
                  var startToken = this.lookahead;
                  var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);
                  var token = this.lookahead;
                  var prec = this.binaryPrecedence(token);
                  if (prec > 0) {
                    this.nextToken();
                    this.context.isAssignmentTarget = false;
                    this.context.isBindingElement = false;
                    var markers = [startToken, this.lookahead];
                    var left = expr;
                    var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
                    var stack = [left, token.value, right];
                    var precedences = [prec];
                    while (true) {
                      prec = this.binaryPrecedence(this.lookahead);
                      if (prec <= 0) {
                        break;
                      }
                      while (stack.length > 2 && prec <= precedences[precedences.length - 1]) {
                        right = stack.pop();
                        var operator = stack.pop();
                        precedences.pop();
                        left = stack.pop();
                        markers.pop();
                        var node = this.startNode(markers[markers.length - 1]);
                        stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));
                      }
                      stack.push(this.nextToken().value);
                      precedences.push(prec);
                      markers.push(this.lookahead);
                      stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));
                    }
                    var i = stack.length - 1;
                    expr = stack[i];
                    var lastMarker = markers.pop();
                    while (i > 1) {
                      var marker = markers.pop();
                      var lastLineStart = lastMarker && lastMarker.lineStart;
                      var node = this.startNode(marker, lastLineStart);
                      var operator = stack[i - 1];
                      expr = this.finalize(node, new Node.BinaryExpression(operator, stack[i - 2], expr));
                      i -= 2;
                      lastMarker = marker;
                    }
                  }
                  return expr;
                };
                Parser2.prototype.parseConditionalExpression = function() {
                  var startToken = this.lookahead;
                  var expr = this.inheritCoverGrammar(this.parseBinaryExpression);
                  if (this.match("?")) {
                    this.nextToken();
                    var previousAllowIn = this.context.allowIn;
                    this.context.allowIn = true;
                    var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);
                    this.context.allowIn = previousAllowIn;
                    this.expect(":");
                    var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);
                    expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));
                    this.context.isAssignmentTarget = false;
                    this.context.isBindingElement = false;
                  }
                  return expr;
                };
                Parser2.prototype.checkPatternParam = function(options, param) {
                  switch (param.type) {
                    case syntax_1.Syntax.Identifier:
                      this.validateParam(options, param, param.name);
                      break;
                    case syntax_1.Syntax.RestElement:
                      this.checkPatternParam(options, param.argument);
                      break;
                    case syntax_1.Syntax.AssignmentPattern:
                      this.checkPatternParam(options, param.left);
                      break;
                    case syntax_1.Syntax.ArrayPattern:
                      for (var i = 0; i < param.elements.length; i++) {
                        if (param.elements[i] !== null) {
                          this.checkPatternParam(options, param.elements[i]);
                        }
                      }
                      break;
                    case syntax_1.Syntax.ObjectPattern:
                      for (var i = 0; i < param.properties.length; i++) {
                        this.checkPatternParam(options, param.properties[i].value);
                      }
                      break;
                    default:
                      break;
                  }
                  options.simple = options.simple && param instanceof Node.Identifier;
                };
                Parser2.prototype.reinterpretAsCoverFormalsList = function(expr) {
                  var params = [expr];
                  var options;
                  var asyncArrow = false;
                  switch (expr.type) {
                    case syntax_1.Syntax.Identifier:
                      break;
                    case ArrowParameterPlaceHolder:
                      params = expr.params;
                      asyncArrow = expr.async;
                      break;
                    default:
                      return null;
                  }
                  options = {
                    simple: true,
                    paramSet: {}
                  };
                  for (var i = 0; i < params.length; ++i) {
                    var param = params[i];
                    if (param.type === syntax_1.Syntax.AssignmentPattern) {
                      if (param.right.type === syntax_1.Syntax.YieldExpression) {
                        if (param.right.argument) {
                          this.throwUnexpectedToken(this.lookahead);
                        }
                        param.right.type = syntax_1.Syntax.Identifier;
                        param.right.name = "yield";
                        delete param.right.argument;
                        delete param.right.delegate;
                      }
                    } else if (asyncArrow && param.type === syntax_1.Syntax.Identifier && param.name === "await") {
                      this.throwUnexpectedToken(this.lookahead);
                    }
                    this.checkPatternParam(options, param);
                    params[i] = param;
                  }
                  if (this.context.strict || !this.context.allowYield) {
                    for (var i = 0; i < params.length; ++i) {
                      var param = params[i];
                      if (param.type === syntax_1.Syntax.YieldExpression) {
                        this.throwUnexpectedToken(this.lookahead);
                      }
                    }
                  }
                  if (options.message === messages_1.Messages.StrictParamDupe) {
                    var token = this.context.strict ? options.stricted : options.firstRestricted;
                    this.throwUnexpectedToken(token, options.message);
                  }
                  return {
                    simple: options.simple,
                    params,
                    stricted: options.stricted,
                    firstRestricted: options.firstRestricted,
                    message: options.message
                  };
                };
                Parser2.prototype.parseAssignmentExpression = function() {
                  var expr;
                  if (!this.context.allowYield && this.matchKeyword("yield")) {
                    expr = this.parseYieldExpression();
                  } else {
                    var startToken = this.lookahead;
                    var token = startToken;
                    expr = this.parseConditionalExpression();
                    if (token.type === 3 && token.lineNumber === this.lookahead.lineNumber && token.value === "async") {
                      if (this.lookahead.type === 3 || this.matchKeyword("yield")) {
                        var arg = this.parsePrimaryExpression();
                        this.reinterpretExpressionAsPattern(arg);
                        expr = {
                          type: ArrowParameterPlaceHolder,
                          params: [arg],
                          async: true
                        };
                      }
                    }
                    if (expr.type === ArrowParameterPlaceHolder || this.match("=>")) {
                      this.context.isAssignmentTarget = false;
                      this.context.isBindingElement = false;
                      var isAsync = expr.async;
                      var list = this.reinterpretAsCoverFormalsList(expr);
                      if (list) {
                        if (this.hasLineTerminator) {
                          this.tolerateUnexpectedToken(this.lookahead);
                        }
                        this.context.firstCoverInitializedNameError = null;
                        var previousStrict = this.context.strict;
                        var previousAllowStrictDirective = this.context.allowStrictDirective;
                        this.context.allowStrictDirective = list.simple;
                        var previousAllowYield = this.context.allowYield;
                        var previousAwait = this.context.await;
                        this.context.allowYield = true;
                        this.context.await = isAsync;
                        var node = this.startNode(startToken);
                        this.expect("=>");
                        var body = void 0;
                        if (this.match("{")) {
                          var previousAllowIn = this.context.allowIn;
                          this.context.allowIn = true;
                          body = this.parseFunctionSourceElements();
                          this.context.allowIn = previousAllowIn;
                        } else {
                          body = this.isolateCoverGrammar(this.parseAssignmentExpression);
                        }
                        var expression = body.type !== syntax_1.Syntax.BlockStatement;
                        if (this.context.strict && list.firstRestricted) {
                          this.throwUnexpectedToken(list.firstRestricted, list.message);
                        }
                        if (this.context.strict && list.stricted) {
                          this.tolerateUnexpectedToken(list.stricted, list.message);
                        }
                        expr = isAsync ? this.finalize(node, new Node.AsyncArrowFunctionExpression(list.params, body, expression)) : this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));
                        this.context.strict = previousStrict;
                        this.context.allowStrictDirective = previousAllowStrictDirective;
                        this.context.allowYield = previousAllowYield;
                        this.context.await = previousAwait;
                      }
                    } else {
                      if (this.matchAssign()) {
                        if (!this.context.isAssignmentTarget) {
                          this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
                        }
                        if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {
                          var id = expr;
                          if (this.scanner.isRestrictedWord(id.name)) {
                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);
                          }
                          if (this.scanner.isStrictModeReservedWord(id.name)) {
                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
                          }
                        }
                        if (!this.match("=")) {
                          this.context.isAssignmentTarget = false;
                          this.context.isBindingElement = false;
                        } else {
                          this.reinterpretExpressionAsPattern(expr);
                        }
                        token = this.nextToken();
                        var operator = token.value;
                        var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
                        expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(operator, expr, right));
                        this.context.firstCoverInitializedNameError = null;
                      }
                    }
                  }
                  return expr;
                };
                Parser2.prototype.parseExpression = function() {
                  var startToken = this.lookahead;
                  var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);
                  if (this.match(",")) {
                    var expressions = [];
                    expressions.push(expr);
                    while (this.lookahead.type !== 2) {
                      if (!this.match(",")) {
                        break;
                      }
                      this.nextToken();
                      expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
                    }
                    expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
                  }
                  return expr;
                };
                Parser2.prototype.parseStatementListItem = function() {
                  var statement;
                  this.context.isAssignmentTarget = true;
                  this.context.isBindingElement = true;
                  if (this.lookahead.type === 4) {
                    switch (this.lookahead.value) {
                      case "export":
                        if (!this.context.isModule) {
                          this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);
                        }
                        statement = this.parseExportDeclaration();
                        break;
                      case "import":
                        if (!this.context.isModule) {
                          this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);
                        }
                        statement = this.parseImportDeclaration();
                        break;
                      case "const":
                        statement = this.parseLexicalDeclaration({ inFor: false });
                        break;
                      case "function":
                        statement = this.parseFunctionDeclaration();
                        break;
                      case "class":
                        statement = this.parseClassDeclaration();
                        break;
                      case "let":
                        statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();
                        break;
                      default:
                        statement = this.parseStatement();
                        break;
                    }
                  } else {
                    statement = this.parseStatement();
                  }
                  return statement;
                };
                Parser2.prototype.parseBlock = function() {
                  var node = this.createNode();
                  this.expect("{");
                  var block = [];
                  while (true) {
                    if (this.match("}")) {
                      break;
                    }
                    block.push(this.parseStatementListItem());
                  }
                  this.expect("}");
                  return this.finalize(node, new Node.BlockStatement(block));
                };
                Parser2.prototype.parseLexicalBinding = function(kind, options) {
                  var node = this.createNode();
                  var params = [];
                  var id = this.parsePattern(params, kind);
                  if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
                    if (this.scanner.isRestrictedWord(id.name)) {
                      this.tolerateError(messages_1.Messages.StrictVarName);
                    }
                  }
                  var init = null;
                  if (kind === "const") {
                    if (!this.matchKeyword("in") && !this.matchContextualKeyword("of")) {
                      if (this.match("=")) {
                        this.nextToken();
                        init = this.isolateCoverGrammar(this.parseAssignmentExpression);
                      } else {
                        this.throwError(messages_1.Messages.DeclarationMissingInitializer, "const");
                      }
                    }
                  } else if (!options.inFor && id.type !== syntax_1.Syntax.Identifier || this.match("=")) {
                    this.expect("=");
                    init = this.isolateCoverGrammar(this.parseAssignmentExpression);
                  }
                  return this.finalize(node, new Node.VariableDeclarator(id, init));
                };
                Parser2.prototype.parseBindingList = function(kind, options) {
                  var list = [this.parseLexicalBinding(kind, options)];
                  while (this.match(",")) {
                    this.nextToken();
                    list.push(this.parseLexicalBinding(kind, options));
                  }
                  return list;
                };
                Parser2.prototype.isLexicalDeclaration = function() {
                  var state = this.scanner.saveState();
                  this.scanner.scanComments();
                  var next = this.scanner.lex();
                  this.scanner.restoreState(state);
                  return next.type === 3 || next.type === 7 && next.value === "[" || next.type === 7 && next.value === "{" || next.type === 4 && next.value === "let" || next.type === 4 && next.value === "yield";
                };
                Parser2.prototype.parseLexicalDeclaration = function(options) {
                  var node = this.createNode();
                  var kind = this.nextToken().value;
                  assert_1.assert(kind === "let" || kind === "const", "Lexical declaration must be either let or const");
                  var declarations = this.parseBindingList(kind, options);
                  this.consumeSemicolon();
                  return this.finalize(node, new Node.VariableDeclaration(declarations, kind));
                };
                Parser2.prototype.parseBindingRestElement = function(params, kind) {
                  var node = this.createNode();
                  this.expect("...");
                  var arg = this.parsePattern(params, kind);
                  return this.finalize(node, new Node.RestElement(arg));
                };
                Parser2.prototype.parseArrayPattern = function(params, kind) {
                  var node = this.createNode();
                  this.expect("[");
                  var elements = [];
                  while (!this.match("]")) {
                    if (this.match(",")) {
                      this.nextToken();
                      elements.push(null);
                    } else {
                      if (this.match("...")) {
                        elements.push(this.parseBindingRestElement(params, kind));
                        break;
                      } else {
                        elements.push(this.parsePatternWithDefault(params, kind));
                      }
                      if (!this.match("]")) {
                        this.expect(",");
                      }
                    }
                  }
                  this.expect("]");
                  return this.finalize(node, new Node.ArrayPattern(elements));
                };
                Parser2.prototype.parsePropertyPattern = function(params, kind) {
                  var node = this.createNode();
                  var computed = false;
                  var shorthand = false;
                  var method = false;
                  var key;
                  var value;
                  if (this.lookahead.type === 3) {
                    var keyToken = this.lookahead;
                    key = this.parseVariableIdentifier();
                    var init = this.finalize(node, new Node.Identifier(keyToken.value));
                    if (this.match("=")) {
                      params.push(keyToken);
                      shorthand = true;
                      this.nextToken();
                      var expr = this.parseAssignmentExpression();
                      value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));
                    } else if (!this.match(":")) {
                      params.push(keyToken);
                      shorthand = true;
                      value = init;
                    } else {
                      this.expect(":");
                      value = this.parsePatternWithDefault(params, kind);
                    }
                  } else {
                    computed = this.match("[");
                    key = this.parseObjectPropertyKey();
                    this.expect(":");
                    value = this.parsePatternWithDefault(params, kind);
                  }
                  return this.finalize(node, new Node.Property("init", key, computed, value, method, shorthand));
                };
                Parser2.prototype.parseObjectPattern = function(params, kind) {
                  var node = this.createNode();
                  var properties = [];
                  this.expect("{");
                  while (!this.match("}")) {
                    properties.push(this.parsePropertyPattern(params, kind));
                    if (!this.match("}")) {
                      this.expect(",");
                    }
                  }
                  this.expect("}");
                  return this.finalize(node, new Node.ObjectPattern(properties));
                };
                Parser2.prototype.parsePattern = function(params, kind) {
                  var pattern;
                  if (this.match("[")) {
                    pattern = this.parseArrayPattern(params, kind);
                  } else if (this.match("{")) {
                    pattern = this.parseObjectPattern(params, kind);
                  } else {
                    if (this.matchKeyword("let") && (kind === "const" || kind === "let")) {
                      this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.LetInLexicalBinding);
                    }
                    params.push(this.lookahead);
                    pattern = this.parseVariableIdentifier(kind);
                  }
                  return pattern;
                };
                Parser2.prototype.parsePatternWithDefault = function(params, kind) {
                  var startToken = this.lookahead;
                  var pattern = this.parsePattern(params, kind);
                  if (this.match("=")) {
                    this.nextToken();
                    var previousAllowYield = this.context.allowYield;
                    this.context.allowYield = true;
                    var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
                    this.context.allowYield = previousAllowYield;
                    pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));
                  }
                  return pattern;
                };
                Parser2.prototype.parseVariableIdentifier = function(kind) {
                  var node = this.createNode();
                  var token = this.nextToken();
                  if (token.type === 4 && token.value === "yield") {
                    if (this.context.strict) {
                      this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
                    } else if (!this.context.allowYield) {
                      this.throwUnexpectedToken(token);
                    }
                  } else if (token.type !== 3) {
                    if (this.context.strict && token.type === 4 && this.scanner.isStrictModeReservedWord(token.value)) {
                      this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
                    } else {
                      if (this.context.strict || token.value !== "let" || kind !== "var") {
                        this.throwUnexpectedToken(token);
                      }
                    }
                  } else if ((this.context.isModule || this.context.await) && token.type === 3 && token.value === "await") {
                    this.tolerateUnexpectedToken(token);
                  }
                  return this.finalize(node, new Node.Identifier(token.value));
                };
                Parser2.prototype.parseVariableDeclaration = function(options) {
                  var node = this.createNode();
                  var params = [];
                  var id = this.parsePattern(params, "var");
                  if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
                    if (this.scanner.isRestrictedWord(id.name)) {
                      this.tolerateError(messages_1.Messages.StrictVarName);
                    }
                  }
                  var init = null;
                  if (this.match("=")) {
                    this.nextToken();
                    init = this.isolateCoverGrammar(this.parseAssignmentExpression);
                  } else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {
                    this.expect("=");
                  }
                  return this.finalize(node, new Node.VariableDeclarator(id, init));
                };
                Parser2.prototype.parseVariableDeclarationList = function(options) {
                  var opt = { inFor: options.inFor };
                  var list = [];
                  list.push(this.parseVariableDeclaration(opt));
                  while (this.match(",")) {
                    this.nextToken();
                    list.push(this.parseVariableDeclaration(opt));
                  }
                  return list;
                };
                Parser2.prototype.parseVariableStatement = function() {
                  var node = this.createNode();
                  this.expectKeyword("var");
                  var declarations = this.parseVariableDeclarationList({ inFor: false });
                  this.consumeSemicolon();
                  return this.finalize(node, new Node.VariableDeclaration(declarations, "var"));
                };
                Parser2.prototype.parseEmptyStatement = function() {
                  var node = this.createNode();
                  this.expect(";");
                  return this.finalize(node, new Node.EmptyStatement());
                };
                Parser2.prototype.parseExpressionStatement = function() {
                  var node = this.createNode();
                  var expr = this.parseExpression();
                  this.consumeSemicolon();
                  return this.finalize(node, new Node.ExpressionStatement(expr));
                };
                Parser2.prototype.parseIfClause = function() {
                  if (this.context.strict && this.matchKeyword("function")) {
                    this.tolerateError(messages_1.Messages.StrictFunction);
                  }
                  return this.parseStatement();
                };
                Parser2.prototype.parseIfStatement = function() {
                  var node = this.createNode();
                  var consequent;
                  var alternate = null;
                  this.expectKeyword("if");
                  this.expect("(");
                  var test = this.parseExpression();
                  if (!this.match(")") && this.config.tolerant) {
                    this.tolerateUnexpectedToken(this.nextToken());
                    consequent = this.finalize(this.createNode(), new Node.EmptyStatement());
                  } else {
                    this.expect(")");
                    consequent = this.parseIfClause();
                    if (this.matchKeyword("else")) {
                      this.nextToken();
                      alternate = this.parseIfClause();
                    }
                  }
                  return this.finalize(node, new Node.IfStatement(test, consequent, alternate));
                };
                Parser2.prototype.parseDoWhileStatement = function() {
                  var node = this.createNode();
                  this.expectKeyword("do");
                  var previousInIteration = this.context.inIteration;
                  this.context.inIteration = true;
                  var body = this.parseStatement();
                  this.context.inIteration = previousInIteration;
                  this.expectKeyword("while");
                  this.expect("(");
                  var test = this.parseExpression();
                  if (!this.match(")") && this.config.tolerant) {
                    this.tolerateUnexpectedToken(this.nextToken());
                  } else {
                    this.expect(")");
                    if (this.match(";")) {
                      this.nextToken();
                    }
                  }
                  return this.finalize(node, new Node.DoWhileStatement(body, test));
                };
                Parser2.prototype.parseWhileStatement = function() {
                  var node = this.createNode();
                  var body;
                  this.expectKeyword("while");
                  this.expect("(");
                  var test = this.parseExpression();
                  if (!this.match(")") && this.config.tolerant) {
                    this.tolerateUnexpectedToken(this.nextToken());
                    body = this.finalize(this.createNode(), new Node.EmptyStatement());
                  } else {
                    this.expect(")");
                    var previousInIteration = this.context.inIteration;
                    this.context.inIteration = true;
                    body = this.parseStatement();
                    this.context.inIteration = previousInIteration;
                  }
                  return this.finalize(node, new Node.WhileStatement(test, body));
                };
                Parser2.prototype.parseForStatement = function() {
                  var init = null;
                  var test = null;
                  var update = null;
                  var forIn = true;
                  var left, right;
                  var node = this.createNode();
                  this.expectKeyword("for");
                  this.expect("(");
                  if (this.match(";")) {
                    this.nextToken();
                  } else {
                    if (this.matchKeyword("var")) {
                      init = this.createNode();
                      this.nextToken();
                      var previousAllowIn = this.context.allowIn;
                      this.context.allowIn = false;
                      var declarations = this.parseVariableDeclarationList({ inFor: true });
                      this.context.allowIn = previousAllowIn;
                      if (declarations.length === 1 && this.matchKeyword("in")) {
                        var decl = declarations[0];
                        if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {
                          this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, "for-in");
                        }
                        init = this.finalize(init, new Node.VariableDeclaration(declarations, "var"));
                        this.nextToken();
                        left = init;
                        right = this.parseExpression();
                        init = null;
                      } else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword("of")) {
                        init = this.finalize(init, new Node.VariableDeclaration(declarations, "var"));
                        this.nextToken();
                        left = init;
                        right = this.parseAssignmentExpression();
                        init = null;
                        forIn = false;
                      } else {
                        init = this.finalize(init, new Node.VariableDeclaration(declarations, "var"));
                        this.expect(";");
                      }
                    } else if (this.matchKeyword("const") || this.matchKeyword("let")) {
                      init = this.createNode();
                      var kind = this.nextToken().value;
                      if (!this.context.strict && this.lookahead.value === "in") {
                        init = this.finalize(init, new Node.Identifier(kind));
                        this.nextToken();
                        left = init;
                        right = this.parseExpression();
                        init = null;
                      } else {
                        var previousAllowIn = this.context.allowIn;
                        this.context.allowIn = false;
                        var declarations = this.parseBindingList(kind, { inFor: true });
                        this.context.allowIn = previousAllowIn;
                        if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword("in")) {
                          init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
                          this.nextToken();
                          left = init;
                          right = this.parseExpression();
                          init = null;
                        } else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword("of")) {
                          init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
                          this.nextToken();
                          left = init;
                          right = this.parseAssignmentExpression();
                          init = null;
                          forIn = false;
                        } else {
                          this.consumeSemicolon();
                          init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
                        }
                      }
                    } else {
                      var initStartToken = this.lookahead;
                      var previousAllowIn = this.context.allowIn;
                      this.context.allowIn = false;
                      init = this.inheritCoverGrammar(this.parseAssignmentExpression);
                      this.context.allowIn = previousAllowIn;
                      if (this.matchKeyword("in")) {
                        if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
                          this.tolerateError(messages_1.Messages.InvalidLHSInForIn);
                        }
                        this.nextToken();
                        this.reinterpretExpressionAsPattern(init);
                        left = init;
                        right = this.parseExpression();
                        init = null;
                      } else if (this.matchContextualKeyword("of")) {
                        if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
                          this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);
                        }
                        this.nextToken();
                        this.reinterpretExpressionAsPattern(init);
                        left = init;
                        right = this.parseAssignmentExpression();
                        init = null;
                        forIn = false;
                      } else {
                        if (this.match(",")) {
                          var initSeq = [init];
                          while (this.match(",")) {
                            this.nextToken();
                            initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
                          }
                          init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));
                        }
                        this.expect(";");
                      }
                    }
                  }
                  if (typeof left === "undefined") {
                    if (!this.match(";")) {
                      test = this.parseExpression();
                    }
                    this.expect(";");
                    if (!this.match(")")) {
                      update = this.parseExpression();
                    }
                  }
                  var body;
                  if (!this.match(")") && this.config.tolerant) {
                    this.tolerateUnexpectedToken(this.nextToken());
                    body = this.finalize(this.createNode(), new Node.EmptyStatement());
                  } else {
                    this.expect(")");
                    var previousInIteration = this.context.inIteration;
                    this.context.inIteration = true;
                    body = this.isolateCoverGrammar(this.parseStatement);
                    this.context.inIteration = previousInIteration;
                  }
                  return typeof left === "undefined" ? this.finalize(node, new Node.ForStatement(init, test, update, body)) : forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) : this.finalize(node, new Node.ForOfStatement(left, right, body));
                };
                Parser2.prototype.parseContinueStatement = function() {
                  var node = this.createNode();
                  this.expectKeyword("continue");
                  var label = null;
                  if (this.lookahead.type === 3 && !this.hasLineTerminator) {
                    var id = this.parseVariableIdentifier();
                    label = id;
                    var key = "$" + id.name;
                    if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
                      this.throwError(messages_1.Messages.UnknownLabel, id.name);
                    }
                  }
                  this.consumeSemicolon();
                  if (label === null && !this.context.inIteration) {
                    this.throwError(messages_1.Messages.IllegalContinue);
                  }
                  return this.finalize(node, new Node.ContinueStatement(label));
                };
                Parser2.prototype.parseBreakStatement = function() {
                  var node = this.createNode();
                  this.expectKeyword("break");
                  var label = null;
                  if (this.lookahead.type === 3 && !this.hasLineTerminator) {
                    var id = this.parseVariableIdentifier();
                    var key = "$" + id.name;
                    if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
                      this.throwError(messages_1.Messages.UnknownLabel, id.name);
                    }
                    label = id;
                  }
                  this.consumeSemicolon();
                  if (label === null && !this.context.inIteration && !this.context.inSwitch) {
                    this.throwError(messages_1.Messages.IllegalBreak);
                  }
                  return this.finalize(node, new Node.BreakStatement(label));
                };
                Parser2.prototype.parseReturnStatement = function() {
                  if (!this.context.inFunctionBody) {
                    this.tolerateError(messages_1.Messages.IllegalReturn);
                  }
                  var node = this.createNode();
                  this.expectKeyword("return");
                  var hasArgument = !this.match(";") && !this.match("}") && !this.hasLineTerminator && this.lookahead.type !== 2 || this.lookahead.type === 8 || this.lookahead.type === 10;
                  var argument = hasArgument ? this.parseExpression() : null;
                  this.consumeSemicolon();
                  return this.finalize(node, new Node.ReturnStatement(argument));
                };
                Parser2.prototype.parseWithStatement = function() {
                  if (this.context.strict) {
                    this.tolerateError(messages_1.Messages.StrictModeWith);
                  }
                  var node = this.createNode();
                  var body;
                  this.expectKeyword("with");
                  this.expect("(");
                  var object = this.parseExpression();
                  if (!this.match(")") && this.config.tolerant) {
                    this.tolerateUnexpectedToken(this.nextToken());
                    body = this.finalize(this.createNode(), new Node.EmptyStatement());
                  } else {
                    this.expect(")");
                    body = this.parseStatement();
                  }
                  return this.finalize(node, new Node.WithStatement(object, body));
                };
                Parser2.prototype.parseSwitchCase = function() {
                  var node = this.createNode();
                  var test;
                  if (this.matchKeyword("default")) {
                    this.nextToken();
                    test = null;
                  } else {
                    this.expectKeyword("case");
                    test = this.parseExpression();
                  }
                  this.expect(":");
                  var consequent = [];
                  while (true) {
                    if (this.match("}") || this.matchKeyword("default") || this.matchKeyword("case")) {
                      break;
                    }
                    consequent.push(this.parseStatementListItem());
                  }
                  return this.finalize(node, new Node.SwitchCase(test, consequent));
                };
                Parser2.prototype.parseSwitchStatement = function() {
                  var node = this.createNode();
                  this.expectKeyword("switch");
                  this.expect("(");
                  var discriminant = this.parseExpression();
                  this.expect(")");
                  var previousInSwitch = this.context.inSwitch;
                  this.context.inSwitch = true;
                  var cases = [];
                  var defaultFound = false;
                  this.expect("{");
                  while (true) {
                    if (this.match("}")) {
                      break;
                    }
                    var clause = this.parseSwitchCase();
                    if (clause.test === null) {
                      if (defaultFound) {
                        this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);
                      }
                      defaultFound = true;
                    }
                    cases.push(clause);
                  }
                  this.expect("}");
                  this.context.inSwitch = previousInSwitch;
                  return this.finalize(node, new Node.SwitchStatement(discriminant, cases));
                };
                Parser2.prototype.parseLabelledStatement = function() {
                  var node = this.createNode();
                  var expr = this.parseExpression();
                  var statement;
                  if (expr.type === syntax_1.Syntax.Identifier && this.match(":")) {
                    this.nextToken();
                    var id = expr;
                    var key = "$" + id.name;
                    if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
                      this.throwError(messages_1.Messages.Redeclaration, "Label", id.name);
                    }
                    this.context.labelSet[key] = true;
                    var body = void 0;
                    if (this.matchKeyword("class")) {
                      this.tolerateUnexpectedToken(this.lookahead);
                      body = this.parseClassDeclaration();
                    } else if (this.matchKeyword("function")) {
                      var token = this.lookahead;
                      var declaration = this.parseFunctionDeclaration();
                      if (this.context.strict) {
                        this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunction);
                      } else if (declaration.generator) {
                        this.tolerateUnexpectedToken(token, messages_1.Messages.GeneratorInLegacyContext);
                      }
                      body = declaration;
                    } else {
                      body = this.parseStatement();
                    }
                    delete this.context.labelSet[key];
                    statement = new Node.LabeledStatement(id, body);
                  } else {
                    this.consumeSemicolon();
                    statement = new Node.ExpressionStatement(expr);
                  }
                  return this.finalize(node, statement);
                };
                Parser2.prototype.parseThrowStatement = function() {
                  var node = this.createNode();
                  this.expectKeyword("throw");
                  if (this.hasLineTerminator) {
                    this.throwError(messages_1.Messages.NewlineAfterThrow);
                  }
                  var argument = this.parseExpression();
                  this.consumeSemicolon();
                  return this.finalize(node, new Node.ThrowStatement(argument));
                };
                Parser2.prototype.parseCatchClause = function() {
                  var node = this.createNode();
                  this.expectKeyword("catch");
                  this.expect("(");
                  if (this.match(")")) {
                    this.throwUnexpectedToken(this.lookahead);
                  }
                  var params = [];
                  var param = this.parsePattern(params);
                  var paramMap = {};
                  for (var i = 0; i < params.length; i++) {
                    var key = "$" + params[i].value;
                    if (Object.prototype.hasOwnProperty.call(paramMap, key)) {
                      this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);
                    }
                    paramMap[key] = true;
                  }
                  if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {
                    if (this.scanner.isRestrictedWord(param.name)) {
                      this.tolerateError(messages_1.Messages.StrictCatchVariable);
                    }
                  }
                  this.expect(")");
                  var body = this.parseBlock();
                  return this.finalize(node, new Node.CatchClause(param, body));
                };
                Parser2.prototype.parseFinallyClause = function() {
                  this.expectKeyword("finally");
                  return this.parseBlock();
                };
                Parser2.prototype.parseTryStatement = function() {
                  var node = this.createNode();
                  this.expectKeyword("try");
                  var block = this.parseBlock();
                  var handler = this.matchKeyword("catch") ? this.parseCatchClause() : null;
                  var finalizer = this.matchKeyword("finally") ? this.parseFinallyClause() : null;
                  if (!handler && !finalizer) {
                    this.throwError(messages_1.Messages.NoCatchOrFinally);
                  }
                  return this.finalize(node, new Node.TryStatement(block, handler, finalizer));
                };
                Parser2.prototype.parseDebuggerStatement = function() {
                  var node = this.createNode();
                  this.expectKeyword("debugger");
                  this.consumeSemicolon();
                  return this.finalize(node, new Node.DebuggerStatement());
                };
                Parser2.prototype.parseStatement = function() {
                  var statement;
                  switch (this.lookahead.type) {
                    case 1:
                    case 5:
                    case 6:
                    case 8:
                    case 10:
                    case 9:
                      statement = this.parseExpressionStatement();
                      break;
                    case 7:
                      var value = this.lookahead.value;
                      if (value === "{") {
                        statement = this.parseBlock();
                      } else if (value === "(") {
                        statement = this.parseExpressionStatement();
                      } else if (value === ";") {
                        statement = this.parseEmptyStatement();
                      } else {
                        statement = this.parseExpressionStatement();
                      }
                      break;
                    case 3:
                      statement = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();
                      break;
                    case 4:
                      switch (this.lookahead.value) {
                        case "break":
                          statement = this.parseBreakStatement();
                          break;
                        case "continue":
                          statement = this.parseContinueStatement();
                          break;
                        case "debugger":
                          statement = this.parseDebuggerStatement();
                          break;
                        case "do":
                          statement = this.parseDoWhileStatement();
                          break;
                        case "for":
                          statement = this.parseForStatement();
                          break;
                        case "function":
                          statement = this.parseFunctionDeclaration();
                          break;
                        case "if":
                          statement = this.parseIfStatement();
                          break;
                        case "return":
                          statement = this.parseReturnStatement();
                          break;
                        case "switch":
                          statement = this.parseSwitchStatement();
                          break;
                        case "throw":
                          statement = this.parseThrowStatement();
                          break;
                        case "try":
                          statement = this.parseTryStatement();
                          break;
                        case "var":
                          statement = this.parseVariableStatement();
                          break;
                        case "while":
                          statement = this.parseWhileStatement();
                          break;
                        case "with":
                          statement = this.parseWithStatement();
                          break;
                        default:
                          statement = this.parseExpressionStatement();
                          break;
                      }
                      break;
                    default:
                      statement = this.throwUnexpectedToken(this.lookahead);
                  }
                  return statement;
                };
                Parser2.prototype.parseFunctionSourceElements = function() {
                  var node = this.createNode();
                  this.expect("{");
                  var body = this.parseDirectivePrologues();
                  var previousLabelSet = this.context.labelSet;
                  var previousInIteration = this.context.inIteration;
                  var previousInSwitch = this.context.inSwitch;
                  var previousInFunctionBody = this.context.inFunctionBody;
                  this.context.labelSet = {};
                  this.context.inIteration = false;
                  this.context.inSwitch = false;
                  this.context.inFunctionBody = true;
                  while (this.lookahead.type !== 2) {
                    if (this.match("}")) {
                      break;
                    }
                    body.push(this.parseStatementListItem());
                  }
                  this.expect("}");
                  this.context.labelSet = previousLabelSet;
                  this.context.inIteration = previousInIteration;
                  this.context.inSwitch = previousInSwitch;
                  this.context.inFunctionBody = previousInFunctionBody;
                  return this.finalize(node, new Node.BlockStatement(body));
                };
                Parser2.prototype.validateParam = function(options, param, name) {
                  var key = "$" + name;
                  if (this.context.strict) {
                    if (this.scanner.isRestrictedWord(name)) {
                      options.stricted = param;
                      options.message = messages_1.Messages.StrictParamName;
                    }
                    if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
                      options.stricted = param;
                      options.message = messages_1.Messages.StrictParamDupe;
                    }
                  } else if (!options.firstRestricted) {
                    if (this.scanner.isRestrictedWord(name)) {
                      options.firstRestricted = param;
                      options.message = messages_1.Messages.StrictParamName;
                    } else if (this.scanner.isStrictModeReservedWord(name)) {
                      options.firstRestricted = param;
                      options.message = messages_1.Messages.StrictReservedWord;
                    } else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
                      options.stricted = param;
                      options.message = messages_1.Messages.StrictParamDupe;
                    }
                  }
                  if (typeof Object.defineProperty === "function") {
                    Object.defineProperty(options.paramSet, key, { value: true, enumerable: true, writable: true, configurable: true });
                  } else {
                    options.paramSet[key] = true;
                  }
                };
                Parser2.prototype.parseRestElement = function(params) {
                  var node = this.createNode();
                  this.expect("...");
                  var arg = this.parsePattern(params);
                  if (this.match("=")) {
                    this.throwError(messages_1.Messages.DefaultRestParameter);
                  }
                  if (!this.match(")")) {
                    this.throwError(messages_1.Messages.ParameterAfterRestParameter);
                  }
                  return this.finalize(node, new Node.RestElement(arg));
                };
                Parser2.prototype.parseFormalParameter = function(options) {
                  var params = [];
                  var param = this.match("...") ? this.parseRestElement(params) : this.parsePatternWithDefault(params);
                  for (var i = 0; i < params.length; i++) {
                    this.validateParam(options, params[i], params[i].value);
                  }
                  options.simple = options.simple && param instanceof Node.Identifier;
                  options.params.push(param);
                };
                Parser2.prototype.parseFormalParameters = function(firstRestricted) {
                  var options;
                  options = {
                    simple: true,
                    params: [],
                    firstRestricted
                  };
                  this.expect("(");
                  if (!this.match(")")) {
                    options.paramSet = {};
                    while (this.lookahead.type !== 2) {
                      this.parseFormalParameter(options);
                      if (this.match(")")) {
                        break;
                      }
                      this.expect(",");
                      if (this.match(")")) {
                        break;
                      }
                    }
                  }
                  this.expect(")");
                  return {
                    simple: options.simple,
                    params: options.params,
                    stricted: options.stricted,
                    firstRestricted: options.firstRestricted,
                    message: options.message
                  };
                };
                Parser2.prototype.matchAsyncFunction = function() {
                  var match = this.matchContextualKeyword("async");
                  if (match) {
                    var state = this.scanner.saveState();
                    this.scanner.scanComments();
                    var next = this.scanner.lex();
                    this.scanner.restoreState(state);
                    match = state.lineNumber === next.lineNumber && next.type === 4 && next.value === "function";
                  }
                  return match;
                };
                Parser2.prototype.parseFunctionDeclaration = function(identifierIsOptional) {
                  var node = this.createNode();
                  var isAsync = this.matchContextualKeyword("async");
                  if (isAsync) {
                    this.nextToken();
                  }
                  this.expectKeyword("function");
                  var isGenerator = isAsync ? false : this.match("*");
                  if (isGenerator) {
                    this.nextToken();
                  }
                  var message;
                  var id = null;
                  var firstRestricted = null;
                  if (!identifierIsOptional || !this.match("(")) {
                    var token = this.lookahead;
                    id = this.parseVariableIdentifier();
                    if (this.context.strict) {
                      if (this.scanner.isRestrictedWord(token.value)) {
                        this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
                      }
                    } else {
                      if (this.scanner.isRestrictedWord(token.value)) {
                        firstRestricted = token;
                        message = messages_1.Messages.StrictFunctionName;
                      } else if (this.scanner.isStrictModeReservedWord(token.value)) {
                        firstRestricted = token;
                        message = messages_1.Messages.StrictReservedWord;
                      }
                    }
                  }
                  var previousAllowAwait = this.context.await;
                  var previousAllowYield = this.context.allowYield;
                  this.context.await = isAsync;
                  this.context.allowYield = !isGenerator;
                  var formalParameters = this.parseFormalParameters(firstRestricted);
                  var params = formalParameters.params;
                  var stricted = formalParameters.stricted;
                  firstRestricted = formalParameters.firstRestricted;
                  if (formalParameters.message) {
                    message = formalParameters.message;
                  }
                  var previousStrict = this.context.strict;
                  var previousAllowStrictDirective = this.context.allowStrictDirective;
                  this.context.allowStrictDirective = formalParameters.simple;
                  var body = this.parseFunctionSourceElements();
                  if (this.context.strict && firstRestricted) {
                    this.throwUnexpectedToken(firstRestricted, message);
                  }
                  if (this.context.strict && stricted) {
                    this.tolerateUnexpectedToken(stricted, message);
                  }
                  this.context.strict = previousStrict;
                  this.context.allowStrictDirective = previousAllowStrictDirective;
                  this.context.await = previousAllowAwait;
                  this.context.allowYield = previousAllowYield;
                  return isAsync ? this.finalize(node, new Node.AsyncFunctionDeclaration(id, params, body)) : this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));
                };
                Parser2.prototype.parseFunctionExpression = function() {
                  var node = this.createNode();
                  var isAsync = this.matchContextualKeyword("async");
                  if (isAsync) {
                    this.nextToken();
                  }
                  this.expectKeyword("function");
                  var isGenerator = isAsync ? false : this.match("*");
                  if (isGenerator) {
                    this.nextToken();
                  }
                  var message;
                  var id = null;
                  var firstRestricted;
                  var previousAllowAwait = this.context.await;
                  var previousAllowYield = this.context.allowYield;
                  this.context.await = isAsync;
                  this.context.allowYield = !isGenerator;
                  if (!this.match("(")) {
                    var token = this.lookahead;
                    id = !this.context.strict && !isGenerator && this.matchKeyword("yield") ? this.parseIdentifierName() : this.parseVariableIdentifier();
                    if (this.context.strict) {
                      if (this.scanner.isRestrictedWord(token.value)) {
                        this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
                      }
                    } else {
                      if (this.scanner.isRestrictedWord(token.value)) {
                        firstRestricted = token;
                        message = messages_1.Messages.StrictFunctionName;
                      } else if (this.scanner.isStrictModeReservedWord(token.value)) {
                        firstRestricted = token;
                        message = messages_1.Messages.StrictReservedWord;
                      }
                    }
                  }
                  var formalParameters = this.parseFormalParameters(firstRestricted);
                  var params = formalParameters.params;
                  var stricted = formalParameters.stricted;
                  firstRestricted = formalParameters.firstRestricted;
                  if (formalParameters.message) {
                    message = formalParameters.message;
                  }
                  var previousStrict = this.context.strict;
                  var previousAllowStrictDirective = this.context.allowStrictDirective;
                  this.context.allowStrictDirective = formalParameters.simple;
                  var body = this.parseFunctionSourceElements();
                  if (this.context.strict && firstRestricted) {
                    this.throwUnexpectedToken(firstRestricted, message);
                  }
                  if (this.context.strict && stricted) {
                    this.tolerateUnexpectedToken(stricted, message);
                  }
                  this.context.strict = previousStrict;
                  this.context.allowStrictDirective = previousAllowStrictDirective;
                  this.context.await = previousAllowAwait;
                  this.context.allowYield = previousAllowYield;
                  return isAsync ? this.finalize(node, new Node.AsyncFunctionExpression(id, params, body)) : this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));
                };
                Parser2.prototype.parseDirective = function() {
                  var token = this.lookahead;
                  var node = this.createNode();
                  var expr = this.parseExpression();
                  var directive = expr.type === syntax_1.Syntax.Literal ? this.getTokenRaw(token).slice(1, -1) : null;
                  this.consumeSemicolon();
                  return this.finalize(node, directive ? new Node.Directive(expr, directive) : new Node.ExpressionStatement(expr));
                };
                Parser2.prototype.parseDirectivePrologues = function() {
                  var firstRestricted = null;
                  var body = [];
                  while (true) {
                    var token = this.lookahead;
                    if (token.type !== 8) {
                      break;
                    }
                    var statement = this.parseDirective();
                    body.push(statement);
                    var directive = statement.directive;
                    if (typeof directive !== "string") {
                      break;
                    }
                    if (directive === "use strict") {
                      this.context.strict = true;
                      if (firstRestricted) {
                        this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);
                      }
                      if (!this.context.allowStrictDirective) {
                        this.tolerateUnexpectedToken(token, messages_1.Messages.IllegalLanguageModeDirective);
                      }
                    } else {
                      if (!firstRestricted && token.octal) {
                        firstRestricted = token;
                      }
                    }
                  }
                  return body;
                };
                Parser2.prototype.qualifiedPropertyName = function(token) {
                  switch (token.type) {
                    case 3:
                    case 8:
                    case 1:
                    case 5:
                    case 6:
                    case 4:
                      return true;
                    case 7:
                      return token.value === "[";
                    default:
                      break;
                  }
                  return false;
                };
                Parser2.prototype.parseGetterMethod = function() {
                  var node = this.createNode();
                  var isGenerator = false;
                  var previousAllowYield = this.context.allowYield;
                  this.context.allowYield = !isGenerator;
                  var formalParameters = this.parseFormalParameters();
                  if (formalParameters.params.length > 0) {
                    this.tolerateError(messages_1.Messages.BadGetterArity);
                  }
                  var method = this.parsePropertyMethod(formalParameters);
                  this.context.allowYield = previousAllowYield;
                  return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));
                };
                Parser2.prototype.parseSetterMethod = function() {
                  var node = this.createNode();
                  var isGenerator = false;
                  var previousAllowYield = this.context.allowYield;
                  this.context.allowYield = !isGenerator;
                  var formalParameters = this.parseFormalParameters();
                  if (formalParameters.params.length !== 1) {
                    this.tolerateError(messages_1.Messages.BadSetterArity);
                  } else if (formalParameters.params[0] instanceof Node.RestElement) {
                    this.tolerateError(messages_1.Messages.BadSetterRestParameter);
                  }
                  var method = this.parsePropertyMethod(formalParameters);
                  this.context.allowYield = previousAllowYield;
                  return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));
                };
                Parser2.prototype.parseGeneratorMethod = function() {
                  var node = this.createNode();
                  var isGenerator = true;
                  var previousAllowYield = this.context.allowYield;
                  this.context.allowYield = true;
                  var params = this.parseFormalParameters();
                  this.context.allowYield = false;
                  var method = this.parsePropertyMethod(params);
                  this.context.allowYield = previousAllowYield;
                  return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
                };
                Parser2.prototype.isStartOfExpression = function() {
                  var start = true;
                  var value = this.lookahead.value;
                  switch (this.lookahead.type) {
                    case 7:
                      start = value === "[" || value === "(" || value === "{" || value === "+" || value === "-" || value === "!" || value === "~" || value === "++" || value === "--" || value === "/" || value === "/=";
                      break;
                    case 4:
                      start = value === "class" || value === "delete" || value === "function" || value === "let" || value === "new" || value === "super" || value === "this" || value === "typeof" || value === "void" || value === "yield";
                      break;
                    default:
                      break;
                  }
                  return start;
                };
                Parser2.prototype.parseYieldExpression = function() {
                  var node = this.createNode();
                  this.expectKeyword("yield");
                  var argument = null;
                  var delegate = false;
                  if (!this.hasLineTerminator) {
                    var previousAllowYield = this.context.allowYield;
                    this.context.allowYield = false;
                    delegate = this.match("*");
                    if (delegate) {
                      this.nextToken();
                      argument = this.parseAssignmentExpression();
                    } else if (this.isStartOfExpression()) {
                      argument = this.parseAssignmentExpression();
                    }
                    this.context.allowYield = previousAllowYield;
                  }
                  return this.finalize(node, new Node.YieldExpression(argument, delegate));
                };
                Parser2.prototype.parseClassElement = function(hasConstructor) {
                  var token = this.lookahead;
                  var node = this.createNode();
                  var kind = "";
                  var key = null;
                  var value = null;
                  var computed = false;
                  var method = false;
                  var isStatic = false;
                  var isAsync = false;
                  if (this.match("*")) {
                    this.nextToken();
                  } else {
                    computed = this.match("[");
                    key = this.parseObjectPropertyKey();
                    var id = key;
                    if (id.name === "static" && (this.qualifiedPropertyName(this.lookahead) || this.match("*"))) {
                      token = this.lookahead;
                      isStatic = true;
                      computed = this.match("[");
                      if (this.match("*")) {
                        this.nextToken();
                      } else {
                        key = this.parseObjectPropertyKey();
                      }
                    }
                    if (token.type === 3 && !this.hasLineTerminator && token.value === "async") {
                      var punctuator = this.lookahead.value;
                      if (punctuator !== ":" && punctuator !== "(" && punctuator !== "*") {
                        isAsync = true;
                        token = this.lookahead;
                        key = this.parseObjectPropertyKey();
                        if (token.type === 3 && token.value === "constructor") {
                          this.tolerateUnexpectedToken(token, messages_1.Messages.ConstructorIsAsync);
                        }
                      }
                    }
                  }
                  var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);
                  if (token.type === 3) {
                    if (token.value === "get" && lookaheadPropertyKey) {
                      kind = "get";
                      computed = this.match("[");
                      key = this.parseObjectPropertyKey();
                      this.context.allowYield = false;
                      value = this.parseGetterMethod();
                    } else if (token.value === "set" && lookaheadPropertyKey) {
                      kind = "set";
                      computed = this.match("[");
                      key = this.parseObjectPropertyKey();
                      value = this.parseSetterMethod();
                    }
                  } else if (token.type === 7 && token.value === "*" && lookaheadPropertyKey) {
                    kind = "init";
                    computed = this.match("[");
                    key = this.parseObjectPropertyKey();
                    value = this.parseGeneratorMethod();
                    method = true;
                  }
                  if (!kind && key && this.match("(")) {
                    kind = "init";
                    value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
                    method = true;
                  }
                  if (!kind) {
                    this.throwUnexpectedToken(this.lookahead);
                  }
                  if (kind === "init") {
                    kind = "method";
                  }
                  if (!computed) {
                    if (isStatic && this.isPropertyKey(key, "prototype")) {
                      this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);
                    }
                    if (!isStatic && this.isPropertyKey(key, "constructor")) {
                      if (kind !== "method" || !method || value && value.generator) {
                        this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);
                      }
                      if (hasConstructor.value) {
                        this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);
                      } else {
                        hasConstructor.value = true;
                      }
                      kind = "constructor";
                    }
                  }
                  return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));
                };
                Parser2.prototype.parseClassElementList = function() {
                  var body = [];
                  var hasConstructor = { value: false };
                  this.expect("{");
                  while (!this.match("}")) {
                    if (this.match(";")) {
                      this.nextToken();
                    } else {
                      body.push(this.parseClassElement(hasConstructor));
                    }
                  }
                  this.expect("}");
                  return body;
                };
                Parser2.prototype.parseClassBody = function() {
                  var node = this.createNode();
                  var elementList = this.parseClassElementList();
                  return this.finalize(node, new Node.ClassBody(elementList));
                };
                Parser2.prototype.parseClassDeclaration = function(identifierIsOptional) {
                  var node = this.createNode();
                  var previousStrict = this.context.strict;
                  this.context.strict = true;
                  this.expectKeyword("class");
                  var id = identifierIsOptional && this.lookahead.type !== 3 ? null : this.parseVariableIdentifier();
                  var superClass = null;
                  if (this.matchKeyword("extends")) {
                    this.nextToken();
                    superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
                  }
                  var classBody = this.parseClassBody();
                  this.context.strict = previousStrict;
                  return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));
                };
                Parser2.prototype.parseClassExpression = function() {
                  var node = this.createNode();
                  var previousStrict = this.context.strict;
                  this.context.strict = true;
                  this.expectKeyword("class");
                  var id = this.lookahead.type === 3 ? this.parseVariableIdentifier() : null;
                  var superClass = null;
                  if (this.matchKeyword("extends")) {
                    this.nextToken();
                    superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
                  }
                  var classBody = this.parseClassBody();
                  this.context.strict = previousStrict;
                  return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));
                };
                Parser2.prototype.parseModule = function() {
                  this.context.strict = true;
                  this.context.isModule = true;
                  this.scanner.isModule = true;
                  var node = this.createNode();
                  var body = this.parseDirectivePrologues();
                  while (this.lookahead.type !== 2) {
                    body.push(this.parseStatementListItem());
                  }
                  return this.finalize(node, new Node.Module(body));
                };
                Parser2.prototype.parseScript = function() {
                  var node = this.createNode();
                  var body = this.parseDirectivePrologues();
                  while (this.lookahead.type !== 2) {
                    body.push(this.parseStatementListItem());
                  }
                  return this.finalize(node, new Node.Script(body));
                };
                Parser2.prototype.parseModuleSpecifier = function() {
                  var node = this.createNode();
                  if (this.lookahead.type !== 8) {
                    this.throwError(messages_1.Messages.InvalidModuleSpecifier);
                  }
                  var token = this.nextToken();
                  var raw = this.getTokenRaw(token);
                  return this.finalize(node, new Node.Literal(token.value, raw));
                };
                Parser2.prototype.parseImportSpecifier = function() {
                  var node = this.createNode();
                  var imported;
                  var local;
                  if (this.lookahead.type === 3) {
                    imported = this.parseVariableIdentifier();
                    local = imported;
                    if (this.matchContextualKeyword("as")) {
                      this.nextToken();
                      local = this.parseVariableIdentifier();
                    }
                  } else {
                    imported = this.parseIdentifierName();
                    local = imported;
                    if (this.matchContextualKeyword("as")) {
                      this.nextToken();
                      local = this.parseVariableIdentifier();
                    } else {
                      this.throwUnexpectedToken(this.nextToken());
                    }
                  }
                  return this.finalize(node, new Node.ImportSpecifier(local, imported));
                };
                Parser2.prototype.parseNamedImports = function() {
                  this.expect("{");
                  var specifiers = [];
                  while (!this.match("}")) {
                    specifiers.push(this.parseImportSpecifier());
                    if (!this.match("}")) {
                      this.expect(",");
                    }
                  }
                  this.expect("}");
                  return specifiers;
                };
                Parser2.prototype.parseImportDefaultSpecifier = function() {
                  var node = this.createNode();
                  var local = this.parseIdentifierName();
                  return this.finalize(node, new Node.ImportDefaultSpecifier(local));
                };
                Parser2.prototype.parseImportNamespaceSpecifier = function() {
                  var node = this.createNode();
                  this.expect("*");
                  if (!this.matchContextualKeyword("as")) {
                    this.throwError(messages_1.Messages.NoAsAfterImportNamespace);
                  }
                  this.nextToken();
                  var local = this.parseIdentifierName();
                  return this.finalize(node, new Node.ImportNamespaceSpecifier(local));
                };
                Parser2.prototype.parseImportDeclaration = function() {
                  if (this.context.inFunctionBody) {
                    this.throwError(messages_1.Messages.IllegalImportDeclaration);
                  }
                  var node = this.createNode();
                  this.expectKeyword("import");
                  var src;
                  var specifiers = [];
                  if (this.lookahead.type === 8) {
                    src = this.parseModuleSpecifier();
                  } else {
                    if (this.match("{")) {
                      specifiers = specifiers.concat(this.parseNamedImports());
                    } else if (this.match("*")) {
                      specifiers.push(this.parseImportNamespaceSpecifier());
                    } else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword("default")) {
                      specifiers.push(this.parseImportDefaultSpecifier());
                      if (this.match(",")) {
                        this.nextToken();
                        if (this.match("*")) {
                          specifiers.push(this.parseImportNamespaceSpecifier());
                        } else if (this.match("{")) {
                          specifiers = specifiers.concat(this.parseNamedImports());
                        } else {
                          this.throwUnexpectedToken(this.lookahead);
                        }
                      }
                    } else {
                      this.throwUnexpectedToken(this.nextToken());
                    }
                    if (!this.matchContextualKeyword("from")) {
                      var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
                      this.throwError(message, this.lookahead.value);
                    }
                    this.nextToken();
                    src = this.parseModuleSpecifier();
                  }
                  this.consumeSemicolon();
                  return this.finalize(node, new Node.ImportDeclaration(specifiers, src));
                };
                Parser2.prototype.parseExportSpecifier = function() {
                  var node = this.createNode();
                  var local = this.parseIdentifierName();
                  var exported = local;
                  if (this.matchContextualKeyword("as")) {
                    this.nextToken();
                    exported = this.parseIdentifierName();
                  }
                  return this.finalize(node, new Node.ExportSpecifier(local, exported));
                };
                Parser2.prototype.parseExportDeclaration = function() {
                  if (this.context.inFunctionBody) {
                    this.throwError(messages_1.Messages.IllegalExportDeclaration);
                  }
                  var node = this.createNode();
                  this.expectKeyword("export");
                  var exportDeclaration;
                  if (this.matchKeyword("default")) {
                    this.nextToken();
                    if (this.matchKeyword("function")) {
                      var declaration = this.parseFunctionDeclaration(true);
                      exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
                    } else if (this.matchKeyword("class")) {
                      var declaration = this.parseClassDeclaration(true);
                      exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
                    } else if (this.matchContextualKeyword("async")) {
                      var declaration = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression();
                      exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
                    } else {
                      if (this.matchContextualKeyword("from")) {
                        this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);
                      }
                      var declaration = this.match("{") ? this.parseObjectInitializer() : this.match("[") ? this.parseArrayInitializer() : this.parseAssignmentExpression();
                      this.consumeSemicolon();
                      exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
                    }
                  } else if (this.match("*")) {
                    this.nextToken();
                    if (!this.matchContextualKeyword("from")) {
                      var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
                      this.throwError(message, this.lookahead.value);
                    }
                    this.nextToken();
                    var src = this.parseModuleSpecifier();
                    this.consumeSemicolon();
                    exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));
                  } else if (this.lookahead.type === 4) {
                    var declaration = void 0;
                    switch (this.lookahead.value) {
                      case "let":
                      case "const":
                        declaration = this.parseLexicalDeclaration({ inFor: false });
                        break;
                      case "var":
                      case "class":
                      case "function":
                        declaration = this.parseStatementListItem();
                        break;
                      default:
                        this.throwUnexpectedToken(this.lookahead);
                    }
                    exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
                  } else if (this.matchAsyncFunction()) {
                    var declaration = this.parseFunctionDeclaration();
                    exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
                  } else {
                    var specifiers = [];
                    var source = null;
                    var isExportFromIdentifier = false;
                    this.expect("{");
                    while (!this.match("}")) {
                      isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword("default");
                      specifiers.push(this.parseExportSpecifier());
                      if (!this.match("}")) {
                        this.expect(",");
                      }
                    }
                    this.expect("}");
                    if (this.matchContextualKeyword("from")) {
                      this.nextToken();
                      source = this.parseModuleSpecifier();
                      this.consumeSemicolon();
                    } else if (isExportFromIdentifier) {
                      var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
                      this.throwError(message, this.lookahead.value);
                    } else {
                      this.consumeSemicolon();
                    }
                    exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));
                  }
                  return exportDeclaration;
                };
                return Parser2;
              }();
              exports2.Parser = Parser;
            },
            /* 9 */
            /***/
            function(module2, exports2) {
              "use strict";
              Object.defineProperty(exports2, "__esModule", { value: true });
              function assert(condition, message) {
                if (!condition) {
                  throw new Error("ASSERT: " + message);
                }
              }
              exports2.assert = assert;
            },
            /* 10 */
            /***/
            function(module2, exports2) {
              "use strict";
              Object.defineProperty(exports2, "__esModule", { value: true });
              var ErrorHandler = function() {
                function ErrorHandler2() {
                  this.errors = [];
                  this.tolerant = false;
                }
                ErrorHandler2.prototype.recordError = function(error) {
                  this.errors.push(error);
                };
                ErrorHandler2.prototype.tolerate = function(error) {
                  if (this.tolerant) {
                    this.recordError(error);
                  } else {
                    throw error;
                  }
                };
                ErrorHandler2.prototype.constructError = function(msg, column) {
                  var error = new Error(msg);
                  try {
                    throw error;
                  } catch (base) {
                    if (Object.create && Object.defineProperty) {
                      error = Object.create(base);
                      Object.defineProperty(error, "column", { value: column });
                    }
                  }
                  return error;
                };
                ErrorHandler2.prototype.createError = function(index, line, col, description) {
                  var msg = "Line " + line + ": " + description;
                  var error = this.constructError(msg, col);
                  error.index = index;
                  error.lineNumber = line;
                  error.description = description;
                  return error;
                };
                ErrorHandler2.prototype.throwError = function(index, line, col, description) {
                  throw this.createError(index, line, col, description);
                };
                ErrorHandler2.prototype.tolerateError = function(index, line, col, description) {
                  var error = this.createError(index, line, col, description);
                  if (this.tolerant) {
                    this.recordError(error);
                  } else {
                    throw error;
                  }
                };
                return ErrorHandler2;
              }();
              exports2.ErrorHandler = ErrorHandler;
            },
            /* 11 */
            /***/
            function(module2, exports2) {
              "use strict";
              Object.defineProperty(exports2, "__esModule", { value: true });
              exports2.Messages = {
                BadGetterArity: "Getter must not have any formal parameters",
                BadSetterArity: "Setter must have exactly one formal parameter",
                BadSetterRestParameter: "Setter function argument must not be a rest parameter",
                ConstructorIsAsync: "Class constructor may not be an async method",
                ConstructorSpecialMethod: "Class constructor may not be an accessor",
                DeclarationMissingInitializer: "Missing initializer in %0 declaration",
                DefaultRestParameter: "Unexpected token =",
                DuplicateBinding: "Duplicate binding %0",
                DuplicateConstructor: "A class may only have one constructor",
                DuplicateProtoProperty: "Duplicate __proto__ fields are not allowed in object literals",
                ForInOfLoopInitializer: "%0 loop variable declaration may not have an initializer",
                GeneratorInLegacyContext: "Generator declarations are not allowed in legacy contexts",
                IllegalBreak: "Illegal break statement",
                IllegalContinue: "Illegal continue statement",
                IllegalExportDeclaration: "Unexpected token",
                IllegalImportDeclaration: "Unexpected token",
                IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list",
                IllegalReturn: "Illegal return statement",
                InvalidEscapedReservedWord: "Keyword must not contain escaped characters",
                InvalidHexEscapeSequence: "Invalid hexadecimal escape sequence",
                InvalidLHSInAssignment: "Invalid left-hand side in assignment",
                InvalidLHSInForIn: "Invalid left-hand side in for-in",
                InvalidLHSInForLoop: "Invalid left-hand side in for-loop",
                InvalidModuleSpecifier: "Unexpected token",
                InvalidRegExp: "Invalid regular expression",
                LetInLexicalBinding: "let is disallowed as a lexically bound name",
                MissingFromClause: "Unexpected token",
                MultipleDefaultsInSwitch: "More than one default clause in switch statement",
                NewlineAfterThrow: "Illegal newline after throw",
                NoAsAfterImportNamespace: "Unexpected token",
                NoCatchOrFinally: "Missing catch or finally after try",
                ParameterAfterRestParameter: "Rest parameter must be last formal parameter",
                Redeclaration: "%0 '%1' has already been declared",
                StaticPrototype: "Classes may not have static property named prototype",
                StrictCatchVariable: "Catch variable may not be eval or arguments in strict mode",
                StrictDelete: "Delete of an unqualified identifier in strict mode.",
                StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block",
                StrictFunctionName: "Function name may not be eval or arguments in strict mode",
                StrictLHSAssignment: "Assignment to eval or arguments is not allowed in strict mode",
                StrictLHSPostfix: "Postfix increment/decrement may not have eval or arguments operand in strict mode",
                StrictLHSPrefix: "Prefix increment/decrement may not have eval or arguments operand in strict mode",
                StrictModeWith: "Strict mode code may not include a with statement",
                StrictOctalLiteral: "Octal literals are not allowed in strict mode.",
                StrictParamDupe: "Strict mode function may not have duplicate parameter names",
                StrictParamName: "Parameter name eval or arguments is not allowed in strict mode",
                StrictReservedWord: "Use of future reserved word in strict mode",
                StrictVarName: "Variable name may not be eval or arguments in strict mode",
                TemplateOctalLiteral: "Octal literals are not allowed in template strings.",
                UnexpectedEOS: "Unexpected end of input",
                UnexpectedIdentifier: "Unexpected identifier",
                UnexpectedNumber: "Unexpected number",
                UnexpectedReserved: "Unexpected reserved word",
                UnexpectedString: "Unexpected string",
                UnexpectedTemplate: "Unexpected quasi %0",
                UnexpectedToken: "Unexpected token %0",
                UnexpectedTokenIllegal: "Unexpected token ILLEGAL",
                UnknownLabel: "Undefined label '%0'",
                UnterminatedRegExp: "Invalid regular expression: missing /"
              };
            },
            /* 12 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              Object.defineProperty(exports2, "__esModule", { value: true });
              var assert_1 = __webpack_require__(9);
              var character_1 = __webpack_require__(4);
              var messages_1 = __webpack_require__(11);
              function hexValue(ch) {
                return "0123456789abcdef".indexOf(ch.toLowerCase());
              }
              function octalValue(ch) {
                return "01234567".indexOf(ch);
              }
              var Scanner = function() {
                function Scanner2(code, handler) {
                  this.source = code;
                  this.errorHandler = handler;
                  this.trackComment = false;
                  this.isModule = false;
                  this.length = code.length;
                  this.index = 0;
                  this.lineNumber = code.length > 0 ? 1 : 0;
                  this.lineStart = 0;
                  this.curlyStack = [];
                }
                Scanner2.prototype.saveState = function() {
                  return {
                    index: this.index,
                    lineNumber: this.lineNumber,
                    lineStart: this.lineStart
                  };
                };
                Scanner2.prototype.restoreState = function(state) {
                  this.index = state.index;
                  this.lineNumber = state.lineNumber;
                  this.lineStart = state.lineStart;
                };
                Scanner2.prototype.eof = function() {
                  return this.index >= this.length;
                };
                Scanner2.prototype.throwUnexpectedToken = function(message) {
                  if (message === void 0) {
                    message = messages_1.Messages.UnexpectedTokenIllegal;
                  }
                  return this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
                };
                Scanner2.prototype.tolerateUnexpectedToken = function(message) {
                  if (message === void 0) {
                    message = messages_1.Messages.UnexpectedTokenIllegal;
                  }
                  this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
                };
                Scanner2.prototype.skipSingleLineComment = function(offset) {
                  var comments = [];
                  var start, loc;
                  if (this.trackComment) {
                    comments = [];
                    start = this.index - offset;
                    loc = {
                      start: {
                        line: this.lineNumber,
                        column: this.index - this.lineStart - offset
                      },
                      end: {}
                    };
                  }
                  while (!this.eof()) {
                    var ch = this.source.charCodeAt(this.index);
                    ++this.index;
                    if (character_1.Character.isLineTerminator(ch)) {
                      if (this.trackComment) {
                        loc.end = {
                          line: this.lineNumber,
                          column: this.index - this.lineStart - 1
                        };
                        var entry = {
                          multiLine: false,
                          slice: [start + offset, this.index - 1],
                          range: [start, this.index - 1],
                          loc
                        };
                        comments.push(entry);
                      }
                      if (ch === 13 && this.source.charCodeAt(this.index) === 10) {
                        ++this.index;
                      }
                      ++this.lineNumber;
                      this.lineStart = this.index;
                      return comments;
                    }
                  }
                  if (this.trackComment) {
                    loc.end = {
                      line: this.lineNumber,
                      column: this.index - this.lineStart
                    };
                    var entry = {
                      multiLine: false,
                      slice: [start + offset, this.index],
                      range: [start, this.index],
                      loc
                    };
                    comments.push(entry);
                  }
                  return comments;
                };
                Scanner2.prototype.skipMultiLineComment = function() {
                  var comments = [];
                  var start, loc;
                  if (this.trackComment) {
                    comments = [];
                    start = this.index - 2;
                    loc = {
                      start: {
                        line: this.lineNumber,
                        column: this.index - this.lineStart - 2
                      },
                      end: {}
                    };
                  }
                  while (!this.eof()) {
                    var ch = this.source.charCodeAt(this.index);
                    if (character_1.Character.isLineTerminator(ch)) {
                      if (ch === 13 && this.source.charCodeAt(this.index + 1) === 10) {
                        ++this.index;
                      }
                      ++this.lineNumber;
                      ++this.index;
                      this.lineStart = this.index;
                    } else if (ch === 42) {
                      if (this.source.charCodeAt(this.index + 1) === 47) {
                        this.index += 2;
                        if (this.trackComment) {
                          loc.end = {
                            line: this.lineNumber,
                            column: this.index - this.lineStart
                          };
                          var entry = {
                            multiLine: true,
                            slice: [start + 2, this.index - 2],
                            range: [start, this.index],
                            loc
                          };
                          comments.push(entry);
                        }
                        return comments;
                      }
                      ++this.index;
                    } else {
                      ++this.index;
                    }
                  }
                  if (this.trackComment) {
                    loc.end = {
                      line: this.lineNumber,
                      column: this.index - this.lineStart
                    };
                    var entry = {
                      multiLine: true,
                      slice: [start + 2, this.index],
                      range: [start, this.index],
                      loc
                    };
                    comments.push(entry);
                  }
                  this.tolerateUnexpectedToken();
                  return comments;
                };
                Scanner2.prototype.scanComments = function() {
                  var comments;
                  if (this.trackComment) {
                    comments = [];
                  }
                  var start = this.index === 0;
                  while (!this.eof()) {
                    var ch = this.source.charCodeAt(this.index);
                    if (character_1.Character.isWhiteSpace(ch)) {
                      ++this.index;
                    } else if (character_1.Character.isLineTerminator(ch)) {
                      ++this.index;
                      if (ch === 13 && this.source.charCodeAt(this.index) === 10) {
                        ++this.index;
                      }
                      ++this.lineNumber;
                      this.lineStart = this.index;
                      start = true;
                    } else if (ch === 47) {
                      ch = this.source.charCodeAt(this.index + 1);
                      if (ch === 47) {
                        this.index += 2;
                        var comment = this.skipSingleLineComment(2);
                        if (this.trackComment) {
                          comments = comments.concat(comment);
                        }
                        start = true;
                      } else if (ch === 42) {
                        this.index += 2;
                        var comment = this.skipMultiLineComment();
                        if (this.trackComment) {
                          comments = comments.concat(comment);
                        }
                      } else {
                        break;
                      }
                    } else if (start && ch === 45) {
                      if (this.source.charCodeAt(this.index + 1) === 45 && this.source.charCodeAt(this.index + 2) === 62) {
                        this.index += 3;
                        var comment = this.skipSingleLineComment(3);
                        if (this.trackComment) {
                          comments = comments.concat(comment);
                        }
                      } else {
                        break;
                      }
                    } else if (ch === 60 && !this.isModule) {
                      if (this.source.slice(this.index + 1, this.index + 4) === "!--") {
                        this.index += 4;
                        var comment = this.skipSingleLineComment(4);
                        if (this.trackComment) {
                          comments = comments.concat(comment);
                        }
                      } else {
                        break;
                      }
                    } else {
                      break;
                    }
                  }
                  return comments;
                };
                Scanner2.prototype.isFutureReservedWord = function(id) {
                  switch (id) {
                    case "enum":
                    case "export":
                    case "import":
                    case "super":
                      return true;
                    default:
                      return false;
                  }
                };
                Scanner2.prototype.isStrictModeReservedWord = function(id) {
                  switch (id) {
                    case "implements":
                    case "interface":
                    case "package":
                    case "private":
                    case "protected":
                    case "public":
                    case "static":
                    case "yield":
                    case "let":
                      return true;
                    default:
                      return false;
                  }
                };
                Scanner2.prototype.isRestrictedWord = function(id) {
                  return id === "eval" || id === "arguments";
                };
                Scanner2.prototype.isKeyword = function(id) {
                  switch (id.length) {
                    case 2:
                      return id === "if" || id === "in" || id === "do";
                    case 3:
                      return id === "var" || id === "for" || id === "new" || id === "try" || id === "let";
                    case 4:
                      return id === "this" || id === "else" || id === "case" || id === "void" || id === "with" || id === "enum";
                    case 5:
                      return id === "while" || id === "break" || id === "catch" || id === "throw" || id === "const" || id === "yield" || id === "class" || id === "super";
                    case 6:
                      return id === "return" || id === "typeof" || id === "delete" || id === "switch" || id === "export" || id === "import";
                    case 7:
                      return id === "default" || id === "finally" || id === "extends";
                    case 8:
                      return id === "function" || id === "continue" || id === "debugger";
                    case 10:
                      return id === "instanceof";
                    default:
                      return false;
                  }
                };
                Scanner2.prototype.codePointAt = function(i) {
                  var cp = this.source.charCodeAt(i);
                  if (cp >= 55296 && cp <= 56319) {
                    var second = this.source.charCodeAt(i + 1);
                    if (second >= 56320 && second <= 57343) {
                      var first = cp;
                      cp = (first - 55296) * 1024 + second - 56320 + 65536;
                    }
                  }
                  return cp;
                };
                Scanner2.prototype.scanHexEscape = function(prefix) {
                  var len = prefix === "u" ? 4 : 2;
                  var code = 0;
                  for (var i = 0; i < len; ++i) {
                    if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
                      code = code * 16 + hexValue(this.source[this.index++]);
                    } else {
                      return null;
                    }
                  }
                  return String.fromCharCode(code);
                };
                Scanner2.prototype.scanUnicodeCodePointEscape = function() {
                  var ch = this.source[this.index];
                  var code = 0;
                  if (ch === "}") {
                    this.throwUnexpectedToken();
                  }
                  while (!this.eof()) {
                    ch = this.source[this.index++];
                    if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {
                      break;
                    }
                    code = code * 16 + hexValue(ch);
                  }
                  if (code > 1114111 || ch !== "}") {
                    this.throwUnexpectedToken();
                  }
                  return character_1.Character.fromCodePoint(code);
                };
                Scanner2.prototype.getIdentifier = function() {
                  var start = this.index++;
                  while (!this.eof()) {
                    var ch = this.source.charCodeAt(this.index);
                    if (ch === 92) {
                      this.index = start;
                      return this.getComplexIdentifier();
                    } else if (ch >= 55296 && ch < 57343) {
                      this.index = start;
                      return this.getComplexIdentifier();
                    }
                    if (character_1.Character.isIdentifierPart(ch)) {
                      ++this.index;
                    } else {
                      break;
                    }
                  }
                  return this.source.slice(start, this.index);
                };
                Scanner2.prototype.getComplexIdentifier = function() {
                  var cp = this.codePointAt(this.index);
                  var id = character_1.Character.fromCodePoint(cp);
                  this.index += id.length;
                  var ch;
                  if (cp === 92) {
                    if (this.source.charCodeAt(this.index) !== 117) {
                      this.throwUnexpectedToken();
                    }
                    ++this.index;
                    if (this.source[this.index] === "{") {
                      ++this.index;
                      ch = this.scanUnicodeCodePointEscape();
                    } else {
                      ch = this.scanHexEscape("u");
                      if (ch === null || ch === "\\" || !character_1.Character.isIdentifierStart(ch.charCodeAt(0))) {
                        this.throwUnexpectedToken();
                      }
                    }
                    id = ch;
                  }
                  while (!this.eof()) {
                    cp = this.codePointAt(this.index);
                    if (!character_1.Character.isIdentifierPart(cp)) {
                      break;
                    }
                    ch = character_1.Character.fromCodePoint(cp);
                    id += ch;
                    this.index += ch.length;
                    if (cp === 92) {
                      id = id.substr(0, id.length - 1);
                      if (this.source.charCodeAt(this.index) !== 117) {
                        this.throwUnexpectedToken();
                      }
                      ++this.index;
                      if (this.source[this.index] === "{") {
                        ++this.index;
                        ch = this.scanUnicodeCodePointEscape();
                      } else {
                        ch = this.scanHexEscape("u");
                        if (ch === null || ch === "\\" || !character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
                          this.throwUnexpectedToken();
                        }
                      }
                      id += ch;
                    }
                  }
                  return id;
                };
                Scanner2.prototype.octalToDecimal = function(ch) {
                  var octal = ch !== "0";
                  var code = octalValue(ch);
                  if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
                    octal = true;
                    code = code * 8 + octalValue(this.source[this.index++]);
                    if ("0123".indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
                      code = code * 8 + octalValue(this.source[this.index++]);
                    }
                  }
                  return {
                    code,
                    octal
                  };
                };
                Scanner2.prototype.scanIdentifier = function() {
                  var type;
                  var start = this.index;
                  var id = this.source.charCodeAt(start) === 92 ? this.getComplexIdentifier() : this.getIdentifier();
                  if (id.length === 1) {
                    type = 3;
                  } else if (this.isKeyword(id)) {
                    type = 4;
                  } else if (id === "null") {
                    type = 5;
                  } else if (id === "true" || id === "false") {
                    type = 1;
                  } else {
                    type = 3;
                  }
                  if (type !== 3 && start + id.length !== this.index) {
                    var restore = this.index;
                    this.index = start;
                    this.tolerateUnexpectedToken(messages_1.Messages.InvalidEscapedReservedWord);
                    this.index = restore;
                  }
                  return {
                    type,
                    value: id,
                    lineNumber: this.lineNumber,
                    lineStart: this.lineStart,
                    start,
                    end: this.index
                  };
                };
                Scanner2.prototype.scanPunctuator = function() {
                  var start = this.index;
                  var str = this.source[this.index];
                  switch (str) {
                    case "(":
                    case "{":
                      if (str === "{") {
                        this.curlyStack.push("{");
                      }
                      ++this.index;
                      break;
                    case ".":
                      ++this.index;
                      if (this.source[this.index] === "." && this.source[this.index + 1] === ".") {
                        this.index += 2;
                        str = "...";
                      }
                      break;
                    case "}":
                      ++this.index;
                      this.curlyStack.pop();
                      break;
                    case ")":
                    case ";":
                    case ",":
                    case "[":
                    case "]":
                    case ":":
                    case "?":
                    case "~":
                      ++this.index;
                      break;
                    default:
                      str = this.source.substr(this.index, 4);
                      if (str === ">>>=") {
                        this.index += 4;
                      } else {
                        str = str.substr(0, 3);
                        if (str === "===" || str === "!==" || str === ">>>" || str === "<<=" || str === ">>=" || str === "**=") {
                          this.index += 3;
                        } else {
                          str = str.substr(0, 2);
                          if (str === "&&" || str === "||" || str === "==" || str === "!=" || str === "+=" || str === "-=" || str === "*=" || str === "/=" || str === "++" || str === "--" || str === "<<" || str === ">>" || str === "&=" || str === "|=" || str === "^=" || str === "%=" || str === "<=" || str === ">=" || str === "=>" || str === "**") {
                            this.index += 2;
                          } else {
                            str = this.source[this.index];
                            if ("<>=!+-*%&|^/".indexOf(str) >= 0) {
                              ++this.index;
                            }
                          }
                        }
                      }
                  }
                  if (this.index === start) {
                    this.throwUnexpectedToken();
                  }
                  return {
                    type: 7,
                    value: str,
                    lineNumber: this.lineNumber,
                    lineStart: this.lineStart,
                    start,
                    end: this.index
                  };
                };
                Scanner2.prototype.scanHexLiteral = function(start) {
                  var num = "";
                  while (!this.eof()) {
                    if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
                      break;
                    }
                    num += this.source[this.index++];
                  }
                  if (num.length === 0) {
                    this.throwUnexpectedToken();
                  }
                  if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
                    this.throwUnexpectedToken();
                  }
                  return {
                    type: 6,
                    value: parseInt("0x" + num, 16),
                    lineNumber: this.lineNumber,
                    lineStart: this.lineStart,
                    start,
                    end: this.index
                  };
                };
                Scanner2.prototype.scanBinaryLiteral = function(start) {
                  var num = "";
                  var ch;
                  while (!this.eof()) {
                    ch = this.source[this.index];
                    if (ch !== "0" && ch !== "1") {
                      break;
                    }
                    num += this.source[this.index++];
                  }
                  if (num.length === 0) {
                    this.throwUnexpectedToken();
                  }
                  if (!this.eof()) {
                    ch = this.source.charCodeAt(this.index);
                    if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {
                      this.throwUnexpectedToken();
                    }
                  }
                  return {
                    type: 6,
                    value: parseInt(num, 2),
                    lineNumber: this.lineNumber,
                    lineStart: this.lineStart,
                    start,
                    end: this.index
                  };
                };
                Scanner2.prototype.scanOctalLiteral = function(prefix, start) {
                  var num = "";
                  var octal = false;
                  if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {
                    octal = true;
                    num = "0" + this.source[this.index++];
                  } else {
                    ++this.index;
                  }
                  while (!this.eof()) {
                    if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
                      break;
                    }
                    num += this.source[this.index++];
                  }
                  if (!octal && num.length === 0) {
                    this.throwUnexpectedToken();
                  }
                  if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
                    this.throwUnexpectedToken();
                  }
                  return {
                    type: 6,
                    value: parseInt(num, 8),
                    octal,
                    lineNumber: this.lineNumber,
                    lineStart: this.lineStart,
                    start,
                    end: this.index
                  };
                };
                Scanner2.prototype.isImplicitOctalLiteral = function() {
                  for (var i = this.index + 1; i < this.length; ++i) {
                    var ch = this.source[i];
                    if (ch === "8" || ch === "9") {
                      return false;
                    }
                    if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
                      return true;
                    }
                  }
                  return true;
                };
                Scanner2.prototype.scanNumericLiteral = function() {
                  var start = this.index;
                  var ch = this.source[start];
                  assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || ch === ".", "Numeric literal must start with a decimal digit or a decimal point");
                  var num = "";
                  if (ch !== ".") {
                    num = this.source[this.index++];
                    ch = this.source[this.index];
                    if (num === "0") {
                      if (ch === "x" || ch === "X") {
                        ++this.index;
                        return this.scanHexLiteral(start);
                      }
                      if (ch === "b" || ch === "B") {
                        ++this.index;
                        return this.scanBinaryLiteral(start);
                      }
                      if (ch === "o" || ch === "O") {
                        return this.scanOctalLiteral(ch, start);
                      }
                      if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
                        if (this.isImplicitOctalLiteral()) {
                          return this.scanOctalLiteral(ch, start);
                        }
                      }
                    }
                    while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
                      num += this.source[this.index++];
                    }
                    ch = this.source[this.index];
                  }
                  if (ch === ".") {
                    num += this.source[this.index++];
                    while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
                      num += this.source[this.index++];
                    }
                    ch = this.source[this.index];
                  }
                  if (ch === "e" || ch === "E") {
                    num += this.source[this.index++];
                    ch = this.source[this.index];
                    if (ch === "+" || ch === "-") {
                      num += this.source[this.index++];
                    }
                    if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
                      while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
                        num += this.source[this.index++];
                      }
                    } else {
                      this.throwUnexpectedToken();
                    }
                  }
                  if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
                    this.throwUnexpectedToken();
                  }
                  return {
                    type: 6,
                    value: parseFloat(num),
                    lineNumber: this.lineNumber,
                    lineStart: this.lineStart,
                    start,
                    end: this.index
                  };
                };
                Scanner2.prototype.scanStringLiteral = function() {
                  var start = this.index;
                  var quote = this.source[start];
                  assert_1.assert(quote === "'" || quote === '"', "String literal must starts with a quote");
                  ++this.index;
                  var octal = false;
                  var str = "";
                  while (!this.eof()) {
                    var ch = this.source[this.index++];
                    if (ch === quote) {
                      quote = "";
                      break;
                    } else if (ch === "\\") {
                      ch = this.source[this.index++];
                      if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
                        switch (ch) {
                          case "u":
                            if (this.source[this.index] === "{") {
                              ++this.index;
                              str += this.scanUnicodeCodePointEscape();
                            } else {
                              var unescaped_1 = this.scanHexEscape(ch);
                              if (unescaped_1 === null) {
                                this.throwUnexpectedToken();
                              }
                              str += unescaped_1;
                            }
                            break;
                          case "x":
                            var unescaped = this.scanHexEscape(ch);
                            if (unescaped === null) {
                              this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
                            }
                            str += unescaped;
                            break;
                          case "n":
                            str += "\n";
                            break;
                          case "r":
                            str += "\r";
                            break;
                          case "t":
                            str += "	";
                            break;
                          case "b":
                            str += "\b";
                            break;
                          case "f":
                            str += "\f";
                            break;
                          case "v":
                            str += "\v";
                            break;
                          case "8":
                          case "9":
                            str += ch;
                            this.tolerateUnexpectedToken();
                            break;
                          default:
                            if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
                              var octToDec = this.octalToDecimal(ch);
                              octal = octToDec.octal || octal;
                              str += String.fromCharCode(octToDec.code);
                            } else {
                              str += ch;
                            }
                            break;
                        }
                      } else {
                        ++this.lineNumber;
                        if (ch === "\r" && this.source[this.index] === "\n") {
                          ++this.index;
                        }
                        this.lineStart = this.index;
                      }
                    } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
                      break;
                    } else {
                      str += ch;
                    }
                  }
                  if (quote !== "") {
                    this.index = start;
                    this.throwUnexpectedToken();
                  }
                  return {
                    type: 8,
                    value: str,
                    octal,
                    lineNumber: this.lineNumber,
                    lineStart: this.lineStart,
                    start,
                    end: this.index
                  };
                };
                Scanner2.prototype.scanTemplate = function() {
                  var cooked = "";
                  var terminated = false;
                  var start = this.index;
                  var head = this.source[start] === "`";
                  var tail = false;
                  var rawOffset = 2;
                  ++this.index;
                  while (!this.eof()) {
                    var ch = this.source[this.index++];
                    if (ch === "`") {
                      rawOffset = 1;
                      tail = true;
                      terminated = true;
                      break;
                    } else if (ch === "$") {
                      if (this.source[this.index] === "{") {
                        this.curlyStack.push("${");
                        ++this.index;
                        terminated = true;
                        break;
                      }
                      cooked += ch;
                    } else if (ch === "\\") {
                      ch = this.source[this.index++];
                      if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
                        switch (ch) {
                          case "n":
                            cooked += "\n";
                            break;
                          case "r":
                            cooked += "\r";
                            break;
                          case "t":
                            cooked += "	";
                            break;
                          case "u":
                            if (this.source[this.index] === "{") {
                              ++this.index;
                              cooked += this.scanUnicodeCodePointEscape();
                            } else {
                              var restore = this.index;
                              var unescaped_2 = this.scanHexEscape(ch);
                              if (unescaped_2 !== null) {
                                cooked += unescaped_2;
                              } else {
                                this.index = restore;
                                cooked += ch;
                              }
                            }
                            break;
                          case "x":
                            var unescaped = this.scanHexEscape(ch);
                            if (unescaped === null) {
                              this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
                            }
                            cooked += unescaped;
                            break;
                          case "b":
                            cooked += "\b";
                            break;
                          case "f":
                            cooked += "\f";
                            break;
                          case "v":
                            cooked += "\v";
                            break;
                          default:
                            if (ch === "0") {
                              if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
                                this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
                              }
                              cooked += "\0";
                            } else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
                              this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
                            } else {
                              cooked += ch;
                            }
                            break;
                        }
                      } else {
                        ++this.lineNumber;
                        if (ch === "\r" && this.source[this.index] === "\n") {
                          ++this.index;
                        }
                        this.lineStart = this.index;
                      }
                    } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
                      ++this.lineNumber;
                      if (ch === "\r" && this.source[this.index] === "\n") {
                        ++this.index;
                      }
                      this.lineStart = this.index;
                      cooked += "\n";
                    } else {
                      cooked += ch;
                    }
                  }
                  if (!terminated) {
                    this.throwUnexpectedToken();
                  }
                  if (!head) {
                    this.curlyStack.pop();
                  }
                  return {
                    type: 10,
                    value: this.source.slice(start + 1, this.index - rawOffset),
                    cooked,
                    head,
                    tail,
                    lineNumber: this.lineNumber,
                    lineStart: this.lineStart,
                    start,
                    end: this.index
                  };
                };
                Scanner2.prototype.testRegExp = function(pattern, flags) {
                  var astralSubstitute = "\uFFFF";
                  var tmp = pattern;
                  var self2 = this;
                  if (flags.indexOf("u") >= 0) {
                    tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function($0, $1, $2) {
                      var codePoint = parseInt($1 || $2, 16);
                      if (codePoint > 1114111) {
                        self2.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
                      }
                      if (codePoint <= 65535) {
                        return String.fromCharCode(codePoint);
                      }
                      return astralSubstitute;
                    }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, astralSubstitute);
                  }
                  try {
                    RegExp(tmp);
                  } catch (e) {
                    this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
                  }
                  try {
                    return new RegExp(pattern, flags);
                  } catch (exception) {
                    return null;
                  }
                };
                Scanner2.prototype.scanRegExpBody = function() {
                  var ch = this.source[this.index];
                  assert_1.assert(ch === "/", "Regular expression literal must start with a slash");
                  var str = this.source[this.index++];
                  var classMarker = false;
                  var terminated = false;
                  while (!this.eof()) {
                    ch = this.source[this.index++];
                    str += ch;
                    if (ch === "\\") {
                      ch = this.source[this.index++];
                      if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
                        this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
                      }
                      str += ch;
                    } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
                      this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
                    } else if (classMarker) {
                      if (ch === "]") {
                        classMarker = false;
                      }
                    } else {
                      if (ch === "/") {
                        terminated = true;
                        break;
                      } else if (ch === "[") {
                        classMarker = true;
                      }
                    }
                  }
                  if (!terminated) {
                    this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
                  }
                  return str.substr(1, str.length - 2);
                };
                Scanner2.prototype.scanRegExpFlags = function() {
                  var str = "";
                  var flags = "";
                  while (!this.eof()) {
                    var ch = this.source[this.index];
                    if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
                      break;
                    }
                    ++this.index;
                    if (ch === "\\" && !this.eof()) {
                      ch = this.source[this.index];
                      if (ch === "u") {
                        ++this.index;
                        var restore = this.index;
                        var char = this.scanHexEscape("u");
                        if (char !== null) {
                          flags += char;
                          for (str += "\\u"; restore < this.index; ++restore) {
                            str += this.source[restore];
                          }
                        } else {
                          this.index = restore;
                          flags += "u";
                          str += "\\u";
                        }
                        this.tolerateUnexpectedToken();
                      } else {
                        str += "\\";
                        this.tolerateUnexpectedToken();
                      }
                    } else {
                      flags += ch;
                      str += ch;
                    }
                  }
                  return flags;
                };
                Scanner2.prototype.scanRegExp = function() {
                  var start = this.index;
                  var pattern = this.scanRegExpBody();
                  var flags = this.scanRegExpFlags();
                  var value = this.testRegExp(pattern, flags);
                  return {
                    type: 9,
                    value: "",
                    pattern,
                    flags,
                    regex: value,
                    lineNumber: this.lineNumber,
                    lineStart: this.lineStart,
                    start,
                    end: this.index
                  };
                };
                Scanner2.prototype.lex = function() {
                  if (this.eof()) {
                    return {
                      type: 2,
                      value: "",
                      lineNumber: this.lineNumber,
                      lineStart: this.lineStart,
                      start: this.index,
                      end: this.index
                    };
                  }
                  var cp = this.source.charCodeAt(this.index);
                  if (character_1.Character.isIdentifierStart(cp)) {
                    return this.scanIdentifier();
                  }
                  if (cp === 40 || cp === 41 || cp === 59) {
                    return this.scanPunctuator();
                  }
                  if (cp === 39 || cp === 34) {
                    return this.scanStringLiteral();
                  }
                  if (cp === 46) {
                    if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {
                      return this.scanNumericLiteral();
                    }
                    return this.scanPunctuator();
                  }
                  if (character_1.Character.isDecimalDigit(cp)) {
                    return this.scanNumericLiteral();
                  }
                  if (cp === 96 || cp === 125 && this.curlyStack[this.curlyStack.length - 1] === "${") {
                    return this.scanTemplate();
                  }
                  if (cp >= 55296 && cp < 57343) {
                    if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {
                      return this.scanIdentifier();
                    }
                  }
                  return this.scanPunctuator();
                };
                return Scanner2;
              }();
              exports2.Scanner = Scanner;
            },
            /* 13 */
            /***/
            function(module2, exports2) {
              "use strict";
              Object.defineProperty(exports2, "__esModule", { value: true });
              exports2.TokenName = {};
              exports2.TokenName[
                1
                /* BooleanLiteral */
              ] = "Boolean";
              exports2.TokenName[
                2
                /* EOF */
              ] = "<end>";
              exports2.TokenName[
                3
                /* Identifier */
              ] = "Identifier";
              exports2.TokenName[
                4
                /* Keyword */
              ] = "Keyword";
              exports2.TokenName[
                5
                /* NullLiteral */
              ] = "Null";
              exports2.TokenName[
                6
                /* NumericLiteral */
              ] = "Numeric";
              exports2.TokenName[
                7
                /* Punctuator */
              ] = "Punctuator";
              exports2.TokenName[
                8
                /* StringLiteral */
              ] = "String";
              exports2.TokenName[
                9
                /* RegularExpression */
              ] = "RegularExpression";
              exports2.TokenName[
                10
                /* Template */
              ] = "Template";
            },
            /* 14 */
            /***/
            function(module2, exports2) {
              "use strict";
              Object.defineProperty(exports2, "__esModule", { value: true });
              exports2.XHTMLEntities = {
                quot: '"',
                amp: "&",
                apos: "'",
                gt: ">",
                nbsp: "\xA0",
                iexcl: "\xA1",
                cent: "\xA2",
                pound: "\xA3",
                curren: "\xA4",
                yen: "\xA5",
                brvbar: "\xA6",
                sect: "\xA7",
                uml: "\xA8",
                copy: "\xA9",
                ordf: "\xAA",
                laquo: "\xAB",
                not: "\xAC",
                shy: "\xAD",
                reg: "\xAE",
                macr: "\xAF",
                deg: "\xB0",
                plusmn: "\xB1",
                sup2: "\xB2",
                sup3: "\xB3",
                acute: "\xB4",
                micro: "\xB5",
                para: "\xB6",
                middot: "\xB7",
                cedil: "\xB8",
                sup1: "\xB9",
                ordm: "\xBA",
                raquo: "\xBB",
                frac14: "\xBC",
                frac12: "\xBD",
                frac34: "\xBE",
                iquest: "\xBF",
                Agrave: "\xC0",
                Aacute: "\xC1",
                Acirc: "\xC2",
                Atilde: "\xC3",
                Auml: "\xC4",
                Aring: "\xC5",
                AElig: "\xC6",
                Ccedil: "\xC7",
                Egrave: "\xC8",
                Eacute: "\xC9",
                Ecirc: "\xCA",
                Euml: "\xCB",
                Igrave: "\xCC",
                Iacute: "\xCD",
                Icirc: "\xCE",
                Iuml: "\xCF",
                ETH: "\xD0",
                Ntilde: "\xD1",
                Ograve: "\xD2",
                Oacute: "\xD3",
                Ocirc: "\xD4",
                Otilde: "\xD5",
                Ouml: "\xD6",
                times: "\xD7",
                Oslash: "\xD8",
                Ugrave: "\xD9",
                Uacute: "\xDA",
                Ucirc: "\xDB",
                Uuml: "\xDC",
                Yacute: "\xDD",
                THORN: "\xDE",
                szlig: "\xDF",
                agrave: "\xE0",
                aacute: "\xE1",
                acirc: "\xE2",
                atilde: "\xE3",
                auml: "\xE4",
                aring: "\xE5",
                aelig: "\xE6",
                ccedil: "\xE7",
                egrave: "\xE8",
                eacute: "\xE9",
                ecirc: "\xEA",
                euml: "\xEB",
                igrave: "\xEC",
                iacute: "\xED",
                icirc: "\xEE",
                iuml: "\xEF",
                eth: "\xF0",
                ntilde: "\xF1",
                ograve: "\xF2",
                oacute: "\xF3",
                ocirc: "\xF4",
                otilde: "\xF5",
                ouml: "\xF6",
                divide: "\xF7",
                oslash: "\xF8",
                ugrave: "\xF9",
                uacute: "\xFA",
                ucirc: "\xFB",
                uuml: "\xFC",
                yacute: "\xFD",
                thorn: "\xFE",
                yuml: "\xFF",
                OElig: "\u0152",
                oelig: "\u0153",
                Scaron: "\u0160",
                scaron: "\u0161",
                Yuml: "\u0178",
                fnof: "\u0192",
                circ: "\u02C6",
                tilde: "\u02DC",
                Alpha: "\u0391",
                Beta: "\u0392",
                Gamma: "\u0393",
                Delta: "\u0394",
                Epsilon: "\u0395",
                Zeta: "\u0396",
                Eta: "\u0397",
                Theta: "\u0398",
                Iota: "\u0399",
                Kappa: "\u039A",
                Lambda: "\u039B",
                Mu: "\u039C",
                Nu: "\u039D",
                Xi: "\u039E",
                Omicron: "\u039F",
                Pi: "\u03A0",
                Rho: "\u03A1",
                Sigma: "\u03A3",
                Tau: "\u03A4",
                Upsilon: "\u03A5",
                Phi: "\u03A6",
                Chi: "\u03A7",
                Psi: "\u03A8",
                Omega: "\u03A9",
                alpha: "\u03B1",
                beta: "\u03B2",
                gamma: "\u03B3",
                delta: "\u03B4",
                epsilon: "\u03B5",
                zeta: "\u03B6",
                eta: "\u03B7",
                theta: "\u03B8",
                iota: "\u03B9",
                kappa: "\u03BA",
                lambda: "\u03BB",
                mu: "\u03BC",
                nu: "\u03BD",
                xi: "\u03BE",
                omicron: "\u03BF",
                pi: "\u03C0",
                rho: "\u03C1",
                sigmaf: "\u03C2",
                sigma: "\u03C3",
                tau: "\u03C4",
                upsilon: "\u03C5",
                phi: "\u03C6",
                chi: "\u03C7",
                psi: "\u03C8",
                omega: "\u03C9",
                thetasym: "\u03D1",
                upsih: "\u03D2",
                piv: "\u03D6",
                ensp: "\u2002",
                emsp: "\u2003",
                thinsp: "\u2009",
                zwnj: "\u200C",
                zwj: "\u200D",
                lrm: "\u200E",
                rlm: "\u200F",
                ndash: "\u2013",
                mdash: "\u2014",
                lsquo: "\u2018",
                rsquo: "\u2019",
                sbquo: "\u201A",
                ldquo: "\u201C",
                rdquo: "\u201D",
                bdquo: "\u201E",
                dagger: "\u2020",
                Dagger: "\u2021",
                bull: "\u2022",
                hellip: "\u2026",
                permil: "\u2030",
                prime: "\u2032",
                Prime: "\u2033",
                lsaquo: "\u2039",
                rsaquo: "\u203A",
                oline: "\u203E",
                frasl: "\u2044",
                euro: "\u20AC",
                image: "\u2111",
                weierp: "\u2118",
                real: "\u211C",
                trade: "\u2122",
                alefsym: "\u2135",
                larr: "\u2190",
                uarr: "\u2191",
                rarr: "\u2192",
                darr: "\u2193",
                harr: "\u2194",
                crarr: "\u21B5",
                lArr: "\u21D0",
                uArr: "\u21D1",
                rArr: "\u21D2",
                dArr: "\u21D3",
                hArr: "\u21D4",
                forall: "\u2200",
                part: "\u2202",
                exist: "\u2203",
                empty: "\u2205",
                nabla: "\u2207",
                isin: "\u2208",
                notin: "\u2209",
                ni: "\u220B",
                prod: "\u220F",
                sum: "\u2211",
                minus: "\u2212",
                lowast: "\u2217",
                radic: "\u221A",
                prop: "\u221D",
                infin: "\u221E",
                ang: "\u2220",
                and: "\u2227",
                or: "\u2228",
                cap: "\u2229",
                cup: "\u222A",
                int: "\u222B",
                there4: "\u2234",
                sim: "\u223C",
                cong: "\u2245",
                asymp: "\u2248",
                ne: "\u2260",
                equiv: "\u2261",
                le: "\u2264",
                ge: "\u2265",
                sub: "\u2282",
                sup: "\u2283",
                nsub: "\u2284",
                sube: "\u2286",
                supe: "\u2287",
                oplus: "\u2295",
                otimes: "\u2297",
                perp: "\u22A5",
                sdot: "\u22C5",
                lceil: "\u2308",
                rceil: "\u2309",
                lfloor: "\u230A",
                rfloor: "\u230B",
                loz: "\u25CA",
                spades: "\u2660",
                clubs: "\u2663",
                hearts: "\u2665",
                diams: "\u2666",
                lang: "\u27E8",
                rang: "\u27E9"
              };
            },
            /* 15 */
            /***/
            function(module2, exports2, __webpack_require__) {
              "use strict";
              Object.defineProperty(exports2, "__esModule", { value: true });
              var error_handler_1 = __webpack_require__(10);
              var scanner_1 = __webpack_require__(12);
              var token_1 = __webpack_require__(13);
              var Reader = function() {
                function Reader2() {
                  this.values = [];
                  this.curly = this.paren = -1;
                }
                Reader2.prototype.beforeFunctionExpression = function(t2) {
                  return [
                    "(",
                    "{",
                    "[",
                    "in",
                    "typeof",
                    "instanceof",
                    "new",
                    "return",
                    "case",
                    "delete",
                    "throw",
                    "void",
                    // assignment operators
                    "=",
                    "+=",
                    "-=",
                    "*=",
                    "**=",
                    "/=",
                    "%=",
                    "<<=",
                    ">>=",
                    ">>>=",
                    "&=",
                    "|=",
                    "^=",
                    ",",
                    // binary/unary operators
                    "+",
                    "-",
                    "*",
                    "**",
                    "/",
                    "%",
                    "++",
                    "--",
                    "<<",
                    ">>",
                    ">>>",
                    "&",
                    "|",
                    "^",
                    "!",
                    "~",
                    "&&",
                    "||",
                    "?",
                    ":",
                    "===",
                    "==",
                    ">=",
                    "<=",
                    "<",
                    ">",
                    "!=",
                    "!=="
                  ].indexOf(t2) >= 0;
                };
                Reader2.prototype.isRegexStart = function() {
                  var previous = this.values[this.values.length - 1];
                  var regex = previous !== null;
                  switch (previous) {
                    case "this":
                    case "]":
                      regex = false;
                      break;
                    case ")":
                      var keyword = this.values[this.paren - 1];
                      regex = keyword === "if" || keyword === "while" || keyword === "for" || keyword === "with";
                      break;
                    case "}":
                      regex = false;
                      if (this.values[this.curly - 3] === "function") {
                        var check = this.values[this.curly - 4];
                        regex = check ? !this.beforeFunctionExpression(check) : false;
                      } else if (this.values[this.curly - 4] === "function") {
                        var check = this.values[this.curly - 5];
                        regex = check ? !this.beforeFunctionExpression(check) : true;
                      }
                      break;
                    default:
                      break;
                  }
                  return regex;
                };
                Reader2.prototype.push = function(token) {
                  if (token.type === 7 || token.type === 4) {
                    if (token.value === "{") {
                      this.curly = this.values.length;
                    } else if (token.value === "(") {
                      this.paren = this.values.length;
                    }
                    this.values.push(token.value);
                  } else {
                    this.values.push(null);
                  }
                };
                return Reader2;
              }();
              var Tokenizer = function() {
                function Tokenizer2(code, config) {
                  this.errorHandler = new error_handler_1.ErrorHandler();
                  this.errorHandler.tolerant = config ? typeof config.tolerant === "boolean" && config.tolerant : false;
                  this.scanner = new scanner_1.Scanner(code, this.errorHandler);
                  this.scanner.trackComment = config ? typeof config.comment === "boolean" && config.comment : false;
                  this.trackRange = config ? typeof config.range === "boolean" && config.range : false;
                  this.trackLoc = config ? typeof config.loc === "boolean" && config.loc : false;
                  this.buffer = [];
                  this.reader = new Reader();
                }
                Tokenizer2.prototype.errors = function() {
                  return this.errorHandler.errors;
                };
                Tokenizer2.prototype.getNextToken = function() {
                  if (this.buffer.length === 0) {
                    var comments = this.scanner.scanComments();
                    if (this.scanner.trackComment) {
                      for (var i = 0; i < comments.length; ++i) {
                        var e = comments[i];
                        var value = this.scanner.source.slice(e.slice[0], e.slice[1]);
                        var comment = {
                          type: e.multiLine ? "BlockComment" : "LineComment",
                          value
                        };
                        if (this.trackRange) {
                          comment.range = e.range;
                        }
                        if (this.trackLoc) {
                          comment.loc = e.loc;
                        }
                        this.buffer.push(comment);
                      }
                    }
                    if (!this.scanner.eof()) {
                      var loc = void 0;
                      if (this.trackLoc) {
                        loc = {
                          start: {
                            line: this.scanner.lineNumber,
                            column: this.scanner.index - this.scanner.lineStart
                          },
                          end: {}
                        };
                      }
                      var startRegex = this.scanner.source[this.scanner.index] === "/" && this.reader.isRegexStart();
                      var token = startRegex ? this.scanner.scanRegExp() : this.scanner.lex();
                      this.reader.push(token);
                      var entry = {
                        type: token_1.TokenName[token.type],
                        value: this.scanner.source.slice(token.start, token.end)
                      };
                      if (this.trackRange) {
                        entry.range = [token.start, token.end];
                      }
                      if (this.trackLoc) {
                        loc.end = {
                          line: this.scanner.lineNumber,
                          column: this.scanner.index - this.scanner.lineStart
                        };
                        entry.loc = loc;
                      }
                      if (token.type === 9) {
                        var pattern = token.pattern;
                        var flags = token.flags;
                        entry.regex = { pattern, flags };
                      }
                      this.buffer.push(entry);
                    }
                  }
                  return this.buffer.shift();
                };
                return Tokenizer2;
              }();
              exports2.Tokenizer = Tokenizer;
            }
            /******/
          ])
        );
      });
    }
  });

  // src/main.tsx
  init_esbuild_inject();
  var import_client = __toESM(require_client());

  // src/index.tsx
  init_esbuild_inject();
  var import_react2 = __toESM(require_react());

  // node_modules/usehooks-ts/dist/index.mjs
  init_esbuild_inject();
  var import_react = __toESM(require_react(), 1);
  var import_lodash = __toESM(require_lodash(), 1);
  function useBoolean(defaultValue) {
    const [value, setValue] = (0, import_react.useState)(!!defaultValue);
    const setTrue = (0, import_react.useCallback)(() => {
      setValue(true);
    }, []);
    const setFalse = (0, import_react.useCallback)(() => {
      setValue(false);
    }, []);
    const toggle = (0, import_react.useCallback)(() => {
      setValue((x) => !x);
    }, []);
    return { value, setValue, setTrue, setFalse, toggle };
  }

  // src/lib/components.tsx
  init_esbuild_inject();

  // src/lib/util.ts
  init_esbuild_inject();
  function noop() {
  }
  function promiseDoneCall(fn) {
    promiseDone(fn());
  }
  function promiseDone(promise) {
    const invokeAtError = new Error();
    promise.then(noop).catch((e) => {
      console.log("promiseDoneCall exception", e, invokeAtError.stack);
    });
  }
  function nullthrows(value, message) {
    if (value == null) {
      throw new Error("nullthrows: " + (message ?? "value is null or undefined"));
    }
    return value;
  }
  function isIdentifierChar(char) {
    return /^[a-z0-9_$]+$/i.test(char);
  }
  function lastChar(str) {
    if (str == null)
      throw new Error();
    return str[str.length - 1];
  }
  function arrayLast(array) {
    return array[array.length - 1];
  }
  function loadImage(src) {
    return new Promise((resolve, reject) => {
      const img = new Image();
      img.onload = () => resolve(img);
      img.onerror = reject;
      img.src = src;
    });
  }
  function cn(...classes) {
    return classes.filter(Boolean).join(" ");
  }
  function falslyToUndefined(value) {
    if (value == null)
      return void 0;
    if (value === false)
      return void 0;
    return value;
  }
  function px(value) {
    return value + "px";
  }

  // src/lib/components.tsx
  var import_jsx_runtime = __toESM(require_jsx_runtime());
  function Column(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: cn("flex flex-col", props.className), children: props.children });
  }
  function Row(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: cn("flex flex-row", props.className), children: props.children });
  }
  function LinkButton(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("a", { onClick: props.onClick, className: cn("hover:underline cursor-pointer select-none", props.className), children: props.label });
  }
  function Button(props) {
    let className;
    switch (props.use) {
      case "secondary":
        className = "outline-4 outline-black text-black";
        break;
      case "primary":
      default:
        className = "bg-black text-white";
        break;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      "button",
      {
        onClick: props.onClick,
        className: cn(
          // format
          "border-2 border-black font-bold",
          "rounded-full",
          "pt-1 pb-1.5 px-7",
          "cursor-pointer disabled:cursor-default",
          "hover:scale-105 active:scale-95",
          "disabled:opacity-50 transition-transform disabled:hover:scale-100",
          "scale-100 duration-75",
          "uppercase",
          className,
          props.className
        ),
        disabled: props.isDisabled,
        title: falslyToUndefined(props.tooltip) ?? props.isDisabled ? falslyToUndefined(props.disabledTooltip) : void 0,
        children: props.label
      }
    );
  }
  function Card(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: cn("bg-white p-4 rounded-lg shadow-lg", props.className), children: props.children });
  }

  // src/lib/cube.ts
  init_esbuild_inject();
  function dot(v1, v2) {
    var sum = 0;
    for (let i = 0; i < v1.length; i++) {
      sum += v1[i] * v2[i];
    }
    return sum;
  }
  var matrix = class _matrix {
    cols;
    rows;
    constructor(...rows) {
      this.rows = rows;
      this.cols = [];
      for (let i = 0; i < rows[0].length; i++) {
        let col = [];
        for (let j = 0; j < this.rows.length; j++) {
          col.push(this.rows[j][i]);
        }
        this.cols.push(col);
      }
    }
    mul(other) {
      var result = [];
      for (let i = 0; i < this.rows.length; i++) {
        result.push([]);
        for (let j = 0; j < other.cols.length; j++) {
          result[i][j] = dot(this.rows[i], other.cols[j]);
        }
      }
      return new _matrix(...result);
    }
    wDivide() {
      if (this.cols.length !== 1 || this.cols[0].length !== 4) {
        console.log("nah son");
        return;
      }
      for (let i = 0; i < 3; i++) {
        this.cols[0][i] /= this.cols[0][3];
      }
    }
  };
  var canv = document.createElement("canvas");
  var debugShowCanvas = false;
  if (debugShowCanvas) {
    canv.style.border = "1px solid red";
    document.body.appendChild(canv);
  }
  canv.width = 800;
  canv.height = 100;
  var ctx = canv.getContext("2d");
  var scale = 1.55;
  ctx.translate(-230, -28);
  ctx.scale(scale, scale / 8);
  var w = canv.width;
  var h = 800;
  var d = 1;
  var a = w / h;
  var yAngle = Math.PI * 0.25;
  var xAngle = Math.PI * 0.2;
  var values = [
    [d / a, 0, 0, 0],
    [0, d, 0, 0],
    [0, 0, d, 0],
    [0, 0, -1, 0]
  ];
  var proj = new matrix(...values);
  var trans = new matrix([1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, -6], [0, 0, 0, 1]);
  var ulf = new matrix([-1], [1], [1], [1]);
  var urf = new matrix([1], [1], [1], [1]);
  var lrf = new matrix([1], [-1], [1], [1]);
  var llf = new matrix([-1], [-1], [1], [1]);
  var ulb = new matrix([-1], [1], [-1], [1]);
  var urb = new matrix([1], [1], [-1], [1]);
  var llb = new matrix([-1], [-1], [-1], [1]);
  var lrb = new matrix([1], [-1], [-1], [1]);
  var orderedPoints = [ulf, urf, lrf, llf, ulf, ulb, urb, lrb, llb, ulb, urb, urf, lrf, lrb, llb, llf];
  ctx.strokeStyle = "black";
  ctx.fillStyle = "black";
  ctx.lineWidth = 55;
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  var lastFrameTime = Date.now();
  var rotX;
  var rotY;
  function generateRotationMatrices() {
    rotX = new matrix([1, 0, 0, 0], [0, Math.cos(xAngle), -Math.sin(xAngle), 0], [0, Math.sin(xAngle), Math.cos(xAngle), 0], [0, 0, 0, 1]);
    rotY = new matrix([Math.cos(yAngle), 0, Math.sin(yAngle), 0], [0, 1, 0, 0], [-Math.sin(yAngle), 0, Math.cos(yAngle), 0], [0, 0, 0, 1]);
  }
  function getCubeCanvas() {
    return canv;
  }
  function drawCube() {
    generateRotationMatrices();
    let mat = proj.mul(trans.mul(rotX.mul(rotY)));
    ctx.clearRect(0, 0, w, h);
    ctx.beginPath();
    let initialPoint = getTransformedCoords(mat, orderedPoints[0]);
    ctx.moveTo(initialPoint.x, initialPoint.y);
    for (let i = 1; i < orderedPoints.length; i++) {
      let transformedPoint = getTransformedCoords(mat, orderedPoints[i]);
      ctx.lineTo(transformedPoint.x, transformedPoint.y);
    }
    ctx.stroke();
    let dt = 0.01;
    lastFrameTime = Date.now();
    xAngle += dt;
    yAngle -= 2 * dt;
  }
  function getTransformedCoords(mat, point) {
    let ndc = mat.mul(point);
    ndc.wDivide();
    let x = w * ndc.cols[0][0] + 0.5 * w;
    let y = h - (h * ndc.cols[0][1] + 0.5 * h);
    return { x, y };
  }

  // src/lib/genRenderCode.ts
  init_esbuild_inject();

  // src/lib/genLineData.ts
  init_esbuild_inject();
  function Run(startX, endX) {
    return [startX, endX];
  }
  async function genLineDataFromImage(img) {
    const canvas2 = document.createElement("canvas");
    const debugShowCanvas2 = false;
    if (debugShowCanvas2) {
      document.body.append(canvas2);
    }
    const canvasWidth = img.width;
    const canvasHeight = Math.floor(img.height * (100 / 800));
    canvas2.width = canvasWidth;
    canvas2.height = canvasHeight;
    const ctx2 = nullthrows(canvas2.getContext("2d"));
    ctx2.drawImage(img, 0, 0, canvas2.width, canvas2.height);
    return await genLineDataFromCanvas(canvas2);
  }
  async function genLineDataFromCanvas(canvas2) {
    const ctx2 = nullthrows(canvas2.getContext("2d"));
    const imageData = ctx2.getImageData(0, 0, canvas2.width, canvas2.height);
    const data = imageData.data;
    const isPixel = (x, y) => {
      const i = y * (canvas2.width * 4) + x * 4;
      const red = data[i];
      const green = data[i + 1];
      const blue = data[i + 2];
      const alpha = data[i + 3];
      return red < 10 && green < 10 && blue < 10 && alpha > 200;
    };
    const lines = [];
    for (let y = 0; y < canvas2.height; y++) {
      const line = [];
      lines.push(line);
      let x = 0;
      while (x < canvas2.width) {
        while (!isPixel(x, y) && x < canvas2.width)
          x++;
        if (x >= canvas2.width)
          break;
        const startX = x;
        while (isPixel(x, y) && x < canvas2.width)
          x++;
        const endX = x;
        line.push(Run(startX / canvas2.width, endX / canvas2.width));
      }
    }
    return lines;
  }

  // src/lib/genSplitableCodeSegments.ts
  init_esbuild_inject();
  var import_generator = __toESM(require_lib4());
  var parser = __toESM(require_lib5());
  var import_traverse = __toESM(require_lib13());
  var t = __toESM(require_lib3());
  var esprima = __toESM(require_esprima());
  function genParts(tokens) {
    return tokens.map((o) => {
      if (o.type === "BlockComment") {
        return `/*${o.value}*/`;
      }
      return o.value;
    });
  }
  function joinTokens(tokens) {
    return genParts(tokens).join(" ");
  }
  function genSplitableCodeSegments(originalCode, validate = true) {
    const slicableCode = addParenToRetExprsCode(originalCode);
    const tokens = esprima.tokenize(slicableCode, { comment: true });
    const slicableTokens = mergeNonSplitTokens(tokens);
    const parts = slicableTokens.map((o) => o.value);
    if (validate) {
      const codeFromSlicableTokens = joinTokens(slicableTokens);
      let normSlicableFromTokensCode;
      try {
        normSlicableFromTokensCode = normalizeCode(codeFromSlicableTokens);
      } catch (e) {
        if (e instanceof SyntaxError) {
          const index = e.loc.line - 1;
          console.log("Error line", {
            // format
            before: parts.slice(Math.max(0, index - 10), index).join(" "),
            at: parts[index],
            after: parts.slice(index, index + 10).join(" "),
            tokens: index === 0 ? slicableTokens.slice(0, 1) : slicableTokens.slice(index - 1, index + 2)
          });
        }
        throw e;
      }
      const normOriginalCode = normalizeCode(originalCode);
      if (normOriginalCode !== normSlicableFromTokensCode) {
        throw new Error("Could not generate tokens (generated code mismatch)");
      }
    }
    return parts;
  }
  function parseCode(code) {
    return parser.parse(code, {
      sourceType: "script",
      plugins: ["jsx"],
      attachComment: false
    });
  }
  function addParenToRetExprsCode(code) {
    const ast = parseCode(code);
    addParenToRetExprs(ast);
    const output = (0, import_generator.default)(ast, {}, code);
    return output.code;
  }
  function mergeNonSplitTokens(tokens) {
    const newTokens = [];
    for (let i = 0; i < tokens.length; i++) {
      const token = tokens[i];
      const nextToken = tokens[i + 1];
      if (isToken(token, "Keyword", "return") && isToken(nextToken, "Punctuator", "(")) {
        newTokens.push({ type: "$Combined", value: `${token.value} ${nextToken.value}` });
        i++;
      } else if (isToken(nextToken, "Punctuator", "++") || isToken(nextToken, "Punctuator", "--")) {
        newTokens.push({ type: "$Combined", value: `${token.value} ${nextToken.value}` });
        i++;
      } else if (isToken(token, "Keyword", "throw")) {
        newTokens.push({ type: "$Combined", value: `${token.value} ${nextToken.value}` });
        i++;
      } else {
        newTokens.push(token);
      }
    }
    return newTokens;
  }
  function addParenToRetExprs(ast) {
    (0, import_traverse.default)(ast, {
      ReturnStatement(path) {
        if (path.node.argument) {
          if (!t.isParenthesizedExpression(path.node.argument)) {
            const newExpression = t.parenthesizedExpression(path.node.argument);
            path.node.argument = newExpression;
          }
        }
      }
    });
  }
  function normalizeCode(code) {
    const ast = parseCode(code);
    const output = (0, import_generator.default)(ast, { comments: false }, code);
    return output.code;
  }
  function isToken(token, type, value) {
    if (token == null)
      return false;
    return token.type === type && token.value === value;
  }

  // src/lib/genRenderCode.ts
  async function genRenderCodeFromImage(code, image, charWidth2, renderWidth2) {
    const lineData = await genLineDataFromImage(image);
    return await genRenderCodeFromLineData(code, lineData, charWidth2, renderWidth2);
  }
  async function genRenderCodeFromCanvas(code, canvas2, charWidth2, renderWidth2) {
    const lineData = await genLineDataFromCanvas(canvas2);
    return await genRenderCodeFromLineData(code, lineData, charWidth2, renderWidth2);
  }
  async function genRenderCodeFromLineData(code, lineData, charWidth2, renderWidth2) {
    const splitableCode = genSplitableCodeSegments(code);
    const measureTextWidth = (text) => getWidthFromLength(text.length);
    const getWidthFromLength = (length) => length * charWidth2;
    const getPartsWidth = (parts) => getWidthFromLength(parts.map((o) => o.length).reduce((a2, b) => a2 + b, 0));
    const getSegmentParts = (j2, lineParts, startX, endX) => {
      if (endX <= startX)
        throw new Error();
      {
        const x2 = getPartsWidth(lineParts);
        if (x2 < startX) {
          const dist = startX - x2;
          const numChars = Math.floor(dist / charWidth2);
          lineParts.push(" ".repeat(numChars));
        }
      }
      let trackMaxNumLoops = 0;
      let segmentParts = [];
      const linePartsWidth = getPartsWidth(lineParts);
      while (true) {
        const x2 = linePartsWidth + getPartsWidth(segmentParts);
        if (x2 >= endX)
          break;
        if (j2 >= splitableCode.length)
          return { j: j2, segmentParts };
        const codePiece = splitableCode[j2];
        const needsSpace = segmentParts.length && doesNeedSpace(arrayLast(segmentParts), codePiece);
        const newEndX = Math.abs(x2 + measureTextWidth(codePiece)) + (needsSpace ? charWidth2 : 0);
        if (newEndX > endX) {
          const dist = endX - x2;
          const doubleQuote = '"';
          const singleQuote = "'";
          if (dist >= 2 * charWidth2 && (codePiece.endsWith(singleQuote) || codePiece.endsWith(doubleQuote))) {
            const codePieceBody = codePiece.slice(1, codePiece.length - 1);
            if (codePieceBody !== "use strict") {
              const quoteChar = lastChar(codePiece);
              const numChars = Math.floor(dist / charWidth2);
              if (numChars === 2) {
                segmentParts.push(quoteChar + quoteChar);
                splitableCode.splice(j2, 0, "+");
              } else {
                let numTakeChars = numChars - 2;
                let takeChars = codePieceBody.slice(0, numTakeChars);
                const nextToLastChar = takeChars[takeChars.length - 2];
                let doProcess = true;
                if (lastChar(takeChars) === "\\") {
                  if (nextToLastChar !== "\\") {
                    numTakeChars--;
                    takeChars = codePieceBody.slice(0, numTakeChars);
                  }
                }
                if (doProcess) {
                  const restChars = codePieceBody.slice(numTakeChars);
                  segmentParts.push(quoteChar + takeChars + quoteChar);
                  splitableCode[j2] = quoteChar + restChars + quoteChar;
                  splitableCode.splice(j2, 0, "+");
                }
              }
            }
            break;
          } else {
            const targetWidth = endX - startX;
            const newWidth = newEndX - startX;
            const closePercent = newWidth / targetWidth - 1;
            const allow = closePercent < 0.05 && segmentParts.length === 0;
            if (!allow) {
              break;
            }
          }
        }
        if (needsSpace) {
          segmentParts.push(" ");
        }
        segmentParts.push(codePiece);
        j2++;
        trackMaxNumLoops++;
        if (trackMaxNumLoops >= 1e3)
          throw new Error("loopCount >= 1000");
      }
      const x = linePartsWidth + getPartsWidth(segmentParts);
      if (x < endX && segmentParts.length > 1) {
        const dist = endX - x;
        const numChars = Math.floor(dist / charWidth2);
        const numSpotsForSpaces = segmentParts.length - 1;
        const numSpacesPerSpot = Math.floor(numChars / numSpotsForSpaces);
        const numCharsInserted = numSpacesPerSpot * numSpotsForSpaces;
        const numCharsRemaining = numChars - numCharsInserted;
        const spots = new Array(numSpotsForSpaces).fill(numSpacesPerSpot);
        if (numCharsRemaining > 0) {
          let j3 = segmentParts.length - 2;
          const skipSpot = numSpotsForSpaces / numCharsRemaining;
          for (let i = 0; i < numCharsRemaining; i++) {
            spots[Math.floor(j3)]++;
            j3 -= skipSpot;
          }
        }
        const newSegmentParts = new Array(segmentParts.length + spots.length);
        newSegmentParts[0] = segmentParts[0];
        for (let i = 0; i < spots.length; i++) {
          newSegmentParts[i * 2 + 1] = " ".repeat(spots[i]);
          newSegmentParts[i * 2 + 2] = segmentParts[i + 1];
        }
        segmentParts = newSegmentParts;
      }
      return { j: j2, segmentParts };
    };
    let j = 0;
    let renderCode = "";
    let targetDrawCount = 1e3;
    let drawCount = 0;
    outer_for:
      while (drawCount < targetDrawCount) {
        drawCount++;
        for (let iLine = 0; iLine < lineData.length; iLine++) {
          const line = lineData[iLine];
          const lineParts = [];
          for (let iRun = 0; iRun < line.length; iRun++) {
            const run = line[iRun];
            const [startXPercent, endXPercent] = run;
            const [startX, endX] = [startXPercent, endXPercent].map((x) => x * renderWidth2);
            const results = getSegmentParts(j, lineParts, startX, endX);
            if (results == null)
              break outer_for;
            const { segmentParts } = results;
            j = results.j;
            lineParts.push(...segmentParts);
            if (j >= splitableCode.length)
              break;
          }
          renderCode += lineParts.join("");
          renderCode += "\n";
          if (j >= splitableCode.length)
            break outer_for;
        }
      }
    renderCode += "\n";
    renderCode += "\n";
    renderCode += "\n";
    while (j < splitableCode.length) {
      const lineParts = [];
      const [startX, endX] = [0, renderWidth2];
      const results = getSegmentParts(j, [], startX, endX);
      if (results == null) {
        getSegmentParts(j, [], startX, endX);
        break;
      }
      const { segmentParts } = results;
      j = results.j;
      lineParts.push(...segmentParts);
      renderCode += lineParts.join("");
      renderCode += "\n";
      if (j >= splitableCode.length)
        break;
    }
    return renderCode;
  }
  function doesNeedSpace(prev, next) {
    return isIdentifierChar(lastChar(prev)) && isIdentifierChar(next[0]);
  }

  // src/index.tsx
  var import_jsx_runtime2 = __toESM(require_jsx_runtime());
  var renderWidth = 900;
  var charWidth = 4;
  function IndexPage() {
    const [renderCode, setRenderCode] = (0, import_react2.useState)("");
    const [code, setCode] = (0, import_react2.useState)("");
    const [screen, setScreen] = (0, import_react2.useState)("welcome");
    const onImageSelect = (0, import_react2.useCallback)(
      async (image) => {
        setScreen("render-code");
        const renderCode2 = await genRenderCodeFromImage(code, image, charWidth, renderWidth);
        setRenderCode(renderCode2);
      },
      [code]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_jsx_runtime2.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(
      Page,
      {
        hideLogo: screen === "welcome",
        onClickLogo: () => {
          setScreen("welcome");
          setRenderCode("");
        },
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(Container, { children: [
            screen === "welcome" && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(WelcomeScreen, { onGetStarted: () => setScreen("enter-code") }),
            screen === "enter-code" && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
              EnterCodeScreen,
              {
                code,
                onContinue: (code2) => {
                  setCode(code2);
                  setScreen("select-shape");
                }
              }
            ),
            screen === "select-shape" && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
              SelectShapeScreen,
              {
                onContinue: onImageSelect,
                onDrawImage: () => setScreen("draw-image"),
                onWord: () => setScreen("enter-word"),
                onCube: () => setScreen("cube")
              }
            ),
            screen === "draw-image" && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(DrawImageScreen, { onContinue: onImageSelect }),
            screen === "enter-word" && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(EnterWordScreen, { onContinue: onImageSelect })
          ] }),
          screen === "render-code" && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(CodeRender, { code: renderCode }),
          screen === "cube" && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(CubeRender, { code })
        ]
      }
    ) });
  }
  var canvas = getCubeCanvas();
  function CubeRender(props) {
    const [renderCode, setRenderCode] = (0, import_react2.useState)("");
    const { code } = props;
    (0, import_react2.useEffect)(() => {
      let intervalId;
      promiseDoneCall(async () => {
        if (!code)
          return;
        intervalId = window.setInterval(async () => {
          drawCube();
          const renderCode2 = await genRenderCodeFromCanvas(code, canvas, charWidth, renderWidth);
          setRenderCode(renderCode2);
        }, 10);
      });
      return () => clearInterval(intervalId);
    }, [code]);
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(CodeRender, { code: renderCode });
  }
  function EnterWordScreen(props) {
    const CHAR_LIMIT = 6;
    const [word, setWord] = (0, import_react2.useState)("");
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("div", { className: "mt-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Title, { content: "The Word Is..." }),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(Card, { className: "mt-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          "input",
          {
            value: word,
            onChange: (e) => setWord(e.target.value),
            placeholder: "Enter a word...",
            className: "outline-none w-full resize-none border-2 border-gray-300 rounded-md p-2",
            autoFocus: true
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          "div",
          {
            className: cn(" mt-1 ml-1", word.trim().length <= CHAR_LIMIT ? "text-gray-400" : "text-red-800"),
            children: word.trim().length === 0 ? `Up to ${CHAR_LIMIT} characters` : `${CHAR_LIMIT - word.trim().length} characters left`
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(Row, { className: "justify-end mt-4 items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", { className: "flex-grow" }),
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
            Button,
            {
              label: "Next",
              isDisabled: word.trim().length === 0 || word.trim().length > 6,
              disabledTooltip: word.trim().length === 0 ? "Enter some code to continue." : "Word must be 6 characters or less",
              onClick: async () => {
                const canvas2 = document.createElement("canvas");
                const debugShowCanvas2 = false;
                if (debugShowCanvas2) {
                  canvas2.style.border = "1px solid red";
                  document.body.append(canvas2);
                }
                canvas2.width = 100;
                canvas2.height = 1e3;
                const cxt = canvas2.getContext("2d");
                const lineWidth = 60;
                const configureContext = (cxt2) => {
                  cxt2.font = "800px monospace";
                  cxt2.lineWidth = lineWidth;
                };
                function getTextSize(text, lineWidth2) {
                  const size = cxt.measureText(text);
                  const height = size.actualBoundingBoxAscent + lineWidth2 + size.actualBoundingBoxDescent;
                  return { baseline: size.actualBoundingBoxAscent + lineWidth2 / 2, height: height + lineWidth2, ascent: size.actualBoundingBoxAscent };
                }
                function writeTextTop(cxt2, x, y, text, lineWidth2) {
                  const size = getTextSize(text, lineWidth2);
                  y += size.ascent;
                  cxt2.fillText(text, x, y);
                  cxt2.strokeText(text, x, y);
                }
                function measureTextHeight(fullText) {
                  let y = 0;
                  for (const c of fullText) {
                    const size = cxt.measureText(c);
                    const height = size.actualBoundingBoxAscent + lineWidth + size.actualBoundingBoxDescent;
                    y += height + 10;
                  }
                  return y;
                }
                configureContext(cxt);
                canvas2.height = measureTextHeight(word) + 400;
                canvas2.width = 800;
                configureContext(cxt);
                function writeText(fullText) {
                  cxt.fillStyle = "black";
                  cxt.strokeStyle = "black";
                  const x = 200;
                  let y = 0;
                  for (const c of fullText) {
                    const size = cxt.measureText(c);
                    const height = size.actualBoundingBoxAscent + lineWidth + size.actualBoundingBoxDescent;
                    writeTextTop(cxt, x, y, c, lineWidth);
                    y += height + 10;
                  }
                }
                writeText(word);
                const img = new Image();
                img.onload = () => props.onContinue(img);
                img.src = canvas2.toDataURL();
              }
            }
          )
        ] })
      ] })
    ] });
  }
  function DrawImageScreen(props) {
    const canvasRef = (0, import_react2.useRef)(null);
    const containerRef = (0, import_react2.useRef)(null);
    const { value: isDirty, setTrue: setIsDirtyTrue, setFalse: setIsDirtyFalse } = useBoolean(false);
    (0, import_react2.useEffect)(() => {
      const container = containerRef.current;
      const canvas2 = canvasRef.current;
      const ctx2 = canvas2.getContext("2d");
      ctx2.lineCap = "round";
      ctx2.lineWidth = 120;
      let isDragging = false;
      let lastX = 0;
      let lastY = 0;
      const cursorCanvas = document.createElement("canvas");
      cursorCanvas.width = ctx2.lineWidth;
      cursorCanvas.height = ctx2.lineWidth;
      cursorCanvas.className = "absolute pointer-events-none";
      container.appendChild(cursorCanvas);
      const cursorCtx = cursorCanvas.getContext("2d");
      cursorCtx.lineCap = ctx2.lineCap;
      cursorCtx.lineWidth = ctx2.lineWidth;
      cursorCtx.beginPath();
      const cursorCenter = ctx2.lineWidth / 2;
      cursorCtx.moveTo(cursorCenter, cursorCenter);
      cursorCtx.lineTo(cursorCenter, cursorCenter);
      cursorCtx.stroke();
      const onMouseDown = (e) => {
        isDragging = true;
        setIsDirtyTrue();
        const { clientX, clientY } = e;
        const { offsetLeft, offsetTop } = container;
        const x = clientX - offsetLeft;
        const y = clientY - offsetTop;
        ctx2.beginPath();
        ctx2.moveTo(x, y);
        ctx2.lineTo(x, y);
        ctx2.stroke();
        [lastX, lastY] = [x, y];
      };
      const onMouseMove = (e) => {
        const { clientX, clientY } = e;
        const { offsetLeft, offsetTop } = container;
        const x = clientX - offsetLeft;
        const y = clientY - offsetTop;
        cursorCanvas.style.left = px(x - cursorCenter);
        cursorCanvas.style.top = px(y - cursorCenter);
        if (!isDragging)
          return;
        ctx2.beginPath();
        ctx2.moveTo(lastX, lastY);
        ctx2.lineTo(x, y);
        ctx2.stroke();
        [lastX, lastY] = [x, y];
      };
      const onMouseUp = (e) => {
        isDragging = false;
      };
      const onMouseLeave = (e) => {
        cursorCanvas.style.left = px(-1e3);
        cursorCanvas.style.top = px(-1e3);
      };
      canvas2.addEventListener("mousedown", onMouseDown);
      canvas2.addEventListener("mousemove", onMouseMove);
      canvas2.addEventListener("mouseup", onMouseUp);
      canvas2.addEventListener("mouseleave", onMouseLeave);
      return () => {
        canvas2.removeEventListener("mousedown", onMouseDown);
        canvas2.removeEventListener("mousemove", onMouseMove);
        canvas2.removeEventListener("mouseup", onMouseUp);
        canvas2.removeEventListener("mouseleave", onMouseLeave);
      };
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(Column, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Title, { content: "DRAW", className: "mt-4" }),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", { ref: containerRef, className: "border-4 border-black rounded-3xl mt-4 overflow-hidden bg-white aspect-square flex items-center justify-center relative", children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("canvas", { width: 665, height: 665, ref: canvasRef, className: "aspect-square" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(Column, { className: "mt-4 gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          Button,
          {
            label: "Clear",
            use: "secondary",
            onClick: () => {
              const canvas2 = nullthrows(canvasRef.current);
              canvas2.getContext("2d").clearRect(0, 0, canvas2.width, canvas2.height);
              setIsDirtyFalse();
            }
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          Button,
          {
            label: "Continue",
            isDisabled: !isDirty,
            disabledTooltip: "Draw something to continue.",
            onClick: () => {
              const img = new Image();
              img.onload = () => props.onContinue(img);
              img.src = nullthrows(canvasRef.current).toDataURL();
            }
          }
        )
      ] })
    ] });
  }
  function SelectShapeScreen(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Title, { content: "Select a Shape", className: "mt-4" }),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(Row, { className: "gap-4 mt-5 flex-wrap", children: [
        [
          // format
          { imageUrl: "dist/shape-light-bulb.png" },
          { imageUrl: "dist/shape-star.png" },
          { imageUrl: "dist/shape-star-column.png" },
          { imageUrl: "dist/shape-helix.png" }
        ].map((o) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          "div",
          {
            onClick: async () => {
              const image = await loadImage(o.imageUrl);
              props.onContinue(image);
            },
            className: "border-4 border-black rounded-3xl w-80 h-80 p-4 pt-3 bg-white hover:scale-105 transition-transform cursor-pointer flex items-center justify-center overflow-hidden select-none",
            children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("img", { src: o.imageUrl, className: "w-full x:h-40 x:object-cover" })
          },
          o.imageUrl
        )),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", { onClick: props.onDrawImage, className: "border-4 border-black rounded-3xl w-80 h-80 p-4 pt-3 bg-white hover:scale-105 transition-transform cursor-pointer flex items-center justify-center select-none", children: /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("div", { className: "text-9xl text-center font-bold font-mono", style: { lineHeight: ".7em" }, children: [
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", { children: "DR" }),
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", { children: "AW" })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", { onClick: props.onWord, className: "border-4 border-black rounded-3xl w-80 h-80 p-4 pt-3 bg-white hover:scale-105 transition-transform cursor-pointer flex items-center justify-center select-none", children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", { className: "text-9xl text-center font-bold font-mono", style: { lineHeight: ".7em" }, children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("img", { src: "dist/shape-word.png", className: "w-full x:h-40 x:object-cover" }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", { onClick: props.onCube, className: "border-4 border-black rounded-3xl w-80 h-80 p-4 pt-3 bg-white hover:scale-105 transition-transform cursor-pointer flex items-center justify-center select-none", children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", { className: "text-9xl text-center font-bold font-mono", style: { lineHeight: ".7em" }, children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("img", { src: "dist/shape-cube.png", className: "w-full x:h-40 x:object-cover" }) }) })
      ] })
    ] });
  }
  function Title(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", { className: cn("text-center text-black text-2xl font-bold", props.className), children: props.content });
  }
  function WelcomeScreen(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(Column, { className: "content-center items-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("img", { src: "dist/logo.svg", className: "w-[300px] h-[66.53px] mt-24" }),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Title, { content: "Whip your JavaScript into Shape", className: "mt-8" }),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", { children: "Literally, that is. Enter your code, choose a picture and BAM!" }),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", { children: "Code in the shape of a picture...wonders never cease." }),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Button, { label: "Get Started", use: "secondary", className: "mt-8", onClick: props.onGetStarted })
    ] });
  }
  function EnterCodeScreen(props) {
    const [code, setCode] = (0, import_react2.useState)(props.code);
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("div", { className: "mt-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Title, { content: "Enter Your Code" }),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(Card, { className: "mt-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          "textarea",
          {
            value: code,
            onChange: (e) => setCode(e.target.value),
            placeholder: "Type or paste your code into here...",
            className: "outline-none w-full h-80 resize-none text-sm",
            autoFocus: true
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(Row, { className: "justify-end mt-4 items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", { className: "flex-grow", children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
            LinkButton,
            {
              label: "Use Sample Code",
              onClick: async () => {
                const code2 = await fetch("dist/sample-code3.js").then((o) => o.text());
                setCode(code2);
              }
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
            Button,
            {
              label: "Clear",
              use: "secondary",
              isDisabled: code.trim().length === 0,
              disabledTooltip: "There's nothing to clear.",
              onClick: () => setCode("")
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
            Button,
            {
              label: "Next",
              isDisabled: code.trim().length === 0,
              disabledTooltip: "Enter some code to continue.",
              onClick: () => props.onContinue(code)
            }
          )
        ] })
      ] })
    ] });
  }
  function Container(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", { className: "max-w-2xl m-auto", children: props.children });
  }
  function Page(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("div", { className: "p-2 pb-20", children: [
      !props.hideLogo && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
        "img",
        {
          src: "dist/logo.svg",
          className: "absolute top-2 left-2 w-[110px] hover:scale-105 active:scale-95 scale-100 cursor-pointer transition-transform duration-75",
          onClick: props.onClickLogo
        }
      ),
      props.children
    ] });
  }
  function CodeRender(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(Column, { className: "items-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Title, { content: "BAM!" }),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(CopyToClipboardButton, { content: props.code, className: "absolute top-2 right-2" }),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", { className: "font-mono break whitespace-pre font-bold leading-3 text-xxs w-[970px] m-auto", children: props.code }),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
        LinkButton,
        {
          label: "Back to Top",
          onClick: () => scrollTo({
            top: 0,
            left: 0,
            behavior: "smooth"
          }),
          className: "mt-4"
        }
      )
    ] });
  }
  function CopyToClipboardButton(props) {
    const LABEL = "Copy to Clipboard";
    const [label, setLabel] = (0, import_react2.useState)(LABEL);
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
      Button,
      {
        label,
        className: cn("w-56", props.className),
        onClick: () => {
          setLabel("Copied!");
          navigator.clipboard.writeText(props.content);
          setTimeout(() => setLabel(LABEL), 1e3);
        }
      }
    );
  }

  // src/main.tsx
  var import_jsx_runtime3 = __toESM(require_jsx_runtime());
  var elm = document.createElement("div");
  document.body.append(elm);
  var root = (0, import_client.createRoot)(elm);
  root.render(/* @__PURE__ */ (0, import_jsx_runtime3.jsx)(IndexPage, {}));
})();
/*! Bundled license information:

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=main.js.map
